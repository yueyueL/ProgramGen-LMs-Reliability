public void testInt ( ) { try { com.android.jack.java7.boxing.test001.jack.UnBoxObject.getInt ( null ) ; junit.framework.Assert.fail ( ) ; } catch ( java.lang.NullPointerException e ) { } try { com.android.jack.java7.boxing.test001.jack.UnBoxObject.getInt ( new java.lang.Object ( ) ) ; junit.framework.Assert.fail ( ) ; } catch ( java.lang.ClassCastException e ) { } com.android.jack.java7.boxing.test001.jack.UnBoxObject.getInt ( java.lang.Integer.valueOf ( 34 ) ) ; }
public void setDefaultSmdpAddress ( java.lang.String defaultSmdpAddress , android.telephony.euicc.EuiccCardManager.ResultCallback < java.lang.Void > callback ) { try { getIEuiccCardController ( ) . setDefaultSmdpAddress ( mContext.getOpPackageName ( ) , defaultSmdpAddress , new com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback.Stub ( ) { @ java.lang.Override public void onComplete ( int resultCode ) { callback.onComplete ( resultCode , null ) ; } } ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.euicc.EuiccCardManager.TAG , "Error calling setDefaultSmdpAddress" , e ) ; throw e.rethrowFromSystemServer ( ) ; } }
private void writeOriginalTypeInfoMarker ( ) throws java.io.IOException { if ( ( currentMethod.signature ) != null ) { writer.writeKeyword ( Token.GENERIC_SIGNATURE ) ; writer.writeOpen ( ) ; writer.writeString ( currentMethod.signature ) ; writer.writeClose ( ) ; } else { writer.writeNull ( ) ; } }
public boolean disableCellBroadcastRange ( int startMessageId , int endMessageId ) { android.util.Log.e ( com.android.internal.telephony.cdma.RuimSmsInterfaceManager.LOG_TAG , "Error! Not implemented for CDMA." ) ; return false ; }
public int compareTo ( com.android.dx.io.FieldId other ) { if ( ( declaringClassIndex ) != ( other.declaringClassIndex ) ) { return com.android.dx.util.Unsigned.compare ( declaringClassIndex , other.declaringClassIndex ) ; } if ( ( nameIndex ) != ( other.nameIndex ) ) { return com.android.dx.util.Unsigned.compare ( nameIndex , other.nameIndex ) ; } return com.android.dx.util.Unsigned.compare ( typeIndex , other.typeIndex ) ; }
public void writeRilSetupDataCall ( int phoneId , int rilSerial , int radioTechnology , int profile , java.lang.String apn , int authType , java.lang.String protocol ) { com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall setupDataCall = new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall ( ) ; setupDataCall.rat = radioTechnology ; setupDataCall.dataProfile = profile + 1 ; if ( apn != null ) { setupDataCall.apn = apn ; } if ( protocol != null ) { setupDataCall.type = toPdpType ( protocol ) ; } addTelephonyEvent ( new com.android.internal.telephony.metrics.TelephonyEventBuilder ( phoneId ) . setSetupDataCall ( setupDataCall ) . build ( ) ) ; }
public void testNoiseReductionModeControl ( ) throws java.lang.Exception { for ( java.lang.String id : mCameraIds ) { try { openDevice ( id ) ; if ( ! ( mStaticInfo.isNoiseReductionModeControlSupported ( ) ) ) { android.util.Log.i ( android.hardware.camera2.cts.CaptureRequestTest.TAG , ( ( "Camera " + id ) + " doesn't support noise reduction mode, skipping test" ) ) ; continue ; } noiseReductionModeTestByCamera ( ) ; } finally { closeDevice ( ) ; } } }
public void test_RIHarmony_compatible ( ) throws java.lang.Exception { java.text.DecimalFormatSymbols dfs ; java.io.ObjectInputStream i = null ; try { i = new java.io.ObjectInputStream ( getClass ( ) . getClassLoader ( ) . getResourceAsStream ( "/serialization/java/text/DecimalFormatSymbols.ser" ) ) ; dfs = ( ( java.text.DecimalFormatSymbols ) ( i.readObject ( ) ) ) ; } finally { try { if ( i != null ) { i.close ( ) ; } } catch ( java.lang.Exception e ) { } } org.apache.harmony.tests.java.text.DecimalFormatSymbolsTest.assertDecimalFormatSymbolsRIFrance ( dfs ) ; }
public void logp ( java.util.logging.Level level , java.lang.String sourceClass , java.lang.String sourceMethod , java.lang.String msg , java.lang.Object [ ] params ) { if ( ( ( level.intValue ( ) ) < ( levelValue ) ) || ( ( levelValue ) == ( java.util.logging.Logger.offValue ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( level , msg ) ; lr.setSourceClassName ( sourceClass ) ; lr.setSourceMethodName ( sourceMethod ) ; lr.setParameters ( params ) ; doLog ( lr ) ; }
public void visitMethodInsn ( int opcode , java.lang.String owner , java.lang.String name , java.lang.String desc ) { super . visitMethodInsn ( opcode , remapper.mapType ( owner ) , remapper.mapMethodName ( owner , name , desc ) , remapper.mapMethodDesc ( desc ) ) ; }
void separate ( com.android.internal.telephony.gsm.GsmConnection conn ) throws com.android.internal.telephony.CallStateException { if ( ( conn.owner ) != ( this ) ) { throw new com.android.internal.telephony.CallStateException ( ( ( ( "GsmConnection " + conn ) + "does not belong to GsmCallTracker " ) + ( this ) ) ) ; } try { cm.separateConnection ( conn.getGSMIndex ( ) , obtainCompleteMessage ( com.android.internal.telephony.gsm.EVENT_SEPARATE_RESULT ) ) ; } catch ( com.android.internal.telephony.CallStateException ex ) { android.telephony.Rlog.w ( com.android.internal.telephony.gsm.GsmCallTracker.LOG_TAG , ( "GsmCallTracker WARN: separate() on absent connection " + conn ) ) ; } }
public java.lang.String read ( ) { try { int numRead = mPipeFromInCall.read ( mReadBuffer , 0 , android.telecom.Connection.RttTextStream.READ_BUFFER_SIZE ) ; if ( numRead < 0 ) { return null ; } return new java.lang.String ( mReadBuffer , 0 , numRead ) ; } catch ( java.io.IOException e ) { android.telecom.Log.w ( this , "Exception encountered when reading from InputStreamReader: %s" , e ) ; return null ; } }
public void testPrivateField ( ) { android.signature.cts.JDiffClassDescription clz = createNormalClass ( ) ; android.signature.cts.JDiffClassDescription.JDiffField field = new android.signature.cts.JDiffClassDescription.JDiffField ( "PRIVATE_FIELD" , "java.lang.String" , java.lang.reflect.Modifier.PRIVATE ) ; clz.addField ( field ) ; clz.checkSignatureCompliance ( ) ; assertEquals ( field.toSignatureString ( ) , "private java.lang.String PRIVATE_FIELD" ) ; }
public void aggregateContact ( android.database.sqlite.SQLiteDatabase db , long rawContactId , java.lang.String accountType , java.lang.String accountName , long currentContactId ) { if ( ! ( mEnabled ) ) { return ; } com.android.providers.contacts.ContactAggregator.MatchCandidateList candidates = new com.android.providers.contacts.ContactAggregator.MatchCandidateList ( ) ; com.android.providers.contacts.ContactMatcher matcher = new com.android.providers.contacts.ContactMatcher ( ) ; android.content.ContentValues values = new android.content.ContentValues ( ) ; aggregateContact ( db , rawContactId , accountType , accountName , currentContactId , candidates , matcher , values ) ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , int [ ] data ) { validateIsInt32 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data ) ; }
public java.lang.Object [ ] toArray ( ) { int size = size ( ) ; int index = 0 ; java.util.Iterator < ? > it = iterator ( ) ; java.lang.Object [ ] array = new java.lang.Object [ size ] ; while ( index < size ) { array [ ( index ++ ) ] = it.next ( ) ; } return array ; }
public void testPackageOverrideNone ( ) { com.android.builder.AndroidBuilder builder = new com.android.builder.AndroidBuilder ( new com.android.builder.DefaultSdkParser ( "" ) , new com.android.utils.StdLogger ( StdLogger.Level.ERROR ) , false ) ; builder.setBuildVariant ( mMain , mFlavor , mDebug ) ; assertNull ( builder.getPackageOverride ( "" ) ) ; }
public void testPocBug_35644815 ( ) throws java.lang.Exception { enableAdbRoot ( getDevice ( ) ) ; java.lang.String pocOut = android.security.cts.AdbUtils.runPoc ( "Bug-35644815" , getDevice ( ) , 60 ) ; assertMatches ( "[\\s\\n\\S]*INFO DISC FLAG: 0000[\\s\\n\\S]*" , pocOut ) ; }
public void removeChild ( int index ) { java.util.List < org.w3c.dom.Element > children = com.android.ide.eclipse.adt.internal.editors.layout.gle2.DomUtilities.getChildren ( mElement ) ; org.junit.Assert.assertTrue ( ( index < ( children.size ( ) ) ) ) ; org.w3c.dom.Element oldChild = children.get ( index ) ; mElement.removeChild ( oldChild ) ; }
public void testNonDstZoneWithDstTimestampForNonHourDstZone ( ) throws java.lang.Exception { java.text.SimpleDateFormat format = new java.text.SimpleDateFormat ( "yyyy-MM-dd'T'HH:mm zzzz" ) ; java.util.Calendar calendar = new java.util.GregorianCalendar ( libcore.java.text.SimpleDateFormatTest.AUSTRALIA_LORD_HOWE ) ; calendar.setTime ( format.parse ( "2010-12-21T19:30 Lord Howe Standard Time" ) ) ; assertEquals ( 20 , calendar.get ( java.util.Calendar.HOUR_OF_DAY ) ) ; assertEquals ( 0 , calendar.get ( java.util.Calendar.MINUTE ) ) ; }
public java.security.spec.ECPoint getQ ( ) { if ( ( ecSpec ) == null ) { if ( ( q ) instanceof java.security.spec.ECPoint.Fp ) { return new java.security.spec.ECPoint.Fp ( null , q.getAffineXCoord ( ) , q.getAffineYCoord ( ) ) ; } else { return new java.security.spec.ECPoint.F2m ( null , q.getAffineXCoord ( ) , q.getAffineYCoord ( ) ) ; } } return q ; }
static < E > com.google.common.collect.ImmutableSortedSet < E > construct ( java.util.Comparator < ? super E > comparator , int n , E ... contents ) { int uniques = com.google.common.collect.ImmutableSortedSet.sortAndUnique ( comparator , n , contents ) ; if ( uniques == 0 ) { return com.google.common.collect.ImmutableSortedSet.emptySet ( comparator ) ; } else if ( uniques < ( contents.length ) ) { contents = com.google.common.collect.ObjectArrays.arraysCopyOf ( contents , uniques ) ; } return new com.google.common.collect.RegularImmutableSortedSet < E > ( com.google.common.collect.ImmutableList.< E > asImmutableList ( contents ) , comparator ) ; }
public void testPinEntryNonEnforcing ( ) throws java.lang.Exception { java.lang.String shortEntry = "*.google.com=false|" + ( shortPin ) ; org.conscrypt.PinListEntry e = new org.conscrypt.PinListEntry ( shortEntry , new org.conscrypt.TrustedCertificateStore ( ) ) ; assertFalse ( "Enforcing!" , e.getEnforcing ( ) ) ; boolean retval = e.chainIsNotPinned ( shortChain ) ; assertTrue ( "Failed on an unenforced pinning, this is bad-ish" , ( ! retval ) ) ; }
public void handleMessage ( android.os.Message msg ) { synchronized ( this ) { if ( ( ( mRS ) == null ) || ( ( mOutPixelsAllocation ) == null ) ) { return ; } mOutPixelsAllocation.ioSend ( ) ; mDisplayView.invalidate ( ) ; } }
public java.util.Map.Entry < K , V2 > apply ( final java.util.Map.Entry < K , V1 > entry ) { return new com.google.common.collect.AbstractMapEntry < K , V2 > ( ) { @ java.lang.Override public K getKey ( ) { return entry.getKey ( ) ; } @ java.lang.Override public V2 getValue ( ) { return transformer.transformEntry ( entry.getKey ( ) , entry.getValue ( ) ) ; } } ; }
public void propertyChange ( org.eclipse.core.runtime.Preferences.PropertyChangeEvent event ) { com.android.ide.eclipse.adt.internal.preferences.AdtPrefs.getPrefs ( ) . loadValues ( event ) ; if ( AdtPrefs.PREFS_SDK_DIR.equals ( event.getProperty ( ) ) ) { com.android.ide.eclipse.ddms.DdmsPlugin.setAdb ( com.android.ide.eclipse.adt.AdtPlugin.getOsAbsoluteAdb ( ) , true ) ; if ( checkSdkLocationAndId ( ) ) { reparseSdk ( ) ; } } }
public void delete ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull com.android.sched.vfs.VPath typePath ) throws com.android.jack.library.FileTypeDoesNotExistException , com.android.sched.util.file.CannotDeleteFileException { try { inputVFS.getRootInputVDir ( ) . delete ( fileType.buildFileVPath ( typePath ) ) ; } catch ( com.android.sched.util.file.NotFileOrDirectoryException e ) { throw new com.android.jack.library.FileTypeDoesNotExistException ( getLocation ( ) , typePath , fileType ) ; } catch ( com.android.sched.util.file.NoSuchFileException e ) { throw new com.android.jack.library.FileTypeDoesNotExistException ( getLocation ( ) , typePath , fileType ) ; } }
public static < T > org.hamcrest.org.hamcrest.Matcher < T > notNullValue ( ) { return org.hamcrest.core.IsNull.notNullValue ( ) ; }
private static com.android.internal.util.JournaledFile makeJournaledFile ( ) { final java.lang.String base = "/data/system/wallpaper_info.xml" ; return new com.android.internal.util.JournaledFile ( new java.io.File ( base ) , new java.io.File ( ( base + ".tmp" ) ) ) ; }
public java.lang.String getShortDescription ( ) { boolean isDefaultTag = SystemImage.DEFAULT_TAG.equals ( mTag ) ; return java.lang.String.format ( "%1$s%2$s System Image, Android API %3$s, revision %4$s%5$s" , ( isDefaultTag ? "" : ( mTag.getDisplay ( ) ) + " " ) , getAbiDisplayName ( ) , mVersion.getApiString ( ) , getRevision ( ) . toShortString ( ) , ( isObsolete ( ) ? " (Obsolete)" : "" ) ) ; }
public byte [ ] encode ( java.math.BigInteger r , java.math.BigInteger s ) throws java.io.IOException { }
public void test_Constructor01 ( ) { try { new javax.net.ssl.KeyStoreBuilderParameters ( ( ( java.security.KeyStore.Builder ) ( null ) ) ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } java.security.KeyStore.ProtectionParameter pp = new tests.api.javax.net.ssl.KeyStoreBuilderParametersTest.ProtectionParameterImpl ( ) ; java.security.KeyStore.Builder bld = java.security.KeyStore.Builder.newInstance ( "testType" , null , pp ) ; assertNotNull ( "Null object KeyStore.Builder" , bld ) ; javax.net.ssl.KeyStoreBuilderParameters ksp = new javax.net.ssl.KeyStoreBuilderParameters ( bld ) ; assertNotNull ( ksp.getParameters ( ) ) ; }
public int fetchIsimRecords ( com.android.internal.telephony.IccFileHandler iccFh , android.os.Handler h ) { iccFh.loadEFTransparent ( com.android.internal.telephony.IccConstants.EF_IMPI , h.obtainMessage ( IccRecords.EVENT_GET_ICC_RECORD_DONE , new com.android.internal.telephony.ims.IsimUiccRecords.EfIsimImpiLoaded ( ) ) ) ; iccFh.loadEFLinearFixedAll ( com.android.internal.telephony.IccConstants.EF_IMPU , h.obtainMessage ( IccRecords.EVENT_GET_ICC_RECORD_DONE , new com.android.internal.telephony.ims.IsimUiccRecords.EfIsimImpuLoaded ( ) ) ) ; iccFh.loadEFTransparent ( com.android.internal.telephony.IccConstants.EF_DOMAIN , h.obtainMessage ( IccRecords.EVENT_GET_ICC_RECORD_DONE , new com.android.internal.telephony.ims.IsimUiccRecords.EfIsimDomainLoaded ( ) ) ) ; return 3 ; }
public void processDisconnectReason ( com.android.ims.ImsReasonInfo imsReasonInfo ) { if ( ( ( imsReasonInfo.mCode ) == ( imsReasonInfo.CODE_REGISTRATION_ERROR ) ) && ( ( imsReasonInfo.mExtraMessage ) != null ) ) { if ( com.android.ims.ImsManager.isWfcEnabledByUser ( mContext ) ) { processWfcDisconnectForNotification ( imsReasonInfo ) ; } } }
public void enter ( ) { super . enter ( ) ; sendMessageDelayed ( com.android.bluetooth.hfp.HeadsetStateMachine.CONNECT_TIMEOUT , mCurrentDevice , com.android.bluetooth.hfp.HeadsetStateMachine.sConnectTimeoutMillis ) ; if ( ( mPrevState ) == ( mConnected ) ) { broadcastAudioState ( mCurrentDevice , BluetoothHeadset.STATE_AUDIO_CONNECTING , BluetoothHeadset.STATE_AUDIO_DISCONNECTED ) ; } else { stateLogWtfStack ( ( ( ( "Illegal state transition from " + ( mPrevState ) ) + ", mCurrentDevice=" ) + ( mCurrentDevice ) ) ) ; } }
private void onProgramsUpdated ( ) { ( ( com.android.tv.dvr.ui.list.SeriesScheduleRowAdapter ) ( getRowsAdapter ( ) ) ) . setPrograms ( mPrograms ) ; if ( ( ( mPrograms ) == null ) || ( mPrograms.isEmpty ( ) ) ) { showEmptyMessage ( R.string.dvr_series_schedules_empty_state ) ; } else { hideEmptyMessage ( ) ; } }
private static int compareHandlesNulls ( com.android.jack.dx.rop.cst.CstType a , com.android.jack.dx.rop.cst.CstType b ) { if ( a == b ) { return 0 ; } else if ( a == null ) { return - 1 ; } else if ( b == null ) { return 1 ; } else { return a.compareTo ( b ) ; } }
private void sortPackages ( ) { if ( ( ( ( mCheckSortApi ) != null ) && ( ! ( mCheckSortApi.isDisposed ( ) ) ) ) && ( mCheckSortApi.getSelection ( ) ) ) { sortByAPI ( ) ; } else { sortBySource ( ) ; } updateButtonsState ( ) ; }
public void assertEventuallyTrue ( java.util.function.BooleanSupplier fn , long maxWaitingTimeMs ) { long start = android.os.SystemClock.elapsedRealtime ( ) ; while ( ( android.os.SystemClock.elapsedRealtime ( ) ) <= ( start + maxWaitingTimeMs ) ) { if ( fn.getAsBoolean ( ) ) { return ; } com.android.server.ConnectivityServiceTest.sleepFor ( 15 ) ; } assertTrue ( fn.getAsBoolean ( ) ) ; }
final void get ( char [ ] dst , int dstOffset , int charCount ) { checkNotFreed ( ) ; int byteCount = checkGetBounds ( SizeOf.CHAR , dst.length , dstOffset , charCount ) ; this . block.peekCharArray ( ( ( offset ) + ( position ) ) , dst , dstOffset , charCount , order.needsSwap ) ; position += byteCount ; }
private boolean verify ( byte [ ] keyName , byte [ ] data , byte [ ] signature ) { execute ( 'v' , keyName , data , signature ) ; return ( mError ) == ( android.security.KeyStore.NO_ERROR ) ; }
public boolean setHwPnoList ( com.android.server.wifi.WifiNative.PnoSettings settings , com.android.server.wifi.WifiNative.PnoEventHandler eventHandler ) { synchronized ( mSettingsLock ) { if ( ( mPnoSettings ) != null ) { android.util.Log.w ( com.android.server.wifi.scanner.WificondScannerImpl.TAG , "Already running a PNO scan" ) ; return false ; } mPnoEventHandler = eventHandler ; mPnoSettings = settings ; processPendingScans ( ) ; return true ; } }
private java.lang.String getLastLineupId ( ) { if ( ( mLineupId ) == null ) { mLineupId = android.preference.PreferenceManager.getDefaultSharedPreferences ( mContext ) . getString ( com.android.tv.data.epg.EpgFetcher.KEY_LAST_LINEUP_ID , null ) ; } if ( com.android.tv.data.epg.EpgFetcher.DEBUG ) android.util.Log.d ( com.android.tv.data.epg.EpgFetcher.TAG , ( "Last lineup_id " + ( mLineupId ) ) ) ; return mLineupId ; }
public void testObjectEquals ( ) throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestFolder ( "shrob/test024" ) ; com.android.jack.Options options = com.android.jack.TestTools.buildCommandLineArgs ( new java.io.File [ ] { com.android.jack.shrob.TreeTest.CORE_SOURCELIST , testFolder } ) ; options.addProguardFlagsFile ( new com.android.jack.ProguardFlags ( testFolder , "proguard.flags001" ) ) ; options.addProguardFlagsFile ( com.android.jack.shrob.TreeTest.dontObfuscateFlagFile ) ; options.addProperty ( Options.METHOD_FILTER.getName ( ) , "supported-methods" ) ; com.android.jack.TestTools.buildSession ( options ) ; }
public org.eclipse.swt.graphics.Image loadCapture ( com.android.hierarchyviewerlib.device.ViewNode viewNode ) { final org.eclipse.swt.graphics.Image image = com.android.hierarchyviewerlib.device.DeviceBridge.loadCapture ( viewNode.window , viewNode ) ; if ( image != null ) { viewNode.image = image ; com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . notifySelectionChanged ( ) ; } return image ; }
public void testJackArchiveToDexArchive ( ) throws java.lang.Exception { java.io.File jackAr = createJackArchiveWithResources ( ) ; java.io.File dexAr = com.android.jack.TestTools.createTempFile ( "resourcetestdex" , ".zip" ) ; com.android.jack.TestTools.compileJackToDex ( new com.android.jack.Options ( ) , jackAr , dexAr , true ) ; java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile ( dexAr ) ; checkResourceContent ( zipFile , com.android.jack.ResourceTest.RESOURCE1_LONGPATH , "Res1" ) ; checkResourceContent ( zipFile , com.android.jack.ResourceTest.RESOURCE2_LONGPATH , "Res2" ) ; checkResourceContent ( zipFile , com.android.jack.ResourceTest.RESOURCE3_LONGPATH , "Res3" ) ; checkResourceContent ( zipFile , com.android.jack.ResourceTest.RESOURCE4_LONGPATH , "Res4" ) ; }
public int getDrmObjectType ( java.lang.String path , java.lang.String mimeType ) { if ( ( ( null == path ) || ( path.equals ( "" ) ) ) && ( ( null == mimeType ) || ( mimeType.equals ( "" ) ) ) ) { throw new java.lang.IllegalArgumentException ( "Path or the mimetype should be non null" ) ; } else if ( ( getState ( ) ) == ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) ) { throw new java.lang.IllegalStateException ( "Not Initialized yet" ) ; } return _getDrmObjectType ( mUniqueId , path , mimeType ) ; }
public void testConstructor_NullAliase ( ) { try { new tests.api.java.nio.charset.CharsetTest.MockCharset ( "mockChar" , new java.lang.String [ ] { "mock" , null } ) ; fail ( "Should throw NullPointerException!" ) ; } catch ( java.lang.NullPointerException e ) { } }
private boolean visitNonThrowingOperation ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JExpression expr ) { assert ! ( expr.canThrow ( ) ) ; confirmBlockElement ( expr ) ; if ( expr instanceof com.android.jack.ir.ast.JReinterpretCastOperation ) { confirmParent ( expr , com.android.jack.ir.ast.cfg.JConditionalBlockElement.class , com.android.jack.ir.ast.JAsgOperation.class , com.android.jack.ir.ast.JArrayRef.class , com.android.jack.ir.ast.JFieldRef.class , com.android.jack.ir.ast.JMethodCall.class ) ; } else { confirmParent ( expr , com.android.jack.ir.ast.cfg.JConditionalBlockElement.class , com.android.jack.ir.ast.JAsgOperation.class ) ; } confirmNotAssignmentTarget ( expr ) ; return true ; }
public java.net.InetSocketAddress getSyncServerAddress ( ) { int port = settings.getSyncPortNumber ( ) ; return new java.net.InetSocketAddress ( java.net.InetAddress.getLoopbackAddress ( ) , port ) ; }
public void log ( java.util.logging.Level level , java.lang.String msg , java.lang.Throwable thrown ) { if ( ( ( level.intValue ( ) ) < ( levelValue ) ) || ( ( levelValue ) == ( java.util.logging.Logger.offValue ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( level , msg ) ; lr.setThrown ( thrown ) ; doLog ( lr ) ; }
public android.content.Loader < android.database.Cursor > onCreateLoader ( int id , android.os.Bundle args ) { boolean sortOrderPrimary = ( contactsPrefs.getSortOrder ( ) ) == ( com.android.contacts.common.preference.ContactsPreferences.SORT_ORDER_PRIMARY ) ; boolean displayOrderPrimary = ( contactsPrefs.getDisplayOrder ( ) ) == ( com.android.contacts.common.preference.ContactsPreferences.DISPLAY_ORDER_PRIMARY ) ; java.lang.String sortKey = ( sortOrderPrimary ) ? android.provider.ContactsContract.Contacts.SORT_KEY_PRIMARY : android.provider.ContactsContract.Contacts.SORT_KEY_ALTERNATIVE ; return displayOrderPrimary ? com.android.dialer.contactsfragment.ContactsCursorLoader.createInstanceDisplayNamePrimary ( getContext ( ) , sortKey ) : com.android.dialer.contactsfragment.ContactsCursorLoader.createInstanceDisplayNameAlternative ( getContext ( ) , sortKey ) ; }
public com.android.sdklib.repository.MajorRevision getMajorRevision ( ) { return revision ; }
static java.lang.String getTimeZoneText ( java.util.TimeZone tz ) { boolean daylight = tz.inDaylightTime ( new java.util.Date ( ) ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( com.android.settings.DateTimeSettings.formatOffset ( ( ( tz.getRawOffset ( ) ) + ( daylight ? tz.getDSTSavings ( ) : 0 ) ) ) ) . append ( ", " ) . append ( tz.getDisplayName ( daylight , java.util.TimeZone.LONG ) ) ; return sb.toString ( ) ; }
private void updateChannels ( boolean clearPreviousTableEntries ) { if ( com.android.tv.guide.ProgramManager.DEBUG ) android.util.Log.d ( com.android.tv.guide.ProgramManager.TAG , "updateChannels" ) ; mChannels = mChannelDataManager.getBrowsableChannelList ( ) ; mSelectedGenreId = com.android.tv.data.GenreItems.ID_ALL_CHANNELS ; mFilteredChannels = mChannels ; notifyChannelsUpdated ( ) ; updateTableEntries ( clearPreviousTableEntries ) ; }
public void test002c ( ) throws java.lang.Exception { java.io.File jackOutput ; jackOutput = runTest002 ( false , "keep-first" ) ; checkResourceContent ( jackOutput , com.android.jack.fileconflict.FileConflictTests.RESOURCE1_LONGPATH , "Res1" ) ; checkResourceContent ( jackOutput , com.android.jack.fileconflict.FileConflictTests.RESOURCE2_LONGPATH , "Res2" ) ; checkResourceContent ( jackOutput , com.android.jack.fileconflict.FileConflictTests.RESOURCE3_LONGPATH , "Res3" ) ; }
private void onNetworkSignal ( int signal ) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent event = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.EVENT_TYPE_NETWORK_SIGNAL ) ; event.valueInt = signal ; android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "incoming" + event ) ) ; sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.STACK_EVENT , event ) ; }
public java.lang.String select ( java.lang.Object context , double number ) { android.icu.text.PluralRules.FixedDecimal dec = ( ( android.icu.text.PluralRules.FixedDecimal ) ( context ) ) ; assert ( dec.source ) == ( dec.isNegative ? - number : number ) ; return pluralRules.select ( dec ) ; }
public void testSdkManager_LayoutlibVersion ( ) { com.android.sdklib.SdkManager sdkman = getSdkManager ( ) ; com.android.sdklib.IAndroidTarget t = sdkman.getTargets ( ) [ 0 ] ; assertTrue ( ( t instanceof com.android.sdklib.PlatformTarget ) ) ; com.android.sdklib.SdkManager.LayoutlibVersion lv = ( ( com.android.sdklib.PlatformTarget ) ( t ) ) . getLayoutlibVersion ( ) ; assertNotNull ( lv ) ; assertEquals ( 5 , lv.getApi ( ) ) ; assertEquals ( 2 , lv.getRevision ( ) ) ; assertSame ( lv , sdkman.getMaxLayoutlibVersion ( ) ) ; }
public static void gc ( ) { java.lang.Runtime.getRuntime ( ) . gc ( ) ; }
public com.android.jack.dx.io.instructions.DecodedInstruction decode ( int opcodeUnit , com.android.jack.dx.io.instructions.CodeInput in ) throws java.io.EOFException { int opcode = com.android.jack.dx.io.instructions.InstructionCodec.byte0 ( opcodeUnit ) ; int a = com.android.jack.dx.io.instructions.InstructionCodec.byte1 ( opcodeUnit ) ; int literal = in.readInt ( ) ; return new com.android.jack.dx.io.instructions.OneRegisterDecodedInstruction ( this , opcode , 0 , null , 0 , literal , a ) ; }
public static android.renderscript.ScriptIntrinsicBlur create ( android.renderscript.RenderScript rs , android.renderscript.Element e ) { if ( ( ! ( e.isCompatible ( android.renderscript.Element.U8_4 ( rs ) ) ) ) && ( ! ( e.isCompatible ( android.renderscript.Element.U8 ( rs ) ) ) ) ) { throw new android.renderscript.RSIllegalArgumentException ( "Unsuported element type." ) ; } long id = rs.nScriptIntrinsicCreate ( 5 , e.getID ( rs ) ) ; android.renderscript.ScriptIntrinsicBlur sib = new android.renderscript.ScriptIntrinsicBlur ( id , rs ) ; sib.setRadius ( 5.0F ) ; return sib ; }
private static boolean nodeNeedsUniquePredecessor ( com.android.jack.ir.ast.cfg.JBasicBlock block ) { if ( block instanceof com.android.jack.ir.ast.cfg.JExitBasicBlock ) { throw new java.lang.RuntimeException ( "exit bblock doesn't need unique pred" ) ; } int countPredecessors = com.android.jack.transformations.ssa.SsaUtil.getNumPredecessor ( block ) ; int countSuccessors = com.android.jack.transformations.ssa.SsaUtil.getNumSuccessor ( block ) ; return ( countPredecessors > 1 ) && ( countSuccessors > 1 ) ; }
private void releaseTunerHal ( com.android.tv.tuner.TunerHal hal , int sessionId , boolean reuse ) { if ( ! reuse ) { com.android.tv.common.AutoCloseableUtils.closeQuietly ( hal ) ; return ; } com.android.tv.tuner.TunerHal cachedHal = mTunerHals.get ( sessionId ) ; if ( cachedHal != hal ) { mTunerHals.put ( sessionId , hal ) ; } if ( ( cachedHal != null ) && ( cachedHal != hal ) ) { com.android.tv.common.AutoCloseableUtils.closeQuietly ( cachedHal ) ; } }
public void close ( ) throws java.io.IOException { synchronized ( lock ) { if ( ( out ) == null ) { return ; } try { flushBuffer ( ) ; } finally { out.close ( ) ; out = null ; cb = null ; } } }
public org.eclipse.swt.widgets.Menu getMenu ( org.eclipse.swt.widgets.Control parent ) { return null ; }
private void emitAdvanceLine ( int deltaLines ) throws java.io.IOException { int mark = output.getCursor ( ) ; output.writeByte ( com.android.dx.dex.file.DBG_ADVANCE_LINE ) ; output.writeSleb128 ( deltaLines ) ; line += deltaLines ; if ( ( ( annotateTo ) != null ) || ( ( debugPrint ) != null ) ) { annotate ( ( ( output.getCursor ( ) ) - mark ) , java.lang.String.format ( "line = %d" , line ) ) ; } if ( com.android.dx.dex.file.DebugInfoEncoder.DEBUG ) { java.lang.System.err.printf ( "Emitting advance_line for %d\n" , deltaLines ) ; } }
private void ensureReadParams ( ) { if ( fetchedParams ) { return ; } byte [ ] [ ] params = org.conscrypt.NativeCrypto.get_RSA_public_params ( key.getPkeyContext ( ) ) ; modulus = new java.math.BigInteger ( params [ 0 ] ) ; publicExponent = new java.math.BigInteger ( params [ 1 ] ) ; fetchedParams = true ; }
private void loadInternalDataFromSharedStore ( java.util.List < android.net.wifi.WifiConfiguration > configurations ) { for ( android.net.wifi.WifiConfiguration configuration : configurations ) { configuration.networkId = ( mNextNetworkId ) ++ ; if ( mVerboseLoggingEnabled ) { android.util.Log.v ( com.android.server.wifi.WifiConfigManager.TAG , ( "Adding network from shared store " + ( configuration.configKey ( ) ) ) ) ; } mConfiguredNetworks.put ( configuration ) ; } }
private static void assertNonSerializableLambdaCharacteristics ( java.lang.Object r1 ) throws java.lang.Exception { java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream ( ) ; try ( java.io.ObjectOutputStream os = new java.io.ObjectOutputStream ( baos ) ) { os.writeObject ( r1 ) ; os.flush ( ) ; org.junit.Assert.fail ( ) ; } catch ( java.io.ObjectStreamException expected ) { } }
public void testNotifyResponseSubscribeCancel ( ) throws org.json.JSONException { final short transactionId = 23 ; android.os.Bundle args = new android.os.Bundle ( ) ; args.putInt ( "status" , WifiNanNative.NAN_STATUS_DE_FAILURE ) ; args.putInt ( "value" , 0 ) ; args.putInt ( "response_type" , WifiNanNative.NAN_RESPONSE_SUBSCRIBE_CANCEL ) ; com.android.server.wifi.nan.WifiNanHalMock.callNotifyResponse ( transactionId , com.android.server.wifi.HalMockUtils.convertBundleToJson ( args ) . toString ( ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mNanStateManager ) ; }
public void testSerialization ( ) { java.lang.String expected = "aced0005737200266a617661782e73656375726974792e617574682e7" + ( ( ( ( "83530302e583530305072696e636970616cf90dff3c88b877c703000078707572" + "00025b42acf317f8060854e002000078700000006a30683117301506035504031" ) + "30e7777772e676f6f676c652e636f6d31133011060355040a130a476f6f676c65" ) + "20496e63311630140603550407130d4d6f756e7461696e2056696577311330110" ) + "603550408130a43616c69666f726e6961310b300906035504061302555378" ) ; javax.security.auth.x500.X500Principal actual = new javax.security.auth.x500.X500Principal ( ( "C=US, " + ( ( ( "ST=California, " + "L=Mountain View, " ) + "O=Google Inc, " ) + "CN=www.google.com" ) ) ) ; new libcore.util.SerializationTester < javax.security.auth.x500.X500Principal > ( actual , expected ) . test ( ) ; }
public void testGetConfig2 ( ) { com.android.ide.common.resources.configuration.FolderConfiguration configForFolder = com.android.ide.common.resources.configuration.FolderConfiguration.getConfigForFolder ( "values-en-rUS" ) ; assertNotNull ( configForFolder ) ; assertEquals ( "en" , configForFolder.getLanguageQualifier ( ) . getValue ( ) ) ; assertEquals ( "US" , configForFolder.getRegionQualifier ( ) . getValue ( ) ) ; assertNull ( configForFolder.getScreenDimensionQualifier ( ) ) ; assertNull ( configForFolder.getLayoutDirectionQualifier ( ) ) ; }
public static int [ ] copyOf ( int [ ] original , int newLength ) { if ( newLength < 0 ) { throw new java.lang.NegativeArraySizeException ( ) ; } return java.util.Arrays.copyOfRange ( original , 0 , newLength ) ; }
public void run ( ) { new android.app.AlertDialog.Builder ( activity ) . setIcon ( android.R.drawable.ic_dialog_alert ) . setTitle ( R.string.error_state ) . setMessage ( ( ( msg + "\n\n" ) + ( activity.getString ( R.string.error_state_text ) ) ) ) . setPositiveButton ( R.string.yes , new android.content.DialogInterface.OnClickListener ( ) { public void onClick ( android.content.DialogInterface dialog , int which ) { dialog.dismiss ( ) ; } } ) . show ( ) ; }
public void initialize ( android.telecom.CallAudioState initState ) { mCurrentCallAudioState = initState ; mLastKnownCallAudioState = initState ; mAvailableRoutes = initState.getSupportedRouteMask ( ) ; mIsMuted = initState.isMuted ( ) ; mWasOnSpeaker = false ; mStatusBarNotifier.notifyMute ( initState.isMuted ( ) ) ; mStatusBarNotifier.notifySpeakerphone ( ( ( initState.getRoute ( ) ) == ( android.telecom.CallAudioState.ROUTE_SPEAKER ) ) ) ; setInitialState ( mRouteCodeToQuiescentState.get ( initState.getRoute ( ) ) ) ; start ( ) ; }
private void verifyInterfaceServingModeStarted ( ) throws java.lang.Exception { org.mockito.Mockito.verify ( mNMService , org.mockito.Mockito.times ( 1 ) ) . listInterfaces ( ) ; org.mockito.Mockito.verify ( mNMService , org.mockito.Mockito.times ( 1 ) ) . getInterfaceConfig ( mTestIfname ) ; org.mockito.Mockito.verify ( mNMService , org.mockito.Mockito.times ( 1 ) ) . setInterfaceConfig ( org.mockito.Matchers.eq ( mTestIfname ) , org.mockito.Mockito.any ( android.net.InterfaceConfiguration.class ) ) ; org.mockito.Mockito.verify ( mNMService , org.mockito.Mockito.times ( 1 ) ) . tetherInterface ( mTestIfname ) ; }
public void setListening ( boolean listening ) { if ( listening && ( ( android.nfc.NfcAdapter.getDefaultAdapter ( mContext ) ) != null ) ) { com.android.settings.nfc.PaymentBackend paymentBackend = new com.android.settings.nfc.PaymentBackend ( mContext ) ; paymentBackend.refresh ( ) ; com.android.settings.nfc.PaymentBackend.PaymentAppInfo app = paymentBackend.getDefaultApp ( ) ; if ( app != null ) { mSummaryLoader.setSummary ( this , mContext.getString ( R.string.payment_summary , app.label ) ) ; } } }
public void tearDown ( ) throws java.lang.Exception { if ( testInstallDir.exists ( ) ) { libcore.tzdata.update2.FileUtils.deleteRecursive ( testInstallDir ) ; } if ( tempDir.exists ( ) ) { libcore.tzdata.update2.FileUtils.deleteRecursive ( tempDir ) ; } super . tearDown ( ) ; }
private java.lang.StringBuffer subformat ( int number , java.lang.StringBuffer result , java.text.FieldPosition fieldPosition , boolean isNegative , boolean isInteger , boolean parseAttr ) { if ( ( currencySignCount ) == ( android.icu.text.DecimalFormat.CURRENCY_SIGN_COUNT_IN_PLURAL_FORMAT ) ) { return subformat ( currencyPluralInfo.select ( getFixedDecimal ( number ) ) , result , fieldPosition , isNegative , isInteger , parseAttr ) ; } else { return subformat ( result , fieldPosition , isNegative , isInteger , parseAttr ) ; } }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , float [ ] data ) { mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * 4 ) ) ; }
public void setScanInterval ( int scanInterval ) { doBooleanCommand ( ( "SCAN_INTERVAL " + scanInterval ) ) ; }
private void reportConnectionAttemptEnd ( int level2FailureCode , int connectivityFailureCode ) { mWifiMetrics.endConnectionEvent ( level2FailureCode , connectivityFailureCode ) ; switch ( level2FailureCode ) { case WifiMetrics.ConnectionEvent.FAILURE_NONE : case WifiMetrics.ConnectionEvent.FAILURE_REDUNDANT_CONNECTION_ATTEMPT : case WifiMetrics.ConnectionEvent.FAILURE_CONNECT_NETWORK_FAILED : break ; default : mWifiDiagnostics.reportConnectionEvent ( WifiDiagnostics.CONNECTION_EVENT_FAILED ) ; } }
public static void writeUint32 ( long i , byte [ ] buf , int offset ) { buf [ offset ] = ( ( byte ) ( i > > 24 ) ) ; buf [ ( offset + 1 ) ] = ( ( byte ) ( i > > 16 ) ) ; buf [ ( offset + 2 ) ] = ( ( byte ) ( i > > 8 ) ) ; buf [ ( offset + 3 ) ] = ( ( byte ) ( i ) ) ; }
public final void testPkgTypeSample ( ) throws java.lang.Exception { com.android.sdklib.repository.descriptors.IPkgCapabilities p = PkgType.PKG_SAMPLES ; assertTrue ( p.hasMajorRevision ( ) ) ; assertFalse ( p.hasFullRevision ( ) ) ; assertTrue ( p.hasAndroidVersion ( ) ) ; assertFalse ( p.hasPath ( ) ) ; assertFalse ( p.hasVendorId ( ) ) ; assertTrue ( p.hasMinToolsRev ( ) ) ; assertFalse ( p.hasMinPlatformToolsRev ( ) ) ; }
private android.graphics.drawable.Drawable getCallProviderIcon ( com.android.incallui.Call call ) { android.telecom.PhoneAccount account = getAccountForCall ( call ) ; if ( ( account != null ) && ( getTelecomManager ( ) . hasMultipleCallCapableAccounts ( ) ) ) { return account.getIcon ( mContext ) ; } return null ; }
public boolean canSupportCarrierVideoCall ( ) { switch ( nameSource ) { case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_DEFAULT_DIRECTORY : return com.android.dialer.common.Assert.isNotNull ( firstDefaultCp2Contact ) . getCanSupportCarrierVideoCall ( ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_EXTENDED_DIRECTORY : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.PEOPLE_API : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CNAP : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.NONE : return false ; default : throw com.android.dialer.common.Assert.createUnsupportedOperationFailException ( java.lang.String.format ( "Unsupported name source: %s" , nameSource ) ) ; } }
public void testInstall_withNewerDistroVersion ( ) throws java.lang.Exception { libcore.tzdata.update2.TimeZoneDistro distro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistroBuilder ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) . replaceFormatVersionForTests ( 2 , 1 ) . buildUnvalidated ( ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_FORMAT_VERSION , installer.installWithErrorCode ( distro.getBytes ( ) ) ) ; assertNoContentInstalled ( ) ; }
public void link ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JVariable resolvedTarget ) { if ( ( varRef ) != null ) { varRef.setTarget ( resolvedTarget ) ; } else { assert ( lambda ) != null ; lambda.addCapturedVariable ( resolvedTarget ) ; } }
private void initTetheredStateMachine ( int interfaceType , java.lang.String upstreamIface ) throws java.lang.Exception { initStateMachine ( interfaceType ) ; dispatchCommand ( TetherInterfaceStateMachine.CMD_TETHER_REQUESTED ) ; if ( upstreamIface != null ) { dispatchTetherConnectionChanged ( upstreamIface ) ; } org.mockito.Mockito.reset ( mNMService , mStatsService , mTetherHelper ) ; org.mockito.Mockito.when ( mNMService.getInterfaceConfig ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME ) ) . thenReturn ( mInterfaceConfiguration ) ; }
public void test_tryLockJJZ_NotShared ( ) throws java.lang.Exception { final long POSITION = 100 ; final long SIZE = 200 ; fileLock = writeOnlyFileChannel.tryLock ( POSITION , SIZE , false ) ; assertTrue ( fileLock.isValid ( ) ) ; assertFalse ( fileLock.isShared ( ) ) ; assertSame ( writeOnlyFileChannel , fileLock.channel ( ) ) ; assertEquals ( POSITION , fileLock.position ( ) ) ; assertEquals ( SIZE , fileLock.size ( ) ) ; }
public void onDestroy ( ) { com.android.dialer.common.LogUtil.d ( "CallLogFragment.onDestroy" , toString ( ) ) ; mAdapter.changeCursor ( null ) ; getActivity ( ) . getContentResolver ( ) . unregisterContentObserver ( mCallLogObserver ) ; getActivity ( ) . getContentResolver ( ) . unregisterContentObserver ( mContactsObserver ) ; super . onDestroy ( ) ; }
public void logStatus ( java.lang.String message ) { try { java.io.FileOutputStream fos = new java.io.FileOutputStream ( mFile , true ) ; java.io.BufferedWriter bw = new java.io.BufferedWriter ( new java.io.OutputStreamWriter ( fos ) ) ; bw.write ( message ) ; bw.newLine ( ) ; bw.close ( ) ; } catch ( java.io.IOException e ) { android.util.Log.e ( com.android.pmc.PMCStatusLogger.TAG , ( ( ( "Exception writing log: " + message ) + " " ) + e ) ) ; } }
private void startManagedProfileProvisioning ( ) { com.android.managedprovisioning.ProvisionLogger.logd ( "Starting managed profile provisioning" ) ; createProfile ( getString ( R.string.default_managed_profile_name ) ) ; if ( ( mManagedProfileUserInfo ) != null ) { new com.android.managedprovisioning.task.DeleteNonRequiredAppsTask ( this , mMdmPackageName , mManagedProfileUserInfo.id , R.array.required_apps_managed_profile , R.array.vendor_required_apps_managed_profile , true , true , new com.android.managedprovisioning.task.DeleteNonRequiredAppsTask.Callback ( ) { @ java.lang.Override public void onSuccess ( ) { setUpProfileAndFinish ( ) ; } @ java.lang.Override public void onError ( ) { error ( "Delete non required apps task failed." ) ; } } ) . run ( ) ; } }
private com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo getManifestInfo ( java.lang.String manifestContents ) throws java.lang.Exception { java.io.InputStream bstream = new java.io.ByteArrayInputStream ( manifestContents.getBytes ( "UTF-8" ) ) ; org.eclipse.core.resources.IFile file = getProject ( ) . getFile ( "AndroidManifest.xml" ) ; if ( file.exists ( ) ) { file.setContents ( bstream , IFile.FORCE , new org.eclipse.core.runtime.NullProgressMonitor ( ) ) ; } else { file.create ( bstream , false , new org.eclipse.core.runtime.NullProgressMonitor ( ) ) ; } return com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo.get ( getProject ( ) ) ; }
void makeWindowFreezingScreenIfNeededLocked ( com.android.server.wm.WindowState w ) { if ( ! ( okToDisplay ( ) ) ) { if ( com.android.server.wm.WindowManagerService.DEBUG_ORIENTATION ) android.util.Slog.v ( com.android.server.wm.WindowManagerService.TAG , ( "Changing surface while display frozen: " + w ) ) ; w.mOrientationChanging = true ; w.mLastFreezeDuration = 0 ; mInnerFields.mOrientationChangeComplete = false ; if ( ! ( mWindowsFreezingScreen ) ) { mWindowsFreezingScreen = true ; mH.removeMessages ( com.android.server.wm.WindowManagerService.H.WINDOW_FREEZE_TIMEOUT ) ; mH.sendEmptyMessageDelayed ( com.android.server.wm.WindowManagerService.H.WINDOW_FREEZE_TIMEOUT , com.android.server.wm.WindowManagerService.WINDOW_FREEZE_TIMEOUT_DURATION ) ; } } }
public void sendDtmf ( char c , android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_DTMF , result ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; rr.mParcel.writeString ( java.lang.Character.toString ( c ) ) ; send ( rr ) ; }
public void error ( int errorCode , java.lang.String message ) { java.lang.String toastMessage = ( ( "Error: " + errorCode ) + ": " ) + message ; mActivity.runOnUiThread ( ( ) -> android.widget.Toast.makeText ( com.android.phone.testapps.embmsfrontend.mActivity , toastMessage , Toast.LENGTH_SHORT ) . show ( ) ) ; }
public void linkNativeLibraryDirectory ( java.lang.String uuid , java.lang.String packageName , java.lang.String nativeLibPath32 , int userId ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.linkNativeLibraryDirectory ( uuid , packageName , nativeLibPath32 , userId ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public java.lang.String toString ( ) { return com.google.common.base.Objects.toStringHelper ( this ) . add ( "dependencies" , dependencies ) . add ( "variantName" , variantName ) . add ( "requestedCoordinates" , requestedCoordinates ) . add ( "resolvedCoordinates" , resolvedCoordinates ) . add ( "super" , super . toString ( ) ) . toString ( ) ; }
private native void gattClientDisableAdvNative ( int advertiserId ) ;
private android.telecom.ParcelableConnection parcelable ( com.android.server.telecom.tests.ConnectionServiceFixture.ConnectionInfo c ) { return new android.telecom.ParcelableConnection ( c.request.getAccountHandle ( ) , c.state , c.capabilities , c.properties , c.request.getAddress ( ) , c.addressPresentation , c.callerDisplayName , c.callerDisplayNamePresentation , c.videoProvider , c.videoState , false , false , 0 , c.statusHints , c.disconnectCause , c.conferenceableConnectionIds , c.extras ) ; }
private void reportStartInstrumentationFailure ( android.app.IInstrumentationWatcher watcher , android.content.ComponentName cn , java.lang.String report ) { android.util.Slog.w ( com.android.server.am.ActivityManagerService.TAG , report ) ; try { if ( watcher != null ) { android.os.Bundle results = new android.os.Bundle ( ) ; results.putString ( Instrumentation.REPORT_KEY_IDENTIFIER , "ActivityManagerService" ) ; results.putString ( "Error" , report ) ; watcher.instrumentationStatus ( cn , ( - 1 ) , results ) ; } } catch ( android.os.RemoteException e ) { android.util.Slog.w ( com.android.server.am.ActivityManagerService.TAG , e ) ; } }
public boolean retainAll ( final java.util.Collection < ? > collection ) { com.google.common.base.Preconditions.checkNotNull ( collection ) ; com.google.common.base.Predicate < E > combinedPredicate = new com.google.common.base.Predicate < E > ( ) { @ java.lang.Override public boolean apply ( E input ) { return ( predicate.apply ( input ) ) && ( ! ( collection.contains ( input ) ) ) ; } } ; return com.google.common.collect.Iterables.removeIf ( unfiltered , combinedPredicate ) ; }
public static com.google.gct.testing.GoogleCloudTestingConfigurationImpl getConfigurationById ( int id , org.jetbrains.android.facet.AndroidFacet facet ) { for ( com.android.tools.idea.run.GoogleCloudTestingConfiguration configuration : com.google.gct.testing.GoogleCloudTestingUtils.TESTING_CONFIGURATION_FACTORY.getTestingConfigurations ( facet ) ) { if ( ( configuration.getId ( ) ) == id ) { return ( ( com.google.gct.testing.GoogleCloudTestingConfigurationImpl ) ( configuration ) ) ; } } return null ; }
protected void done ( ) { try { showImageEditor ( get ( ) , file.getAbsolutePath ( ) ) ; } catch ( java.lang.InterruptedException e ) { e.printStackTrace ( ) ; } catch ( java.util.concurrent.ExecutionException e ) { e.printStackTrace ( ) ; } }
public void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.main ) ; findViewById ( R.id.continue_button ) . setOnClickListener ( new android.view.View.OnClickListener ( ) { @ java.lang.Override public void onClick ( android.view.View v ) { startActivity ( new android.content.Intent ( com.android.cts.verifier.CtsVerifierActivity.this , com.android.cts.verifier.TestListActivity.class ) ) ; } } ) ; }
public org.hamcrest.Matcher < android.view.View > getConstraints ( ) { return android.support.test.espresso.matcher.ViewMatchers.isAssignableFrom ( android.support.v4.widget.DrawerLayout.class ) ; }
public void copy2DRangeFrom ( int xoff , int yoff , int w , int h , float [ ] data ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy2DRangeFrom" ) ; validateIsFloat32 ( ) ; copy2DRangeFromUnchecked ( xoff , yoff , w , h , data ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
public java.lang.String getTestedPackageName ( ) { if ( ( mType ) == ( com.android.builder.core.VariantConfiguration.Type.TEST ) ) { assert ( mTestedConfig ) != null ; if ( ( mTestedConfig.mType ) == ( com.android.builder.core.VariantConfiguration.Type.LIBRARY ) ) { return getPackageName ( ) ; } else { return mTestedConfig.getPackageName ( ) ; } } return null ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JSwitchBasicBlock block ) { tracer.getStatistic ( com.android.jack.ir.ast.cfg.CfgBasicBlockTracker.TOTAL_COUNT ) . add ( block.elements ( true ) . size ( ) ) ; tracer.getStatistic ( com.android.jack.ir.ast.cfg.CfgBasicBlockTracker.SWITCH_COUNT ) . add ( block.elements ( true ) . size ( ) ) ; return false ; }
private void cleanup ( ) { mWifiMonitor.stopAllMonitoring ( ) ; mDeathRecipient.unlinkToDeath ( ) ; mWifiNative.tearDownInterfaces ( ) ; mWifiNative.stopHal ( ) ; }
public void testSubjectAltNameWithWildcard ( ) { assertTrue ( verifyWithServerCertificate ( "imap.g.com" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , "*.g.com" ) ) ) ; }
public void testHfIndicatorParser_testCorrectValue ( ) { int batteryLevel = 10 ; org.junit.Assert.assertNull ( mRemoteDevices.getDeviceProperties ( mDevice1 ) ) ; mRemoteDevices.onHfIndicatorValueChanged ( com.android.bluetooth.btservice.RemoteDevicesTest.getHfIndicatorIntent ( mDevice1 , batteryLevel , HeadsetHalConstants.HF_INDICATOR_BATTERY_LEVEL_STATUS ) ) ; org.mockito.Mockito.verify ( mAdapterService ) . sendBroadcast ( mIntentArgument.capture ( ) , mStringArgument.capture ( ) ) ; com.android.bluetooth.btservice.RemoteDevicesTest.verfyBatteryLevelChangedIntent ( mDevice1 , batteryLevel , mIntentArgument ) ; org.junit.Assert.assertEquals ( AdapterService.BLUETOOTH_PERM , mStringArgument.getValue ( ) ) ; }
public void actionPerformed ( com.intellij.openapi.actionSystem.AnActionEvent e ) { final com.intellij.openapi.project.Project project = e.getData ( PlatformDataKeys.PROJECT ) ; final com.intellij.openapi.vfs.VirtualFile file = e.getData ( PlatformDataKeys.VIRTUAL_FILE ) ; if ( ( ( project == null ) || ( project.isDisposed ( ) ) ) || ( ! ( org.jetbrains.plugins.github.GithubUtil.testGitExecutable ( project ) ) ) ) { return ; } org.jetbrains.plugins.github.GithubCreatePullRequestAction.createPullRequest ( project , file ) ; }
public void exit ( ) { android.os.Message currentMessage = getCurrentMessage ( ) ; log ( ( ( ( "Exit Connecting(" + ( mDevice ) ) + "): " ) + ( currentMessage == null ? "null" : com.android.bluetooth.a2dp.A2dpStateMachine.messageWhatToString ( currentMessage.what ) ) ) ) ; mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTING ; }
public void onResume ( ) { super . onResume ( ) ; com.android.internal.telephony.cat.CatLog.d ( com.android.stk.StkInputActivity.LOG_TAG , ( ( ( "onResume - mIsResponseSent[" + ( mIsResponseSent ) ) + "], slot id: " ) + ( mSlotId ) ) ) ; startTimeOut ( ) ; appService.getStkContext ( mSlotId ) . setPendingActivityInstance ( null ) ; if ( mIsResponseSent ) { cancelTimeOut ( ) ; finish ( ) ; } }
public java.lang.String getIsimChallengeResponse ( java.lang.String nonce ) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo ( ) ; if ( info == null ) return null ; return info.getIsimChallengeResponse ( nonce ) ; } catch ( android.os.RemoteException ex ) { return null ; } catch ( java.lang.NullPointerException ex ) { return null ; } }
public void test_selectJ_Empty_Keys ( ) throws java.io.IOException { final long SELECT_TIMEOUT = 2000 ; long time1 = java.lang.System.currentTimeMillis ( ) ; selector.select ( SELECT_TIMEOUT ) ; long time2 = java.lang.System.currentTimeMillis ( ) ; assertEquals ( "elapsed time" , SELECT_TIMEOUT , ( time2 - time1 ) , ( SELECT_TIMEOUT * 0.05 ) ) ; }
public void testPowerOn ( ) { mSimulatedCommands.setRadioPower ( true , null ) ; mUiccProfile.sendMessage ( mUiccProfile.obtainMessage ( com.android.internal.telephony.uicc.UiccProfileTest.EVENT_RADIO_ON ) ) ; com.android.internal.telephony.TelephonyTestUtils.waitForMs ( com.android.internal.telephony.uicc.UiccProfileTest.SCARY_SLEEP_MS ) ; org.junit.Assert.assertEquals ( CommandsInterface.RadioState.RADIO_ON , mSimulatedCommands.getRadioState ( ) ) ; org.junit.Assert.assertEquals ( mUiccProfile.getState ( ) , State.NOT_READY ) ; }
public void testCountingProxy ( ) throws java.lang.Exception { libcore.java.net.FtpURLConnectionTest.CountingProxy countingProxy = libcore.java.net.FtpURLConnectionTest.CountingProxy.start ( ) ; java.net.Socket socket = new java.net.Socket ( ) ; try { try { java.net.Proxy proxy = countingProxy.asProxy ( ) ; assertEquals ( java.net.Proxy.Type.HTTP , proxy.type ( ) ) ; java.net.SocketAddress address = proxy.address ( ) ; socket.connect ( address , 10 ) ; } finally { int numConnections = countingProxy.shutdownAndGetConnectionCount ( ) ; assertEquals ( 1 , numConnections ) ; } } finally { socket.close ( ) ; } }
public void testDevPortSane ( ) throws java.lang.Exception { java.io.File f = new java.io.File ( "/dev/port" ) ; assertFalse ( f.canRead ( ) ) ; assertFalse ( f.canWrite ( ) ) ; assertFalse ( f.canExecute ( ) ) ; }
public void init ( boolean forEncryption , org.bouncycastle.crypto.CipherParameters privParam , org.bouncycastle.crypto.CipherParameters pubParam , org.bouncycastle.crypto.CipherParameters param ) { this . forEncryption = forEncryption ; this . privParam = privParam ; this . pubParam = pubParam ; this . param = ( ( org.bouncycastle.crypto.params.IESParameters ) ( param ) ) ; this . V = new byte [ 0 ] ; }
public java.lang.String [ ] getHttpAuthUsernamePassword ( final java.lang.String host , final java.lang.String realm ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { java.lang.String [ ] ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.String [ ] > ( ) { @ java.lang.Override public java.lang.String [ ] call ( ) { return getHttpAuthUsernamePassword ( host , realm ) ; } } ) ; return ret ; } return mAwContents.getHttpAuthUsernamePassword ( host , realm ) ; }
public void remoteControlDisplayUsesBitmapSize ( android.media.IRemoteControlDisplay rcd , int w , int h ) { mMediaFocusControl.remoteControlDisplayUsesBitmapSize ( rcd , w , h ) ; }
public void testGerman ( ) throws java.lang.Exception { assertEquals ( ( "res/values-de/typos.xml:6: Warning: \"befindet eine\" is a common misspelling; did you mean \"befindet sich eine\" ? [Typos]\n" + ( ( ( ( ( ( ( ( ( " wo befindet eine ip\n" + " ^\n" ) + "res/values-de/typos.xml:9: Warning: \"Authorisierungscode\" is a common misspelling; did you mean \"Autorisierungscode\" ? [Typos]\n" ) + " <string name=\"s2\">(Authorisierungscode!)</string>\n" ) + " ^\n" ) + "res/values-de/typos.xml:10: Warning: \"zurck gefoobaren\" is a common misspelling; did you mean \"zurckgefoobaren\" ? [Typos]\n" ) + " <string name=\"s3\"> zurck gefoobaren!</string>\n" ) + " ^\n" ) + "0 errors, 3 warnings\n" ) + "" ) ) , lintProject ( "res/values-de/typos.xml" ) ) ; }
private void addRemoteTool ( com.android.sdklib.repository.FullRevision revision , com.android.sdklib.repository.FullRevision minPlatformToolsRev ) { com.android.sdklib.repository.descriptors.IPkgDesc d = com.android.sdklib.repository.descriptors.PkgDesc.newTool ( revision , minPlatformToolsRev ) ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource ) ; mRemotePkgs.put ( d.getType ( ) , r ) ; }
public boolean dispatchTouchEvent ( android.view.MotionEvent ev ) { if ( ( ev.getAction ( ) ) == ( android.view.MotionEvent.ACTION_DOWN ) ) { com.android.contacts.common.interactions.TouchPointManager.getInstance ( ) . setPoint ( ( ( int ) ( ev.getRawX ( ) ) ) , ( ( int ) ( ev.getRawY ( ) ) ) ) ; } return super . dispatchTouchEvent ( ev ) ; }
public void testGetEmulatedCoreLibraryInvocationTarget_abstractMethod ( ) throws java.lang.Exception { com.google.devtools.build.android.desugar.CoreLibrarySupport support = new com.google.devtools.build.android.desugar.CoreLibrarySupport ( new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( "" ) , java.lang.Thread.currentThread ( ) . getContextClassLoader ( ) , com.google.common.collect.ImmutableList.of ( ) , com.google.common.collect.ImmutableList.of ( "java/util/Collection" ) ) ; com.google.common.truth.Truth.assertThat ( support.getEmulatedCoreLibraryInvocationTarget ( Opcodes.INVOKEINTERFACE , "java/util/Collection" , "size" , "()I" , true ) ) . isNull ( ) ; com.google.common.truth.Truth.assertThat ( support.getEmulatedCoreLibraryInvocationTarget ( Opcodes.INVOKEVIRTUAL , "java/util/ArrayList" , "size" , "()I" , false ) ) . isNull ( ) ; }
public void validatePolicyWithRoamingPartnerWithoutFQDN ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Policy policy = android.net.wifi.hotspot2.pps.PolicyTest.createPolicy ( ) ; android.net.wifi.hotspot2.pps.Policy.RoamingPartner partner = new android.net.wifi.hotspot2.pps.Policy.RoamingPartner ( ) ; partner.fqdnExactMatch = true ; partner.priority = 12 ; partner.countries = "us,jp" ; policy.preferredRoamingPartnerList.add ( partner ) ; org.junit.Assert.assertFalse ( policy.validate ( ) ) ; }
public boolean canBeForceHidden ( com.android.internal.policy.impl.WindowState win , android.view.WindowManager.LayoutParams attrs ) { return ( ( ( attrs.type ) != ( WindowManager.LayoutParams.TYPE_STATUS_BAR ) ) && ( ( attrs.type ) != ( WindowManager.LayoutParams.TYPE_NAVIGATION_BAR ) ) ) && ( ( attrs.type ) != ( WindowManager.LayoutParams.TYPE_WALLPAPER ) ) ; }
public void reset ( ) { com.intellij.openapi.updateSettings.impl.UpdateSettings settings = com.intellij.openapi.updateSettings.impl.UpdateSettings.getInstance ( ) ; myUpdatesSettingsPanel.myCheckForUpdates.setSelected ( settings.isCheckNeeded ( ) ) ; myUpdatesSettingsPanel.myUseSecureConnection.setSelected ( settings.isSecureConnection ( ) ) ; myUpdatesSettingsPanel.updateLastCheckedLabel ( ) ; myUpdatesSettingsPanel.setSelectedChannelType ( com.intellij.openapi.updateSettings.impl.ChannelStatus.fromCode ( settings.getUpdateChannelType ( ) ) ) ; myUpdatesSettingsPanel.setEnabledExternalUpdateSources ( settings.getEnabledExternalUpdateSources ( ) ) ; }
public void onHelp ( ) { final java.io.PrintWriter pw = getOutPrintWriter ( ) ; pw.println ( "OTA Dexopt (ota) commands:" ) ; pw.println ( " help" ) ; pw.println ( " Print this help text." ) ; pw.println ( "" ) ; pw.println ( " prepare" ) ; pw.println ( " Prepare an OTA dexopt pass, collecting all packages." ) ; pw.println ( " done" ) ; pw.println ( " Replies whether the OTA is complete or not." ) ; pw.println ( " step" ) ; pw.println ( " OTA dexopt the next package." ) ; pw.println ( " cleanup" ) ; pw.println ( " Clean up internal states. Ends an OTA session." ) ; }
public void testN1 ( ) { dot.junit.opcodes.move_exception.d.T_move_exception_1 t = new dot.junit.opcodes.move_exception.d.T_move_exception_1 ( ) ; try { t.run ( ) ; fail ( "ArithmeticException was not thrown" ) ; } catch ( java.lang.ArithmeticException ae ) { } catch ( java.lang.Exception ex ) { fail ( ( ( "Exception " + ex ) + " was thrown instead off ArithmeticException" ) ) ; } }
private static native void nativeDrawVertices ( int nCanvas , int mode , int n , float [ ] verts , int vertOffset , float [ ] texs , int texOffset , int [ ] colors , int colorOffset , short [ ] indices , int indexOffset , int indexCount , int nPaint ) ;
public void onAccuracyChanged ( android.hardware.Sensor sensor , int accuracy ) { }
public void processTerminated ( com.intellij.appengine.actions.ProcessEvent event ) { int exitCode = event.getExitCode ( ) ; if ( exitCode == 0 ) { myCallback.succeeded ( new com.intellij.remoteServer.runtime.deployment.DeploymentRuntime ( ) ) ; } else { myCallback.errorOccurred ( ( "Process terminated with exit code " + exitCode ) ) ; } }
private int regCodeToServiceState ( int code ) { switch ( code ) { case 0 : case 2 : case 3 : case 4 : case 10 : case 12 : case 13 : case 14 : return android.telephony.ServiceState.STATE_OUT_OF_SERVICE ; case 1 : case 5 : return android.telephony.ServiceState.STATE_IN_SERVICE ; default : loge ( ( "regCodeToServiceState: unexpected service state " + code ) ) ; return android.telephony.ServiceState.STATE_OUT_OF_SERVICE ; } }
public void registerMultiFlavorSourceProvider ( @ com.android.annotations.NonNull java.lang.String name , @ com.android.annotations.NonNull java.lang.String flavorName , @ com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider ) { if ( ( extraArtifactMap.get ( name ) ) == null ) { throw new java.lang.IllegalArgumentException ( "Artifact with name $name is not yet registered. Use registerArtifactType()" ) ; } extraMultiFlavorSourceProviders.put ( flavorName , new com.android.build.gradle.internal.variant.DefaultSourceProviderContainer ( name , sourceProvider ) ) ; }
private static void addModuleForBlockingNumberAndOptionallyReportingSpam ( android.content.Context context , java.util.List < com.android.dialer.contactactions.ContactActionModule > modules , java.lang.String normalizedNumber , java.lang.String countryIso , int callType ) { modules.add ( new com.android.dialer.contactactions.ContactActionModule ( ) { @ java.lang.Override public int getStringId ( ) { return R.string.block_and_optionally_report_spam ; } @ java.lang.Override public int getDrawableId ( ) { return R.drawable.quantum_ic_block_vd_theme_24 ; } @ java.lang.Override public boolean onClick ( ) { com.android.dialer.blockreportspam.ShowBlockReportSpamDialogNotifier.notifyShowDialogToBlockNumberAndOptionallyReportSpam ( context , normalizedNumber , countryIso , callType ) ; return true ; } } ) ; }
public static void shutdown ( ) throws java.lang.InterruptedException { synchronized ( com.android.builder.profile.ProcessRecorderFactory.LOCK ) { if ( com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.isInitialized ( ) ) { com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.get ( ) . finish ( ) ; } com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.processRecorder = null ; } }
public void testExtraPathWithSlash ( ) throws java.lang.Exception { java.lang.String document = ( ( ( ( "<?xml version=\"1.0\"?>" + ( com.android.sdklib.repository.ValidateRepositoryXmlTest.OPEN_TAG_REPO ) ) + "<r:extra> <r:revision>1</r:revision> <r:path>path</r:path> " ) + "<r:archives> <r:archive os=\"any\"> <r:size>1</r:size> <r:checksum>2822ae37115ebf13412bbef91339ee0d9454525e</r:checksum> " ) + "<r:url>url</r:url> </r:archive> </r:archives> </r:extra>" ) + ( com.android.sdklib.repository.ValidateRepositoryXmlTest.CLOSE_TAG_REPO ) ; javax.xml.transform.Source source = new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( document ) ) ; javax.xml.validation.Validator validator = getRepoValidator ( SdkRepoConstants.NS_LATEST_VERSION , null ) ; try { validator.validate ( source ) ; } catch ( org.xml.sax.SAXParseException e ) { assertRegex ( "cvc-complex-type.2.4.a: Invalid content was found starting with element 'r:extra'.*" , e.getMessage ( ) ) ; return ; } fail ( ) ; }
protected void setUp ( ) { java.security.Provider [ ] providers = java.security.Security.getProviders ( "MessageDigest.SHA" ) ; for ( java.security.Provider provider : providers ) { digestAlgs.put ( provider , getDigestAlgorithms ( provider ) ) ; } }
public int enableSystemApp ( @ android.annotation.NonNull android.content.ComponentName admin , android.content.Intent intent ) { throwIfParentInstance ( "enableSystemApp" ) ; if ( ( mService ) != null ) { try { return mService.enableSystemAppWithIntent ( admin , intent ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } return 0 ; }
protected boolean isAvailable ( int service ) { int offset = service / 8 ; if ( offset >= ( mServiceTable.length ) ) { android.util.Log.e ( getTag ( ) , ( ( ( "isAvailable for service " + ( service + 1 ) ) + " fails, max service is " ) + ( ( mServiceTable.length ) * 8 ) ) ) ; return false ; } int bit = service % 8 ; return ( ( mServiceTable [ offset ] ) & ( 1 << bit ) ) != 0 ; }
public static com.android.internal.content.NativeLibraryHelper.Handle create ( java.lang.Package pkg ) throws java.io.IOException { return com.android.internal.content.NativeLibraryHelper.Handle.create ( pkg.getAllCodePaths ( ) , ( ( ( pkg.applicationInfo.flags ) & ( android.content.pm.ApplicationInfo.FLAG_MULTIARCH ) ) != 0 ) , ( ( ( pkg.applicationInfo.flags ) & ( android.content.pm.ApplicationInfo.FLAG_EXTRACT_NATIVE_LIBS ) ) != 0 ) ) ; }
public void test_ConstructorLjava_lang_String ( ) { try { java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( "Wrong.file" ) ; fail ( "Should throw IOException" ) ; } catch ( java.io.IOException e ) { } try { tests.support.resource.Support_Resources.copyFile ( resources , null , jarName ) ; java.lang.String fileName = new java.io.File ( resources , jarName ) . getCanonicalPath ( ) ; java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( fileName ) ; } catch ( java.io.IOException e ) { fail ( "Should not throw IOException" ) ; } }
private static int postRecvfrom ( boolean isRead , java.net.DatagramPacket packet , boolean isConnected , java.net.InetSocketAddress srcAddress , int byteCount ) { if ( isRead && ( byteCount == 0 ) ) { return - 1 ; } if ( packet != null ) { packet.setLength ( byteCount ) ; if ( ! isConnected ) { packet.setAddress ( srcAddress.getAddress ( ) ) ; packet.setPort ( srcAddress.getPort ( ) ) ; } } return byteCount ; }
private static void assertArrayEquals ( byte [ ] expected , byte [ ] actual ) { assertTrue ( ( ( ( "Expected=" + ( java.util.Arrays.toString ( expected ) ) ) + ", actual=" ) + ( java.util.Arrays.toString ( actual ) ) ) , java.util.Arrays.equals ( expected , actual ) ) ; }
public void java7Switches004 ( ) throws java.lang.Exception { com.android.jack.test.toolchain.IToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( ) ; java.io.File jackZipFile = com.android.jack.test.toolchain.AbstractTestTools.createTempFile ( "tmp" , toolchain.getLibraryExtension ( ) ) ; toolchain.setSourceLevel ( SourceLevel.JAVA_7 ) . srcToLib ( com.android.jack.test.toolchain.AbstractTestTools.getClasspathAsString ( toolchain.getDefaultBootClasspath ( ) ) , jackZipFile , true , com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir ( "com.android.jack.java7.switches.test001.jack" ) ) ; toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( ) ; toolchain.setSourceLevel ( SourceLevel.JAVA_7 ) . libToExe ( jackZipFile , com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) , false ) ; }
public void removeRegistrationListener ( int slotId , int featureType , com.android.ims.internal.IImsRegistrationListener listener ) throws android.os.RemoteException { enforceCallingOrSelfPermission ( android.Manifest.permission.READ_PHONE_STATE , "removeRegistrationListener" ) ; synchronized ( mFeatures ) { android.telephony.ims.feature.MMTelFeature feature = resolveMMTelFeature ( slotId , featureType ) ; if ( feature != null ) { feature.removeRegistrationListener ( listener ) ; } } }
public void testHugeZipFile ( ) throws java.io.IOException { int expectedEntryCount = ( 64 * 1024 ) - 1 ; java.io.File f = createHugeZipFile ( expectedEntryCount ) ; java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile ( f ) ; int entryCount = 0 ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > e = zipFile.entries ( ) ; e.hasMoreElements ( ) ; ) { java.util.zip.ZipEntry zipEntry = e.nextElement ( ) ; ++ entryCount ; } assertEquals ( expectedEntryCount , entryCount ) ; zipFile.close ( ) ; }
public void error ( java.lang.Throwable t , java.lang.String errorFormat , java.lang.Object ... args ) { if ( errorFormat != null ) { java.lang.System.err.printf ( ( "Error: " + errorFormat ) , args ) ; if ( ! ( errorFormat.endsWith ( "\n" ) ) ) { java.lang.System.err.printf ( "\n" ) ; } } if ( t != null ) { java.lang.System.err.printf ( "Error: %s\n" , t.getMessage ( ) ) ; } }
public static java.security.KeyFactory getInstance ( java.lang.String algorithm , java.lang.String provider ) throws java.security.NoSuchAlgorithmException , java.security.NoSuchProviderException { sun.security.jca.GetInstance.Instance instance = sun.security.jca.GetInstance.getInstance ( "KeyFactory" , java.security.KeyFactorySpi.class , algorithm , provider ) ; return new java.security.KeyFactory ( ( ( java.security.KeyFactorySpi ) ( instance.impl ) ) , instance.provider , algorithm ) ; }
public java.util.List < com.intellij.ui.tabs.impl.TabInfo > getTabs ( ) { if ( ( myAllTabs ) != null ) return myAllTabs ; java.util.ArrayList < com.intellij.ui.tabs.impl.TabInfo > result = new java.util.ArrayList < com.intellij.ui.tabs.impl.TabInfo > ( ) ; result.addAll ( myVisibleInfos ) ; for ( com.intellij.ui.tabs.impl.TabInfo each : myHiddenInfos.keySet ( ) ) { result.add ( getIndexInVisibleArray ( each ) , each ) ; } myAllTabs = result ; return result ; }
protected void appendHandle ( final org.objectweb.asm.Handle h ) { buf.append ( '\n' ) . append ( tab3 ) ; int tag = h.getTag ( ) ; buf.append ( "// handle kind 0x" ) . append ( java.lang.Integer.toHexString ( tag ) ) . append ( " : " ) ; switch ( tag ) { case org.objectweb.asm.Opcodes.H_GETFIELD : buf.append ( "GETFIELD" ) ; break ; case org.objectweb.asm.Opcodes.H_GETSTATIC : buf.append ( "GETSTATIC" ) ; break ; case org.objectweb.asm.Opcodes.H_PUTFIELD : buf.append ( "PUTFIELD" ) ; break ; case org.objectweb.asm.Opcodes.H_PUTSTATIC : buf.append ( "PUTSTATIC" ) ; break ; case org.objectweb.asm.Opcodes.H_INVOKEINTERFACE : buf.append ( "INVOKEINTERFACE" ) ; break ; case org.objectweb.asm.Opcodes.H_INVOKESPECIAL : buf.append ( "INVOKESPECIAL" ) ; break ; case org.objectweb.asm.Opcodes.H_INVOKESTATIC : buf.append ( "INVOKESTATIC" ) ; break ; case org.objectweb.asm.Opcodes.H_INVOKEVIRTUAL : buf.append ( "INVOKEVIRTUAL" ) ; break ; case org.objectweb.asm.Opcodes.H_NEWINVOKESPECIAL : buf.append ( "NEWINVOKESPECIAL" ) ; break ; } buf.append ( '\n' ) ; buf.append ( tab3 ) ; appendDescriptor ( org.objectweb.asm.util.Textifier.INTERNAL_NAME , h.getOwner ( ) ) ; buf.append ( '.' ) ; buf.append ( h.getName ( ) ) ; buf.append ( '(' ) ; appendDescriptor ( org.objectweb.asm.util.Textifier.HANDLE_DESCRIPTOR , h.getDesc ( ) ) ; buf.append ( ')' ) . append ( '\n' ) ; }
public void TestNames ( ) { com.ibm.icu.util.ULocale en = com.ibm.icu.util.ULocale.ENGLISH ; boolean [ ] isChoiceFormat = new boolean [ 1 ] ; com.ibm.icu.util.Currency usd = com.ibm.icu.util.Currency.getInstance ( "USD" ) ; if ( ! ( noData ( ) ) ) { assertEquals ( "USD.getName(SYMBOL_NAME)" , "$" , usd.getName ( en , Currency.SYMBOL_NAME , isChoiceFormat ) ) ; assertEquals ( "USD.getName(LONG_NAME)" , "US Dollar" , usd.getName ( en , Currency.LONG_NAME , isChoiceFormat ) ) ; } }
public java.lang.String getPackageName ( com.android.builder.VariantConfiguration testedVariant ) { java.lang.String packageName ; if ( ( mType ) == ( com.android.builder.VariantConfiguration.Type.TEST ) ) { packageName = getTestPackage ( testedVariant ) ; } else { packageName = getPackageOverride ( ) ; if ( packageName == null ) { packageName = getPackageFromManifest ( ) ; } } return packageName ; }
public void handleMessage ( android.os.Message msg ) { android.os.AsyncResult ar = ( ( android.os.AsyncResult ) ( msg.obj ) ) ; switch ( msg.what ) { case com.android.settings.SimLockSettings.ENABLE_SIM_PIN_COMPLETE : simLockChanged ( ( ( ar.exception ) == null ) ) ; break ; case com.android.settings.SimLockSettings.CHANGE_SIM_PIN_COMPLETE : simPinChanged ( ( ( ar.exception ) == null ) ) ; break ; } return ; }
private boolean areAllApplicationsReady ( ) { for ( com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications ) { if ( ( ( app != null ) && ( isSupportedApplication ( app ) ) ) && ( ! ( app.isReady ( ) ) ) ) { if ( com.android.internal.telephony.uicc.UiccProfile.VDBG ) log ( "areAllApplicationsReady: return false" ) ; return false ; } } if ( com.android.internal.telephony.uicc.UiccProfile.VDBG ) { log ( ( "areAllApplicationsReady: outside loop, return " + ( ( mUiccApplications [ 0 ] ) != null ) ) ) ; } return ( mUiccApplications [ 0 ] ) != null ; }
private void transform ( @ javax.annotation.Nonnull org.objectweb.asm.tree.ClassNode cn , @ javax.annotation.Nonnull java.io.OutputStream os ) throws java.io.IOException { com.android.jill.backend.jayce.JayceWriter writer = createWriter ( os ) ; com.android.jill.frontend.java.ClassNodeWriter asm2jayce = new com.android.jill.frontend.java.ClassNodeWriter ( writer , new com.android.jill.frontend.java.SourceInfoWriter ( writer ) , options ) ; asm2jayce.write ( cn ) ; writer.flush ( ) ; }
static java.lang.String readString ( java.io.InputStream is ) throws java.io.IOException { int n = ( ( int ) ( com.android.volley.toolbox.DiskBasedCache.readLong ( is ) ) ) ; byte [ ] b = com.android.volley.toolbox.DiskBasedCache.streamToBytes ( is , n ) ; return new java.lang.String ( b , "UTF-8" ) ; }
public static < K extends java.lang.Comparable < ? super K > , V > com.google.common.collect.ImmutableSortedMap < K , V > of ( K k1 , V v1 , K k2 , V v2 , K k3 , V v3 ) { return new com.google.common.collect.ImmutableSortedMap.Builder < K , V > ( com.google.common.collect.Ordering.natural ( ) ) . put ( k1 , v1 ) . put ( k2 , v2 ) . put ( k3 , v3 ) . build ( ) ; }
private com.android.ide.eclipse.ddms.IAdbLocator [ ] instantiateAdbLocators ( org.eclipse.core.runtime.IConfigurationElement [ ] configElements ) throws org.eclipse.core.runtime.CoreException { java.util.ArrayList < com.android.ide.eclipse.ddms.IAdbLocator > list = new java.util.ArrayList < com.android.ide.eclipse.ddms.IAdbLocator > ( ) ; if ( ( configElements.length ) > 0 ) { org.eclipse.core.runtime.IConfigurationElement configElement = configElements [ 0 ] ; java.lang.Object obj = configElement.createExecutableExtension ( "class" ) ; if ( obj instanceof com.android.ide.eclipse.ddms.IAdbLocator ) { list.add ( ( ( com.android.ide.eclipse.ddms.IAdbLocator ) ( obj ) ) ) ; } } return list.toArray ( new com.android.ide.eclipse.ddms.IAdbLocator [ list.size ( ) ] ) ; }
public void onError ( int error ) { com.googlecode.android_scripting.Log.d ( ( "PacketKeepaliveCallback on error! - code:" + error ) ) ; if ( ( ( mEvents ) & ( com.googlecode.android_scripting.facade.ConnectivityManagerFacade.PacketKeepaliveReceiver.EVENT_ERROR ) ) == ( com.googlecode.android_scripting.facade.ConnectivityManagerFacade.PacketKeepaliveReceiver.EVENT_ERROR ) ) { mEventFacade.postEvent ( TelephonyConstants.EventPacketKeepaliveCallback , new com.googlecode.android_scripting.facade.telephony.TelephonyEvents.PacketKeepaliveEvent ( mId , com.googlecode.android_scripting.facade.ConnectivityManagerFacade.getPacketKeepaliveReceiverEventString ( com.googlecode.android_scripting.facade.ConnectivityManagerFacade.PacketKeepaliveReceiver.EVENT_ERROR ) ) ) ; } }
public java.lang.Integer wifiNanAttach ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "nanConfig" ) org.json.JSONObject nanConfig ) throws android.os.RemoteException , org.json.JSONException { synchronized ( mLock ) { int sessionId = getNextSessionId ( ) ; mMgr.attach ( null , com.googlecode.android_scripting.facade.wifi.WifiNanManagerFacade.getConfigRequest ( nanConfig ) , new com.googlecode.android_scripting.facade.wifi.WifiNanManagerFacade.NanEventCallbackPostsEvents ( sessionId ) ) ; return sessionId ; } }
private void onDeviceConfigChange ( ) { if ( ( mDisableUpdates ) > 0 ) { return ; } if ( ( computeCurrentConfig ( false ) ) && ( ( mListener ) != null ) ) { mListener.onConfigurationChange ( ) ; } }
public static void main ( java.lang.String [ ] args ) throws java.lang.Throwable { Main.testThrowException ( ) ; Main.testDropArguments ( ) ; Main.testCatchException ( ) ; Main.testGuardWithTest ( ) ; Main.testArrayElementGetter ( ) ; Main.testArrayElementSetter ( ) ; Main.testIdentity ( ) ; Main.testConstant ( ) ; }
static android.telephony.SignalStrength convertHalSignalStrength ( com.android.internal.telephony.V1_0.SignalStrength signalStrength ) { return new android.telephony.SignalStrength ( signalStrength.gw.signalStrength , signalStrength.gw.bitErrorRate , signalStrength.cdma.dbm , signalStrength.cdma.ecio , signalStrength.evdo.dbm , signalStrength.evdo.ecio , signalStrength.evdo.signalNoiseRatio , signalStrength.lte.signalStrength , signalStrength.lte.rsrp , signalStrength.lte.rsrq , signalStrength.lte.rssnr , signalStrength.lte.cqi , signalStrength.tdScdma.rscp , false ) ; }
private static java.lang.invoke.MethodHandle zero ( sun.invoke.util.Wrapper btw , java.lang.Class < ? > rtype ) { int pos = btw.ordinal ( ) ; java.lang.invoke.MethodHandle zero = java.lang.invoke.MethodHandles.ZERO_MHS [ pos ] ; if ( zero == null ) { zero = java.lang.invoke.MethodHandles.setCachedMethodHandle ( java.lang.invoke.MethodHandles.ZERO_MHS , pos , java.lang.invoke.MethodHandles.makeZero ( btw.primitiveType ( ) ) ) ; } if ( ( zero.type ( ) . returnType ( ) ) == rtype ) return zero ; assert btw == ( sun.invoke.util.Wrapper.OBJECT ) ; return java.lang.invoke.MethodHandles.makeZero ( rtype ) ; }
private void writeSuppressInfo ( ) throws java.io.IOException { mWriter.write ( "\n<a name=\"SuppressInfo\"></a>\n" ) ; mWriter.write ( "<div class=\"category\">" ) ; mWriter.write ( "Suppressing Warnings and Errors" ) ; mWriter.write ( "<div class=\"categorySeparator\"></div>\n" ) ; mWriter.write ( "</div>\n" ) ; appendEscapedText ( com.android.tools.lint.Main.getSuppressHelp ( ) ) ; mWriter.write ( '\n' ) ; }
public void testTimeZoneDataVersion ( ) { java.lang.String icu4cTzVersion = libcore.icu.ICU.getTZDataVersion ( ) ; java.lang.String zoneInfoTzVersion = libcore.util.ZoneInfoDB.getInstance ( ) . getVersion ( ) ; assertEquals ( icu4cTzVersion , zoneInfoTzVersion ) ; java.lang.String icu4jTzVersion = android.icu.util.TimeZone.getTZDataVersion ( ) ; assertEquals ( icu4jTzVersion , zoneInfoTzVersion ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; tempDir = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createDirectory ( "tempDir" ) ; testInstallDir = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createDirectory ( "testInstall" ) ; testSystemTzDataDir = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createDirectory ( "testSystemTzData" ) ; java.io.File testSystemTzDataFile = new java.io.File ( testSystemTzDataDir , "tzdata" ) ; byte [ ] systemTzDataBytes = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createTzData ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.SYSTEM_RULES_VERSION ) ; libcore.tzdata.update2.TimeZoneDistroInstallerTest.createFile ( testSystemTzDataFile , systemTzDataBytes ) ; installer = new libcore.tzdata.update2.TimeZoneDistroInstaller ( "TimeZoneDistroInstallerTest" , testSystemTzDataFile , testInstallDir ) ; }
public void testWeights ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/inefficient_weight.xml:10: Warning: Use a layout_width of 0dip instead of match_parent for better performance [InefficientWeight]\n" + ( ( ( ( ( ( " android:layout_width=\"match_parent\"\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/inefficient_weight.xml:24: Warning: Use a layout_height of 0dip instead of wrap_content for better performance [InefficientWeight]\n" ) + " android:layout_height=\"wrap_content\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 2 warnings\n" ) + "" ) ) , lintFiles ( "res/layout/inefficient_weight.xml" ) ) ; }
public java.lang.Class < ? > getEnclosingClass ( ) { java.lang.Class < ? > declaringClass = getDeclaringClass ( ) ; if ( declaringClass != null ) { return declaringClass ; } java.lang.reflect.AccessibleObject member = libcore.reflect.AnnotationAccess.getEnclosingMethodOrConstructor ( this ) ; if ( member != null ) { return ( ( java.lang.reflect.Member ) ( member ) ) . getDeclaringClass ( ) ; } return libcore.reflect.AnnotationAccess.getEnclosingClass ( this ) ; }
public void moveAb ( java.lang.String apkPath , java.lang.String instructionSet , java.lang.String outputPath ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.moveAb ( apkPath , instructionSet , outputPath ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public void testMultiExpression ( ) { org.junit.Assert.assertTrue ( new org.jacoco.core.runtime.WildcardMatcher ( "Hello:World" ) . matches ( "World" ) ) ; org.junit.Assert.assertTrue ( new org.jacoco.core.runtime.WildcardMatcher ( "Hello:World" ) . matches ( "World" ) ) ; org.junit.Assert.assertTrue ( new org.jacoco.core.runtime.WildcardMatcher ( "*Test:*Foo" ) . matches ( "UnitTest" ) ) ; }
public java.lang.String getIndent ( org.w3c.dom.Node xmlNode ) { assert ( xmlNode.getNodeType ( ) ) == ( org.w3c.dom.Node.ELEMENT_NODE ) ; if ( xmlNode instanceof org.eclipse.wst.sse.core.internal.provisional.IndexedRegion ) { org.eclipse.wst.sse.core.internal.provisional.IndexedRegion region = ( ( org.eclipse.wst.sse.core.internal.provisional.IndexedRegion ) ( xmlNode ) ) ; org.eclipse.jface.text.IDocument document = getStructuredSourceViewer ( ) . getDocument ( ) ; int startOffset = region.getStartOffset ( ) ; return com.android.ide.eclipse.adt.internal.editors.AndroidXmlEditor.getIndentAtOffset ( document , startOffset ) ; } return "" ; }
private boolean canReadPhoneState ( java.lang.String callingPackage , java.lang.String message ) { try { mApp.enforceCallingOrSelfPermission ( android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE , message ) ; return true ; } catch ( java.lang.SecurityException e ) { mApp.enforceCallingOrSelfPermission ( android.Manifest.permission.READ_PHONE_STATE , message ) ; } if ( ( mAppOps.noteOp ( AppOpsManager.OP_READ_PHONE_STATE , android.os.Binder.getCallingUid ( ) , callingPackage ) ) != ( android.app.AppOpsManager.MODE_ALLOWED ) ) { return false ; } return true ; }
public java.lang.String toString ( ) { return ( ( ( "Provider{" + ( java.lang.Integer.toHexString ( java.lang.System.identityHashCode ( this ) ) ) ) + " " ) + ( info.name ) ) + "}" ; }
public void checkAndCopyProviderExtras ( android.content.Intent src , android.content.Intent dst ) { if ( src == null ) { return ; } if ( hasGatewayProviderExtras ( src ) ) { dst.putExtra ( com.android.server.telecom.NewOutgoingCallIntentBroadcaster.EXTRA_GATEWAY_PROVIDER_PACKAGE , src.getStringExtra ( com.android.server.telecom.NewOutgoingCallIntentBroadcaster.EXTRA_GATEWAY_PROVIDER_PACKAGE ) ) ; dst.putExtra ( com.android.server.telecom.NewOutgoingCallIntentBroadcaster.EXTRA_GATEWAY_URI , src.getStringExtra ( com.android.server.telecom.NewOutgoingCallIntentBroadcaster.EXTRA_GATEWAY_URI ) ) ; com.android.server.telecom.Log.d ( this , "Found and copied gateway provider extras to broadcast intent." ) ; return ; } com.android.server.telecom.Log.d ( this , "No provider extras found in call intent." ) ; }
private void releaseWakeLockLocked ( ) { try { releaseWakeLockXLocked ( ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( com.android.server.LocationManagerService.TAG , "exception in releaseWakeLock()" , e ) ; } }
static java.lang.String getSimpleName ( @ javax.annotation.Nonnull java.util.zip.ZipEntry entry ) { java.lang.String name = entry.getName ( ) ; assert ! ( name.endsWith ( ( "" + ( com.android.sched.vfs.ZipUtils.IN_ZIP_SEPARATOR ) ) ) ) ; int index = name.lastIndexOf ( com.android.sched.vfs.ZipUtils.IN_ZIP_SEPARATOR ) ; if ( index < 0 ) { return name ; } else { return name.substring ( ( index + 1 ) ) ; } }
public void validateUserCredentialWithoutCaCert ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential ( ) ; cred.realm = "realm" ; cred.userCredential = new android.net.wifi.hotspot2.pps.Credential.UserCredential ( ) ; cred.userCredential.username = "username" ; cred.userCredential.password = "password" ; cred.userCredential.eapType = android.net.wifi.EAPConstants.EAP_TTLS ; cred.userCredential.nonEapInnerMethod = "MS-CHAP" ; org.junit.Assert.assertFalse ( cred.validate ( ) ) ; }
public boolean onEditorAction ( android.widget.TextView v , int actionId , android.view.KeyEvent event ) { if ( event != null ) { if ( ! ( event.isShiftPressed ( ) ) ) { if ( isPreparedForSending ( ) ) { confirmSendMessageIfNeeded ( ) ; } return true ; } return false ; } if ( isPreparedForSending ( ) ) { confirmSendMessageIfNeeded ( ) ; } return true ; }
public static void initDebugBridge ( java.lang.String adbLocation ) { if ( ( com.android.hierarchyviewerlib.device.DeviceBridge.sBridge ) == null ) { com.android.ddmlib.AndroidDebugBridge.init ( true ) ; } if ( ( ( com.android.hierarchyviewerlib.device.DeviceBridge.sBridge ) == null ) || ( ! ( com.android.hierarchyviewerlib.device.DeviceBridge.sBridge.isConnected ( ) ) ) ) { com.android.hierarchyviewerlib.device.DeviceBridge.sBridge = com.android.ddmlib.AndroidDebugBridge.createBridge ( adbLocation , true ) ; } }
private boolean equals ( java.lang.String pat1 , java.lang.String pat2 ) { if ( ( pat1 == null ) || ( pat2 == null ) ) { return ( pat1 == null ) && ( pat2 == null ) ; } if ( pat1.equals ( pat2 ) ) { return true ; } return unquote ( pat1 ) . equals ( unquote ( pat2 ) ) ; }
public void disconnect ( ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) { android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "disconnect" ) ; } com.android.bluetooth.pbap.BluetoothPbapService service = getService ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM ) ; if ( service == null ) { return ; } service.disconnect ( ) ; }
public static void computeRemainder ( android.renderscript.cts.TestRemainder.ArgumentsFloatFloatFloat args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; double num = ( ( double ) ( args.inX ) ) ; double den = ( ( double ) ( args.inY ) ) ; args.out = ( ( float ) ( num - ( ( java.lang.StrictMath.round ( ( num / den ) ) ) * den ) ) ) ; }
protected void collect ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JType type ) { if ( type instanceof com.android.jack.ir.ast.JDefinedClassOrInterface ) { com.android.jack.ir.ast.JDefinedClassOrInterface jDefinedClassOrInterface = ( ( com.android.jack.ir.ast.JDefinedClassOrInterface ) ( type ) ) ; synchronized ( jDefinedClassOrInterface ) { if ( ! ( jDefinedClassOrInterface.containsMarker ( com.android.jack.backend.dex.MainDexMarker.class ) ) ) { jDefinedClassOrInterface.addMarker ( MainDexMarker.INSTANCE ) ; } } } }
protected boolean processMessage ( android.os.Message msg ) { if ( ( msg.what ) == ( com.android.internal.telephony.gsm.stk.RilMessageDecoder.CMD_START ) ) { if ( decodeMessageParams ( ( ( com.android.internal.telephony.gsm.stk.RilMessage ) ( msg.obj ) ) ) ) { transitionTo ( mStateCmdParamsReady ) ; } } else { com.android.internal.telephony.gsm.stk.StkLog.d ( this , ( ( ( "StateStart unexpected expecting START=" + ( com.android.internal.telephony.gsm.stk.RilMessageDecoder.CMD_START ) ) + " got " ) + ( msg.what ) ) ) ; } return true ; }
public boolean addGpsStatusListener ( android.location.IGpsStatusListener listener ) { if ( ( mGpsLocationProvider ) == null ) { return false ; } if ( ( mContext.checkCallingPermission ( com.android.server.LocationManagerService.ACCESS_FINE_LOCATION ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { throw new java.lang.SecurityException ( "Requires ACCESS_FINE_LOCATION permission" ) ; } try { mGpsLocationProvider.addGpsStatusListener ( listener ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( com.android.server.LocationManagerService.TAG , "RemoteException in addGpsStatusListener" ) ; return false ; } return true ; }
private void onOtaspCallStateChanged ( ) { com.android.phone.otasp.OtaspActivationService.logd ( ( "onOtaspCallStateChanged: " + ( mPhone.getState ( ) ) ) ) ; if ( mPhone.getState ( ) . equals ( PhoneConstants.State.IDLE ) ) { if ( mIsOtaspCallCommitted ) { com.android.phone.otasp.OtaspActivationService.logd ( "Otasp activation succeed" ) ; } else { com.android.phone.otasp.OtaspActivationService.logd ( "Otasp activation failed" ) ; } onComplete ( ) ; } }
public final long long_literal ( ) throws org.jf.smali.RecognitionException { long value = 0 ; org.antlr.runtime.tree.CommonTree LONG_LITERAL192 = null ; try { { LONG_LITERAL192 = ( ( org.antlr.runtime.tree.CommonTree ) ( match ( input , org.jf.smali.smaliTreeWalker.LONG_LITERAL , org.jf.smali.smaliTreeWalker.FOLLOW_LONG_LITERAL_in_long_literal3262 ) ) ) ; value = org.jf.smali.LiteralTools.parseLong ( ( LONG_LITERAL192 != null ? LONG_LITERAL192.getText ( ) : null ) ) ; } } catch ( org.jf.smali.RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; } finally { } return value ; }
public void run ( ) { mHandler.removeCallbacks ( this ) ; final boolean succeded ; synchronized ( mInstallLock ) { succeded = deleteApplicationCacheFilesLI ( packageName ) ; } if ( observer != null ) { try { observer.onRemoveCompleted ( packageName , succeded ) ; } catch ( android.os.RemoteException e ) { android.util.Log.i ( com.android.server.pm.PackageManagerService.TAG , "Observer no longer exists." ) ; } } }
java.util.concurrent.ConcurrentHashMap.HashEntry < K , V > nextEntry ( ) { if ( ( nextEntry ) == null ) throw new java.util.NoSuchElementException ( ) ; lastReturned = nextEntry ; advance ( ) ; return lastReturned ; }
private static java.lang.String getTypeKind ( @ javax.annotation.Nonnull java.lang.Class < ? extends com.android.jack.ir.ast.JType > typeClass ) { if ( com.android.jack.ir.ast.JEnum.class . isAssignableFrom ( typeClass ) ) { return "enum" ; } else if ( com.android.jack.ir.ast.JAnnotation.class . isAssignableFrom ( typeClass ) ) { return "annotation" ; } else if ( com.android.jack.ir.ast.JClass.class . isAssignableFrom ( typeClass ) ) { return "class" ; } else if ( com.android.jack.ir.ast.JInterface.class . isAssignableFrom ( typeClass ) ) { return "interface" ; } else { return "<undefined>" ; } }
public com.android.sched.vfs.OutputVFile createFile ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull final com.android.sched.vfs.VPath typePath ) throws com.android.sched.util.file.CannotCreateFileException { putProperty ( fileType.buildPropertyName ( null ) , java.lang.String.valueOf ( true ) ) ; addFileType ( fileType ) ; return vfs.getRootDir ( ) . createOutputVFile ( fileType.buildFileVPath ( typePath ) ) ; }
public void initializeNdkConfig ( @ org.gradle.model.Path ( value = "android.ndk" ) com.android.build.gradle.managed.NdkConfig ndk ) { ndk.setModuleName ( "" ) ; ndk.setToolchain ( "" ) ; ndk.setToolchainVersion ( "" ) ; ndk.setCFlags ( "" ) ; ndk.setCppFlags ( "" ) ; ndk.setStl ( "" ) ; ndk.setRenderscriptNdkMode ( false ) ; }
public void onClick ( android.view.View v ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailViewHolder.onClick" , "voicemail id: %d, isViewHolderExpanded:%b" , viewHolderId , isViewHolderExpanded ) ; if ( isViewHolderExpanded ) { collapseViewHolder ( ) ; voicemailViewHolderListener.onViewHolderCollapsed ( this ) ; } else { expandViewHolder ( ) ; voicemailViewHolderListener.onViewHolderExpanded ( this ) ; } }
public boolean onPreferenceClick ( android.preference.Preference preference ) { final android.content.Intent intent = new android.content.Intent ( android.provider.Settings.ACTION_APN_SETTINGS ) ; intent.putExtra ( ":settings:show_fragment_as_subsetting" , true ) ; intent.putExtra ( "sub_id" , mPhone.getSubId ( ) ) ; mPrefFragment.startActivity ( intent ) ; return true ; }
public void forEach ( java.util.function.Consumer < ? super E > action ) { if ( action == null ) throw new java.lang.NullPointerException ( ) ; for ( java.lang.Object x : getArray ( ) ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) E e = ( ( E ) ( x ) ) ; action.accept ( e ) ; } }
private java.io.File createHugeZipFile ( int count ) throws java.io.IOException { java.io.File result = java.io.File.createTempFile ( "ZipFileTest" , "zip" ) ; result.deleteOnExit ( ) ; java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( result ) ) ) ; for ( int i = 0 ; i < count ; ++ i ) { java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry ( java.lang.Integer.toHexString ( i ) ) ; out.putNextEntry ( entry ) ; out.closeEntry ( ) ; } out.close ( ) ; return result ; }
public com.android.jack.ir.ast.cfg.JControlFlowGraph getCfg ( ) { return cfg ; }
public void setShadowLayer ( float radius , float dx , float dy , int color ) { mTextPaint.setShadowLayer ( radius , dx , dy , color ) ; mShadowRadius = radius ; mShadowDx = dx ; mShadowDy = dy ; if ( ( mEditor ) != null ) mEditor.invalidateTextDisplayList ( ) ; invalidate ( ) ; }
public void onServiceDisconnected ( android.content.ComponentName componentName ) { try { android.telecom.Log.startSession ( "SBC.oSD" ) ; synchronized ( mLock ) { logServiceDisconnected ( "onServiceDisconnected" ) ; mServiceConnection = null ; clearAbort ( ) ; handleServiceDisconnected ( ) ; } } finally { android.telecom.Log.endSession ( ) ; } }
private void transformFields ( com.android.dx.merge.IndexMap indexMap , com.android.dx.io.ClassData [ ] fields ) { int lastOutFieldIndex = 0 ; for ( com.android.dx.io.ClassData.Field field : fields ) { int outFieldIndex = indexMap.adjustField ( field.getFieldIndex ( ) ) ; classDataOut.writeUleb128 ( ( outFieldIndex - lastOutFieldIndex ) ) ; lastOutFieldIndex = outFieldIndex ; classDataOut.writeUleb128 ( field.getAccessFlags ( ) ) ; } }
public int hashCode ( ) { return com.google.common.base.Objects.hashCode ( super . hashCode ( ) , mName , mDimension , mMinSdkVersion , mTargetSdkVersion , mMaxSdkVersion , mRenderscriptTargetApi , mRenderscriptSupportModeEnabled , mRenderscriptNdkModeEnabled , mVersionCode , mVersionName , mApplicationId , mTestApplicationId , mTestInstrumentationRunner , mTestHandleProfiling , mTestFunctionalTest , mSigningConfig , mResourceConfiguration ) ; }
public void onCreate ( ) { android.util.Log.i ( com.android.phone.testapps.imstestapp.TestImsService.LOG_TAG , "TestImsService: onCreate" ) ; mImsRegistration = com.android.phone.testapps.imstestapp.TestImsRegistrationImpl.getInstance ( ) ; mTestMmTelFeature = com.android.phone.testapps.imstestapp.TestMmTelFeatureImpl.getInstance ( ) ; mTestRcsFeature = new com.android.phone.testapps.imstestapp.TestRcsFeatureImpl ( ) ; com.android.phone.testapps.imstestapp.TestImsService.mInstance = this ; }
public void test_getDisplayName_noLocaleArgument ( ) { java.util.Currency currency = java.util.Currency.getInstance ( "DEM" ) ; libcore.java.util.CurrencyTest.Locales locales = libcore.java.util.CurrencyTest.getDefaultLocales ( ) ; try { libcore.java.util.CurrencyTest.setDefaultLocales ( new libcore.java.util.CurrencyTest.Locales ( java.util.Locale.US , java.util.Locale.GERMANY , java.util.Locale.FRANCE ) ) ; assertEquals ( "Deutsche Mark" , currency.getDisplayName ( ) ) ; } finally { libcore.java.util.CurrencyTest.setDefaultLocales ( locales ) ; } }
public void testCannotSetChunkedStreamingModeAfterConnect ( ) throws java.lang.Exception { server.enqueue ( new com.google.mockwebserver.MockResponse ( ) . setBody ( "A" ) ) ; server.play ( ) ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; assertEquals ( "A" , readAscii ( connection.getInputStream ( ) , java.lang.Integer.MAX_VALUE ) ) ; try { connection.setChunkedStreamingMode ( 1 ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } }
public static native int addHostRoute ( java.lang.String interfaceName , int hostaddr ) ;
public java.io.File getOutput ( ) { assert ( output ) != null ; if ( ( workingDir ) != null ) { return new java.io.File ( workingDir , output.getPath ( ) ) ; } else { return output ; } }
com.android.sched.vfs.DirectFS.DirectVFile getVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.DirectFS.DirectVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotFileException { assert ( ( permissions ) & ( com.android.sched.util.file.FileOrDirectory.Permission.READ ) ) != 0 ; java.io.File file = new java.io.File ( parent.getNativePath ( ) , name ) ; com.android.sched.util.file.AbstractStreamFile.check ( file , new com.android.sched.util.location.FileLocation ( file ) ) ; return new com.android.sched.vfs.DirectFS.DirectVFile ( this , parent , name ) ; }
protected java.io.FileDescriptor createSocket ( ) { java.io.FileDescriptor s = null ; try { s = android.system.Os.socket ( android.net.ip.AF_PACKET , android.net.ip.SOCK_RAW , 0 ) ; android.net.NetworkUtils.attachControlPacketFilter ( s , android.net.ip.ARPHRD_ETHER ) ; android.system.Os.bind ( s , new android.system.PacketSocketAddress ( ( ( short ) ( ETH_P_ALL ) ) , mIfIndex ) ) ; } catch ( android.system.ErrnoException | java.io.IOException e ) { logError ( "Failed to create packet tracking socket: " , e ) ; closeSocket ( s ) ; return null ; } return s ; }
public void setAlwaysOnVpnPackage ( @ android.annotation.NonNull android.content.ComponentName admin , @ android.annotation.Nullable java.lang.String vpnPackage ) throws android.content.pm.PackageManager.NameNotFoundException , java.lang.UnsupportedOperationException { setAlwaysOnVpnPackage ( admin , vpnPackage , true ) ; }
public void newSms ( int var1 , java.util.ArrayList < java.lang.Byte > var2 ) { }
protected abstract void sendText ( java.lang.String destAddr , java.lang.String scAddr , java.lang.String text , android.app.PendingIntent sentIntent , android.app.PendingIntent deliveryIntent , android.net.Uri messageUri , java.lang.String callingPkg , boolean persistMessage ) ;
public com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation getAnnotation ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedClass cls , @ com.android.annotations.NonNull java.lang.String type ) { com.android.tools.lint.ExternalAnnotationRepository.ClassInfo c = findClass ( cls ) ; if ( c == null ) { return null ; } if ( ( c.annotations ) != null ) { for ( com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation : c.annotations ) { if ( type.equals ( annotation.getSignature ( ) ) ) { return annotation ; } } } return null ; }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type ) { java.lang.String binaryName = remapper.mapValue ( formatter.getName ( type ) ) ; java.lang.String simpleName = com.android.jack.util.NamingTools.getSimpleClassNameFromBinaryName ( binaryName ) ; type.setName ( simpleName ) ; type.getEnclosingPackage ( ) . remove ( type ) ; java.lang.String packageName = com.android.jack.util.NamingTools.getPackageNameFromBinaryName ( binaryName ) ; com.android.jack.ir.ast.JPackage newPackage = lookup.getOrCreatePackage ( packageName ) ; type.setEnclosingPackage ( newPackage ) ; newPackage.addType ( type ) ; }
public void interrupt ( ) { if ( ! ( Constants.USE_TCP_DEBUG ) ) { if ( ( btSocket ) != null ) { try { btSocket.close ( ) ; } catch ( java.io.IOException e ) { android.util.Log.v ( com.android.bluetooth.opp.BluetoothOppTransfer.TAG , "Error when close socket" ) ; } } } }
, @ dalvik.annotation.TestTargetNew ( level = dalvik.annotation.TestLevel.COMPLETE , method = "getAnimation" , args = { } ) } ) public void testClearBeforeAnimation ( ) throws java.lang.Throwable { final android.view.View view = mActivity.findViewById ( R.id.fit_windows ) ; assertFalse ( mAnimation.hasStarted ( ) ) ; view.setAnimation ( mAnimation ) ; assertSame ( mAnimation , view.getAnimation ( ) ) ; view.clearAnimation ( ) ; runTestOnUiThread ( new java.lang.Runnable ( ) { public void run ( ) { view.invalidate ( ) ; } } ) ; java.lang.Thread.sleep ( android.view.cts.View_AnimationTest.TIME_OUT ) ; assertFalse ( mAnimation.hasStarted ( ) ) ; assertNull ( view.getAnimation ( ) ) ; }
public boolean handleMessage ( android.os.Message msg ) { switch ( msg.what ) { case android.content.pm.dex.ArtManager.SnapshotRuntimeProfileCallbackDelegate.MSG_SNAPSHOT_OK : mCallback.onSuccess ( ( ( android.os.ParcelFileDescriptor ) ( msg.obj ) ) ) ; break ; case android.content.pm.dex.ArtManager.SnapshotRuntimeProfileCallbackDelegate.MSG_ERROR : mCallback.onError ( msg.arg1 ) ; break ; default : return false ; } return true ; }
public void notString ( ) throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump ( ) ; com.android.tools.perflib.heap.Instance obj = ( ( com.android.tools.perflib.heap.Instance ) ( dump.getDumpedThing ( "anObject" ) ) ) ; org.junit.Assert.assertNotNull ( obj ) ; org.junit.Assert.assertNull ( com.android.ahat.InstanceUtils.asString ( obj ) ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { new com.ibm.icu.dev.test.format.TestMessageFormat ( ) . run ( args ) ; }
public void writeRawLittleEndian32 ( final int value ) throws java.io.IOException { writeRawByte ( ( value & 255 ) ) ; writeRawByte ( ( ( value > > 8 ) & 255 ) ) ; writeRawByte ( ( ( value > > 16 ) & 255 ) ) ; writeRawByte ( ( ( value > > 24 ) & 255 ) ) ; }
public void test_getByAddress_loopbackIpv6 ( ) throws java.lang.Exception { java.net.InetAddress inetAddress = java.net.InetAddress.getByAddress ( libcore.java.net.InetAddressTest.LOOPBACK6_BYTES ) ; libcore.java.net.InetAddressTest.assertEquals ( libcore.java.net.InetAddressTest.LOOPBACK6_BYTES , "ip6-localhost" , inetAddress ) ; assertTrue ( inetAddress.isLoopbackAddress ( ) ) ; }
private java.util.List < ? extends com.android.tools.idea.run.CloudTestConfiguration > getDefaultConfigurations ( org.jetbrains.android.facet.AndroidFacet facet ) { com.google.gct.testing.CloudTestConfigurationImpl allConfiguration = new com.google.gct.testing.CloudTestConfigurationImpl ( CloudTestConfigurationImpl.ALL_ID , "All" , icons.AndroidIcons.Display , facet ) ; allConfiguration.deviceDimension.enableAll ( ) ; allConfiguration.apiDimension.enableAll ( ) ; allConfiguration.languageDimension.enableAll ( ) ; allConfiguration.orientationDimension.enableAll ( ) ; allConfiguration.setNonEditable ( ) ; return com.google.common.collect.ImmutableList.of ( allConfiguration ) ; }
public static void assertEquals ( java.lang.String message , double expected , double actual , double delta ) { if ( ( java.lang.Double.compare ( expected , actual ) ) == 0 ) return ; if ( ! ( ( java.lang.Math.abs ( ( expected - actual ) ) ) <= delta ) ) org.junit.Assert.failNotEquals ( message , new java.lang.Double ( expected ) , new java.lang.Double ( actual ) ) ; }
public java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > getAllModels ( ) { org.gradle.tooling.ProjectConnection connection = getProjectConnection ( ) ; try { return com.android.build.gradle.integration.common.fixture.GradleTestProject.buildModel ( connection ) ; } finally { connection.close ( ) ; } }
public boolean endCall ( java.lang.String callingPackage ) { try { android.telecom.Log.startSession ( "TSI.eC" ) ; synchronized ( mLock ) { enforceModifyPermission ( ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { return endCallInternal ( callingPackage ) ; } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } } } finally { android.telecom.Log.endSession ( ) ; } }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JBinaryOperation expr ) { if ( ! ( expr instanceof com.android.jack.ir.ast.JAsgOperation ) ) { return expr.canThrow ( ) ? visitThrowingRValue ( expr ) : visitNonThrowingOperation ( expr ) ; } confirmBlockElement ( expr ) ; confirmParent ( expr , com.android.jack.ir.ast.cfg.JVariableAsgBlockElement.class , com.android.jack.ir.ast.cfg.JStoreBlockElement.class ) ; return true ; }
public static java.lang.String getScopedToken ( @ org.jetbrains.annotations.NotNull org.jetbrains.plugins.github.api.GithubAuthData auth , @ org.jetbrains.annotations.NotNull java.util.Collection < java.lang.String > scopes , @ org.jetbrains.annotations.Nullable java.lang.String note ) throws java.io.IOException { java.lang.String path = "/authorizations" ; org.jetbrains.plugins.github.api.GithubAuthorizationRequest request = new org.jetbrains.plugins.github.api.GithubAuthorizationRequest ( new java.util.ArrayList < java.lang.String > ( scopes ) , note , null ) ; org.jetbrains.plugins.github.api.GithubAuthorization response = org.jetbrains.plugins.github.api.GithubApiUtil.createDataFromRaw ( org.jetbrains.plugins.github.api.GithubApiUtil.fromJson ( org.jetbrains.plugins.github.api.GithubApiUtil.postRequest ( auth , path , org.jetbrains.plugins.github.api.GithubApiUtil.gson.toJson ( request ) ) , org.jetbrains.plugins.github.api.GithubAuthorizationRaw.class ) , org.jetbrains.plugins.github.api.GithubAuthorization.class ) ; return response.getToken ( ) ; }
public void run ( ) { mTextView.setText ( "short" ) ; mTextView.setSingleLine ( ) ; getActivity ( ) . setContentView ( mTextView , new android.view.ViewGroup.LayoutParams ( android.text.method.cts.ScrollingMovementMethodTest.LITTLE_SPACE , android.view.ViewGroup.LayoutParams.WRAP_CONTENT ) ) ; }
private java.lang.String getRepresentationString ( com.google.common.base.Function < com.google.gct.testing.dimension.GoogleCloudTestingType , java.lang.String > typeToNameFunction , java.lang.String delimiter ) { java.lang.StringBuffer sb = new java.lang.StringBuffer ( ) ; for ( com.google.gct.testing.dimension.GoogleCloudTestingType type : typesByDimensionName.values ( ) ) { sb.append ( ( ( typeToNameFunction.apply ( type ) ) + delimiter ) ) ; } sb.replace ( ( ( sb.length ( ) ) - ( delimiter.length ( ) ) ) , sb.length ( ) , "" ) ; return sb.toString ( ) ; }
public boolean passwordUid ( java.lang.String password , int uid ) { try { mError = mBinder.password_uid ( password , uid ) ; return ( mError ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
public void process ( android.filterfw.core.FilterContext env ) { android.filterfw.core.Frame input = pullInput ( "mixedcase" ) ; java.lang.String inputString = ( ( java.lang.String ) ( input.getObjectValue ( ) ) ) ; android.filterfw.core.Frame output = env.getFrameManager ( ) . newFrame ( mOutputFormat ) ; output.setObjectValue ( inputString.toUpperCase ( ) ) ; pushOutput ( "uppercase" , output ) ; }
synchronized java.util.logging.Logger findLogger ( java.lang.String name ) { ensureInitialized ( ) ; java.util.logging.LogManager.LoggerWeakRef ref = namedLoggers.get ( name ) ; if ( ref == null ) { return null ; } java.util.logging.Logger logger = ref.get ( ) ; if ( logger == null ) { removeLogger ( name ) ; } return logger ; }
private android.bluetooth.BluetoothGattService getService ( java.util.UUID serverUid ) { android.bluetooth.BluetoothGattService service = null ; if ( ( mBluetoothGatt ) != null ) { service = mBluetoothGatt.getService ( serverUid ) ; if ( service == null ) { showMessage ( "Service not found" ) ; } } return service ; }
public void testWeights ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/inefficient_weight.xml:3: Error: Wrong orientation? No orientation specified, and the default is horizontal, yet this layout has multiple children where at least one has layout_width=\"match_parent\" [Orientation]\n" + ( ( ( ( ( ( ( ( "<LinearLayout\n" + "^\n" ) + "res/layout/inefficient_weight.xml:10: Warning: Use a layout_width of 0dip instead of match_parent for better performance [InefficientWeight]\n" ) + " android:layout_width=\"match_parent\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/inefficient_weight.xml:24: Warning: Use a layout_height of 0dip instead of wrap_content for better performance [InefficientWeight]\n" ) + " android:layout_height=\"wrap_content\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 2 warnings\n" ) ) , lintFiles ( "res/layout/inefficient_weight.xml" ) ) ; }
private void sendDisplayPinIntent ( byte [ ] address , int pin , int variant ) { android.content.Intent intent = new android.content.Intent ( android.bluetooth.BluetoothDevice.ACTION_PAIRING_REQUEST ) ; intent.putExtra ( BluetoothDevice.EXTRA_DEVICE , mRemoteDevices.getDevice ( address ) ) ; if ( pin != 0 ) { intent.putExtra ( BluetoothDevice.EXTRA_PAIRING_KEY , pin ) ; } intent.putExtra ( BluetoothDevice.EXTRA_PAIRING_VARIANT , variant ) ; intent.setFlags ( Intent.FLAG_RECEIVER_FOREGROUND ) ; intent.setPackage ( com.android.bluetooth.btservice.BondStateMachine.PAIRING_REQUEST_PACKAGE ) ; mAdapterService.sendOrderedBroadcast ( intent , mAdapterService.BLUETOOTH_ADMIN_PERM ) ; }
public void test_SSL_check_private_key_cert_then_key ( ) throws java.lang.Exception { long c = org.conscrypt.NativeCrypto.SSL_CTX_new ( ) ; long s = org.conscrypt.NativeCrypto.SSL_new ( c ) ; org.conscrypt.NativeCrypto.SSL_use_certificate ( s , org.conscrypt.NativeCryptoTest.getServerCertificates ( ) ) ; try { org.conscrypt.NativeCrypto.SSL_check_private_key ( s ) ; fail ( ) ; } catch ( javax.net.ssl.SSLException expected ) { } org.conscrypt.NativeCrypto.SSL_use_PrivateKey ( s , org.conscrypt.NativeCryptoTest.getServerPrivateKey ( ) . getPkeyContext ( ) ) ; org.conscrypt.NativeCrypto.SSL_check_private_key ( s ) ; org.conscrypt.NativeCrypto.SSL_free ( s ) ; org.conscrypt.NativeCrypto.SSL_CTX_free ( c ) ; }
public static void checkStructure ( @ javax.annotation.CheckForNull java.io.File [ ] bootclasspath , @ javax.annotation.CheckForNull java.io.File [ ] classpath , @ javax.annotation.Nonnull java.io.File fileOrSourceList , boolean withDebugInfo , @ javax.annotation.CheckForNull com.android.jack.ProguardFlags [ ] proguardFlagFiles ) throws java.lang.Exception { com.android.jack.TestTools.checkStructure ( bootclasspath , classpath , fileOrSourceList , withDebugInfo , false , 0.0F , ( ( com.android.jack.JarJarRules ) ( null ) ) , proguardFlagFiles ) ; }
public void run ( ) { Main.sleep ( 200 ) ; int field0 ; int field1 ; int field2 ; int field3 ; field0 = SlowInit.FIELD0.getValue ( ) ; field1 = SlowInit.FIELD1.getValue ( ) ; field2 = SlowInit.FIELD2.getValue ( ) ; field3 = SlowInit.FIELD3.getValue ( ) ; Main.sleep ( 400 ) ; java.lang.System.out.println ( ( ( ( ( "Fields (child thread): " + field0 ) + field1 ) + field2 ) + field3 ) ) ; }
public void rmdex ( java.lang.String codePath , java.lang.String instructionSet ) throws com.android.internal.os.InstallerConnection.InstallerException { com.android.server.pm.Installer.assertValidInstructionSet ( instructionSet ) ; checkLock ( ) ; try { mInstalld.rmdex ( codePath , instructionSet ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public boolean processMessage ( android.os.Message message ) { boolean retValue = true ; switch ( message.what ) { case com.android.server.connectivity.Tethering.TetherMasterSM.CMD_TETHER_MODE_REQUESTED : com.android.server.connectivity.tethering.TetherInterfaceStateMachine who = ( ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine ) ( message.obj ) ) ; who.sendMessage ( mErrorNotification ) ; break ; case com.android.server.connectivity.Tethering.TetherMasterSM.CMD_CLEAR_ERROR : mErrorNotification = android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ; transitionTo ( mInitialState ) ; break ; default : retValue = false ; } return retValue ; }
public int getState ( ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "getState " + ( mState ) ) ) ; if ( ! ( com.android.bluetooth.Utils.checkCaller ( ) ) ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "getState(): not allowed for non-active user" ) ; return android.bluetooth.BluetoothPbap.STATE_DISCONNECTED ; } enforceCallingOrSelfPermission ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; return mState ; }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , short [ ] data ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy2DRangeFromUnchecked" ) ; mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * 2 ) , Element.DataType.SIGNED_16 ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
public static < T > boolean hasNonZeroEntry ( com.android.ahat.AhatSnapshot snapshot , com.android.tools.perflib.heap.Heap heap , com.android.ahat.HeapTable.TableConfig < T > config , java.util.List < T > elements ) { if ( ( snapshot.getHeapSize ( heap ) ) > 0 ) { for ( T element : elements ) { if ( ( config.getSize ( element , heap ) ) > 0 ) { return true ; } } } return false ; }
protected void fillFiles ( @ javax.annotation.Nonnull com.android.sched.vfs.InputVDir vDir , @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull java.util.List < com.android.sched.vfs.InputVFile > files ) { for ( com.android.sched.vfs.InputVElement subFile : vDir.list ( ) ) { if ( subFile.isVDir ( ) ) { fillFiles ( ( ( com.android.sched.vfs.InputVDir ) ( subFile ) ) , fileType , files ) ; } else { com.android.sched.vfs.InputVFile vFile = ( ( com.android.sched.vfs.InputVFile ) ( subFile ) ) ; if ( fileType.isOfType ( vFile ) ) { files.add ( vFile ) ; } } } }
public boolean isConditional ( ) { java.lang.Object o = annotation.getValue ( com.android.tools.lint.checks.SupportAnnotationDetector.ATTR_CONDITIONAL ) ; if ( o instanceof java.lang.Boolean ) { return ( ( java.lang.Boolean ) ( o ) ) ; } else if ( o instanceof com.android.tools.lint.client.api.JavaParser.ResolvedField ) { o = ( ( com.android.tools.lint.client.api.JavaParser.ResolvedField ) ( o ) ) . getValue ( ) ; if ( o instanceof java.lang.Boolean ) { return ( ( java.lang.Boolean ) ( o ) ) ; } } return false ; }
private static long getLongAttribute ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation , @ com.android.annotations.NonNull java.lang.String name , long defaultValue ) { java.lang.Object value = annotation.getValue ( name ) ; if ( value instanceof java.lang.Number ) { return ( ( java.lang.Number ) ( value ) ) . longValue ( ) ; } return defaultValue ; }
public void testAesCbcHmacMd5Udp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.getKey ( 256 ) ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , android.net.cts.IpSecManagerTest.getKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , true ) ; }
public java.util.List < ? extends com.android.jack.library.InputLibrary > getImportedLibrary ( ) { com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession ( ) ; if ( needFullBuild ( ) ) { session.setFileDependencies ( new com.android.jack.analysis.dependency.file.FileDependencies ( ) ) ; session.setTypeDependencies ( new com.android.jack.analysis.dependency.type.TypeDependencies ( ) ) ; return importedLibrariesFromCommandLine ; } try { updateIncrementalState ( ) ; } catch ( com.android.jack.incremental.IncrementalException e ) { session.getReporter ( ) . report ( Severity.FATAL , e ) ; throw new com.android.jack.JackAbortException ( e ) ; } return java.util.Collections.singletonList ( incrementalInputLibrary ) ; }
public void run ( ) { while ( ! ( Main.finish ) ) { for ( int i = 0 ; i < 188 ; i ++ ) { byte [ ] b = new byte [ ( i * 100 ) + 10 ] ; } try { java.lang.Thread.sleep ( 10 ) ; } catch ( java.lang.Exception e ) { } } }
public java.lang.String getClassName ( ) { if ( ( className ) == null ) { if ( ! ( ( isReference ( ) ) || ( isClosure ( ) ) ) ) { throw new java.lang.IllegalArgumentException ( ( "not an object type: " + ( descriptor ) ) ) ; } if ( ( descriptor.charAt ( 0 ) ) == '[' ) { className = descriptor ; } else { className = descriptor.substring ( 1 , ( ( descriptor.length ( ) ) - 1 ) ) ; } } return className ; }
public boolean equals ( @ javax.annotation.Nullable java.lang.Object obj ) { if ( obj == ( this ) ) { return true ; } else if ( obj instanceof com.google.common.collect.Table ) { com.google.common.collect.Table < ? , ? , ? > that = ( ( com.google.common.collect.Table < ? , ? , ? > ) ( obj ) ) ; return this . cellSet ( ) . equals ( that.cellSet ( ) ) ; } else { return false ; } }
public java.lang.String getAlgorithmName ( int index , int codepoint ) { java.lang.String result = null ; synchronized ( m_utilStringBuffer_ ) { m_utilStringBuffer_.delete ( 0 , m_utilStringBuffer_.length ( ) ) ; m_algorithm_ [ index ] . appendName ( codepoint , m_utilStringBuffer_ ) ; result = m_utilStringBuffer_.toString ( ) ; } return result ; }
public final void testEquals_Point ( ) { com.android.ide.eclipse.adt.editors.layout.gscripts.Point p = new com.android.ide.eclipse.adt.editors.layout.gscripts.Point ( 1 , 2 ) ; com.android.ide.eclipse.adt.editors.layout.gscripts.Point p1 = new com.android.ide.eclipse.adt.editors.layout.gscripts.Point ( 1 , 2 ) ; com.android.ide.eclipse.adt.editors.layout.gscripts.Point p2 = new com.android.ide.eclipse.adt.editors.layout.gscripts.Point ( ( - 3 ) , ( - 4 ) ) ; assertNotSame ( p1 , p ) ; assertTrue ( p.equals ( p1 ) ) ; assertFalse ( p.equals ( p2 ) ) ; }
public void dumpShowsFailureTrace ( ) throws java.lang.Exception { mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect" ) ; mLastMileLogger.reportConnectionEvent ( com.android.server.wifi.LastMileLoggerTest.FAKE_CONNECTION_ID , BaseWifiDiagnostics.CONNECTION_EVENT_FAILED ) ; org.junit.Assert.assertTrue ( getDumpString ( ) . contains ( "rdev_connect" ) ) ; }
public boolean isDataConnectivityPossible ( ) { int subId = mSubscriptionController.getDefaultDataSubId ( ) ; final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return phone.isDataConnectivityPossible ( ) ; } else { return false ; } }
private void setCurrentAppType ( boolean isGsm ) { synchronized ( mLock ) { boolean isLteOnCdmaMode = ( android.telephony.TelephonyManager.getLteOnCdmaModeStatic ( ) ) == ( com.android.internal.telephony.PhoneConstants.LTE_ON_CDMA_TRUE ) ; if ( isGsm || isLteOnCdmaMode ) { mCurrentAppType = UiccController.APP_FAM_3GPP ; } else { mCurrentAppType = UiccController.APP_FAM_3GPP2 ; } initializeCurrentApp ( ) ; } }
synchronized void nAllocationRead2D ( long id , int xoff , int yoff , int mip , int face , int w , int h , java.lang.Object d , int sizeBytes , android.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationRead2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes , dt.mID ) ; }
public final void writeTo ( com.android.dx.dex.file.DexFile file , com.android.dx.util.AnnotatedOutput out ) { out.alignTo ( alignment ) ; try { if ( ( writeSize ) < 0 ) { throw new java.lang.UnsupportedOperationException ( "writeSize is unknown" ) ; } out.assertCursor ( getAbsoluteOffset ( ) ) ; } catch ( java.lang.RuntimeException ex ) { throw com.android.dx.util.ExceptionWithContext.withContext ( ex , ( "...while writing " + ( this ) ) ) ; } writeTo0 ( file , out ) ; }
public com.android.ims.ImsMultiEndpoint getMultiEndpointInterface ( int serviceId ) throws com.android.ims.ImsException { if ( ( ( mMultiEndpoint ) == null ) || ( ! ( mImsServiceProxy.isBinderAlive ( ) ) ) ) { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { com.android.ims.internal.IImsMultiEndpoint iImsMultiEndpoint = mImsServiceProxy.getMultiEndpointInterface ( serviceId ) ; if ( iImsMultiEndpoint == null ) { throw new com.android.ims.ImsException ( "getMultiEndpointInterface()" , ImsReasonInfo.CODE_MULTIENDPOINT_NOT_SUPPORTED ) ; } mMultiEndpoint = new com.android.ims.ImsMultiEndpoint ( iImsMultiEndpoint ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getMultiEndpointInterface()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } } return mMultiEndpoint ; }
private boolean sample ( long timeStamp ) { if ( timeStamp < ( mLatestSeen ) ) { return false ; } else if ( timeStamp == ( mLatestSeen ) ) { return true ; } else { mElapsedTimes.add ( ( timeStamp - ( mLatestSeen ) ) ) ; mLatestSeen = timeStamp ; return false ; } }
private synchronized void initGenericType ( ) { if ( ! ( genericTypesAreInitialized ) ) { java.lang.String signatureAttribute = getSignatureAttribute ( ) ; org.apache.harmony.luni.lang.reflect.GenericSignatureParser parser = new org.apache.harmony.luni.lang.reflect.GenericSignatureParser ( declaringClass.getClassLoader ( ) ) ; parser.parseForField ( this . declaringClass , signatureAttribute ) ; genericType = parser.fieldType ; if ( ( genericType ) == null ) { genericType = getType ( ) ; } genericTypesAreInitialized = true ; } }
public void mark ( int markLimit ) throws java.io.IOException { if ( markLimit < 0 ) { throw new java.lang.IllegalArgumentException ( ( "markLimit < 0:" + markLimit ) ) ; } synchronized ( lock ) { checkNotClosed ( ) ; this . markLimit = markLimit ; mark = pos ; } }
public void testTelephonyFeatures ( ) { int phoneType = mTelephonyManager.getPhoneType ( ) ; switch ( phoneType ) { case android.telephony.TelephonyManager.PHONE_TYPE_GSM : assertTelephonyFeatures ( PackageManager.FEATURE_TELEPHONY , PackageManager.FEATURE_TELEPHONY_GSM ) ; break ; case android.telephony.TelephonyManager.PHONE_TYPE_CDMA : assertTelephonyFeatures ( PackageManager.FEATURE_TELEPHONY , PackageManager.FEATURE_TELEPHONY_CDMA ) ; break ; case android.telephony.TelephonyManager.PHONE_TYPE_NONE : assertTelephonyFeatures ( ) ; break ; default : throw new java.lang.IllegalArgumentException ( ( "Did you add a new phone type? " + phoneType ) ) ; } }
public void beforeCheckFile ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context ) { if ( com.android.tools.lint.detector.api.LintUtils.endsWith ( context.file.getName ( ) , com.android.SdkConstants.DOT_XML ) ) { java.io.File parent = context.file.getParentFile ( ) ; com.android.resources.ResourceFolderType type = com.android.resources.ResourceFolderType.getFolderType ( parent.getName ( ) ) ; if ( type == ( com.android.resources.ResourceFolderType.DRAWABLE ) ) { if ( ( mValidDrawables ) == null ) { mValidDrawables = new java.util.ArrayList < java.lang.String > ( ) ; } java.lang.String resource = getDrawableResource ( context.file ) ; mValidDrawables.add ( resource ) ; } } }
public void testRoamFailureDueToBssidSet ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( ) ; int connectedNetworkId = 5 ; executeAndValidateConnectSequence ( connectedNetworkId , false , false ) ; org.mockito.Mockito.when ( mSupplicantStaNetworkMock.setBssid ( org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( false ) ; android.net.wifi.WifiConfiguration roamingConfig = new android.net.wifi.WifiConfiguration ( ) ; roamingConfig.networkId = connectedNetworkId ; roamingConfig.getNetworkSelectionStatus ( ) . setNetworkSelectionBSSID ( "45:34:23:23:ab:ed" ) ; assertFalse ( mDut.roamToNetwork ( roamingConfig ) ) ; }
private java.lang.CharSequence getImsErrorMessage ( android.os.AsyncResult ar ) { com.android.ims.ImsException error = ( ( com.android.ims.ImsException ) ( ar.exception ) ) ; if ( ( error.getCode ( ) ) == ( com.android.ims.ImsReasonInfo.CODE_FDN_BLOCKED ) ) { return mContext.getText ( com.android.internal.R.string.mmiFdnError ) ; } else if ( ( error.getMessage ( ) ) != null ) { return error.getMessage ( ) ; } else { return getErrorMessage ( ar ) ; } }
protected void done ( ) { try { com.android.hierarchyviewer.ui.Workspace.WindowsResult result = get ( ) ; protocolVersion = result.protocolVersion ; serverVersion = result.serverVersion ; windowsTableModel.clear ( ) ; windowsTableModel.addWindows ( result.windows ) ; } catch ( java.util.concurrent.ExecutionException e ) { e.printStackTrace ( ) ; } catch ( java.lang.InterruptedException e ) { e.printStackTrace ( ) ; } finally { endTask ( ) ; } }
public void test_bind_unresolvedAddress ( ) throws java.io.IOException { java.nio.channels.SocketChannel sc = java.nio.channels.SocketChannel.open ( ) ; try { sc.bind ( new java.net.InetSocketAddress ( "unresolvedname" , 31415 ) ) ; fail ( ) ; } catch ( java.nio.channels.UnresolvedAddressException expected ) { } assertNull ( sc.getLocalAddress ( ) ) ; assertTrue ( sc.isOpen ( ) ) ; assertFalse ( sc.isConnected ( ) ) ; sc.close ( ) ; }
public void assign ( java.net.HttpCookie cookie , java.lang.String attrName , java.lang.String attrValue ) { if ( ( cookie.getMaxAge ( ) ) == ( java.net.HttpCookie.MAX_AGE_UNSPECIFIED ) ) { cookie.setMaxAge ( cookie.expiryDate2DeltaSeconds ( attrValue ) ) ; } }
public void testEquals ( ) throws java.lang.Exception { android.telephony.data.DataProfile dp1 = com.android.internal.telephony.dataconnection.DcTracker.createDataProfile ( mApn1 , mApn1.profileId ) ; android.telephony.data.DataProfile dp2 = com.android.internal.telephony.dataconnection.DcTracker.createDataProfile ( mApn1 , mApn1.profileId ) ; assertEquals ( dp1 , dp2 ) ; dp2 = com.android.internal.telephony.dataconnection.DcTracker.createDataProfile ( mApn2 , mApn2.profileId ) ; assertFalse ( dp1.equals ( dp2 ) ) ; }
public void onSdkLoaded ( ) { com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( ( currentSdk != null ) && ( ( mEditedFile ) != null ) ) { com.android.sdklib.IAndroidTarget target = currentSdk.getTarget ( mEditedFile.getProject ( ) ) ; if ( target != null ) { mConfigComposite.onSdkLoaded ( target ) ; mConfigListener.onConfigurationChange ( ) ; } } }
public java.util.Collection < com.android.tradefed.testtype.IRemoteTest > split ( int shardCountHint ) { java.util.List < com.android.tradefed.testtype.IRemoteTest > tests = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < shardCountHint ; i ++ ) { tests.add ( new com.android.tradefed.testtype.StubTest ( ) ) ; } return tests ; }
public java.lang.String getDisplayScript ( java.util.Locale locale ) { java.lang.String scriptCode = baseLocale.getScript ( ) ; if ( scriptCode.isEmpty ( ) ) { return "" ; } java.lang.String result = libcore.icu.ICU.getDisplayScript ( this , locale ) ; if ( result == null ) { result = libcore.icu.ICU.getDisplayScript ( this , java.util.Locale.getDefault ( ) ) ; } return result ; }
private void doClean ( org.eclipse.core.resources.IProject project , org.eclipse.core.runtime.IProgressMonitor monitor ) throws org.eclipse.core.runtime.CoreException { com.android.ide.eclipse.adt.AdtPlugin.printBuildToConsole ( BuildVerbosity.VERBOSE , project , Messages.Removing_Generated_Classes ) ; if ( ( mGenFolder ) != null ) { removeDerivedResources ( mGenFolder , monitor ) ; } removeMarkersFromContainer ( project , AdtConstants.MARKER_AAPT_COMPILE ) ; removeMarkersFromContainer ( project , AdtConstants.MARKER_XML ) ; removeMarkersFromContainer ( project , AdtConstants.MARKER_AIDL ) ; removeMarkersFromContainer ( project , AdtConstants.MARKER_RENDERSCRIPT ) ; removeMarkersFromContainer ( project , AdtConstants.MARKER_ANDROID ) ; }
synchronized void nAllocationData2D ( long id , int xoff , int yoff , int mip , int face , int w , int h , java.lang.Object d , int sizeBytes , android.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes , dt.mID ) ; }
public void testApplyingWithAbsentFileToDelete ( ) throws java.lang.Exception { com.intellij.updater.PatchFileCreator.create ( "from" , "to" , myOlderDir , myNewerDir , myFile , java.util.Collections.< java.lang.String > emptyList ( ) , java.util.Collections.< java.lang.String > emptyList ( ) , java.util.Collections.< java.lang.String > emptyList ( ) , com.intellij.updater.TEST_UI ) ; new java.io.File ( myOlderDir , "bin/idea.bat" ) . delete ( ) ; assertAppliedAndRevertedCorrectly ( com.intellij.updater.PatchFileCreator.prepareAndValidate ( myFile , myOlderDir , com.intellij.updater.TEST_UI ) ) ; }
public void reportConnectionFailureFetchesFatesInVerboseMode ( ) { final boolean verbosityToggle = true ; mWifiDiagnostics.startLogging ( verbosityToggle ) ; mWifiDiagnostics.reportConnectionFailure ( ) ; org.mockito.Mockito.verify ( mWifiNative ) . getTxPktFates ( org.mockito.Mockito.anyObject ( ) ) ; org.mockito.Mockito.verify ( mWifiNative ) . getRxPktFates ( org.mockito.Mockito.anyObject ( ) ) ; }
public void copyFromUnchecked ( byte [ ] d ) { mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFromUnchecked ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFromUnchecked ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFromUnchecked ( 0 , mCurrentCount , d ) ; } }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { com.android.server.telecom.Log.startSession ( "TSSwR.oR" ) ; try { synchronized ( mLock ) { int userHandleId = intent.getIntExtra ( Intent.EXTRA_USER_HANDLE , 0 ) ; android.os.UserHandle currentUserHandle = new android.os.UserHandle ( userHandleId ) ; mPhoneAccountRegistrar.setCurrentUserHandle ( currentUserHandle ) ; mCallsManager.onUserSwitch ( currentUserHandle ) ; } } finally { com.android.server.telecom.Log.endSession ( ) ; } }
public void run ( ) { mBuilder = new android.app.AlertDialog.Builder ( mContext ) ; mBuilder.setView ( view ) ; mDialog = mBuilder.show ( ) ; mFrameLayout = ( ( android.widget.FrameLayout ) ( mDialog.getWindow ( ) . findViewById ( R.id.custom ) ) ) ; mView = mFrameLayout.getChildAt ( 0 ) ; }
public static java.lang.String getLogFormatString ( com.android.ddmlib.Log.LogLevel logLevel , java.lang.String tag , java.lang.String message ) { long msec ; msec = java.lang.System.currentTimeMillis ( ) ; return java.lang.String.format ( "%02d:%02d %c/%s: %s\n" , ( ( msec / 60000 ) % 60 ) , ( ( msec / 1000 ) % 60 ) , logLevel.getPriorityLetter ( ) , tag , message ) ; }
private java.lang.String getDefaultPath ( com.google.gct.idea.appengine.validation.PsiMethod psiMethod ) { java.lang.String apiDefaultResource = getResourceProperty ( psiMethod ) ; if ( apiDefaultResource != null ) { return apiDefaultResource.toLowerCase ( ) ; } return psiMethod.getName ( ) ; }
public int remove ( java.lang.String name , int userId ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( "remove" ) ; builder.append ( ' ' ) ; builder.append ( name ) ; builder.append ( ' ' ) ; builder.append ( userId ) ; return mInstaller.execute ( builder.toString ( ) ) ; }
synchronized void nScriptSetVarI ( long id , int slot , int val ) { validate ( ) ; rsnScriptSetVarI ( mContext , id , slot , val ) ; }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [ ] id = org.conscrypt.NativeCrypto.SSL_SESSION_session_id ( session ) ; assertNotNull ( id ) ; assertEquals ( 32 , id.length ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public static void help ( java.io.PrintStream out ) { out.println ( "java -jar ahat.jar [-p port] FILE" ) ; out.println ( ( " Launch an http server for viewing " + "the given Android heap-dump FILE." ) ) ; out.println ( "" ) ; out.println ( "Options:" ) ; out.println ( " -p <port>" ) ; out.println ( " Serve pages on the given port. Defaults to 7100." ) ; out.println ( "" ) ; }
public static void assertEquals ( java.lang.String message , double expected , double actual , double delta ) { if ( ( java.lang.Double.compare ( expected , actual ) ) == 0 ) return ; if ( ! ( ( java.lang.Math.abs ( ( expected - actual ) ) ) <= delta ) ) org.junit.Assert.failNotEquals ( message , new java.lang.Double ( expected ) , new java.lang.Double ( actual ) ) ; }
public void setSoWriteTimeout ( int writeTimeoutMilliseconds ) throws java.net.SocketException { this . writeTimeoutMilliseconds = writeTimeoutMilliseconds ; libcore.io.StructTimeval tv = libcore.io.StructTimeval.fromMillis ( writeTimeoutMilliseconds ) ; try { Libcore.os.setsockoptTimeval ( getFileDescriptor$ ( ) , org.conscrypt.SOL_SOCKET , org.conscrypt.SO_SNDTIMEO , tv ) ; } catch ( libcore.io.ErrnoException errnoException ) { throw errnoException.rethrowAsSocketException ( ) ; } }
public void testDescendingAddAll3 ( ) { try { java.util.NavigableSet q = jsr166.ConcurrentSkipListSubSetTest.dset0 ( ) ; java.lang.Integer [ ] ints = new java.lang.Integer [ SIZE ] ; for ( int i = 0 ; i < ( ( SIZE ) - 1 ) ; ++ i ) ints [ i ] = new java.lang.Integer ( ( i + ( SIZE ) ) ) ; q.addAll ( java.util.Arrays.asList ( ints ) ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
public void testNoResidualPermissionsOnUninstall ( ) throws java.lang.Exception { assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_23 ) , false , false ) ) ; runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testNoResidualPermissionsOnUninstall_part1" ) ; assertNull ( getDevice ( ) . uninstallPackage ( android.appsecurity.cts.PermissionsHostTest.PKG ) ) ; assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_23 ) , false , false ) ) ; runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testNoResidualPermissionsOnUninstall_part2" ) ; }
public void testApplyingWithCriticalFiles ( ) throws java.lang.Exception { myPatchSpec.setCriticalFiles ( java.util.Arrays.asList ( "lib/annotations.jar" ) ) ; com.intellij.updater.PatchFileCreator.create ( myPatchSpec , myFile , com.intellij.updater.TEST_UI ) ; com.intellij.updater.PatchFileCreator.PreparationResult preparationResult = com.intellij.updater.PatchFileCreator.prepareAndValidate ( myFile , myOlderDir , com.intellij.updater.TEST_UI ) ; assertTrue ( com.intellij.updater.PatchFileCreator.apply ( preparationResult , new java.util.HashMap < java.lang.String , com.intellij.updater.ValidationResult.Option > ( ) , com.intellij.updater.TEST_UI ) ) ; assertAppliedCorrectly ( ) ; }
private android.view.ViewGroup.LayoutParams getNavigationBarLayoutParams ( ) { android.view.WindowManager.LayoutParams lp = new android.view.WindowManager.LayoutParams ( android.view.ViewGroup.LayoutParams.MATCH_PARENT , android.view.ViewGroup.LayoutParams.MATCH_PARENT , android.view.ViewGroup.LayoutParams.TYPE_NAVIGATION_BAR , ( ( ( ( ( 0 | ( android.view.ViewGroup.LayoutParams.FLAG_TOUCHABLE_WHEN_WAKING ) ) | ( android.view.ViewGroup.LayoutParams.FLAG_NOT_FOCUSABLE ) ) | ( android.view.ViewGroup.LayoutParams.FLAG_NOT_TOUCH_MODAL ) ) | ( android.view.ViewGroup.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH ) ) | ( android.view.ViewGroup.LayoutParams.FLAG_SPLIT_TOUCH ) ) , android.graphics.PixelFormat.OPAQUE ) ; if ( android.app.ActivityManager.isHighEndGfx ( ) ) { lp.flags |= android.view.ViewGroup.LayoutParams.FLAG_HARDWARE_ACCELERATED ; } lp.setTitle ( "NavigationBar" ) ; lp.windowAnimations = 0 ; return lp ; }
public com.android.dx.merge.TypeList adjustTypeList ( com.android.dx.merge.TypeList typeList ) { if ( typeList == ( TypeList.EMPTY ) ) { return typeList ; } short [ ] types = typeList.getTypes ( ) . clone ( ) ; for ( int i = 0 ; i < ( types.length ) ; i ++ ) { types [ i ] = ( ( short ) ( adjustType ( types [ i ] ) ) ) ; } return new com.android.dx.merge.TypeList ( target , types ) ; }
public static java.util.List < junitparams.internal.TestMethod > listFrom ( java.util.List < org.junit.runners.model.FrameworkMethod > annotatedMethods , org.junit.runners.model.TestClass testClass ) { java.util.List < junitparams.internal.TestMethod > methods = new java.util.ArrayList < junitparams.internal.TestMethod > ( ) ; for ( org.junit.runners.model.FrameworkMethod frameworkMethod : annotatedMethods ) methods.add ( new junitparams.internal.TestMethod ( frameworkMethod , testClass ) ) ; return methods ; }
public static com.android.server.NsdService create ( android.content.Context context ) throws java.lang.InterruptedException { com.android.server.NsdService service = new com.android.server.NsdService ( context ) ; service.mNativeDaemonConnected.await ( ) ; return service ; }
public final java.nio.MappedByteBuffer force ( ) { checkIsMapped ( ) ; if ( ( mapMode ) == ( java.nio.channels.FileChannel.MapMode.READ_WRITE ) ) { try { Libcore.os.msync ( block.toLong ( ) , block.getSize ( ) , java.nio.MS_SYNC ) ; } catch ( libcore.io.ErrnoException errnoException ) { throw new java.lang.AssertionError ( errnoException ) ; } } return this ; }
public static com.google.common.truth.TestVerb assertWithMessage ( java.lang.String message ) { return com.google.common.truth.Truth.assert_ ( ) . withFailureMessage ( message ) ; }
public boolean replyReport ( byte type , byte id , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( ( ( "replyReport(): type=" + type ) + " id=" ) + id ) ) ; com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return false ; } return service.replyReport ( type , id , data ) ; }
public java.lang.Object [ ] getTestObjects ( ) { android.icu.util.ULocale uloc = android.icu.util.ULocale.forLocale ( java.util.Locale.US ) ; android.icu.text.NumberFormat [ ] formats = new android.icu.text.NumberFormat [ ] { android.icu.dev.test.serializable.FormatTests.getCannedDecimalFormat ( "#,##0.###" , uloc ) , android.icu.dev.test.serializable.FormatTests.getCannedDecimalFormat ( "¤#,##0.00;(¤#,##0.00)" , uloc ) , android.icu.dev.test.serializable.FormatTests.getCannedDecimalFormat ( "#,##0%" , uloc ) , android.icu.dev.test.serializable.FormatTests.getCannedDecimalFormat ( "#E0" , uloc ) } ; return formats ; }
public java.util.Collection < com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem > getResources ( com.android.resources.ResourceType type , com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources projectResources ) { com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem item = projectResources.findResourceItem ( type , mResourceName ) ; java.util.ArrayList < com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem > items = new java.util.ArrayList < com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem > ( ) ; if ( item == null ) { item = new com.android.ide.eclipse.adt.internal.resources.manager.ConfigurableResourceItem ( mResourceName ) ; items.add ( item ) ; } item.add ( this ) ; return items ; }
public boolean process ( @ com.android.annotations.NonNull org.w3c.dom.Document mainDoc , @ com.android.annotations.NonNull org.w3c.dom.Document ... libraryDocs ) { boolean success = true ; mMainDoc = mainDoc ; java.lang.String prefix = com.android.manifmerger.XmlUtils.lookupNsPrefix ( mainDoc , SdkConstants.NS_RESOURCES ) ; mXPath = com.android.sdklib.xml.AndroidXPathFactory.newXPath ( prefix ) ; for ( org.w3c.dom.Document libDoc : libraryDocs ) { if ( ! ( mergeLibDoc ( libDoc ) ) ) { success = false ; } } mXPath = null ; mMainDoc = null ; return success ; }
public boolean contentEquals ( java.lang.CharSequence cs ) { if ( cs == null ) { return false ; } return ( ( this ) == cs ) || ( ( ( cs.length ( ) ) == ( length ) ) && ( contentEquals ( 0 , cs , length ) ) ) ; }
public java.lang.Void call ( ) throws java.lang.Exception { org.apache.http.HttpResponse response = mServer.getResponse ( mRequest ) ; mConnection.sendResponseHeader ( response ) ; mConnection.sendResponseEntity ( response ) ; mConnection.close ( ) ; return null ; }
protected java.util.Map < java.lang.String , java.lang.String > createArgumentMap ( ) { java.util.Map < java.lang.String , java.lang.String > args = super . createArgumentMap ( ) ; args.put ( com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ChangeLayoutRefactoring.KEY_TYPE , mTypeFqcn ) ; return args ; }
public int handleIncomingUser ( int callingPid , int callingUid , int userId , boolean allowAll , boolean requireFull , java.lang.String name , java.lang.String callerPackage ) { return handleIncomingUser ( callingPid , callingUid , userId , allowAll , ( requireFull ? com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY : com.android.server.am.ActivityManagerService.ALLOW_NON_FULL ) , name , callerPackage ) ; }
public void compareLibCoreStructure ( ) throws java.lang.Exception { com.android.jack.TestTools.checkStructure ( null , null , com.android.jack.compile.androidtree.core.CoreCompilationTest.SOURCELIST , false , false , 0.1F , ( ( com.android.jack.JarJarRules ) ( null ) ) , ( ( com.android.jack.ProguardFlags [ ] ) ( null ) ) ) ; }
private com.android.cts.appsecurity.AppSecurityTests.CollectingTestRunListener doRunTests ( java.lang.String pkgName ) { com.android.ddmlib.testrunner.RemoteAndroidTestRunner testRunner = new com.android.ddmlib.testrunner.RemoteAndroidTestRunner ( pkgName , getDevice ( ) ) ; com.android.cts.appsecurity.AppSecurityTests.CollectingTestRunListener listener = new com.android.cts.appsecurity.AppSecurityTests.CollectingTestRunListener ( ) ; testRunner.run ( listener ) ; return listener ; }
public java.lang.Integer getReasonCode ( ) throws java.io.IOException { java.lang.Object obj = getExtension ( sun.security.x509.PKIXExtensions.ReasonCode_Id ) ; if ( obj == null ) return null ; sun.security.x509.CRLReasonCodeExtension reasonCode = ( ( sun.security.x509.CRLReasonCodeExtension ) ( obj ) ) ; return ( ( java.lang.Integer ) ( reasonCode.get ( reasonCode.REASON ) ) ) ; }
public java.lang.String getType ( android.net.Uri url ) { switch ( com.android.providers.telephony.TelephonyProvider.s_urlMatcher.match ( url ) ) { case com.android.providers.telephony.TelephonyProvider.URL_TELEPHONY : case com.android.providers.telephony.TelephonyProvider.URL_TELEPHONY_USING_SUBID : return "vnd.android.cursor.dir/telephony-carrier" ; case com.android.providers.telephony.TelephonyProvider.URL_ID : return "vnd.android.cursor.item/telephony-carrier" ; case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPN_USING_SUBID : case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPN_NO_UPDATE_USING_SUBID : case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPN : case com.android.providers.telephony.TelephonyProvider.URL_PREFERAPN_NO_UPDATE : return "vnd.android.cursor.item/telephony-carrier" ; default : throw new java.lang.IllegalArgumentException ( ( "Unknown URL " + url ) ) ; } }
public void testConnectWithDisconnectAndSingleExistingNetwork ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( ) ; executeAndValidateConnectSequence ( 0 , false , true ) ; }
public boolean trackBssid ( java.lang.String bssid , boolean enable , int reasonCode ) { localLog ( ( ( ( ( "trackBssid: " + ( enable ? "enable " : "disable " ) ) + bssid ) + " reason code " ) + reasonCode ) ) ; boolean ret = mNetworkSelector.enableBssidForNetworkSelection ( bssid , enable , reasonCode ) ; if ( ret && ( ! enable ) ) { startConnectivityScan ( com.android.server.wifi.WifiConnectivityManager.SCAN_IMMEDIATELY ) ; } return ret ; }
public static final javax.crypto.Cipher getInstance ( java.lang.String transformation , java.lang.String provider ) throws java.security.NoSuchAlgorithmException , java.security.NoSuchProviderException , javax.crypto.NoSuchPaddingException { if ( ( provider == null ) || ( ( provider.length ( ) ) == 0 ) ) { throw new java.lang.IllegalArgumentException ( "Missing provider" ) ; } java.security.Provider p = java.security.Security.getProvider ( provider ) ; if ( p == null ) { throw new java.security.NoSuchProviderException ( ( "No such provider: " + provider ) ) ; } return javax.crypto.Cipher.getInstance ( transformation , p ) ; }
public void onResume ( ) { if ( com.android.dialer.util.PermissionsUtil.hasPermission ( mActivity , android.Manifest.permission.READ_CONTACTS ) ) { mContactInfoCache.start ( ) ; } mContactsPreferences.refreshValue ( ContactsPreferences.DISPLAY_ORDER_KEY ) ; mIsSpamEnabled = com.android.dialer.spam.Spam.get ( mActivity ) . isSpamEnabled ( ) ; getDuo ( ) . registerListener ( this ) ; notifyDataSetChanged ( ) ; }
public void run ( ) { android.app.Notification n = new android.app.Notification ( R.drawable.icon2 , "tock tock tock" , java.lang.System.currentTimeMillis ( ) ) ; n.setLatestEventInfo ( this , "Persistent #2" , "Notify me!!!" , makeIntent ( ) ) ; mNM.notify ( 2 , n ) ; }
public boolean generate ( java.lang.String key ) { try { return ( mBinder.generate ( key , ( - 1 ) ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
public static long test_interface ( java.util.Map map ) { java.lang.Integer intobj = new java.lang.Integer ( 0 ) ; java.lang.String s = "asdf" ; long start = java.lang.System.currentTimeMillis ( ) ; for ( int i = 0 ; i < 1000000 ; i ++ ) { map.put ( intobj , s ) ; } long end = java.lang.System.currentTimeMillis ( ) ; return end - start ; }
protected void onPostExecute ( android.database.Cursor cursor ) { if ( ! ( isCancelled ( ) ) ) { com.android.internal.logging.MetricsLogger.action ( getContext ( ) , MetricsLogger.ACTION_SEARCH_RESULTS , cursor.getCount ( ) ) ; setResultsCursor ( cursor ) ; setResultsVisibility ( ( ( cursor.getCount ( ) ) > 0 ) ) ; } else if ( cursor != null ) { cursor.close ( ) ; } }
public java.util.Map < com.android.ide.common.api.INode , com.android.ide.common.api.Rect > measureChildren ( com.android.ide.common.api.INode parent , com.android.ide.common.api.IClientRulesEngine.AttributeFilter filter ) { java.util.Map < com.android.ide.common.api.INode , com.android.ide.common.api.Rect > map = mEditor.measureChildren ( parent , filter ) ; if ( map == null ) { map = java.util.Collections.emptyMap ( ) ; } return map ; }
public final void init ( int opmode , java.security.Key key , java.security.spec.AlgorithmParameterSpec params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { checkMode ( opmode ) ; getSpi ( key ) . engineInit ( opmode , key , params , random ) ; mode = opmode ; }
public void test_newSAXParser ( ) { try { javax.xml.parsers.SAXParser sp = spf.newSAXParser ( ) ; assertTrue ( ( sp instanceof javax.xml.parsers.SAXParser ) ) ; sp.parse ( is1 , new tests.api.javax.xml.parsers.SAXParserFactoryTest.MyHandler ( ) ) ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( "Unexpected exception" , e ) ; } spf.setValidating ( true ) ; try { javax.xml.parsers.SAXParser sp = spf.newSAXParser ( ) ; } catch ( javax.xml.parsers.ParserConfigurationException e ) { } catch ( org.xml.sax.SAXException e ) { throw new java.lang.RuntimeException ( "Unexpected exception" , e ) ; } }
private void responseScanStatus ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { com.android.internal.telephony.NetworkScanResult nsr = new com.android.internal.telephony.NetworkScanResult ( 0 , responseInfo.error , null ) ; com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , nsr ) ; mRil.processResponseDone ( rr , responseInfo , nsr ) ; } }
public void setLength ( long newLength ) throws java.io.IOException { if ( newLength < 0 ) { throw new java.lang.IllegalArgumentException ( "newLength < 0" ) ; } try { Libcore.os.ftruncate ( fd , newLength ) ; } catch ( android.system.ErrnoException errnoException ) { throw errnoException.rethrowAsIOException ( ) ; } long filePointer = getFilePointer ( ) ; if ( filePointer > newLength ) { seek ( newLength ) ; } }
public int currentCodePoint ( ) { int ch = current ( ) ; if ( android.icu.text.UTF16.isLeadSurrogate ( ( ( char ) ( ch ) ) ) ) { next ( ) ; int ch2 = current ( ) ; previous ( ) ; if ( android.icu.text.UTF16.isTrailSurrogate ( ( ( char ) ( ch2 ) ) ) ) { return android.icu.impl.UCharacterProperty.getRawSupplementary ( ( ( char ) ( ch ) ) , ( ( char ) ( ch2 ) ) ) ; } } return ch ; }
private void updateDeviceNumberRow ( ) { if ( ( deviceNumberTextView ) == null ) { return ; } if ( ( isInMultiWindowMode ) || ( android.text.TextUtils.isEmpty ( primaryCallState.callbackNumber ) ) ) { deviceNumberTextView.setVisibility ( View.GONE ) ; deviceNumberDivider.setVisibility ( View.GONE ) ; return ; } deviceNumberTextView.setText ( context.getString ( R.string.contact_grid_callback_number , primaryCallState.callbackNumber ) ) ; deviceNumberTextView.setVisibility ( View.VISIBLE ) ; if ( primaryInfo.shouldShowLocation ) { deviceNumberDivider.setVisibility ( View.VISIBLE ) ; } }
public long getSize ( com.android.ahat.InstanceUtils.PathElement element , com.android.tools.perflib.heap.Heap heap ) { if ( element == null ) { return mSnapshot.getHeapSize ( heap ) ; } if ( element.isDominator ) { int index = mSnapshot.getHeapIndex ( heap ) ; return element.instance.getRetainedSize ( index ) ; } return 0 ; }
public void testGoogleAccountLoginWatcher ( ) throws java.lang.Exception { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( mInstrumentation , "Contacts" ) ; }
public void importFromJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0004.io.ImportHelper loader , @ javax.annotation.Nonnull java.lang.Object node ) { com.android.jack.ir.ast.JParameterRef jRef = ( ( com.android.jack.ir.ast.JParameterRef ) ( node ) ) ; localId = loader.getVariableSymbols ( ) . getId ( jRef.getParameter ( ) ) ; sourceInfo = jRef.getSourceInfo ( ) ; }
static java.io.File crunchFile ( @ com.android.annotations.NonNull java.io.File file , com.android.ide.common.internal.PngCruncher aaptCruncher ) throws com.android.ide.common.internal.PngException , java.io.IOException { java.io.File outFile = java.io.File.createTempFile ( "pngWriterTest" , ".png" ) ; outFile.deleteOnExit ( ) ; try { aaptCruncher.crunchPng ( file , outFile ) ; } catch ( com.android.ide.common.internal.PngException e ) { e.printStackTrace ( ) ; throw e ; } java.lang.System.out.println ( ( "crunch " + ( file.getPath ( ) ) ) ) ; return outFile ; }
public void testAdd2_IndexOutOfBoundsException ( ) { try { java.util.concurrent.CopyOnWriteArrayList c = new java.util.concurrent.CopyOnWriteArrayList ( ) ; c.add ( "asdasd" ) ; c.add ( "asdasdasd" ) ; c.add ( 100 , "qwerty" ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } }
synchronized void nAllocationData3D ( long id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , java.lang.Object d , int sizeBytes , android.support.v8.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationData3D ( mContext , id , xoff , yoff , zoff , mip , w , h , depth , d , sizeBytes , dt.mID ) ; }
private javax.net.ssl.SSLSocketFactory makeSocketFactory ( javax.net.ssl.KeyManager [ ] keyManagers , javax.net.ssl.TrustManager [ ] trustManagers ) { try { org.apache.harmony.xnet.provider.jsse.OpenSSLContextImpl sslContext = new org.apache.harmony.xnet.provider.jsse.OpenSSLContextImpl ( ) ; sslContext.engineInit ( keyManagers , trustManagers , null ) ; sslContext.engineGetClientSessionContext ( ) . setPersistentCache ( mSessionCache ) ; return sslContext.engineGetSocketFactory ( ) ; } catch ( java.security.KeyManagementException e ) { android.util.Log.wtf ( android.net.SSLCertificateSocketFactory.TAG , e ) ; return ( ( javax.net.ssl.SSLSocketFactory ) ( javax.net.ssl.SSLSocketFactory.getDefault ( ) ) ) ; } }
public void updateReachability ( @ android.support.annotation.NonNull android.content.Context context , @ android.support.annotation.NonNull java.util.List < java.lang.String > numbers ) { com.android.dialer.common.Assert.isMainThread ( ) ; com.android.dialer.common.Assert.isNotNull ( context ) ; com.android.dialer.common.Assert.isNotNull ( numbers ) ; }
protected com.android.sched.vfs.OutputVFile getOutputDex ( @ javax.annotation.Nonnull com.android.sched.vfs.OutputVDir outputVDir , int dexCount ) throws com.android.jack.backend.dex.DexWritingException { assert dexCount >= 1 ; java.lang.String dexName ; if ( dexCount == 1 ) { dexName = DexFileWriter.DEX_FILENAME ; } else { dexName = ( ( DexFileWriter.DEX_PREFIX ) + dexCount ) + ( BinaryKind.DEX.getFileExtension ( ) ) ; } try { return outputVDir.createOutputVFile ( new com.android.sched.vfs.VPath ( dexName , '/' ) ) ; } catch ( com.android.sched.util.file.CannotCreateFileException e ) { throw new com.android.jack.backend.dex.DexWritingException ( e ) ; } }
private void processLogMessages ( java.util.List < com.android.ddmuilib.logcat.LogCatMessage > newMessages ) { if ( ( newMessages.size ( ) ) > 0 ) { java.util.List < com.android.ddmuilib.logcat.LogCatMessage > deletedMessages ; synchronized ( mLogMessages ) { deletedMessages = mLogMessages.ensureSpace ( newMessages.size ( ) ) ; mLogMessages.appendMessages ( newMessages ) ; } sendLogChangedEvent ( newMessages , deletedMessages ) ; } }
public void testEnterSoftApModeActiveWhenAlreadyInSoftApMode ( ) throws java.lang.Exception { when ( mWifiInjector.makeWificond ( ) ) . thenReturn ( mWificond ) ; when ( mWificond.createApInterface ( ) ) . thenReturn ( null ) ; mWifiStateMachinePrime.enterSoftAPMode ( ) ; mLooper.dispatchNext ( ) ; org.junit.Assert.assertEquals ( "SoftAPModeState" , mWifiStateMachinePrime.getCurrentMode ( ) ) ; mLooper.dispatchNext ( ) ; org.junit.Assert.assertEquals ( "SoftAPModeState" , mWifiStateMachinePrime.getCurrentMode ( ) ) ; enterSoftApActiveMode ( ) ; verify ( mWificond ) . tearDownInterfaces ( ) ; }
public void run ( ) { if ( mPhoneStoragePermissionApproved ) { if ( isAmbient ( ) ) { mPhoneStoragePermissionButton.setCompoundDrawablesWithIntrinsicBounds ( R.drawable.ic_permission_approved_bw , 0 , 0 , 0 ) ; } else { mPhoneStoragePermissionButton.setCompoundDrawablesWithIntrinsicBounds ( R.drawable.ic_permission_approved , 0 , 0 , 0 ) ; } } else { if ( isAmbient ( ) ) { mPhoneStoragePermissionButton.setCompoundDrawablesWithIntrinsicBounds ( R.drawable.ic_permission_denied_bw , 0 , 0 , 0 ) ; } else { mPhoneStoragePermissionButton.setCompoundDrawablesWithIntrinsicBounds ( R.drawable.ic_permission_denied , 0 , 0 , 0 ) ; } } }
public boolean SendPassThruPlay ( android.bluetooth.BluetoothDevice mDevice ) { log ( "SendPassThruPlay + " ) ; com.android.bluetooth.avrcpcontroller.AvrcpControllerService avrcpCtrlService = com.android.bluetooth.avrcpcontroller.AvrcpControllerService.getAvrcpControllerService ( ) ; if ( ( ( avrcpCtrlService != null ) && ( mDevice != null ) ) && ( avrcpCtrlService.getConnectedDevices ( ) . contains ( mDevice ) ) ) { avrcpCtrlService.sendPassThroughCmd ( mDevice , AvrcpControllerService.PASS_THRU_CMD_ID_PLAY , AvrcpControllerService.KEY_STATE_PRESSED ) ; avrcpCtrlService.sendPassThroughCmd ( mDevice , AvrcpControllerService.PASS_THRU_CMD_ID_PLAY , AvrcpControllerService.KEY_STATE_RELEASED ) ; log ( " SendPassThruPlay command sent - " ) ; return true ; } else { log ( "passthru command not sent, connection unavailable" ) ; return false ; } }
public void dumpState ( java.io.PrintWriter pw ) { pw.println ( ( " mSavedTime=" + ( mSavedNitzTime ) ) ) ; pw.println ( ( " mNeedCountryCodeForNitz=" + ( mNeedCountryCodeForNitz ) ) ) ; pw.println ( ( " mLatestNitzSignal=" + ( mLatestNitzSignal ) ) ) ; pw.println ( ( " mGotCountryCode=" + ( mGotCountryCode ) ) ) ; pw.println ( ( " mSavedTimeZone=" + ( mSavedTimeZoneId ) ) ) ; pw.println ( ( " mNitzTimeZoneDetectionSuccessful=" + ( mNitzTimeZoneDetectionSuccessful ) ) ) ; pw.println ( ( " mWakeLock=" + ( mWakeLock ) ) ) ; pw.flush ( ) ; }
public void testStrictElement_noDifference ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String higherPriority = "" + ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\" tools:node=\"strict\"" ) + " android:exported=\"true\">\n" ) + " <action android:label=\"@string/foo\"/>\n" ) + " </activity>\n" ) + "\n" ) + "</manifest>" ) ; java.lang.String lowerPriority = "" + ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\" " ) + " android:exported=\"true\">\n" ) + " <action android:label=\"@string/foo\"/>\n" ) + " </activity>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument refDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "higherPriority" ) , higherPriority ) ; com.android.manifmerger.XmlDocument otherDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "lowerPriority" ) , lowerPriority ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( new com.android.utils.StdLogger ( StdLogger.Level.VERBOSE ) ) ; com.google.common.base.Optional < com.android.manifmerger.XmlDocument > result = refDocument.merge ( otherDocument , mergingReportBuilder ) ; assertTrue ( result.isPresent ( ) ) ; com.android.manifmerger.XmlDocument resultDocument = result.get ( ) ; com.google.common.base.Optional < com.android.manifmerger.XmlElement > activityOne = resultDocument.getRootNode ( ) . getNodeByTypeAndKey ( ManifestModel.NodeTypes.ACTIVITY , "com.example.lib3.activityOne" ) ; assertTrue ( activityOne.isPresent ( ) ) ; java.io.ByteArrayOutputStream byteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; resultDocument.write ( byteArrayOutputStream ) ; java.util.logging.Logger.getAnonymousLogger ( ) . info ( byteArrayOutputStream.toString ( ) ) ; assertFalse ( refDocument.getRootNode ( ) . getNodeByTypeAndKey ( ManifestModel.NodeTypes.ACTIVITY , "com.example.lib3.activityOne" ) . get ( ) . compareTo ( activityOne.get ( ) ) . isPresent ( ) ) ; }
public void setDataEnabled ( int subId , boolean enable ) { try { android.util.Log.d ( android.telephony.TelephonyManager.TAG , ( "setDataEnabled: enabled=" + enable ) ) ; com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) telephony.setDataEnabled ( subId , enable ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#setDataEnabled" , e ) ; } }
public java.lang.String toHuman ( ) { return toString ( ) ; }
private void disableComponent ( ) { final java.lang.String [ ] components = new java.lang.String [ ] { com.android.cts.verifier.managedprovisioning.ByodHelperActivity.class . getName ( ) , com.android.cts.verifier.managedprovisioning.WorkNotificationTestActivity.class . getName ( ) , com.android.cts.verifier.managedprovisioning.WorkStatusTestActivity.class . getName ( ) , PermissionLockdownTestActivity.ACTIVITY_ALIAS , com.android.cts.verifier.managedprovisioning.AuthenticationBoundKeyTestActivity.class . getName ( ) } ; for ( java.lang.String component : components ) { getPackageManager ( ) . setComponentEnabledSetting ( new android.content.ComponentName ( this , component ) , PackageManager.COMPONENT_ENABLED_STATE_DISABLED , PackageManager.DONT_KILL_APP ) ; } }
com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVFile getVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir parent , @ javax.annotation.Nonnull java.lang.String name ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void accept ( java.util.List < java.lang.String > result ) { if ( ( ( result != null ) && ( ( result.size ( ) ) > 0 ) ) && ( result.contains ( mTag1 ) ) ) { status = PASS ; } else { logFail ( ) ; status = FAIL ; } next ( ) ; }
public void close ( java.io.FileDescriptor fd ) throws android.system.ErrnoException { try { if ( fd.isSocket$ ( ) ) { if ( libcore.io.BlockGuardOs.isLingerSocket ( fd ) ) { dalvik.system.BlockGuard.getThreadPolicy ( ) . onNetwork ( ) ; } untagSocket ( fd ) ; } } catch ( android.system.ErrnoException ignored ) { } os.close ( fd ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; this . localAddr1 = new java.net.InetSocketAddress ( "127.0.0.1" , tests.support.Support_PortManager.getNextPort ( ) ) ; this . channel1 = java.nio.channels.SocketChannel.open ( ) ; this . channel2 = java.nio.channels.SocketChannel.open ( ) ; this . server1 = new java.net.ServerSocket ( localAddr1.getPort ( ) ) ; }
public void testEndCallWithNoForegroundCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito.mock ( com.android.server.telecom.Call.class ) ; org.mockito.Mockito.when ( call.getState ( ) ) . thenReturn ( CallState.ACTIVE ) ; org.mockito.Mockito.when ( mFakeCallsManager.getFirstCallWithState ( org.mockito.Matchers.argThat ( new com.android.server.telecom.tests.TelecomServiceImplTest.IntVarArgMatcher ( ) ) ) ) . thenReturn ( call ) ; assertTrue ( mTSIBinder.endCall ( ) ) ; org.mockito.Mockito.verify ( call ) . disconnect ( ) ; }
public void dumpShowsPendingConnectionTrace ( ) throws java.lang.Exception { mLastMileLogger.reportConnectionEvent ( BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect" ) ; org.junit.Assert.assertTrue ( getDumpString ( ) . contains ( "rdev_connect" ) ) ; }
public void onCreate ( android.os.Bundle savedState ) { if ( com.android.dialer.app.list.OldSpeedDialFragment.DEBUG ) { com.android.dialer.common.LogUtil.d ( "OldSpeedDialFragment.onCreate" , null ) ; } android.os.Trace.beginSection ( ( ( com.android.dialer.app.list.OldSpeedDialFragment.TAG ) + " onCreate" ) ) ; super . onCreate ( savedState ) ; contactTileAdapter = new com.android.dialer.app.list.PhoneFavoritesTileAdapter ( getActivity ( ) , contactTileAdapterListener , this ) ; contactTileAdapter.setPhotoLoader ( com.android.dialer.contactphoto.ContactPhotoManager.getInstance ( getActivity ( ) ) ) ; animationDuration = getResources ( ) . getInteger ( R.integer.fade_duration ) ; android.os.Trace.endSection ( ) ; }
public void testOnSetUpAdapterMultipleInstance ( ) throws java.lang.Exception { java.lang.String output = "android.hardware.foo@1.1::IFoo/default\n" + ( ( "android.hardware.foo@1.1::IFoo/test\n" + "android.hardware.foo@1.1::IFooSecond/default\n" ) + "android.hardware.foo@1.1::IFooSecond/slot/1\n" ) ; doReturn ( output ) . when ( mDevice ) . executeShellCommand ( java.lang.String.format ( LIST_HAL_CMD , TEST_HAL_PACKAGE ) ) ; mPreparer.setUp ( mDevice , mBuildInfo ) ; java.util.List < java.lang.String > adapterCmds = new java.util.ArrayList < java.lang.String > ( ) ; adapterCmds.add ( java.lang.String.format ( "%s /data/nativetest64/%s %s %s %d" , SCRIPT_PATH , TEST_HAL_ADAPTER_BINARY , "IFoo" , "default" , THREAD_COUNT_DEFAULT ) ) ; adapterCmds.add ( java.lang.String.format ( "%s /data/nativetest64/%s %s %s %d" , SCRIPT_PATH , TEST_HAL_ADAPTER_BINARY , "IFoo" , "test" , THREAD_COUNT_DEFAULT ) ) ; adapterCmds.add ( java.lang.String.format ( "%s /data/nativetest64/%s %s %s %d" , SCRIPT_PATH , TEST_HAL_ADAPTER_BINARY , "IFooSecond" , "default" , THREAD_COUNT_DEFAULT ) ) ; adapterCmds.add ( java.lang.String.format ( "%s /data/nativetest64/%s %s %s %d" , SCRIPT_PATH , TEST_HAL_ADAPTER_BINARY , "IFooSecond" , "slot/1" , THREAD_COUNT_DEFAULT ) ) ; for ( java.lang.String cmd : adapterCmds ) { verify ( mDevice , times ( 1 ) ) . executeShellCommand ( eq ( cmd ) ) ; } }
protected void onPrintJobQueued ( android.printservice.PrintJob printJob ) { if ( com.android.bips.BuiltInPrintService.DEBUG ) android.util.Log.d ( com.android.bips.BuiltInPrintService.TAG , "onPrintJobQueued" ) ; if ( com.android.bips.util.WifiMonitor.isConnected ( this ) ) { mJobQueue.print ( new com.android.bips.LocalPrintJob ( this , mBackend , printJob ) ) ; } else { printJob.fail ( getString ( R.string.wifi_not_connected ) ) ; } }
public void testReadProcVersion ( ) throws java.io.IOException { java.io.File file = new java.io.File ( "/proc/version" ) ; try ( java.io.FileInputStream input = new java.io.FileInputStream ( file ) ) { assertTrue ( ( ( input.available ( ) ) == 0 ) ) ; } }
public void setDestDir ( java.io.File destDir ) { mDestDir = destDir ; }
public final com.android.tools.perflib.heap.ClassObj findClass ( long id ) { for ( com.android.tools.perflib.heap.Heap mHeap : mHeaps ) { com.android.tools.perflib.heap.ClassObj theClass = mHeap.getClass ( id ) ; if ( theClass != null ) { return theClass ; } } return null ; }
public void widgetDefaultSelected ( org.eclipse.swt.events.SelectionEvent e ) { }
public boolean post ( java.lang.Runnable action ) { android.os.Handler handler ; if ( ( mAttachInfo ) != null ) { handler = mAttachInfo.mHandler ; } else { android.view.ViewRoot.getRunQueue ( ) . post ( action ) ; return true ; } return handler.post ( action ) ; }
private static java.lang.String newClassName ( java.lang.String className , proguard.classfile.editor.Clazz referencedClass ) { if ( referencedClass == null ) { return className ; } java.lang.String newClassName = referencedClass.getName ( ) ; if ( ( className.charAt ( 0 ) ) == ( ClassConstants.INTERNAL_TYPE_ARRAY ) ) { newClassName = ( ( className.substring ( 0 , ( ( className.indexOf ( ClassConstants.INTERNAL_TYPE_CLASS_START ) ) + 1 ) ) ) + newClassName ) + ( ClassConstants.INTERNAL_TYPE_CLASS_END ) ; } return newClassName ; }
private void setNewPhone ( com.android.internal.telephony.PhoneBase phone ) { mCurrentPhone = phone ; if ( phone instanceof com.android.internal.telephony.gsm.GSMPhone ) { if ( com.android.internal.telephony.uicc.UiccController.DBG ) log ( "New phone is GSMPhone" ) ; updateCurrentCard ( IccCard.CARD_IS_3GPP ) ; } else if ( phone instanceof com.android.internal.telephony.cdma.CDMALTEPhone ) { if ( com.android.internal.telephony.uicc.UiccController.DBG ) log ( "New phone type is CDMALTEPhone" ) ; updateCurrentCard ( IccCard.CARD_IS_3GPP ) ; } else if ( phone instanceof com.android.internal.telephony.cdma.CDMAPhone ) { if ( com.android.internal.telephony.uicc.UiccController.DBG ) log ( "New phone type is CDMAPhone" ) ; updateCurrentCard ( IccCard.CARD_IS_NOT_3GPP ) ; } else { android.util.Log.e ( com.android.internal.telephony.uicc.UiccController.LOG_TAG , "Unhandled phone type. Critical error!" ) ; } }
public android.net.IpSecTransform.Builder setUnderlyingNetwork ( android.net.Network net ) { mConfig.setNetwork ( net ) ; return this ; }
public android.net.IpConfiguration readIpAndProxyConfigurations ( ) { android.util.SparseArray < android.net.IpConfiguration > networks = readIpAndProxyConfigurations ( com.android.server.ethernet.EthernetConfigStore.ipConfigFile ) ; if ( ( networks.size ( ) ) == 0 ) { android.util.Log.w ( com.android.server.ethernet.EthernetConfigStore.TAG , "No Ethernet configuration found. Using default." ) ; return new android.net.IpConfiguration ( android.net.IpConfiguration.IpAssignment.DHCP , android.net.IpConfiguration.ProxySettings.NONE , null , null ) ; } if ( ( networks.size ( ) ) > 1 ) { android.util.Log.w ( com.android.server.ethernet.EthernetConfigStore.TAG , "Multiple Ethernet configurations detected. Only reading first one." ) ; } return networks.valueAt ( 0 ) ; }
private static java.lang.String getNativeLibraryDirectory ( ) { android.content.pm.ApplicationInfo ai = org.chromium.base.ContextUtils.getApplicationContext ( ) . getApplicationInfo ( ) ; if ( ( ( ( ai.flags ) & ( android.content.pm.ApplicationInfo.FLAG_UPDATED_SYSTEM_APP ) ) != 0 ) || ( ( ( ai.flags ) & ( android.content.pm.ApplicationInfo.FLAG_SYSTEM ) ) == 0 ) ) { return ai.nativeLibraryDir ; } return "/system/lib/" ; }
public int fetchIsimRecords ( com.android.internal.telephony.IccFileHandler iccFh , android.os.Handler h ) { iccFh.loadEFTransparent ( com.android.internal.telephony.IccConstants.EF_IMPI , h.obtainMessage ( IccRecords.EVENT_GET_ICC_RECORD_DONE , new com.android.internal.telephony.ims.IsimUiccRecords.EfIsimImpiLoaded ( ) ) ) ; iccFh.loadEFLinearFixedAll ( com.android.internal.telephony.IccConstants.EF_IMPU , h.obtainMessage ( IccRecords.EVENT_GET_ICC_RECORD_DONE , new com.android.internal.telephony.ims.IsimUiccRecords.EfIsimImpuLoaded ( ) ) ) ; iccFh.loadEFTransparent ( com.android.internal.telephony.IccConstants.EF_DOMAIN , h.obtainMessage ( IccRecords.EVENT_GET_ICC_RECORD_DONE , new com.android.internal.telephony.ims.IsimUiccRecords.EfIsimDomainLoaded ( ) ) ) ; return 3 ; }
public static void setMultiprocessEnabled ( boolean enabled ) { android.webkit.WebViewZygote.sMultiprocessEnabled = enabled ; final java.lang.String serviceName = android.webkit.WebViewZygote.getServiceName ( ) ; if ( serviceName == null ) return ; if ( enabled && ( ( android.webkit.WebViewZygote.sZygote ) == null ) ) { android.os.SystemService.start ( serviceName ) ; } else { android.os.SystemService.stop ( serviceName ) ; android.webkit.WebViewZygote.sZygote = null ; } }
public void logrb ( java.util.logging.Level level , java.lang.String sourceClass , java.lang.String sourceMethod , java.lang.String bundleName , java.lang.String msg , java.lang.Throwable thrown ) { if ( ( ( level.intValue ( ) ) < ( levelValue ) ) || ( ( levelValue ) == ( java.util.logging.Logger.offValue ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( level , msg ) ; lr.setSourceClassName ( sourceClass ) ; lr.setSourceMethodName ( sourceMethod ) ; lr.setThrown ( thrown ) ; doLog ( lr , bundleName ) ; }
public boolean canReportAsInvalidNumber ( ) { switch ( nameSource ) { case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_DEFAULT_DIRECTORY : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_EXTENDED_DIRECTORY : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CNAP : case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.NONE : return false ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.PEOPLE_API : com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo peopleApiInfo = phoneLookupInfo.getPeopleApiInfo ( ) ; return ( ( peopleApiInfo.getInfoType ( ) ) != ( com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType.UNKNOWN ) ) && ( ! ( peopleApiInfo.getPersonId ( ) . isEmpty ( ) ) ) ; default : throw com.android.dialer.common.Assert.createUnsupportedOperationFailException ( java.lang.String.format ( "Unsupported name source: %s" , nameSource ) ) ; } }
public void testInterfaceCountersUdp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , false , 1000 , false ) ; }
public static com.android.sdklib.repository.descriptors.PkgDesc.Builder newAddon ( @ com.android.annotations.NonNull com.android.sdklib.AndroidVersion version , @ com.android.annotations.NonNull com.android.sdklib.repository.MajorRevision revision , @ com.android.annotations.NonNull java.lang.String addonVendor , @ com.android.annotations.NonNull java.lang.String addonNameId ) { com.android.sdklib.repository.descriptors.PkgDesc.Builder p = new com.android.sdklib.repository.descriptors.PkgDesc.Builder ( PkgType.PKG_ADDONS ) ; p.mAndroidVersion = version ; p.mMajorRevision = revision ; p.mVendor = new com.android.sdklib.repository.descriptors.IdDisplay ( addonVendor , addonVendor ) ; p.mNameId = addonNameId ; return p ; }
private void enforceStatusBarPermission ( java.lang.String action , int pid , int uid ) { if ( ( getContext ( ) . checkPermission ( android.Manifest.permission.STATUS_BAR_SERVICE , pid , uid ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { throw new java.lang.SecurityException ( ( "Only system ui may " + action ) ) ; } }
protected void cleanUpAllConnections ( boolean tearDown , java.lang.String reason ) { if ( DBG ) log ( ( ( ( "cleanUpAllConnections: tearDown=" + tearDown ) + " reason=" ) + reason ) ) ; for ( com.android.internal.telephony.dataconnection.ApnContext apnContext : mApnContexts.values ( ) ) { apnContext.setReason ( reason ) ; cleanUpConnection ( tearDown , apnContext ) ; } stopNetStatPoll ( ) ; stopDataStallAlarm ( ) ; mRequestedApnType = com.android.internal.telephony.PhoneConstants.APN_TYPE_DEFAULT ; }
private java.lang.String getIccStateIntentString ( com.android.internal.telephony.IccCardConstants.State state ) { switch ( state ) { case ABSENT : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_ABSENT ; case PIN_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED ; case PUK_REQUIRED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED ; case NETWORK_LOCKED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED ; case READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_READY ; case NOT_READY : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_NOT_READY ; case PERM_DISABLED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_LOCKED ; case CARD_IO_ERROR : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR ; case CARD_RESTRICTED : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_CARD_RESTRICTED ; default : return com.android.internal.telephony.IccCardConstants.INTENT_VALUE_ICC_UNKNOWN ; } }
public void onClick ( android.view.View view ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailMediaPlayer.playButtonListener" , "play button for voicemailUri: %s" , voicemailUri.toString ( ) ) ; if ( ( ( mediaPlayer.getLastPausedVoicemailUri ( ) ) != null ) && ( mediaPlayer.getLastPausedVoicemailUri ( ) . toString ( ) . contentEquals ( voicemailUri.toString ( ) ) ) ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailMediaPlayer.playButtonListener" , "resume playing voicemailUri: %s" , voicemailUri.toString ( ) ) ; newVoicemailViewHolderListener.resumePausedViewHolder ( newVoicemailViewHolder ) ; } else { playVoicemailWhenAvailableLocally ( ) ; } }
private static void printUsage ( @ javax.annotation.Nonnull org.kohsuke.args4j.CmdLineParser parser ) { java.lang.System.err.print ( "Main: " ) ; parser.printSingleLineUsage ( java.lang.System.err ) ; java.lang.System.err.println ( ) ; parser.printUsage ( java.lang.System.err ) ; }
public android.net.Uri insert ( android.net.Uri uri , android.content.ContentValues initialValues ) { int match = com.android.providers.media.MediaProvider.URI_MATCHER.match ( uri ) ; java.util.ArrayList < java.lang.Long > notifyRowIds = new java.util.ArrayList < java.lang.Long > ( ) ; android.net.Uri newUri = insertInternal ( uri , match , initialValues , notifyRowIds ) ; notifyMtp ( notifyRowIds ) ; if ( ( newUri != null ) && ( match != ( com.android.providers.media.MediaProvider.MTP_OBJECTS ) ) ) { getContext ( ) . getContentResolver ( ) . notifyChange ( uri , null ) ; } return newUri ; }
public void testGetValues002_Byte ( ) { org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester ( "breakpointByte" , StackTrace002Debuggee.BYTE_SIGNAL ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod ( "runBreakpointByte" ) ; methodInfo.addVariable ( "param" , new org.apache.harmony.jpda.tests.framework.jdwp.Value ( StackTrace002Debuggee.BYTE_PARAM_VALUE ) ) ; runStackFrameTest ( tester ) ; }
public boolean equals ( @ javax.annotation.Nullable java.lang.Object object ) { if ( object == ( this ) ) { return true ; } if ( object instanceof com.google.common.collect.Multimap ) { com.google.common.collect.Multimap < ? , ? > that = ( ( com.google.common.collect.Multimap < ? , ? > ) ( object ) ) ; return ( ( this . size ( ) ) == ( that.size ( ) ) ) && ( asMap ( ) . equals ( that.asMap ( ) ) ) ; } return false ; }
public boolean enableNetworkWithoutConnect ( int netId ) { if ( com.android.server.wifi.WifiNative.DBG ) logDbg ( ( "enableNetworkWithoutConnect nid=" + ( java.lang.Integer.toString ( netId ) ) ) ) ; return doBooleanCommand ( ( ( ( "ENABLE_NETWORK " + netId ) + " " ) + "no-connect" ) ) ; }
public void testAesCbcHmacSha1Udp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth ) ; }
public void testE1 ( ) { dot.junit.opcodes.aput_boolean.d.T_aput_boolean_1 t = new dot.junit.opcodes.aput_boolean.d.T_aput_boolean_1 ( ) ; boolean [ ] arr = new boolean [ 2 ] ; try { t.run ( arr , 2 , true ) ; fail ( "expected ArrayIndexOutOfBoundsException" ) ; } catch ( java.lang.ArrayIndexOutOfBoundsException aie ) { } }
int doTransfer ( java.io.FileDescriptor fd ) throws java.io.IOException { try { if ( ( direction ) == ( java.nio.IoVec.Direction.READV ) ) { int result = Libcore.os.readv ( fd , ioBuffers , offsets , byteCounts ) ; if ( result == 0 ) { result = - 1 ; } return result ; } else { return Libcore.os.writev ( fd , ioBuffers , offsets , byteCounts ) ; } } catch ( libcore.io.ErrnoException errnoException ) { throw errnoException.rethrowAsIOException ( ) ; } }
public void rebootRecoveryWithCommand ( java.lang.String command ) { if ( com.android.server.RecoverySystemService.DEBUG ) android.util.Slog.d ( com.android.server.RecoverySystemService.TAG , ( ( "rebootRecoveryWithCommand: [" + command ) + "]" ) ) ; synchronized ( com.android.server.RecoverySystemService.sRequestLock ) { if ( ! ( setupOrClearBcb ( true , command ) ) ) { return ; } android.os.PowerManager pm = ( ( android.os.PowerManager ) ( mContext.getSystemService ( Context.POWER_SERVICE ) ) ) ; pm.reboot ( PowerManager.REBOOT_RECOVERY ) ; } }
void flushBatchResults ( int clientIf ) { logd ( ( "flushPendingBatchResults - clientIf = " + clientIf ) ) ; if ( ( mBatchScanParms.fullScanClientIf ) != ( - 1 ) ) { resetCountDownLatch ( ) ; gattClientReadScanReportsNative ( mBatchScanParms.fullScanClientIf , com.android.bluetooth.gatt.ScanManager.SCAN_RESULT_TYPE_FULL ) ; waitForCallback ( ) ; } if ( ( mBatchScanParms.truncatedScanClientIf ) != ( - 1 ) ) { resetCountDownLatch ( ) ; gattClientReadScanReportsNative ( mBatchScanParms.truncatedScanClientIf , com.android.bluetooth.gatt.ScanManager.SCAN_RESULT_TYPE_TRUNCATED ) ; waitForCallback ( ) ; } setBatchAlarm ( ) ; }
public void onRangingFailure ( int rangingId , int reason , java.lang.String description ) { if ( android.net.wifi.nan.WifiNanManager.VDBG ) { android.util.Log.v ( android.net.wifi.nan.WifiNanManager.TAG , ( ( ( ( ( "onRangingSuccess: rangingId=" + rangingId ) + ", reason=" ) + reason ) + ", description=" ) + description ) ) ; } android.os.Message msg = mHandler.obtainMessage ( android.net.wifi.nan.WifiNanManager.WifiNanEventCallbackProxy.CALLBACK_RANGING_FAILURE ) ; msg.arg1 = rangingId ; msg.arg2 = reason ; msg.obj = description ; mHandler.sendMessage ( msg ) ; }
public boolean canUpgradeToRttCall ( ) { android.telecom.PhoneAccount phoneAccount = getPhoneAccount ( ) ; if ( phoneAccount == null ) { return false ; } if ( ! ( phoneAccount.hasCapabilities ( PhoneAccount.CAPABILITY_RTT ) ) ) { return false ; } if ( isActiveRttCall ( ) ) { return false ; } if ( isVideoCall ( ) ) { return false ; } if ( isConferenceCall ( ) ) { return false ; } if ( com.android.incallui.call.CallList.getInstance ( ) . hasActiveRttCall ( ) ) { return false ; } return true ; }
private java.lang.String prepareProgressString ( java.lang.String progressMessage ) { return com.google.gct.testing.GoogleCloudTestingUtils.shouldShowProgressTimestamps ( ) ? ( ( ( progressMessage.substring ( 0 , ( ( progressMessage.length ( ) ) - 1 ) ) ) + "\t" ) + ( java.lang.System.currentTimeMillis ( ) ) ) + "\n" : progressMessage ; }
private vogar.tasks.Task createCreateDexJarTask ( vogar.Classpath classpath , java.io.File classpathElement , java.lang.String name , vogar.Action action , java.io.File localDex , java.io.File localTempDir ) { vogar.tasks.Task dex ; if ( run.useJack ) { dex = new vogar.android.JackDexTask ( run , classpath , run.benchmark , name , classpathElement , action , localDex ) ; } else { dex = new vogar.android.DexTask ( run.androidSdk , classpath , run.benchmark , name , classpathElement , action , localDex , localTempDir , run.multidex ) ; } return dex ; }
public static void startMethodTracing ( java.lang.String traceFileName , java.io.FileDescriptor fd , int bufferSize , int flags ) { if ( traceFileName == null ) { throw new java.lang.NullPointerException ( "traceFileName == null" ) ; } if ( fd == null ) { throw new java.lang.NullPointerException ( "fd == null" ) ; } dalvik.system.VMDebug.startMethodTracingNative ( traceFileName , fd , bufferSize , flags ) ; }
public void run ( ) { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create ( mCtx ) ; com.android.rs.test.ScriptC_small_struct s = new com.android.rs.test.ScriptC_small_struct ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; initializeGlobals ( pRS , s ) ; s.forEach_setStruct ( A ) ; s.forEach_setArrayOfStruct ( B ) ; s.invoke_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
public com.android.sched.util.file.Directory checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull java.lang.String string ) throws com.android.sched.util.codec.ParsingException { try { return new com.android.sched.util.file.Directory ( context.getWorkingDirectory ( ) , string , context.getRunnableHooks ( ) , existence , permissions , change ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e.getMessage ( ) , e ) ; } }
public boolean stopFilteringMulticastV4Packets ( ) { if ( com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE ) { return ( ( mSupplicantStaIfaceHal.stopRxFilter ( ) ) && ( mSupplicantStaIfaceHal.addRxFilter ( SupplicantStaIfaceHal.RX_FILTER_TYPE_V4_MULTICAST ) ) ) && ( mSupplicantStaIfaceHal.stopRxFilter ( ) ) ; } else { return ( ( doBooleanCommand ( "DRIVER RXFILTER-STOP" ) ) && ( doBooleanCommand ( "DRIVER RXFILTER-ADD 2" ) ) ) && ( doBooleanCommand ( "DRIVER RXFILTER-START" ) ) ; } }
public com.android.jack.cfg.ControlFlowGraph getCfg ( ) { try ( com.android.sched.util.log.Event optEvent = tracer.open ( JackEventType.REMOVE_DEAD_CODE ) ) { com.android.jack.cfg.CfgBuilder.removeUnaccessibleNode ( blocks , entryBlock , exitBlock , basicBlockId ) ; } return new com.android.jack.cfg.ControlFlowGraph ( method , basicBlockId , entryBlock , exitBlock , blocks ) ; }
private static java.util.List < java.lang.String > listDisplayNames ( java.util.List < com.android.sdklib.devices.Device > devices ) { if ( devices == null ) return null ; java.util.List < java.lang.String > names = new java.util.ArrayList < java.lang.String > ( ) ; for ( com.android.sdklib.devices.Device d : devices ) { names.add ( d.getDisplayName ( ) ) ; } return names ; }
public void testFiveCount_E ( ) throws java.lang.Exception { java.util.TimeZone.setDefault ( java.util.TimeZone.getTimeZone ( "GMT" ) ) ; assertEquals ( "Thu" , formatDate ( java.util.Locale.ENGLISH , "E" ) ) ; assertEquals ( "Thu" , formatDate ( java.util.Locale.ENGLISH , "EE" ) ) ; assertEquals ( "Thu" , formatDate ( java.util.Locale.ENGLISH , "EEE" ) ) ; assertEquals ( "Thursday" , formatDate ( java.util.Locale.ENGLISH , "EEEE" ) ) ; assertEquals ( "T" , formatDate ( java.util.Locale.ENGLISH , "EEEEE" ) ) ; }
protected void run ( @ javax.annotation.Nonnull java.util.List < java.lang.String > cmdLine ) { com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile ( cmdLine.toArray ( new java.lang.String [ cmdLine.size ( ) ] ) ) ; exec.setErr ( errRedirectStream ) ; exec.setOut ( outRedirectStream ) ; exec.setVerbose ( isVerbose ) ; try { if ( ( exec.run ( ) ) != 0 ) { throw new java.lang.RuntimeException ( "Jack compiler exited with an error" ) ; } } catch ( com.android.jack.test.util.ExecFileException e ) { throw new java.lang.RuntimeException ( "An error occurred while running Jack" , e ) ; } }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [ ] id = org.conscrypt.NativeCrypto.SSL_SESSION_session_id ( session ) ; assertNotNull ( id ) ; assertEquals ( 32 , id.length ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public void setRadioPower ( boolean on , android.os.Message result ) { if ( on ) { setRadioState ( RadioState.RADIO_ON ) ; } else { setRadioState ( RadioState.RADIO_OFF ) ; } }
public boolean containsValue ( @ javax.annotation.Nullable java.lang.Object value ) { for ( java.util.Iterator < com.google.common.collect.LinkedListMultimap.Node < K , V > > i = new NodeIterator ( ) ; i.hasNext ( ) ; ) { if ( com.google.common.base.Objects.equal ( i.next ( ) . value , value ) ) { return true ; } } return false ; }
public void testRelativeLayoutCompat ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( RtlDetector.COMPAT ) ; assertEquals ( ( "" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "res/layout/relative.xml:10: Error: To support older versions than API 17 (project specifies 5) you should *also* add android:layout_alignParentLeft=\"true\" [RtlCompat]\n" + " android:layout_alignParentStart=\"true\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/relative.xml:13: Error: To support older versions than API 17 (project specifies 5) you should *also* add android:layout_marginLeft=\"40dip\" [RtlCompat]\n" ) + " android:layout_marginStart=\"40dip\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/relative.xml:24: Error: To support older versions than API 17 (project specifies 5) you should *also* add android:layout_marginLeft=\"40dip\" [RtlCompat]\n" ) + " android:layout_marginStart=\"40dip\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/relative.xml:26: Error: To support older versions than API 17 (project specifies 5) you should *also* add android:layout_toRightOf=\"@id/loading_progress\" [RtlCompat]\n" ) + " android:layout_toEndOf=\"@id/loading_progress\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/relative.xml:29: Error: To support older versions than API 17 (project specifies 5) you should *also* add android:paddingRight=\"120dip\" [RtlCompat]\n" ) + " android:paddingEnd=\"120dip\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/relative.xml:37: Error: To support older versions than API 17 (project specifies 5) you should *also* add android:layout_alignParentLeft=\"true\" [RtlCompat]\n" ) + " android:layout_alignParentStart=\"true\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/relative.xml:38: Error: To support older versions than API 17 (project specifies 5) you should *also* add android:layout_alignRight=\"@id/text\" [RtlCompat]\n" ) + " android:layout_alignEnd=\"@id/text\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/relative.xml:47: Error: To support older versions than API 17 (project specifies 5) you should *also* add android:layout_alignLeft=\"@id/cancel\" [RtlCompat]\n" ) + " android:layout_alignStart=\"@id/cancel\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/relative.xml:48: Error: To support older versions than API 17 (project specifies 5) you should *also* add android:layout_alignRight=\"@id/cancel\" [RtlCompat]\n" ) + " android:layout_alignEnd=\"@id/cancel\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "9 errors, 0 warnings\n" ) ) , lintProject ( "rtl/project-api17.properties=>project.properties" , "rtl/minsdk5targetsdk17.xml=>AndroidManifest.xml" , "rtl/relativeCompat.xml=>res/layout/relative.xml" ) ) ; }
public boolean matches ( com.android.voicemail.impl.CarrierIdentifier carrierIdentifier ) { if ( ! ( mccMnc ( ) . equals ( carrierIdentifier.mccMnc ( ) ) ) ) { return false ; } if ( gid1 ( ) . isPresent ( ) ) { if ( ! ( gid1 ( ) . get ( ) . equals ( carrierIdentifier.gid1 ( ) ) ) ) { return false ; } } return true ; }
public static void checkImageColor ( java.io.File imageFile , int expectedColor ) throws java.io.IOException { assertTrue ( ( ( "File '" + ( imageFile.getAbsolutePath ( ) ) ) + "' does not exist." ) , imageFile.isFile ( ) ) ; java.awt.image.BufferedImage image = javax.imageio.ImageIO.read ( imageFile ) ; int rgb = image.getRGB ( 0 , 0 ) ; assertEquals ( java.lang.String.format ( "Expected: 0x%08X, actual: 0x%08X for file %s" , expectedColor , rgb , imageFile ) , expectedColor , rgb ) ; }
public void test_EmptyList_sort ( ) { java.util.Collections.emptyList ( ) . sort ( ( k1 , k2 ) -> 1 ) ; }
private void markAsReferenced ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface accessorClass , @ javax.annotation.Nonnull com.android.jack.ir.ast.JField field ) { com.android.jack.transformations.ast.inner.ReferencedFromInnerClassMarker marker = accessorClass.getMarker ( com.android.jack.transformations.ast.inner.ReferencedFromInnerClassMarker.class ) ; if ( marker == null ) { marker = new com.android.jack.transformations.ast.inner.ReferencedFromInnerClassMarker ( ) ; accessorClass.addMarker ( marker ) ; } marker.addField ( field ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JLock lockStmt ) { com.android.jack.dx.rop.code.SourcePosition srcPosition = com.android.jack.backend.dex.rop.RopHelper.getSourcePosition ( lockStmt ) ; com.android.jack.dx.rop.code.RegisterSpec lockReg = getRegisterSpec ( lockStmt.getLockExpr ( ) ) ; com.android.jack.dx.rop.code.Insn lockInsn = new com.android.jack.dx.rop.code.ThrowingInsn ( com.android.jack.dx.rop.code.Rops.MONITOR_ENTER , srcPosition , com.android.jack.dx.rop.code.RegisterSpecList.make ( lockReg ) , getCatchTypes ( ) ) ; addInstruction ( lockInsn ) ; return false ; }
public static long determineUserType ( java.lang.Long directoryId , java.lang.Long contactId ) { if ( directoryId != null ) { return com.android.contacts.common.compat.DirectoryCompat.isEnterpriseDirectoryId ( directoryId ) ? com.android.contacts.common.ContactsUtils.USER_TYPE_WORK : com.android.contacts.common.ContactsUtils.USER_TYPE_CURRENT ; } if ( ( ( contactId != null ) && ( contactId != 0L ) ) && ( android.provider.ContactsContract.Contacts.isEnterpriseContactId ( contactId ) ) ) { return com.android.contacts.common.ContactsUtils.USER_TYPE_WORK ; } else { return com.android.contacts.common.ContactsUtils.USER_TYPE_CURRENT ; } }
public boolean isCanceled ( ) { return false ; }
public int hashCode ( ) { int result = 17 ; result = ( 31 * result ) + ( mSupport5gBand ? 1 : 0 ) ; result = ( 31 * result ) + ( mMasterPreference ) ; result = ( 31 * result ) + ( mClusterLow ) ; result = ( 31 * result ) + ( mClusterHigh ) ; return result ; }
private com.android.jack.ir.ast.JExpressionStatement makeRequestCall ( com.android.jack.ir.sourceinfo.SourceInfo info ) { assert ( ( ( lockClass ) != null ) && ( ( requestClass ) != null ) ) && ( ( requestMethodId ) != null ) ; return new com.android.jack.ir.ast.JExpressionStatement ( info , new com.android.jack.ir.ast.JMethodCall ( info , null , requestClass , requestMethodId , false ) ) ; }
public void setUp ( ) throws java.lang.Exception { logd ( "CarrierSignalAgentTest +Setup!" ) ; super . setUp ( getClass ( ) . getSimpleName ( ) ) ; mCarrierSignalAgentUT = new com.android.internal.telephony.CarrierSignalAgent ( mPhone ) ; mBundle = mContextFixture.getCarrierConfigBundle ( ) ; logd ( "CarrierSignalAgentTest -Setup!" ) ; }
final void ensureBootCompleted ( ) { boolean booting ; boolean enableScreen ; synchronized ( this ) { booting = mBooting ; mBooting = false ; enableScreen = ! ( mBooted ) ; mBooted = true ; } if ( booting ) { finishBooting ( ) ; } if ( enableScreen ) { enableScreenAfterBoot ( ) ; } }
static void triggerArrayOOM ( ) { int size = ( 1 * 1024 ) * 1024 ; char [ ] [ ] holder = new char [ size ] [ ] ; int count = Main.ArrayMemEater.blowup ( holder , size ) ; Main.ArrayMemEater.confuseCompilerOptimization ( holder ) ; if ( count < size ) { java.lang.System.out.println ( "Array allocation failed" ) ; } }
public void dispatchMediaKeyEventUnderWakelock ( android.view.KeyEvent keyEvent ) { mMediaFocusControl.dispatchMediaKeyEventUnderWakelock ( keyEvent ) ; }
public E set ( int index , E element ) { synchronized ( l.lock ) { rangeCheck ( index ) ; checkForComodification ( ) ; E x = l.set ( ( index + ( offset ) ) , element ) ; expectedArray = l.getArray ( ) ; return x ; } }
public boolean visitReturn ( lombok.ast.Return node ) { lombok.ast.Expression value = node.astValue ( ) ; if ( value instanceof lombok.ast.VariableReference ) { com.android.tools.lint.client.api.JavaParser.ResolvedNode resolved = mContext.resolve ( value ) ; if ( ( resolved != null ) && ( mVariables.contains ( resolved ) ) ) { mEscapes = true ; } } return super . visitReturn ( node ) ; }
public com.google.common.util.concurrent.ListenableFuture < com.google.common.collect.ImmutableMap < com.android.dialer.DialerPhoneNumber , com.android.dialer.phonelookup.PhoneLookupInfo.DialerBlockedNumberInfo > > getMostRecentInfo ( com.google.common.collect.ImmutableMap < com.android.dialer.DialerPhoneNumber , com.android.dialer.phonelookup.PhoneLookupInfo.DialerBlockedNumberInfo > existingInfoMap ) { com.android.dialer.common.LogUtil.enterBlock ( "DialerBlockedNumberPhoneLookup.getMostRecentPhoneLookupInfo" ) ; return executorService.submit ( ( ) -> queryNumbers ( existingInfoMap.keySet ( ) ) ) ; }
public void dumpHeap ( boolean managed , java.lang.String path , android.os.ParcelFileDescriptor fd ) { android.app.ActivityThread.DumpHeapData dhd = new android.app.ActivityThread.DumpHeapData ( ) ; dhd.path = path ; dhd.fd = fd ; queueOrSendMessage ( android.app.ActivityThread.H.DUMP_HEAP , dhd , ( managed ? 1 : 0 ) ) ; }
public void testUnsuccessfulFollowOnUpdate_olderVersion ( ) throws java.lang.Exception { libcore.tzdata.update2.TimeZoneBundle bundle1 = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION , "002" ) ; assertTrue ( installer.install ( bundle1.getBytes ( ) ) ) ; assertBundleInstalled ( bundle1 ) ; libcore.tzdata.update2.TimeZoneBundle bundle2 = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.OLDER_RULES_VERSION , "001" ) ; assertFalse ( installer.install ( bundle2.getBytes ( ) ) ) ; assertBundleInstalled ( bundle1 ) ; }
public com.android.sched.util.file.Directory checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull java.lang.String string ) throws com.android.sched.util.codec.ParsingException { try { return new com.android.sched.util.file.Directory ( string , context.getRunnableHooks ( ) , existence , permissions , change ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e.getMessage ( ) , e ) ; } }
public org.jetbrains.plugins.gradle.service.project.ModelBuilder < ? extends org.gradle.tooling.model.idea.IdeaProject > getModelBuilder ( @ org.jetbrains.annotations.NotNull final com.intellij.openapi.externalSystem.model.task.ExternalSystemTaskId id , @ org.jetbrains.annotations.Nullable org.jetbrains.plugins.gradle.settings.GradleExecutionSettings settings , @ org.jetbrains.annotations.NotNull org.jetbrains.plugins.gradle.service.project.ProjectConnection connection , @ org.jetbrains.annotations.NotNull com.intellij.openapi.externalSystem.model.task.ExternalSystemTaskNotificationListener listener , boolean downloadLibraries ) { return getModelBuilder ( ( downloadLibraries ? org.gradle.tooling.model.idea.IdeaProject.class : org.gradle.tooling.model.idea.BasicIdeaProject.class ) , id , settings , connection , listener ) ; }
final void getUnchecked ( int pos , double [ ] dst , int dstOffset , int length ) { libcore.io.Memory.peekDoubleArray ( ix ( pos ) , dst , dstOffset , length , ( ! ( nativeByteOrder ) ) ) ; }
public void test_getFileStore ( ) throws java.io.IOException { java.nio.file.FileStore fileStore = provider.getFileStore ( filesSetup.getDataFilePath ( ) ) ; junit.framework.TestCase.assertNotNull ( fileStore ) ; }
private static java.lang.String getErrorMessage ( java.lang.String owner ) { java.lang.String className = owner.substring ( ( ( owner.lastIndexOf ( '/' ) ) + 1 ) ) ; return java.lang.String.format ( "This %1$s should be recycled after use with #recycle()" , className ) ; }
static android.renderscript.cts.CoreMathVerifier.RemainderAndQuotient remainderAndQuotient ( float numerator , float denominator ) { android.renderscript.cts.CoreMathVerifier.RemainderAndQuotient result = new android.renderscript.cts.CoreMathVerifier.RemainderAndQuotient ( ) ; if ( denominator == 0.0F ) { result.quotient = 0 ; result.remainder = java.lang.Float.NaN ; } else { result.quotient = ( ( int ) ( java.lang.StrictMath.round ( ( numerator / denominator ) ) ) ) ; result.remainder = numerator - ( ( result.quotient ) * denominator ) ; } return result ; }
public java.util.List < ? extends com.android.internal.telephony.MmiCode > getPendingMmiCodes ( ) { android.util.Log.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "method getPendingMmiCodes is NOT supported in CDMA!" ) ; return null ; }
static void checkNonnegative ( int count , java.lang.String name ) { com.google.common.base.Preconditions.checkArgument ( ( count >= 0 ) , "%s cannot be negative: %s" , name , count ) ; }
public boolean ping ( ) { java.lang.String pong = doStringCommand ( "PING" ) ; return ( pong != null ) && ( pong.equals ( "PONG" ) ) ; }
public void testGetProperty_volatile ( ) throws java.lang.Exception { com.android.ddmlib.IDevice mockDevice = org.easymock.EasyMock.createMock ( com.android.ddmlib.IDevice.class ) ; injectShellResponse ( mockDevice , "[dev.bootcomplete]: [0]\r\n" ) ; injectShellResponse ( mockDevice , "[dev.bootcomplete]: [1]\r\n" ) ; org.easymock.EasyMock.replay ( mockDevice ) ; com.android.ddmlib.PropertyFetcher fetcher = new com.android.ddmlib.PropertyFetcher ( mockDevice ) ; assertEquals ( "0" , fetcher.getProperty ( "dev.bootcomplete" ) . get ( ) ) ; assertEquals ( "1" , fetcher.getProperty ( "dev.bootcomplete" ) . get ( ) ) ; }
public void test_destroy ( ) { tests.api.javax.security.auth.DestroyableTest.myDestroyable md = new tests.api.javax.security.auth.DestroyableTest.myDestroyable ( ) ; try { assertFalse ( md.isDestroyed ( ) ) ; md.destroy ( ) ; assertTrue ( md.isDestroyed ( ) ) ; } catch ( java.lang.Exception e ) { fail ( ( "Unexpected exception " + e ) ) ; } }
public static com.android.ide.eclipse.adt.internal.editors.formatting.XmlFormatPreferences create ( ) { com.android.ide.eclipse.adt.internal.editors.formatting.XmlFormatPreferences p = new com.android.ide.eclipse.adt.internal.editors.formatting.XmlFormatPreferences ( ) ; com.android.ide.eclipse.adt.internal.preferences.AdtPrefs prefs = com.android.ide.eclipse.adt.internal.preferences.AdtPrefs.getPrefs ( ) ; p.useEclipseIndent = prefs.isUseEclipseIndent ( ) ; p.removeEmptyLines = prefs.isRemoveEmptyLines ( ) ; p.oneAttributeOnFirstLine = prefs.isOneAttributeOnFirstLine ( ) ; p.sortAttributes = prefs.getAttributeSort ( ) ; p.spaceBeforeClose = prefs.isSpaceBeforeClose ( ) ; return p ; }
protected void setBatterySaverMode ( boolean enabled ) throws java.lang.Exception { android.util.Log.i ( com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase.TAG , ( "Setting Battery Saver Mode to " + enabled ) ) ; if ( enabled ) { turnBatteryOff ( ) ; executeSilentShellCommand ( "cmd battery unplug" ) ; executeSilentShellCommand ( "settings put global low_power 1" ) ; } else { turnBatteryOn ( ) ; } }
public boolean setPairingConfirmation ( boolean confirm ) { if ( ( android.bluetooth.BluetoothDevice.sService ) == null ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "BT not enabled. Cannot set pairing confirmation" ) ; return false ; } try { return android.bluetooth.BluetoothDevice.sService.setPairingConfirmation ( this , confirm ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "" , e ) ; } return false ; }
public java.nio.IntBuffer put ( java.nio.IntBuffer src ) { if ( src == ( this ) ) throw new java.lang.IllegalArgumentException ( ) ; int n = src.remaining ( ) ; if ( n > ( remaining ( ) ) ) throw new java.nio.BufferOverflowException ( ) ; for ( int i = 0 ; i < n ; i ++ ) put ( src.get ( ) ) ; return this ; }
protected void buildJackCall ( @ javax.annotation.Nonnull java.util.List < java.lang.String > commandLine ) { boolean assertEnable = false ; assert true == ( assertEnable = true ) ; commandLine.add ( "java" ) ; commandLine.add ( ( assertEnable ? "-ea" : "-da" ) ) ; commandLine.add ( "-jar" ) ; commandLine.add ( jackPrebuilt.getAbsolutePath ( ) ) ; }
public static com.android.compatibility.common.util.IInvocationResult findResult ( java.io.File resultsDir , java.lang.Integer sessionId ) throws java.io.FileNotFoundException { if ( sessionId < 0 ) { throw new java.lang.IllegalArgumentException ( java.lang.String.format ( "Invalid session id [%d] " , sessionId ) ) ; } java.util.List < com.android.compatibility.common.util.IInvocationResult > results = com.android.compatibility.common.util.ResultHandler.getResults ( resultsDir ) ; if ( ( results == null ) || ( sessionId >= ( results.size ( ) ) ) ) { throw new java.lang.RuntimeException ( java.lang.String.format ( "Could not find session [%d]" , sessionId ) ) ; } return results.get ( sessionId ) ; }
public void TestSwahiliShortNegative ( ) { if ( logKnownIssue ( "12181" , "No support for negative numbers in CDF" ) ) { return ; } checkLocale ( android.icu.util.ULocale.forLanguageTag ( "sw" ) , CompactStyle.SHORT , SwahiliTestDataNegative ) ; }
private lombok.ast.Node getCompilationUnit ( java.lang.String javaSource ) { com.android.tools.lint.client.api.IJavaParser parser = new com.android.tools.lint.LombokParser ( ) ; com.android.tools.lint.detector.api.LintUtilsTest.TestContext context = new com.android.tools.lint.detector.api.LintUtilsTest.TestContext ( javaSource , new java.io.File ( "test" ) ) ; lombok.ast.Node compilationUnit = parser.parseJava ( context ) ; assertNotNull ( javaSource , compilationUnit ) ; return compilationUnit ; }
public void testSendMessage7bit ( ) throws java.lang.Exception { android.content.Intent intent = new android.content.Intent ( android.provider.Telephony.Sms.Intents.SMS_CB_RECEIVED_ACTION ) ; byte [ ] pdu = encodeCellBroadcast ( 0 , 0 , com.android.cellbroadcastreceiver.DialogSmsDisplayTests.DCS_7BIT_ENGLISH , "Hello in GSM 7 bit" ) ; intent.putExtra ( "message" , com.android.cellbroadcastreceiver.DialogSmsDisplayTests.createFromPdu ( pdu ) ) ; getActivity ( ) . sendOrderedBroadcast ( intent , "android.permission.RECEIVE_SMS" ) ; }
public void createMockableJar ( ) throws java.io.IOException { com.android.builder.testing.MockableJarGenerator generator = new com.android.builder.testing.MockableJarGenerator ( getReturnDefaultValues ( ) ) ; getOutputFile ( ) . delete ( ) ; getLogger ( ) . info ( java.lang.String.format ( "Creating %s from $s." , getOutputFile ( ) . getAbsolutePath ( ) , getAndroidJar ( ) . getAbsolutePath ( ) ) ) ; generator.createMockableJar ( getAndroidJar ( ) , getOutputFile ( ) ) ; }
void registerTimeout ( ) { com.android.server.telecom.Log.d ( this , "registerTimeout" ) ; mIsRegistered = true ; long timeoutLengthMillis = getTimeoutLengthMillis ( ) ; if ( timeoutLengthMillis <= 0 ) { com.android.server.telecom.Log.d ( this , "registerTimeout, timeout set to %d, skipping" , timeoutLengthMillis ) ; } else { mHandler.postDelayed ( prepare ( ) , timeoutLengthMillis ) ; } }
public void testEndCallWithNonRingingForegroundCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito.mock ( com.android.server.telecom.Call.class ) ; org.mockito.Mockito.when ( call.getState ( ) ) . thenReturn ( CallState.ACTIVE ) ; org.mockito.Mockito.when ( mFakeCallsManager.getForegroundCall ( ) ) . thenReturn ( call ) ; org.junit.Assert.assertTrue ( mTSIBinder.endCall ( null ) ) ; org.mockito.Mockito.verify ( call ) . disconnect ( ) ; }
private void initFromIntent ( android.content.Intent intent ) { if ( intent != null ) { mTextMsg = intent.getParcelableExtra ( "TEXT" ) ; mSlotId = intent.getIntExtra ( StkAppService.SLOT_ID , ( - 1 ) ) ; } else { finish ( ) ; } com.android.internal.telephony.cat.CatLog.d ( com.android.stk.StkDialogActivity.LOG_TAG , ( ( ( "initFromIntent - [" + ( mTextMsg ) ) + "], sim id: " ) + ( mSlotId ) ) ) ; }
public static java.security.Signature getInstance ( java.lang.String algorithm , java.security.Provider provider ) throws java.security.NoSuchAlgorithmException { if ( algorithm.equalsIgnoreCase ( java.security.Signature.RSA_SIGNATURE ) ) { if ( provider == null ) { throw new java.lang.IllegalArgumentException ( "missing provider" ) ; } return java.security.Signature.getInstanceRSA ( provider ) ; } sun.security.jca.GetInstance.Instance instance = sun.security.jca.GetInstance.getInstance ( "Signature" , java.security.SignatureSpi.class , algorithm , provider ) ; return java.security.Signature.getInstance ( instance , algorithm ) ; }
public java.lang.String getAttributeValue ( java.lang.String namespace , java.lang.String localName ) { java.lang.String value = super . getAttributeValue ( namespace , localName ) ; if ( ( ( com.android.ide.common.layout.LayoutConstants.VALUE_MATCH_PARENT.equals ( value ) ) && ( ( com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH.equals ( localName ) ) || ( com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_HEIGHT.equals ( localName ) ) ) ) && ( SdkConstants.NS_RESOURCES.equals ( namespace ) ) ) { return com.android.ide.common.layout.LayoutConstants.VALUE_FILL_PARENT ; } return value ; }
private void readObject ( java.io.ObjectInputStream stream ) throws java.io.IOException , java.lang.ClassNotFoundException { stream.defaultReadObject ( ) ; if ( ( serialVersionOnStream ) < 1 ) { capitalizationSetting = DisplayContext.CAPITALIZATION_NONE ; } serialVersionOnStream = android.icu.text.DateFormat.currentSerialVersion ; }
public static boolean saveResourceProperty ( org.eclipse.core.resources.IResource resource , java.lang.String propertyName , org.eclipse.core.resources.IResource value ) { if ( value != null ) { org.eclipse.core.runtime.IPath iPath = value.getProjectRelativePath ( ) ; return com.android.ide.eclipse.adt.internal.project.ProjectHelper.saveStringProperty ( resource , propertyName , iPath.toString ( ) ) ; } return com.android.ide.eclipse.adt.internal.project.ProjectHelper.saveStringProperty ( resource , propertyName , "" ) ; }
public void tearDown ( com.android.tradefed.invoker.IInvocationContext context , java.lang.Throwable e ) throws com.android.tradefed.device.DeviceNotAvailableException { if ( ( ( mVenvDir ) != null ) && ( mIsDirCreator ) ) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete ( mVenvDir.toPath ( ) ) ; com.android.tradefed.log.LogUtil.CLog.i ( "Deleted the virtual env's temp working dir, %s." , mVenvDir ) ; } catch ( java.io.IOException exception ) { com.android.tradefed.log.LogUtil.CLog.e ( "Failed to delete %s: %s" , mVenvDir , exception ) ; } mVenvDir = null ; } }
private static libcore.tzdata.update2.tools.TzDataBundleBuilder createValidTimeZoneBundleBuilder ( java.lang.String rulesVersion , java.lang.String androidRevision ) throws java.lang.Exception { byte [ ] bionicTzData = libcore.tzdata.update2.TzDataBundleInstallerTest.createTzData ( rulesVersion ) ; byte [ ] icuData = new byte [ ] { 'a' } ; return new libcore.tzdata.update2.tools.TzDataBundleBuilder ( ) . setRulesVersion ( rulesVersion ) . setAndroidRevision ( androidRevision ) . setTzData ( bionicTzData ) . setIcuData ( icuData ) ; }
public void testDismissKeyguard ( ) throws java.lang.Exception { if ( ! ( supportsKeyguard ( ) ) ) { return ; } gotoKeyguard ( ) ; mAmWmState.waitForKeyguardShowingAndNotOccluded ( mDevice ) ; assertShowingAndNotOccluded ( ) ; launchActivity ( "DismissKeyguardActivity" ) ; enterAndConfirmLockCredential ( ) ; mAmWmState.waitForKeyguardGone ( mDevice ) ; assertKeyguardGone ( ) ; mAmWmState.assertVisibility ( "DismissKeyguardActivity" , true ) ; }
private com.android.bluetooth.hfp.HeadsetService getService ( ) { if ( ! ( com.android.bluetooth.Utils.checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log.w ( com.android.bluetooth.hfp.HeadsetService.TAG , "Headset call not allowed for non-active user" ) ; return null ; } if ( ( ( mService ) != null ) && ( mService.isAvailable ( ) ) ) { return mService ; } return null ; }
public void libToExe ( @ javax.annotation.Nonnull java.io.File in , @ javax.annotation.Nonnull java.io.File out , boolean zipFile ) throws java.lang.Exception { try { compileWithDx ( in , out , zipFile ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( "Legacy toolchain exited with an error" , e ) ; } }
public boolean isNonDefault ( ) { return ( ( ( mSupport5gBand ) || ( ( mMasterPreference ) != 0 ) ) || ( ( mClusterLow ) != ( android.net.wifi.aware.ConfigRequest.CLUSTER_ID_MIN ) ) ) || ( ( mClusterHigh ) != ( android.net.wifi.aware.ConfigRequest.CLUSTER_ID_MAX ) ) ; }
private static native int openDexFile ( java.lang.String sourceName , java.lang.String outputName , int flags ) throws java.io.IOException ;
boolean isCompatible ( com.android.tools.lint.checks.DuplicateIdDetector.Layout from , com.android.tools.lint.checks.DuplicateIdDetector.Layout to ) { java.io.File fromFolder = from.mFile.getParentFile ( ) ; java.io.File toFolder = to.mFile.getParentFile ( ) ; if ( fromFolder.equals ( toFolder ) ) { return true ; } java.lang.String [ ] fromQualifiers = fromFolder.getName ( ) . split ( "-" ) ; java.lang.String [ ] toQualifiers = toFolder.getName ( ) . split ( "-" ) ; if ( ( isPortrait ( fromQualifiers ) ) != ( isPortrait ( toQualifiers ) ) ) { return false ; } return true ; }
int getServiceHandle ( java.util.UUID uuid , int serviceType , int instance ) { for ( com.android.bluetooth.gatt.HandleMap.Entry entry : mEntries ) { if ( ( ( ( ( entry.type ) == ( com.android.bluetooth.gatt.HandleMap.TYPE_SERVICE ) ) && ( ( entry.serviceType ) == serviceType ) ) && ( ( entry.instance ) == instance ) ) && ( entry.uuid.equals ( uuid ) ) ) { return entry.handle ; } } android.util.Log.e ( com.android.bluetooth.gatt.HandleMap.TAG , ( ( "getServiceHandle() - UUID " + uuid ) + " not found!" ) ) ; return 0 ; }
public void insert ( @ javax.annotation.Nonnegative int index , @ javax.annotation.Nonnull com.android.sched.scheduler.ManagedRunnable runner ) { assert isConstraintValid ( index , runner ) ; index ++ ; plan.add ( index , new DecoratedRunner ( runner ) ) ; currentTagValidityIdx = index - 1 ; constraintTagValidityIdx = index ; }
public void run ( ) { if ( ( mBootMsgDialog ) != null ) { mBootMsgDialog.dismiss ( ) ; mBootMsgDialog = null ; } }
public static void set ( @ android.annotation.NonNull java.lang.String key , @ android.annotation.Nullable java.lang.String val ) { if ( ( val != null ) && ( ( val.length ( ) ) > ( android.os.SystemProperties.PROP_VALUE_MAX ) ) ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( ( "value of system property '" + key ) + "' is longer than " ) + ( android.os.SystemProperties.PROP_VALUE_MAX ) ) + " characters: " ) + val ) ) ; } if ( android.os.SystemProperties.TRACK_KEY_ACCESS ) android.os.SystemProperties.onKeyAccess ( key ) ; android.os.SystemProperties.native_set ( key , val ) ; }
public void setConnectionProperties ( java.lang.String callId , int connectionProperties ) { android.telecom.Log.startSession ( "CSW.sCP" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { logIncoming ( "setConnectionProperties %s %d" , callId , connectionProperties ) ; com.android.server.telecom.Call call = mCallIdMapper.getCall ( callId ) ; if ( call != null ) { call.setConnectionProperties ( connectionProperties ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } }
public void testIpManagerEventSerialization ( ) { android.net.ConnectivityMetricsEvent ev = com.android.server.connectivity.MetricsTestUtil.describeIpEvent ( com.android.server.connectivity.MetricsTestUtil.aType ( android.net.metrics.IpManagerEvent.class ) , com.android.server.connectivity.MetricsTestUtil.aString ( "wlan0" ) , com.android.server.connectivity.MetricsTestUtil.anInt ( IpManagerEvent.PROVISIONING_OK ) , com.android.server.connectivity.MetricsTestUtil.aLong ( 5678 ) ) ; java.lang.String want = com.android.server.connectivity.IpConnectivityEventBuilderTest.joinLines ( "dropped_events: 0" , "events <" , " ip_provisioning_event <" , " event_type: 1" , " if_name: \"wlan0\"" , " latency_ms: 5678" , " >" , " time_ms: 1" , ">" ) ; com.android.server.connectivity.IpConnectivityEventBuilderTest.verifySerialization ( want , ev ) ; }
public void testSubscribeTerminatedFail ( ) throws org.json.JSONException { final int subscribeId = 167 ; android.os.Bundle args = new android.os.Bundle ( ) ; args.putInt ( "subscribe_id" , subscribeId ) ; args.putInt ( "reason" , WifiNanNative.NAN_TERMINATED_REASON_FAILURE ) ; com.android.server.wifi.nan.WifiNanHalMock.callSubscribeTerminated ( com.android.server.wifi.HalMockUtils.convertBundleToJson ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( mNanStateManager ) . onSessionTerminatedNotification ( subscribeId , WifiNanSessionCallback.TERMINATE_REASON_FAIL , false ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mNanStateManager ) ; }
public void testKeyPairGenerator_Initialize_ParamsAndSecureRandom_Failure ( ) throws java.lang.Exception { mGenerator.initialize ( new android.security.AndroidKeyPairGeneratorSpec ( getContext ( ) , android.security.AndroidKeyPairGeneratorTest.TEST_ALIAS_1 , android.security.AndroidKeyPairGeneratorTest.TEST_DN_1 , android.security.AndroidKeyPairGeneratorTest.TEST_SERIAL_1 , android.security.AndroidKeyPairGeneratorTest.NOW , android.security.AndroidKeyPairGeneratorTest.NOW_PLUS_10_YEARS ) , new java.security.SecureRandom ( ) ) ; }
public int runLaunchpad ( java.lang.String action ) { android.app.cts.LaunchpadActivity.setCallingTest ( this ) ; synchronized ( this ) { mIntent.setAction ( action ) ; mFinished = false ; mIntent.addFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; mContext.startActivity ( mIntent ) ; } return waitForResultOrThrow ( ( 60 * 1000 ) ) ; }
private void updateAvdList ( com.android.sdklib.internal.avd.AvdManager avdManager ) { if ( avdManager == null ) { avdManager = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) . getAvdManager ( ) ; } mPreferredAvdSelector.setManager ( avdManager ) ; mPreferredAvdSelector.setFilter ( mProjectTarget ) ; mPreferredAvdSelector.refresh ( false ) ; }
public void testPownF32 ( ) { android.renderscript.Allocation nAlloc = android.renderscript.Allocation.createSized ( mRS , android.renderscript.Element.I32 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ INPUTSIZE ] ; android.renderscript.cts.RSUtils.genRandom ( 305419896 , 32 , 1 , ( - 16 ) , n ) ; nAlloc.copyFrom ( n ) ; script_f32.set_n1 ( nAlloc ) ; doF32 ( 7432909 , 16 ) ; }
protected void runWifiPrecondition ( com.android.tradefed.device.ITestDevice device ) throws com.android.tradefed.device.DeviceNotAvailableException , com.android.tradefed.targetprep.TargetSetupError { if ( ( mWifiSsid ) == null ) { if ( ! ( device.checkConnectivity ( ) ) ) { throw new com.android.tradefed.targetprep.TargetSetupError ( "Device has no network connection, no ssid provided" ) ; } } else { if ( ! ( device.connectToWifiNetworkIfNeeded ( mWifiSsid , mWifiPsk ) ) ) { throw new com.android.tradefed.targetprep.TargetSetupError ( ( "Unable to establish network connection," + "some CTS packages require an active network connection" ) ) ; } } }
public void writeToParcel ( android.os.Parcel dest , int flags ) { dest.writeInt ( mMatchRule ) ; dest.writeString ( mSubscriberId ) ; dest.writeStringArray ( mMatchSubscriberIds ) ; dest.writeString ( mNetworkId ) ; }
private synchronized void onSetReport ( byte reportType , byte reportId , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( ( ( "onSetReport(): reportType=" + reportType ) + " reportId=" ) + reportId ) ) ; } java.nio.ByteBuffer bb = java.nio.ByteBuffer.wrap ( data ) ; android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidDeviceService.MESSAGE_SET_REPORT ) ; msg.arg1 = reportType ; msg.arg2 = reportId ; msg.obj = bb ; mHandler.sendMessage ( msg ) ; }
public boolean hasChildren ( java.lang.Object element ) { if ( ( element instanceof com.android.ddmlib.IDevice ) && ( mDoTreeViewStuff ) ) { com.android.hierarchyviewerlib.device.Window [ ] list = mModel.getWindows ( ( ( com.android.ddmlib.IDevice ) ( element ) ) ) ; if ( list != null ) { return ( list.length ) != 0 ; } } return false ; }
protected android.content.res.ObbInfo getObbInfo ( ) throws java.io.IOException { android.content.res.ObbInfo obbInfo ; try { obbInfo = mContainerService.getObbInfo ( mObbState.ownerPath ) ; } catch ( android.os.RemoteException e ) { android.util.Slog.d ( com.android.server.MountService.TAG , ( "Couldn't call DefaultContainerService to fetch OBB info for " + ( mObbState.ownerPath ) ) ) ; obbInfo = null ; } if ( obbInfo == null ) { throw new java.io.IOException ( ( "Couldn't read OBB file: " + ( mObbState.ownerPath ) ) ) ; } return obbInfo ; }
public void setAudioRoute ( java.lang.String callId , int audioRoute , android.telecom.Logging.Session.Info sessionInfo ) { android.telecom.Log.startSession ( sessionInfo , "CSW.sAR" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { logIncoming ( "setAudioRoute %s %s" , callId , android.telecom.CallAudioState.audioRouteToString ( audioRoute ) ) ; mCallsManager.setAudioRoute ( audioRoute ) ; } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } }
public java.lang.String getDisplayVariant ( java.util.Locale locale ) { if ( ( variantCode.length ( ) ) == 0 ) { return variantCode ; } java.lang.String result = libcore.icu.ICU.getDisplayVariantNative ( getIcuLocaleId ( ) , locale.getIcuLocaleId ( ) ) ; if ( result == null ) { result = libcore.icu.ICU.getDisplayVariantNative ( getIcuLocaleId ( ) , java.util.Locale.getDefault ( ) . getIcuLocaleId ( ) ) ; } return result ; }
private boolean isAndroid23 ( com.android.tools.lint.detector.api.Context context , int folderVersion ) { if ( isAndroid30 ( context , folderVersion ) ) { return false ; } if ( ( folderVersion == 9 ) || ( folderVersion == 10 ) ) { return true ; } int minSdk = context.getMainProject ( ) . getMinSdk ( ) ; return ( minSdk == 9 ) || ( minSdk == 10 ) ; }
void splitFromConference ( ) { if ( ( mConnectionService ) == null ) { com.android.server.telecom.Log.w ( this , "splitting from conference call without a connection service" ) ; } else { com.android.server.telecom.Log.event ( this , Log.Events.SPLIT_CONFERENCE ) ; mConnectionService.splitFromConference ( this ) ; } }
static Bitmap.NativeWrapper allocNativeStorage ( int width , int height ) { int nativeData ; synchronized ( Bitmap.class ) { nativeData = ( Bitmap.sSerial ) ++ ; } Bitmap.NativeWrapper wrapper = new Bitmap.NativeWrapper ( nativeData ) ; PhantomWrapper phan = new PhantomWrapper ( wrapper , Bitmap.sPhantomQueue , nativeData ) ; Bitmap.sPhantomList.add ( phan ) ; return wrapper ; }
public void testLicenseIdNotFound ( ) throws java.lang.Exception { java.lang.String document = ( ( ( ( ( ( "<?xml version=\"1.0\"?>" + ( com.android.sdklib.repository.ValidateRepositoryXmlTest.OPEN_TAG_REPO ) ) + "<r:license id=\"lic1\"> some license </r:license> " ) + "<r:tool> <r:uses-license ref=\"lic2\" /> <r:revision> <r:major>1</r:major> </r:revision> " ) + "<r:min-platform-tools-rev> <r:major>1</r:major> </r:min-platform-tools-rev> " ) + "<r:archives> <r:archive os=\"any\"> <r:size>1</r:size> <r:checksum>2822ae37115ebf13412bbef91339ee0d9454525e</r:checksum> " ) + "<r:url>url</r:url> </r:archive> </r:archives> </r:tool>" ) + ( com.android.sdklib.repository.ValidateRepositoryXmlTest.CLOSE_TAG_REPO ) ; javax.xml.transform.Source source = new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( document ) ) ; javax.xml.validation.Validator validator = getRepoValidator ( SdkRepoConstants.NS_LATEST_VERSION , null ) ; try { validator.validate ( source ) ; } catch ( org.xml.sax.SAXParseException e ) { assertRegex ( "cvc-id.1: There is no ID/IDREF binding for IDREF 'lic2'.*" , e.getMessage ( ) ) ; return ; } fail ( ) ; }
public void traverse ( @ javax.annotation.Nonnull com.android.sched.scheduler.ScheduleInstance < ? super com.android.sched.item.Component > schedule ) throws java.lang.Exception { schedule.process ( this ) ; for ( com.android.jack.ir.ast.JField field : fields ) { field.traverse ( schedule ) ; } for ( com.android.jack.ir.ast.JMethod method : methods ) { method.traverse ( schedule ) ; } annotations.traverse ( schedule ) ; }
private boolean mode_array ( com.android.rs.test.RenderScript RS , com.android.rs.test.ScriptC_reduce s , int seed , int [ ] size ) { final byte [ ] inputArray = createInputArrayByte ( size [ 0 ] , seed ) ; final com.android.rs.test.Int2 javaResult = mode ( RS , inputArray ) ; final com.android.rs.test.Int2 rsResult = s.reduce_mode ( inputArray ) . get ( ) ; return result ( "mode" , new com.android.rs.test.UT_reduce.timing ( size [ 0 ] ) , javaResult , rsResult ) ; }
private java.lang.String getItemName ( int itemId ) { com.android.internal.telephony.gsm.stk.Menu menu = mCurrentCmd.getMenu ( ) ; if ( menu == null ) { return null ; } for ( com.android.internal.telephony.gsm.stk.Item item : menu.items ) { if ( ( item.id ) == itemId ) { return item.text ; } } return null ; }
public void readIntArray ( int [ ] dst , int dstOffset , int intCount ) { libcore.io.Memory.peekIntArray ( ( ( address ) + ( position ) ) , dst , dstOffset , intCount , swap ) ; position += ( SizeOf.INT ) * intCount ; }
public void setHttpAuthUsernamePassword ( final java.lang.String host , final java.lang.String realm , final java.lang.String username , final java.lang.String password ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { setHttpAuthUsernamePassword ( host , realm , username , password ) ; } } ) ; return ; } mAwContents.setHttpAuthUsernamePassword ( host , realm , username , password ) ; }
public void testBadSystemFile ( ) throws java.lang.Exception { java.io.File doesNotExist = new java.io.File ( testSystemTzDataDir , "doesNotExist" ) ; libcore.tzdata.update2.TimeZoneBundleInstaller brokenSystemInstaller = new libcore.tzdata.update2.TimeZoneBundleInstaller ( "TzDataBundleInstallerTest" , doesNotExist , testInstallDir ) ; libcore.tzdata.update2.TimeZoneBundle tzData = libcore.tzdata.update2.TzDataBundleInstallerTest.createValidTimeZoneBundle ( libcore.tzdata.update2.TzDataBundleInstallerTest.NEW_RULES_VERSION , "001" ) ; assertFalse ( brokenSystemInstaller.install ( tzData.getBytes ( ) ) ) ; assertNoContentInstalled ( ) ; }
public java.lang.String getFullVersion ( ) { final java.lang.String majorVersion = getMajorVersion ( ) ; if ( ( majorVersion != null ) && ( ( majorVersion.trim ( ) . length ( ) ) > 0 ) ) { final java.lang.String minorVersion = getMinorVersion ( ) ; if ( ( minorVersion != null ) && ( ( minorVersion.trim ( ) . length ( ) ) > 0 ) ) { return ( majorVersion + "." ) + minorVersion ; } else { return majorVersion + ".0" ; } } else { return getVersionName ( ) ; } }
public void testInstall_unsuccessfulFollowOnUpdate_olderVersion ( ) throws java.lang.Exception { libcore.tzdata.update2.TimeZoneBundle bundle1 = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION , 2 ) ; assertEquals ( TimeZoneBundleInstaller.INSTALL_SUCCESS , installer.installWithErrorCode ( bundle1.getBytes ( ) ) ) ; assertBundleInstalled ( bundle1 ) ; libcore.tzdata.update2.TimeZoneBundle bundle2 = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.OLDER_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneBundleInstaller.INSTALL_FAIL_RULES_TOO_OLD , installer.installWithErrorCode ( bundle2.getBytes ( ) ) ) ; assertBundleInstalled ( bundle1 ) ; }
public void testProxyAuthConnection ( ) throws java.lang.Throwable { org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.setUpStoreProperties ( ) ; java.net.ServerSocket ss = new java.net.ServerSocket ( 0 ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.TestHostnameVerifier hnv = new org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.TestHostnameVerifier ( ) ; javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier ( hnv ) ; java.net.Authenticator.setDefault ( new java.net.Authenticator ( ) { protected java.net.PasswordAuthentication getPasswordAuthentication ( ) { return new java.net.PasswordAuthentication ( "user" , "password" . toCharArray ( ) ) ; } } ) ; java.net.URL url = new java.net.URL ( "https://requested.host:55555/requested.data" ) ; javax.net.ssl.HttpsURLConnection connection = ( ( javax.net.ssl.HttpsURLConnection ) ( url.openConnection ( new java.net.Proxy ( java.net.Proxy.Type.HTTP , new java.net.InetSocketAddress ( "localhost" , ss.getLocalPort ( ) ) ) ) ) ) ; connection.setSSLSocketFactory ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.getContext ( ) . getSocketFactory ( ) ) ; javax.net.ssl.SSLSocket peerSocket = ( ( javax.net.ssl.SSLSocket ) ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.doInteraction ( connection , ss ) ) ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.checkConnectionStateParameters ( connection , peerSocket ) ; connection.connect ( ) ; }
static void requestDeleteManagedProfile ( android.content.Context context ) { try { android.content.Intent intent = new android.content.Intent ( com.android.cts.verifier.managedprovisioning.ByodHelperActivity.ACTION_REMOVE_MANAGED_PROFILE ) ; context.startActivity ( intent ) ; java.lang.String message = context.getString ( R.string.provisioning_byod_delete_profile ) ; android.widget.Toast.makeText ( context , message , Toast.LENGTH_SHORT ) . show ( ) ; } catch ( android.content.ActivityNotFoundException e ) { android.util.Log.d ( com.android.cts.verifier.managedprovisioning.Utils.TAG , "requestDeleteProfileOwner: ActivityNotFoundException" , e ) ; } }
public void setCurrency ( java.util.Currency currency ) { if ( ( currency != ( symbols.getCurrency ( ) ) ) || ( ! ( currency.getSymbol ( ) . equals ( symbols.getCurrencySymbol ( ) ) ) ) ) { symbols.setCurrency ( currency ) ; } icuDecimalFormat.setDecimalFormatSymbols ( symbols.getIcuDecimalFormatSymbols ( ) ) ; }
public java.lang.Object clone ( ) { try { java.text.Collator clone = ( ( java.text.Collator ) ( super . clone ( ) ) ) ; clone.icuColl = ( ( java.text.Collator ) ( icuColl.clone ( ) ) ) ; return clone ; } catch ( java.lang.CloneNotSupportedException e ) { throw new java.lang.AssertionError ( e ) ; } }
public void testPullExternalCall ( ) throws java.lang.Exception { mConnectionServiceFixtureA.mConnectionServiceDelegate.mCapabilities = android.telecom.Connection.CAPABILITY_CAN_PULL_CALL ; mConnectionServiceFixtureA.mConnectionServiceDelegate.mProperties = android.telecom.Connection.PROPERTY_IS_EXTERNAL_CALL ; com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall ( "650-555-1212" , mPhoneAccountA0.getAccountHandle ( ) , mConnectionServiceFixtureA ) ; assertEquals ( Call.STATE_ACTIVE , mInCallServiceFixtureX.getCall ( ids.mCallId ) . getState ( ) ) ; mInCallServiceFixtureX.mInCallAdapter.pullExternalCall ( ids.mCallId ) ; org.mockito.Mockito.verify ( mConnectionServiceFixtureA.getTestDouble ( ) , org.mockito.Mockito.timeout ( com.android.server.telecom.tests.TEST_TIMEOUT ) ) . pullExternalCall ( ids.mCallId ) ; }
public void testVenueNameElementParsing ( ) { try { for ( com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.VenueNameElementTestMapping testMapping : com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.VENUE_NAME_ELEMENT_MAPPINGS ) { com.android.server.wifi.hotspot2.anqp.VenueNameElement venueNameElement = new com.android.server.wifi.hotspot2.anqp.VenueNameElement ( Constants.ANQPElementType.ANQPVenueName , java.nio.ByteBuffer.wrap ( testMapping.mBytes ) . order ( java.nio.ByteOrder.LITTLE_ENDIAN ) ) ; assertEquals ( testMapping.mExpectedNames , venueNameElement.getNames ( ) ) ; } } catch ( java.net.ProtocolException e ) { fail ( ( "Exception encountered during parsing: " + e ) ) ; } }
private void doTestBracesNextLineStyle ( ) throws java.lang.Exception { com.intellij.psi.codeStyle.CodeStyleSettings settings = com.intellij.psi.codeStyle.CodeStyleSettingsManager.getSettings ( getProject ( ) ) ; settings.BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.NEXT_LINE ; settings.METHOD_BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.NEXT_LINE ; settings.CLASS_BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.NEXT_LINE ; try { doTest ( ) ; } finally { settings.BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.END_OF_LINE ; settings.METHOD_BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.END_OF_LINE ; settings.CLASS_BRACE_STYLE = com.intellij.psi.codeStyle.CommonCodeStyleSettings.END_OF_LINE ; } }
private void onSetStreamVolume ( int streamType , int index , int flags , int device ) { setStreamVolumeInt ( mStreamVolumeAlias [ streamType ] , index , device , false ) ; if ( ( ( flags & ( AudioManager.FLAG_ALLOW_RINGER_MODES ) ) != 0 ) || ( ( mStreamVolumeAlias [ streamType ] ) == ( getMasterStreamType ( ) ) ) ) { int newRingerMode ; if ( index == 0 ) { newRingerMode = ( mHasVibrator ) ? AudioManager.RINGER_MODE_VIBRATE : AudioManager.RINGER_MODE_SILENT ; } else { newRingerMode = AudioManager.RINGER_MODE_NORMAL ; } setRingerMode ( newRingerMode ) ; } }
protected com.android.sched.vfs.OutputVFile getOutputDex ( @ javax.annotation.Nonnull com.android.sched.vfs.OutputVFS outputVfs , int dexCount ) throws com.android.jack.backend.dex.DexWritingException { assert dexCount >= 1 ; java.lang.String dexName ; if ( dexCount == 1 ) { dexName = DexFileWriter.DEX_FILENAME ; } else { dexName = ( ( DexFileWriter.DEX_PREFIX ) + dexCount ) + ( FileType.DEX.getFileExtension ( ) ) ; } try { return outputVfs.getRootOutputVDir ( ) . createOutputVFile ( new com.android.sched.vfs.VPath ( dexName , '/' ) ) ; } catch ( com.android.sched.util.file.CannotCreateFileException e ) { throw new com.android.jack.backend.dex.DexWritingException ( e ) ; } }
public static com.android.manifmerger.XmlDocument load ( java.io.File xmlFile ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.io.InputStream inputStream = new java.io.BufferedInputStream ( new java.io.FileInputStream ( xmlFile ) ) ; com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser ( ) ; org.w3c.dom.Document domDocument = positionXmlParser.parse ( inputStream ) ; return domDocument != null ? new com.android.manifmerger.XmlDocument ( positionXmlParser , new com.android.manifmerger.XmlLoader.FileSourceLocation ( null , xmlFile ) , domDocument.getDocumentElement ( ) ) : null ; }
public java.lang.String getName ( ) { switch ( nameSource ) { case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_DEFAULT_DIRECTORY : return com.android.dialer.common.Assert.isNotNull ( firstDefaultCp2Contact ) . getName ( ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.CP2_EXTENDED_DIRECTORY : return com.android.dialer.common.Assert.isNotNull ( firstExtendedCp2Contact ) . getName ( ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.PEOPLE_API : return phoneLookupInfo.getPeopleApiInfo ( ) . getDisplayName ( ) ; case com.android.dialer.phonelookup.consolidator.PhoneLookupInfoConsolidator.NameSource.NONE : return "" ; default : throw com.android.dialer.common.Assert.createUnsupportedOperationFailException ( java.lang.String.format ( "Unsupported name source: %s" , nameSource ) ) ; } }
public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) { return true ; } if ( ( o == null ) | ( ( getClass ( ) ) != ( o.getClass ( ) ) ) ) { return false ; } com.android.ide.common.blame.Message that = ( ( com.android.ide.common.blame.Message ) ( o ) ) ; return ( ( ( mKind ) == ( that.mKind ) ) && ( mText.equals ( that.mText ) ) ) && ( mSourceFilePositions.equals ( that.mSourceFilePositions ) ) ; }
public void clearMatches ( ) { mFindIsUp = false ; nativeSetFindIsDown ( ) ; pinScrollTo ( mScrollX , mScrollY , false , 0 ) ; invalidate ( ) ; }
public void set ( com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config ) { if ( config != null ) { for ( int i = 0 ; i < ( com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration.INDEX_COUNT ) ; i ++ ) { mQualifiers [ i ] = config.mQualifiers [ i ] ; } } }
private synchronized void onAcceptFailed ( ) { android.util.Log.w ( TAG , "onAcceptFailed() calling shutdown..." ) ; mConHandler.onAcceptFailed ( ) ; shutdown ( false ) ; }
public java.lang.String [ ] getPossibleValues ( java.lang.String prefix ) { java.util.TreeSet < java.lang.String > packages = new java.util.TreeSet < java.lang.String > ( ) ; for ( org.eclipse.jdt.core.IJavaProject project : com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.getAndroidProjects ( null ) ) { com.android.sdklib.xml.AndroidManifestParser.ManifestData manifestData = com.android.ide.eclipse.adt.internal.project.AndroidManifestHelper.parseForData ( project.getProject ( ) ) ; if ( manifestData == null ) { continue ; } packages.add ( manifestData.getPackage ( ) ) ; } return packages.toArray ( new java.lang.String [ packages.size ( ) ] ) ; }
public android.icu.text.DateFormat setBooleanAttribute ( android.icu.text.DateFormat.BooleanAttribute key , boolean value ) { if ( value ) { booleanAttributes.add ( key ) ; } else { booleanAttributes.remove ( key ) ; } return this ; }
void abort ( com.android.server.telecom.Call call ) { final java.lang.String callId = mCallIdMapper.getCallId ( call ) ; if ( ( callId != null ) && ( isServiceValid ( "abort" ) ) ) { try { logOutgoing ( "abort %s" , callId ) ; mServiceInterface.abort ( callId ) ; } catch ( android.os.RemoteException e ) { } } removeCall ( call , new android.telecom.DisconnectCause ( android.telecom.DisconnectCause.LOCAL ) ) ; }
public void doF32_relaxed ( long seed , int ulp ) { baseTestHelper ( android.renderscript.cts.RSBaseCompute.TEST_RELAXED_F32 , android.renderscript.Element.F32 ( mRS ) , android.renderscript.Element.F32 ( mRS ) , seed , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , ulp ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotationLiteral annotationLiteral ) { print ( "@" ) ; printTypeName ( annotationLiteral.getType ( ) ) ; lparen ( ) ; java.util.List < com.android.jack.ir.ast.JNameValuePair > nameValuePairs = new java.util.ArrayList < com.android.jack.ir.ast.JNameValuePair > ( annotationLiteral.getNameValuePairs ( ) ) ; java.util.Collections.sort ( nameValuePairs , new java.util.Comparator < com.android.jack.ir.ast.JNameValuePair > ( ) { @ java.lang.Override public int compare ( com.android.jack.ir.ast.JNameValuePair nameValuePair1 , com.android.jack.ir.ast.JNameValuePair nameValuePair2 ) { return nameValuePair1.getName ( ) . compareTo ( nameValuePair2.getName ( ) ) ; } } ) ; visitCollectionWithCommas ( nameValuePairs.iterator ( ) ) ; rparen ( ) ; return false ; }
protected static void rolloverCounters ( ) { com.android.bluetooth.pbap.BluetoothPbapUtils.sDbIdentifier.set ( java.util.Calendar.getInstance ( ) . getTimeInMillis ( ) ) ; com.android.bluetooth.pbap.BluetoothPbapUtils.sPrimaryVersionCounter = ( ( com.android.bluetooth.pbap.BluetoothPbapUtils.sPrimaryVersionCounter ) < 0 ) ? 0 : com.android.bluetooth.pbap.BluetoothPbapUtils.sPrimaryVersionCounter ; com.android.bluetooth.pbap.BluetoothPbapUtils.sSecondaryVersionCounter = ( ( com.android.bluetooth.pbap.BluetoothPbapUtils.sSecondaryVersionCounter ) < 0 ) ? 0 : com.android.bluetooth.pbap.BluetoothPbapUtils.sSecondaryVersionCounter ; if ( com.android.bluetooth.pbap.BluetoothPbapUtils.V ) android.util.Log.v ( com.android.bluetooth.pbap.BluetoothPbapUtils.TAG , ( "mDbIdentifier rolled over to:" + ( com.android.bluetooth.pbap.BluetoothPbapUtils.sDbIdentifier ) ) ) ; }
private void checkInOptionBase ( javax.lang.model.element.Element annotatedElement ) throws com.google.devtools.common.options.processor.OptionProcessor.OptionProcessorException { if ( ( annotatedElement.getEnclosingElement ( ) . getKind ( ) ) != ( javax.lang.model.element.ElementKind.CLASS ) ) { throw new com.google.devtools.common.options.processor.OptionProcessor.OptionProcessorException ( annotatedElement , "The field should belong to a class." ) ; } javax.lang.model.type.TypeMirror thisOptionClass = annotatedElement.getEnclosingElement ( ) . asType ( ) ; javax.lang.model.type.TypeMirror optionsBase = elementUtils.getTypeElement ( "com.google.devtools.common.options.OptionsBase" ) . asType ( ) ; if ( ! ( typeUtils.isAssignable ( thisOptionClass , optionsBase ) ) ) { throw new com.google.devtools.common.options.processor.OptionProcessor.OptionProcessorException ( annotatedElement , "@Option annotated fields can only be in classes that inherit from OptionsBase." ) ; } }
private android.bluetooth.BluetoothGattService getService ( ) { if ( ( mBluetoothGatt ) == null ) return null ; android.bluetooth.BluetoothGattService service = mBluetoothGatt.getService ( com.android.cts.verifier.bluetooth.BleClientService.SERVICE_UUID ) ; if ( service == null ) { showMessage ( "Service not found" ) ; return null ; } return service ; }
public void clientConnect ( int clientIf , java.lang.String address , boolean isDirect , int transport , int phy ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; service.clientConnect ( clientIf , address , isDirect , transport , phy ) ; }
public void write ( java.io.OutputStream out ) throws java.io.IOException { @ java.lang.SuppressWarnings ( value = "IOResourceOpenedButNotSafelyClosed" ) java.io.DataOutputStream dataOut = new java.io.DataOutputStream ( out ) ; try { dataOut.writeUTF ( myOldBuild ) ; dataOut.writeUTF ( myNewBuild ) ; dataOut.writeBoolean ( myIsBinary ) ; dataOut.writeBoolean ( myIsStrict ) ; writeActions ( dataOut , myActions ) ; } finally { dataOut.flush ( ) ; } }
public void resetMemory ( java.lang.String cardId , @ android.telephony.euicc.EuiccCardManager.ResetOption int options , android.telephony.euicc.EuiccCardManager.ResultCallback < java.lang.Void > callback ) { try { getIEuiccCardController ( ) . resetMemory ( mContext.getOpPackageName ( ) , cardId , options , new com.android.internal.telephony.euicc.IResetMemoryCallback.Stub ( ) { @ java.lang.Override public void onComplete ( int resultCode ) { callback.onComplete ( resultCode , null ) ; } } ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.euicc.EuiccCardManager.TAG , "Error calling resetMemory" , e ) ; throw e.rethrowFromSystemServer ( ) ; } }
public boolean importKey ( java.lang.String keyName , byte [ ] key , int uid ) { try { return ( mBinder.import_key ( keyName , key , uid ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
public synchronized void onAcceptFailed ( ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "PBAP server socket accept thread failed. Restarting the server socket" ) ; if ( ( mWakeLock ) != null ) { mWakeLock.release ( ) ; mWakeLock = null ; } cleanUpServerSocket ( ) ; if ( ( mSessionStatusHandler ) != null ) { mSessionStatusHandler.removeCallbacksAndMessages ( null ) ; } mSessionStatusHandler.sendMessage ( mSessionStatusHandler.obtainMessage ( com.android.bluetooth.pbap.BluetoothPbapService.START_LISTENER ) ) ; }
public final void testVerifyPublicKeyString ( ) throws java.security.InvalidKeyException , java.security.NoSuchAlgorithmException , java.security.NoSuchProviderException , java.security.SignatureException , java.security.cert.CertificateException { java.security.cert.Certificate c1 = new org.apache.harmony.security.tests.support.cert.MyCertificate ( "TEST_TYPE" , tests.security.cert.CertificateTest.testEncoding ) ; c1.verify ( null , null ) ; }
public void showWaitingForDebugger ( android.app.IApplicationThread who , boolean waiting ) { synchronized ( this ) { com.android.server.am.ProcessRecord app = ( who != null ) ? getRecordForAppLocked ( who ) : null ; if ( app == null ) return ; android.os.Message msg = android.os.Message.obtain ( ) ; msg.what = com.android.server.am.ActivityManagerService.WAIT_FOR_DEBUGGER_MSG ; msg.obj = app ; msg.arg1 = ( waiting ) ? 1 : 0 ; mUiHandler.sendMessage ( msg ) ; } }
public void setNetworkSelectionModeAutomatic ( int subId ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) telephony.setNetworkSelectionModeAutomatic ( subId ) ; } catch ( android.os.RemoteException ex ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , "setNetworkSelectionModeAutomatic RemoteException" , ex ) ; } catch ( java.lang.NullPointerException ex ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , "setNetworkSelectionModeAutomatic NPE" , ex ) ; } }
public void closeRttPipes ( ) { }
public java.util.Map < java.lang.String , java.lang.String > getClassData ( com.android.ddmlib.Client client ) { java.io.File hprofLocalFile = com.android.preload.classdataretrieval.hprof.Hprof.doHprof ( client , timeout ) ; if ( hprofLocalFile == null ) { throw new java.lang.RuntimeException ( "Failed getting dump..." ) ; } java.lang.System.out.println ( ( "Dump file is " + hprofLocalFile ) ) ; try { return com.android.preload.classdataretrieval.hprof.Hprof.analyzeHprof ( hprofLocalFile ) ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } }
public void onDataConnectionStateChanged ( int state , int networkType ) { if ( DEBUG ) { android.util.Log.d ( mTag , ( ( ( "onDataConnectionStateChanged: state=" + state ) + " type=" ) + networkType ) ) ; } mDataState = state ; mDataNetType = networkType ; updateTelephony ( ) ; }
public static com.android.sdklib.internal.avd.HardwareProperties.ValueType getEnum ( java.lang.String value ) { for ( com.android.sdklib.internal.avd.HardwareProperties.ValueType type : com.android.sdklib.internal.avd.HardwareProperties.ValueType.values ( ) ) { if ( type.mValue.equals ( value ) ) { return type ; } } return null ; }
public synchronized void fillSwitchMapClass ( @ javax.annotation.Nonnull com.android.jack.transformations.enums.OptimizationUtil supportUtil , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedEnum enumType , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClass switchMapClass ) { this . enumType = enumType ; this . supportUtil = supportUtil ; this . switchMapClass = switchMapClass ; com.android.jack.transformations.request.TransformationRequest transformRequest = new com.android.jack.transformations.request.TransformationRequest ( switchMapClass ) ; if ( com.android.jack.transformations.enums.opt.SyntheticClassManager.isSyntheticSwitchMapClass ( switchMapClass ) ) { createInstanceInitIfNotExists ( transformRequest ) ; } createOrUpdateSyntheticInitializer ( transformRequest ) ; transformRequest.commit ( ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; org.mockito.MockitoAnnotations.initMocks ( this ) ; mContext = mComponentContextFixture.getTestDouble ( ) . getApplicationContext ( ) ; mTestCreateConnectionProcessor = new com.android.server.telecom.CreateConnectionProcessor ( mMockCall , mMockConnectionServiceRepository , mMockCreateConnectionResponse , mMockAccountRegistrar , mContext ) ; }
protected java.lang.String constructCommand ( java.lang.String programName ) { java.lang.StringBuilder commandBuilder = new java.lang.StringBuilder ( ) ; commandBuilder.append ( "dalvikvm64 -Xcompiler-option --compiler-backend=Optimizing " ) ; commandBuilder.append ( "-cp " ) . append ( testLocation ) . append ( "/" ) . append ( programName ) . append ( " " ) ; commandBuilder.append ( executeClass ) ; return commandBuilder.toString ( ) ; }
protected void doOKAction ( ) { final org.jetbrains.plugins.github.GithubAuthData auth = myGithubLoginPanel.getAuthData ( ) ; try { org.jetbrains.plugins.github.GithubUtil.checkAuthData ( auth ) ; saveCredentials ( auth ) ; if ( mySettings.isSavePasswordMakesSense ( ) ) { mySettings.setSavePassword ( myGithubLoginPanel.isSavePasswordSelected ( ) ) ; } super . doOKAction ( ) ; } catch ( java.io.IOException e ) { org.jetbrains.plugins.github.ui.GithubLoginDialog.LOG.info ( e ) ; setErrorText ( ( "Can't login: " + ( org.jetbrains.plugins.github.GithubUtil.getErrorTextFromException ( e ) ) ) ) ; } }
public void simRefresh ( int indicationType , android.hardware.radio.V1_0.SimRefreshResult refreshResult ) { mRil.processIndication ( indicationType ) ; com.android.internal.telephony.uicc.IccRefreshResponse response = new com.android.internal.telephony.uicc.IccRefreshResponse ( ) ; response.refreshResult = refreshResult.type ; response.efId = refreshResult.efId ; response.aid = refreshResult.aid ; if ( RIL.RILJ_LOGD ) mRil.unsljLogRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_SIM_REFRESH , response ) ; if ( ( mRil.mIccRefreshRegistrants ) != null ) { mRil.mIccRefreshRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , response , null ) ) ; } }
public com.android.sdklib.SdkManager.LayoutlibVersion getMaxLayoutlibVersion ( ) { com.android.sdklib.SdkManager.LayoutlibVersion maxVersion = null ; for ( com.android.sdklib.IAndroidTarget target : getTargets ( ) ) { if ( target instanceof com.android.sdklib.PlatformTarget ) { com.android.sdklib.SdkManager.LayoutlibVersion lv = ( ( com.android.sdklib.PlatformTarget ) ( target ) ) . getLayoutlibVersion ( ) ; if ( lv != null ) { if ( ( maxVersion == null ) || ( ( lv.compareTo ( maxVersion ) ) > 0 ) ) { maxVersion = lv ; } } } } return maxVersion ; }
public void testAllDisplayNames ( ) throws java.lang.Exception { for ( java.util.Locale locale : java.util.Locale.getAvailableLocales ( ) ) { for ( java.lang.String id : java.util.TimeZone.getAvailableIDs ( ) ) { java.util.TimeZone tz = java.util.TimeZone.getTimeZone ( id ) ; assertNotNull ( tz.getDisplayName ( false , java.util.TimeZone.LONG , locale ) ) ; } } }
private void endDtmfSession ( com.android.server.telecom.Call call ) { if ( ( call != null ) && ( ( mCall ) == call ) ) { stopTone ( call ) ; mCall = null ; android.telecom.Log.d ( this , "Posting delete." ) ; postMessage ( com.android.server.telecom.DtmfLocalTonePlayer.EVENT_DELETE_OBJECT ) ; } }
private void onLocked ( ) { if ( DBG ) log ( "only fetch EF_LI, EF_PL and EF_ICCID in locked state" ) ; mLockedRecordsRequested = true ; loadEfLiAndEfPl ( ) ; mFh.loadEFTransparent ( com.android.internal.telephony.uicc.EF_ICCID , obtainMessage ( com.android.internal.telephony.uicc.SIMRecords.EVENT_GET_ICCID_DONE ) ) ; ( mRecordsToLoad ) ++ ; }
public void handleCreateConnectionComplete ( java.lang.String id , android.telecom.ConnectionRequest request , android.telecom.ParcelableConnection connection ) { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain ( ) ; args.arg1 = id ; args.arg2 = request ; args.arg3 = connection ; mHandler.obtainMessage ( android.telecom.ConnectionServiceAdapterServant.MSG_HANDLE_CREATE_CONNECTION_COMPLETE , args ) . sendToTarget ( ) ; }
private static boolean checkDunRequired ( android.content.Context ctx ) { final android.telephony.TelephonyManager tm = ctx.getSystemService ( android.telephony.TelephonyManager.class ) ; final int secureSetting = ( tm != null ) ? tm.getTetherApnRequired ( ) : com.android.server.connectivity.Tethering.TetheringConfiguration.DUN_UNSPECIFIED ; return secureSetting == ( com.android.server.connectivity.Tethering.TetheringConfiguration.DUN_REQUIRED ) ; }
public void addAllMarkers ( @ javax.annotation.Nonnull java.util.Collection < com.android.sched.marker.Marker > collection ) { ensureMap ( ) ; for ( com.android.sched.marker.Marker marker : collection ) { assert isValidMarker ( marker ) : ( ( ( "Marker '" + ( com.android.sched.item.Items.getName ( marker.getClass ( ) ) ) ) + "' is not supported for class '" ) + ( this . getClass ( ) . getName ( ) ) ) + "'" ; assert ( markers ) != null ; markers.put ( marker.getClass ( ) , marker ) ; } }
private void notifyUserAction ( boolean enable ) { if ( ( mService ) == null ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "mService is null" ) ; return ; } try { if ( enable ) { mService.onLeServiceUp ( ) ; } else { mService.onBrEdrDown ( ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } }
public com.android.build.gradle.internal.variant.BaseVariantData createVariantData ( @ com.android.annotations.NonNull com.android.builder.core.VariantConfiguration variantConfiguration ) { return new com.android.build.gradle.internal.variant.ApplicationVariantData ( basePlugin , variantConfiguration ) ; }
public boolean requestScores ( android.net.NetworkKey [ ] networks ) { return false ; }
private int getCurrentUserId ( ) { final long ident = android.os.Binder.clearCallingIdentity ( ) ; try { android.content.pm.UserInfo currentUser = android.app.ActivityManagerNative.getDefault ( ) . getCurrentUser ( ) ; return currentUser.id ; } catch ( android.os.RemoteException e ) { } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } return android.os.UserHandle.USER_OWNER ; }
public static synchronized void setDefault ( java.util.TimeZone timeZone ) { java.lang.SecurityManager sm = java.lang.System.getSecurityManager ( ) ; if ( sm != null ) { sm.checkPermission ( new java.util.PropertyPermission ( "user.timezone" , "write" ) ) ; } java.util.TimeZone.defaultTimeZone = ( timeZone != null ) ? ( ( java.util.TimeZone ) ( timeZone.clone ( ) ) ) : null ; android.icu.util.TimeZone.clearCachedDefault ( ) ; }
private void dumpCallTimes ( ) { java.lang.String action ; java.lang.System.out.format ( "id thread global start,end method\n" ) ; for ( com.android.traceview.Call call : mCallList ) { if ( ( call.getMethodAction ( ) ) == 0 ) { action = "+" ; } else { action = " " ; } long callTime = call.mThreadStartTime ; java.lang.System.out.format ( "%2d %6d %8d %8d %s %s\n" , call.getThreadId ( ) , callTime , call.mGlobalStartTime , call.mGlobalEndTime , action , call.getMethodData ( ) . getName ( ) ) ; } }
public java.net.InetAddress getInetAddress ( ) { java.net.SocketAddress remote = sc.remoteAddress ( ) ; if ( remote == null ) { return null ; } else { return ( ( java.net.InetSocketAddress ) ( remote ) ) . getAddress ( ) ; } }
public void onRequestFocus ( ) { org.chromium.base.TraceEvent.begin ( ) ; if ( ( mWebChromeClient ) != null ) { if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onRequestFocus" ) ; mWebChromeClient.onRequestFocus ( mWebView ) ; } org.chromium.base.TraceEvent.end ( ) ; }
com.android.jack.ir.InternalCompilerException translateException ( java.lang.Throwable e ) { if ( e instanceof java.lang.VirtualMachineError ) { throw ( ( java.lang.VirtualMachineError ) ( e ) ) ; } com.android.jack.ir.InternalCompilerException ice ; if ( e instanceof com.android.jack.ir.InternalCompilerException ) { ice = ( ( com.android.jack.ir.InternalCompilerException ) ( e ) ) ; } else { ice = new com.android.jack.ir.InternalCompilerException ( "Error constructing Java AST" , e ) ; } return ice ; }
public void execute ( android.hardware.cts.helpers.TestSensorManager sensorManager , android.hardware.cts.helpers.TestSensorEventListener listener ) throws java.lang.InterruptedException { try { sensorManager.registerListener ( listener ) ; android.hardware.cts.helpers.SensorCtsHelper.sleep ( duration , timeUnit ) ; java.util.concurrent.CountDownLatch latch = sensorManager.requestFlush ( ) ; listener.waitForFlushComplete ( latch , true ) ; } finally { sensorManager.unregisterListener ( ) ; } }
public void testOverlay1Content ( ) throws java.lang.Exception { java.io.File project = buildProject ( "overlay1" , BasePlugin.GRADLE_MIN_VERSION ) ; java.io.File drawableOutput = new java.io.File ( project , "build/res/all/debug/drawable" ) ; com.android.build.gradle.ManualBuildTest.checkImageColor ( drawableOutput , "no_overlay.png" , ( ( int ) ( - 16711936 ) ) ) ; com.android.build.gradle.ManualBuildTest.checkImageColor ( drawableOutput , "type_overlay.png" , ( ( int ) ( - 16711936 ) ) ) ; }
public void afterCheckProject ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context ) { if ( ! ( context.getProject ( ) . getReportIssues ( ) ) ) { return ; } com.android.tools.lint.detector.api.Project project = context.getProject ( ) ; java.io.File projectFolder = project.getDir ( ) ; checkFolder ( context , new java.io.File ( projectFolder , "res" ) ) ; checkFolder ( context , new java.io.File ( projectFolder , "assets" ) ) ; for ( java.io.File srcFolder : project.getJavaSourceFolders ( ) ) { checkFolder ( context , srcFolder ) ; } }
private void freeLoadedPrograms ( ) { java.util.Collection < com.android.jack.server.JackHttpServer.Program < com.android.jack.api.JackProvider > > programs = getInstalledJacks ( ) ; for ( com.android.jack.server.JackHttpServer.Program < com.android.jack.api.JackProvider > program : programs ) { synchronized ( program ) { program.setLoadedProgram ( null ) ; } } java.lang.System.gc ( ) ; }
private static void checkIndex ( int length , int offset , int count ) { if ( offset < 0 ) { throw new java.lang.IndexOutOfBoundsException ( "offset < 0" ) ; } else if ( count < 0 ) { throw new java.lang.IndexOutOfBoundsException ( "count < 0" ) ; } else if ( offset > length ) { throw new java.lang.IndexOutOfBoundsException ( "offset > length" ) ; } else if ( offset > ( length - count ) ) { throw new java.lang.IndexOutOfBoundsException ( "offset + count > length" ) ; } }
public boolean isA ( com.android.manifmerger.ManifestModel.NodeTypes type ) { return ( this . mType ) == type ; }
public void onConnectionEvent ( java.lang.String callId , java.lang.String event , android.os.Bundle extras ) { android.telecom.Log.startSession ( "CSW.oCE" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { android.os.Bundle.setDefusable ( extras , true ) ; com.android.server.telecom.Call call = mCallIdMapper.getCall ( callId ) ; if ( call != null ) { call.onConnectionEvent ( event , extras ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; android.telecom.Log.endSession ( ) ; } }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall methodCall ) { com.android.jack.ir.ast.JMethodIdWide id = methodCall.getMethodId ( ) ; if ( id.containsMarker ( com.android.jack.transformations.ast.inner.NeedsDispatchAdjustment.class ) ) { com.android.jack.ir.ast.JExpression instance = methodCall.getInstance ( ) ; if ( instance != null ) { tr.append ( new com.android.jack.transformations.request.Remove ( instance ) ) ; tr.append ( new com.android.jack.transformations.request.AppendArgument ( methodCall , instance ) ) ; } } return super . visit ( methodCall ) ; }
public void allowLowRssiIfDataIsMoving ( ) throws java.lang.Exception { mWifiInfo.setRssi ( ( - 80 ) ) ; mWifiInfo.setLinkSpeed ( 6 ) ; mWifiInfo.txSuccessRate = 5.1 ; mWifiInfo.rxSuccessRate = 5.1 ; for ( int i = 0 ; i < 10 ; i ++ ) { mWifiScoreReport.calculateAndReportScore ( mWifiInfo , mNetworkAgent , 0 , mWifiMetrics ) ; } int score = mWifiInfo.score ; org.junit.Assert.assertTrue ( ( score > ( com.android.server.wifi.WifiScoreReportTest.CELLULAR_THRESHOLD_SCORE ) ) ) ; }
public static void assertEquals ( java.lang.Object expected , java.lang.Object actual ) { if ( ( expected == null ) && ( actual == null ) ) return ; if ( ( expected != null ) && ( expected.equals ( actual ) ) ) return ; throw new java.lang.RuntimeException ( "AssertionFailedError: not the same" ) ; }
public void testEnded ( com.android.ddmlib.testrunner.TestIdentifier test , java.util.Map < java.lang.String , java.lang.String > testMetrics ) { if ( ! ( mFailedTests.remove ( test ) ) ) { if ( ( mLogger ) != null ) { mLogger.info ( java.lang.String.format ( "\n%1$s: %2$s > %3$s [32mSUCCESS [0m" , mDeviceName , test.getClassName ( ) , test.getTestName ( ) ) ) ; } } super . testEnded ( test , testMetrics ) ; }
private void terminateCall ( ) { if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , "terminateCall" ) ; } int action = HeadsetClientHalConstants.CALL_ACTION_CHUP ; android.bluetooth.BluetoothHeadsetClientCall c = getCall ( BluetoothHeadsetClientCall.CALL_STATE_DIALING , BluetoothHeadsetClientCall.CALL_STATE_ALERTING , BluetoothHeadsetClientCall.CALL_STATE_ACTIVE ) ; if ( c != null ) { if ( handleCallActionNative ( getByteAddress ( mCurrentDevice ) , action , 0 ) ) { addQueuedAction ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TERMINATE_CALL , action ) ; } else { android.util.Log.e ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , "ERROR: Couldn't terminate outgoing call" ) ; } } }
private static int log10Floor ( int x ) { int y = com.google.common.math.IntMath.MAX_LOG10_FOR_LEADING_ZEROS [ java.lang.Integer.numberOfLeadingZeros ( x ) ] ; int sgn = ( x - ( com.google.common.math.IntMath.POWERS_OF_10 [ y ] ) ) > > > ( ( java.lang.Integer.SIZE ) - 1 ) ; return y - sgn ; }
public void testDismissKeyguardActivity ( ) throws java.lang.Exception { if ( ( ! ( isHandheld ( ) ) ) || ( isUiModeLockedToVrHeadset ( ) ) ) { return ; } gotoKeyguard ( ) ; mAmWmState.computeState ( mDevice , null ) ; assertTrue ( mAmWmState.getAmState ( ) . getKeyguardControllerState ( ) . keyguardShowing ) ; launchActivity ( "DismissKeyguardActivity" ) ; mAmWmState.waitForKeyguardShowingAndOccluded ( mDevice ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { "DismissKeyguardActivity" } ) ; mAmWmState.assertVisibility ( "DismissKeyguardActivity" , true ) ; assertShowingAndOccluded ( ) ; }
public static org.jetbrains.plugins.github.api.GithubIssue getIssue ( @ org.jetbrains.annotations.NotNull org.jetbrains.plugins.github.api.GithubAuthData auth , @ org.jetbrains.annotations.NotNull java.lang.String user , @ org.jetbrains.annotations.NotNull java.lang.String repo , @ org.jetbrains.annotations.NotNull java.lang.String id ) throws java.io.IOException { java.lang.String path = ( ( ( ( "/repos/" + user ) + "/" ) + repo ) + "/issues/" ) + id ; com.google.gson.JsonElement result = org.jetbrains.plugins.github.api.GithubApiUtil.getRequest ( auth , path ) ; return org.jetbrains.plugins.github.api.GithubApiUtil.createDataFromRaw ( org.jetbrains.plugins.github.api.GithubApiUtil.fromJson ( result , org.jetbrains.plugins.github.api.GithubIssueRaw.class ) , org.jetbrains.plugins.github.api.GithubIssue.class ) ; }
public void test_getContentLength ( ) { assertEquals ( org.apache.harmony.luni.tests.java.net.URLConnectionTest.testString.getBytes ( ) . length , fileURLCon.getContentLength ( ) ) ; assertEquals ( Support_TestWebData.test1.length , uc.getContentLength ( ) ) ; assertEquals ( Support_TestWebData.test2.length , uc2.getContentLength ( ) ) ; assertNotNull ( jarURLCon.getContentLength ( ) ) ; assertNotNull ( gifURLCon.getContentLength ( ) ) ; }
public final void testPrettyName ( ) { assertEquals ( null , com.android.ide.common.layout.BaseView.prettyName ( null ) ) ; assertEquals ( "" , com.android.ide.common.layout.BaseView.prettyName ( "" ) ) ; assertEquals ( "Foo" , com.android.ide.common.layout.BaseView.prettyName ( "foo" ) ) ; assertEquals ( "Foo bar" , com.android.ide.common.layout.BaseView.prettyName ( "foo_bar" ) ) ; }
public void onPlayDtmfTone ( char c ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , ( ( ( "onPlayDtmfTone " + c ) + " " ) + ( mCurrentCall ) ) ) ; if ( ( ! ( mClosed ) ) && ( ( mHeadsetProfile ) != null ) ) { mHeadsetProfile.sendDTMF ( mDevice , ( ( byte ) ( c ) ) ) ; } }
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( ( ( "LibraryBundle{" + "mBundle=" ) + ( mBundle ) ) + ", mBundleFolder=" ) + ( mBundleFolder ) ) + ", mName='" ) + ( mName ) ) + '\'' ) + ", mProjectPath='" ) + ( mProjectPath ) ) + '\'' ) + '}' ; }
public boolean isPossibleShortNumberForRegion ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number , java.lang.String regionDialingFrom ) { com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata phoneMetadata = com.google.i18n.phonenumbers.MetadataManager.getShortNumberMetadataForRegion ( regionDialingFrom ) ; if ( phoneMetadata == null ) { return false ; } return matcherApi.matchesPossibleNumber ( com.google.i18n.phonenumbers.ShortNumberInfo.getNationalSignificantNumber ( number ) , phoneMetadata.getGeneralDesc ( ) ) ; }
public void eventSubscribeTerminated ( short sessionId , android.hardware.wifi.V1_0.WifiNanStatus status ) { if ( com.android.server.wifi.aware.WifiAwareNativeCallback.VDBG ) { android.util.Log.v ( com.android.server.wifi.aware.WifiAwareNativeCallback.TAG , ( ( ( "eventSubscribeTerminated: sessionId=" + sessionId ) + ", status=" ) + ( com.android.server.wifi.aware.WifiAwareNativeCallback.statusString ( status ) ) ) ) ; } mWifiAwareStateManager.onSessionTerminatedNotification ( sessionId , status.status , false ) ; }
public void handleMessage ( android.os.Message msg , @ android.support.annotation.NonNull com.android.tv.data.epg.EpgFetcher epgFetcher ) { switch ( msg.what ) { case com.android.tv.data.epg.EpgFetcher.MSG_FETCH_EPG : epgFetcher.onFetchEpg ( ) ; break ; default : super . handleMessage ( msg ) ; break ; } }
private void reset ( ) { final org.conscrypt.OpenSSLKey macKey = this . macKey ; if ( macKey == null ) { return ; } org.conscrypt.NativeCrypto.EVP_DigestSignInit ( ctx.getContext ( ) , evp_md , macKey.getPkeyContext ( ) ) ; }
public void testHasPackageNoPackage ( ) { android.content.Intent intent = new android.content.Intent ( ) ; assertFalse ( android.support.test.espresso.intent.matcher.IntentMatchers.hasPackage ( "com.foo.bar" ) . matches ( intent ) ) ; assertFalse ( android.support.test.espresso.intent.matcher.IntentMatchers.hasPackage ( org.hamcrest.Matchers.equalTo ( "com.foo.bar" ) ) . matches ( intent ) ) ; }
private static char bcdToChar ( byte b ) { if ( b < 10 ) { return ( ( char ) ( '0' + b ) ) ; } else switch ( b ) { case 10 : return '*' ; case 11 : return '#' ; case 12 : return android.telephony.PhoneNumberUtils.PAUSE ; case 13 : return android.telephony.PhoneNumberUtils.WILD ; default : return 0 ; } }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mDevice = getDevice ( ) ; }
public char [ ] formatLong ( long value , java.text.FieldPosition field ) { libcore.icu.NativeDecimalFormat.FieldPositionIterator fpi = libcore.icu.NativeDecimalFormat.FieldPositionIterator.forFieldPosition ( field ) ; char [ ] result = libcore.icu.NativeDecimalFormat.formatLong ( this . address , value , fpi ) ; if ( fpi != null ) { libcore.icu.NativeDecimalFormat.FieldPositionIterator.setFieldPosition ( fpi , field ) ; } return result ; }
public void visitAttribute ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Attr attribute ) { com.android.tools.lint.detector.api.Project mainProject = context.getMainProject ( ) ; if ( mainProject.isGradleProject ( ) ) { java.lang.Boolean appCompat = mainProject.dependsOn ( "com.android.support:appcompat-v7" ) ; if ( com.android.SdkConstants.ANDROID_URI.equals ( attribute.getNamespaceURI ( ) ) ) { if ( ( context.getFolderVersion ( ) ) >= 14 ) { return ; } if ( appCompat == ( java.lang.Boolean.TRUE ) ) { context.report ( com.android.tools.lint.checks.AppCompatResourceDetector.ISSUE , attribute , context.getLocation ( attribute ) , ( "Should use app:showAsAction with the appcompat library with " + "xmlns:app=\"http://schemas.android.com/apk/res-auto\"" ) , null ) ; } } else { if ( appCompat == ( java.lang.Boolean.FALSE ) ) { context.report ( com.android.tools.lint.checks.AppCompatResourceDetector.ISSUE , attribute , context.getLocation ( attribute ) , "Should use android:showAsAction when not using the appcompat library" , null ) ; } } } }
public void copyFrom ( short [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copyFrom" ) ; mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFrom ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFrom ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFrom ( 0 , mCurrentCount , d ) ; } android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
private static void assertMultipleInstanceCharacteristics ( java.lang.Object r1 , java.lang.Object r2 ) throws java.lang.Exception { org.junit.Assert.assertNotSame ( r1 , r2 ) ; org.junit.Assert.assertTrue ( ( ! ( r1.equals ( r2 ) ) ) ) ; java.lang.Class < ? > lambda1Class = r1.getClass ( ) ; java.lang.Class < ? > lambda2Class = r2.getClass ( ) ; org.junit.Assert.assertNotSame ( lambda1Class , lambda2Class ) ; }
public com.android.util.Pair < java.lang.Boolean , java.io.File > installPlatformPackage ( int apiLevel ) { mPackageFilter = com.android.sdkuilib.internal.repository.sdkman2.AdtUpdateDialog.createPlatformFilter ( apiLevel ) ; open ( ) ; java.io.File installPath = null ; if ( ( mResultPaths ) != null ) { for ( java.util.Map.Entry < java.lang.Package , java.io.File > entry : mResultPaths.entrySet ( ) ) { if ( ( entry.getKey ( ) ) instanceof com.android.sdklib.internal.repository.PlatformPackage ) { installPath = entry.getValue ( ) ; break ; } } } return com.android.util.Pair.of ( mResultCode , installPath ) ; }
private static long createTime ( android.icu.util.TimeZone timeZone , int year , int monthOfYear , int dayOfMonth , int hourOfDay , int minuteOfHour , int secondOfMinute ) { android.icu.util.Calendar cal = new android.icu.util.GregorianCalendar ( timeZone ) ; cal.clear ( ) ; cal.set ( year , ( monthOfYear - 1 ) , dayOfMonth , hourOfDay , minuteOfHour , secondOfMinute ) ; return cal.getTimeInMillis ( ) ; }
private void configureFilterParamter ( int clientIf , com.android.bluetooth.gatt.ScanClient client , int featureSelection , int filterIndex ) { int deliveryMode = getDeliveryMode ( client ) ; int rssiThreshold = java.lang.Byte.MIN_VALUE ; int timeout = getOnfoundLostTimeout ( client ) ; gattClientScanFilterParamAddNative ( clientIf , filterIndex , featureSelection , com.android.bluetooth.gatt.ScanManager.ScanNative.LIST_LOGIC_TYPE , com.android.bluetooth.gatt.ScanManager.ScanNative.FILTER_LOGIC_TYPE , rssiThreshold , rssiThreshold , deliveryMode , timeout , timeout , com.android.bluetooth.gatt.ScanManager.ScanNative.ONFOUND_SIGHTINGS ) ; }
public void methodAbstract ( ) throws java.lang.Exception { com.android.jack.ir.ast.JDefinedClassOrInterface type = ( ( com.android.jack.ir.ast.JDefinedClassOrInterface ) ( session.getLookup ( ) . getType ( classSignature ) ) ) ; junit.framework.Assert.assertNotNull ( type ) ; com.android.jack.ir.ast.JMethod method = com.android.jack.TestTools.getMethod ( type , "methodAbstract()V" ) ; junit.framework.Assert.assertNotNull ( method ) ; junit.framework.Assert.assertTrue ( method.isAbstract ( ) ) ; }
private void showAvdManagerWindow ( ) { try { com.android.sdkuilib.internal.widgets.MessageBoxLog errorLogger = new com.android.sdkuilib.internal.widgets.MessageBoxLog ( "AVD Manager" , org.eclipse.swt.widgets.Display.getCurrent ( ) , true ) ; com.android.sdkuilib.internal.repository.AvdManagerWindowImpl1 window = new com.android.sdkuilib.internal.repository.AvdManagerWindowImpl1 ( null , errorLogger , mOsSdkFolder , com.android.sdkuilib.repository.UpdaterWindow.InvocationContext.STANDALONE ) ; window.registerPage ( com.android.sdkmanager.internal.repository.SettingsPage.class , UpdaterPage.Purpose.SETTINGS ) ; window.registerPage ( com.android.sdkmanager.internal.repository.AboutPage.class , UpdaterPage.Purpose.ABOUT_BOX ) ; window.open ( ) ; errorLogger.displayResult ( true ) ; } catch ( java.lang.Exception e ) { e.printStackTrace ( ) ; } }
private static void setWifiCountryCodeFromMcc ( android.content.Context context , int mcc ) { java.lang.String country = com.android.internal.telephony.MccTable.countryCodeForMcc ( mcc ) ; if ( ! ( country.isEmpty ( ) ) ) { android.util.Log.d ( com.android.internal.telephony.MccTable.LOG_TAG , ( "WIFI_COUNTRY_CODE set to " + country ) ) ; android.net.wifi.WifiManager wM = ( ( android.net.wifi.WifiManager ) ( context.getSystemService ( Context.WIFI_SERVICE ) ) ) ; wM.setCountryCode ( country , true ) ; } }
public void onLinkPropertiesChanged ( android.net.Network network , android.net.LinkProperties linkProperties ) { com.googlecode.android_scripting.Log.d ( "NetworkCallback onLinkPropertiesChanged" ) ; if ( ( ( mEvents ) & ( com.googlecode.android_scripting.facade.ConnectivityManagerFacade.NetworkCallback.EVENT_LINK_PROPERTIES_CHANGED ) ) == ( com.googlecode.android_scripting.facade.ConnectivityManagerFacade.NetworkCallback.EVENT_LINK_PROPERTIES_CHANGED ) ) { mEventFacade.postEvent ( ConnectivityConstants.EventNetworkCallback , new com.googlecode.android_scripting.facade.ConnectivityEvents.NetworkCallbackEventOnLinkPropertiesChanged ( mId , com.googlecode.android_scripting.facade.ConnectivityManagerFacade.getNetworkCallbackEventString ( com.googlecode.android_scripting.facade.ConnectivityManagerFacade.NetworkCallback.EVENT_LINK_PROPERTIES_CHANGED ) , linkProperties.getInterfaceName ( ) ) ) ; } }
public void test18566 ( ) throws java.lang.Exception { java.security.spec.X509EncodedKeySpec keySpec = new java.security.spec.X509EncodedKeySpec ( libcore.java.security.SignatureTest.PK_BYTES ) ; java.security.KeyFactory keyFactory = java.security.KeyFactory.getInstance ( "RSA" ) ; java.security.PublicKey pk = keyFactory.generatePublic ( keySpec ) ; java.security.Signature sig = java.security.Signature.getInstance ( "SHA256withRSA" ) ; sig.initVerify ( pk ) ; sig.update ( libcore.java.security.SignatureTest.CONTENT ) ; assertTrue ( sig.verify ( libcore.java.security.SignatureTest.SIGNATURE ) ) ; }
public static com.android.server.wifi.aware.WifiAwareNative getInstance ( ) { com.android.server.wifi.WifiNative dummy = com.android.server.wifi.WifiNative.getWlanNativeInterface ( ) ; if ( dummy == null ) { android.util.Log.w ( com.android.server.wifi.aware.WifiAwareNative.TAG , "can't get access to WifiNative" ) ; return null ; } if ( ( com.android.server.wifi.aware.WifiAwareNative.sWifiAwareNativeSingleton ) == null ) { com.android.server.wifi.aware.WifiAwareNative.sWifiAwareNativeSingleton = new com.android.server.wifi.aware.WifiAwareNative ( ) ; com.android.server.wifi.aware.WifiAwareNative.registerAwareNatives ( ) ; } return com.android.server.wifi.aware.WifiAwareNative.sWifiAwareNativeSingleton ; }
com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir getVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.NoSuchFileException , com.android.sched.util.file.NotDirectoryException { com.android.sched.vfs.BaseVElement element = parent.getFromCache ( name ) ; if ( element != null ) { if ( element.isVDir ( ) ) { return ( ( com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir ) ( element ) ) ; } else { throw new com.android.sched.util.file.NotDirectoryException ( getVDirLocation ( parent , name ) ) ; } } else { throw new com.android.sched.util.file.NoSuchFileException ( getVDirLocation ( parent , name ) ) ; } }
public void testProxyConnection_Not_Found_Response ( ) throws java.lang.Throwable { org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.setUpStoreProperties ( ) ; java.net.ServerSocket ss = new java.net.ServerSocket ( 0 ) ; org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.TestHostnameVerifier hnv = new org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.TestHostnameVerifier ( ) ; javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier ( hnv ) ; java.net.URL url = new java.net.URL ( ( "https://localhost:" + ( ss.getLocalPort ( ) ) ) ) ; javax.net.ssl.HttpsURLConnection connection = ( ( javax.net.ssl.HttpsURLConnection ) ( url.openConnection ( new java.net.Proxy ( java.net.Proxy.Type.HTTP , new java.net.InetSocketAddress ( "localhost" , ss.getLocalPort ( ) ) ) ) ) ) ; connection.setSSLSocketFactory ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.getContext ( ) . getSocketFactory ( ) ) ; try { org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.doInteraction ( connection , ss , org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.NOT_FOUND_CODE ) ; fail ( "Expected exception was not thrown." ) ; } catch ( java.io.FileNotFoundException e ) { if ( org.apache.harmony.luni.tests.internal.net.www.protocol.https.HttpsURLConnectionTest.DO_LOG ) { java.lang.System.out.println ( ( "Expected exception was thrown: " + ( e.getMessage ( ) ) ) ) ; } } }
public void setBluetoothTethering ( boolean value ) { if ( android.bluetooth.BluetoothPan.DBG ) android.bluetooth.BluetoothPan.log ( ( ( "setBluetoothTethering(" + value ) + ")" ) ) ; if ( ( ( mPanService ) != null ) && ( isEnabled ( ) ) ) { try { mPanService.setBluetoothTethering ( value ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothPan.TAG , ( "Stack:" + ( android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ) ) ; } } }
public static java.security.KeyFactory getInstance ( java.lang.String algorithm , java.security.Provider provider ) throws java.security.NoSuchAlgorithmException { sun.security.jca.GetInstance.Instance instance = sun.security.jca.GetInstance.getInstance ( "KeyFactory" , java.security.KeyFactorySpi.class , algorithm , provider ) ; return new java.security.KeyFactory ( ( ( java.security.KeyFactorySpi ) ( instance.impl ) ) , instance.provider , algorithm ) ; }
public void testGetValues013_String ( ) { long classID = getClassIDBySignature ( getDebuggeeClassSignature ( ) ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value expectedValue = getStaticFieldValue ( classID , "STRING_PARAM_VALUE" ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester ( "breakpointString" , StackTrace002Debuggee.STRING_SIGNAL ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod ( "runBreakpointString" ) ; methodInfo.addVariable ( "param" , expectedValue ) ; runStackFrameTest ( tester ) ; }
public static java.lang.String intToDoubleToIntPrint ( int value ) { double d = ( ( double ) ( value ) ) ; int i = ( ( int ) ( d ) ) ; return ( ( "d=" + d ) + ", i=" ) + i ; }
private void initializeGlobals ( com.android.rs.test.RenderScript RS , com.android.rs.test.ScriptC_single_source_script s ) { com.android.rs.test.Type.Builder i32TypeBuilder = new com.android.rs.test.Type.Builder ( RS , com.android.rs.test.Element.I32 ( RS ) ) ; int X = 1024 ; int Y = 768 ; s.set_dimX ( X ) ; s.set_dimY ( Y ) ; i32TypeBuilder.setX ( X ) . setY ( Y ) ; testAllocation1 = com.android.rs.test.Allocation.createTyped ( RS , i32TypeBuilder.create ( ) ) ; testAllocation2 = com.android.rs.test.Allocation.createTyped ( RS , i32TypeBuilder.create ( ) ) ; }
private com.android.builder.VariantConfiguration getVariantWithManifestVersion ( final java.lang.String versionName ) { com.android.builder.VariantConfiguration variant = new com.android.builder.VariantConfiguration ( mDefaultConfig , new com.android.builder.MockSourceProvider ( "main" ) , mBuildType , new com.android.builder.MockSourceProvider ( "debug" ) , VariantConfiguration.Type.DEFAULT ) { @ java.lang.Override public java.lang.String getVersionNameFromManifest ( ) { return versionName ; } @ java.lang.Override protected void validate ( ) { } } ; variant.addProductFlavor ( mFlavorConfig , new com.android.builder.MockSourceProvider ( "custom" ) ) ; return variant ; }
public void partActivated ( org.eclipse.ui.IWorkbenchPart part ) { if ( part == ( getEditor ( ) ) ) { if ( ( mGraphicalEditor ) != null ) { if ( ( getEditor ( ) . getActivePage ( ) ) == ( mGraphicalEditorIndex ) ) { mGraphicalEditor.activated ( ) ; } else { mGraphicalEditor.deactivated ( ) ; } } } }
public static void recordEnumeratedHistogram ( java.lang.String name , int sample , int boundary ) { if ( org.chromium.base.metrics.RecordHistogram.sIsDisabledForTests ) return ; long key = org.chromium.base.metrics.RecordHistogram.getCachedHistogramKey ( name ) ; long result = org.chromium.base.metrics.RecordHistogram.nativeRecordEnumeratedHistogram ( name , key , sample , boundary ) ; if ( result != key ) org.chromium.base.metrics.RecordHistogram.sCache.put ( name , result ) ; }
public void run ( ) { mAwContents.loadUrl ( loadUrlParams ) ; }
private long computeSerialVersionUID ( final java.lang.String className ) throws java.io.IOException { final long [ ] svuid = new long [ 1 ] ; org.objectweb.asm.ClassVisitor cv = new org.objectweb.asm.commons.SerialVersionUIDAdder ( null ) { @ java.lang.Override protected long computeSVUID ( ) throws java.io.IOException { svuid [ 0 ] = super . computeSVUID ( ) ; return svuid [ 0 ] ; } } ; new org.objectweb.asm.ClassReader ( className ) . accept ( cv , 0 ) ; return svuid [ 0 ] ; }
public void testOnSetUpSancovEnabled ( ) throws java.lang.Exception { doReturn ( "walleye_asan_coverage-userdebug" ) . when ( mDevice ) . getBuildFlavor ( ) ; createTestFile ( SYMBOLS_FILE_NAME ) ; createTestFile ( BUILD_INFO_ARTIFACT ) ; mPreparer.setUp ( mDevice , mBuildInfo ) ; verify ( mBuildInfo , times ( 1 ) ) . setFile ( eq ( com.android.tradefed.targetprep.VtsCoveragePreparer.getSancovResourceDirKey ( mDevice ) ) , eq ( mDeviceInfoPath ) , eq ( "build_id" ) ) ; }
com.android.server.pm.PackageSetting getPackageLPw ( android.content.pm.PackageParser.Package pkg , com.android.server.pm.PackageSetting origPackage , java.lang.String realName , com.android.server.pm.SharedUserSetting sharedUser , java.io.File codePath , java.io.File resourcePath , java.lang.String legacyNativeLibraryPathString , java.lang.String primaryCpuAbi , java.lang.String secondaryCpuAbi , int pkgFlags , android.os.UserHandle user , boolean add ) { final java.lang.String name = pkg.packageName ; com.android.server.pm.PackageSetting p = getPackageLPw ( name , origPackage , realName , sharedUser , codePath , resourcePath , legacyNativeLibraryPathString , primaryCpuAbi , secondaryCpuAbi , pkg.mVersionCode , pkgFlags , user , add , true ) ; return p ; }
private boolean bbHasOnlyDefinitions ( @ javax.annotation.Nonnull com.android.jack.cfg.BasicBlock bb , @ javax.annotation.Nonnull com.android.jack.ir.ast.JVariable var , @ javax.annotation.Nonnull java.util.List < com.android.jack.analysis.DefinitionMarker > defsToFound ) { int nbDef = 0 ; for ( com.android.jack.analysis.DefinitionMarker def : com.android.jack.util.OptimizationTools.getReachingDefs ( bb ) ) { if ( ( def.getDefinedVariable ( ) ) == var ) { if ( defsToFound.contains ( def ) ) { nbDef ++ ; } else { return false ; } } } return ( defsToFound.size ( ) ) == nbDef ; }
public void installAppAndLaunch ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation ( ) ; com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , "RsHelloCompute" ) ; assertTrue ( testFramework.getDevice ( ) . findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( Res.APP_IMAGE_VIEW_ID ) ) . exists ( ) ) ; }
protected void finalize ( ) { _finalize ( mUniqueId ) ; }
private void verifyNoCodecConfigIntent ( int timeoutMs ) { android.content.Intent intent = waitForNoIntent ( timeoutMs , mCodecConfigChangedQueue ) ; org.junit.Assert.assertNull ( intent ) ; }
public void setDiscoverableTimeout ( int timeout ) { if ( ( getState ( ) ) != ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) return ; try { synchronized ( mManagerCallback ) { if ( ( mService ) != null ) mService.setDiscoverableTimeout ( timeout ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } }
synchronized long nClosureCreate ( long kernelID , long returnValue , long [ ] fieldIDs , long [ ] values , int [ ] sizes , long [ ] depClosures , long [ ] depFieldIDs ) { validate ( ) ; return rsnClosureCreate ( mContext , kernelID , returnValue , fieldIDs , values , sizes , depClosures , depFieldIDs ) ; }
private boolean needFullBuild ( ) { return true ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.lang.System.loadLibrary ( args [ 1 ] ) ; Main.doTest ( ) ; Main.doTestOtherThreadWait ( ) ; Main.doTestOtherThreadBusyLoop ( ) ; }
public void testHandleUserUnlockAfterBootupBeforeLegacyStoreMigration ( ) throws java.lang.Exception { int user1 = com.android.server.wifi.WifiConfigManagerTest.TEST_DEFAULT_USER ; mWifiConfigManager.handleUserUnlock ( user1 ) ; mContextConfigStoreMockOrder.verify ( mWifiConfigStore , never ( ) ) . switchUserStoreAndRead ( any ( WifiConfigStore.StoreFile.class ) ) ; mContextConfigStoreMockOrder.verify ( mWifiConfigStore , never ( ) ) . write ( anyBoolean ( ) , any ( com.android.server.wifi.WifiConfigStoreData.class ) ) ; }
public int getAllowScansWithTraffic ( ) { return mWifiConfigManager.mAlwaysEnableScansWhileAssociated.get ( ) ; }
public boolean p2pGroupAdd ( boolean persistent ) { if ( ( com.android.server.wifi.WifiNative.HIDL_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.groupAdd ( persistent ) ; } else { if ( persistent ) { return doBooleanCommand ( "P2P_GROUP_ADD persistent" ) ; } return doBooleanCommand ( "P2P_GROUP_ADD" ) ; } }
public final byte [ ] doFinal ( byte [ ] input , int inputOffset , int inputLen ) throws javax.crypto.BadPaddingException , javax.crypto.IllegalBlockSizeException { if ( ( ( mode ) != ( javax.crypto.Cipher.ENCRYPT_MODE ) ) && ( ( mode ) != ( javax.crypto.Cipher.DECRYPT_MODE ) ) ) { throw new java.lang.IllegalStateException ( ) ; } javax.crypto.Cipher.checkInputOffsetAndCount ( input.length , inputOffset , inputLen ) ; return spiImpl.engineDoFinal ( input , inputOffset , inputLen ) ; }
private void updatePassButton ( ) { getPassButton ( ) . setEnabled ( mAdapter.allTestsPassed ( ) ) ; }
public void makeOptionsObjects ( ) { cfOptions = new com.android.dx.dex.cf.CfOptions ( ) ; cfOptions.positionInfo = positionInfo ; cfOptions.localInfo = localInfo ; cfOptions.strictNameCheck = strictNameCheck ; cfOptions.optimize = optimize ; cfOptions.optimizeListFile = optimizeListFile ; cfOptions.dontOptimizeListFile = dontOptimizeListFile ; cfOptions.statistics = statistics ; if ( warnings ) { cfOptions.warn = context.err ; } else { cfOptions.warn = context.noop ; } dexOptions = new com.android.dx.dex.DexOptions ( ) ; dexOptions.forceJumbo = forceJumbo ; }
public android.telephony.CellLocation getCellLocation ( ) { return mSST.cellLoc ; }
boolean virtualUnplug ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hid.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH_ADMIN permission" ) ; if ( com.android.bluetooth.hid.HidService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidService.TAG , ( "virtualUnplug: " + ( device.getAddress ( ) ) ) ) ; } int state = this . getConnectionState ( device ) ; if ( state != ( android.bluetooth.BluetoothHidHost.STATE_CONNECTED ) ) { return false ; } android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidService.MESSAGE_VIRTUAL_UNPLUG , device ) ; mHandler.sendMessage ( msg ) ; return true ; }
protected org.eclipse.swt.widgets.Control createDialogArea ( org.eclipse.swt.widgets.Composite parent ) { org.eclipse.swt.widgets.Composite contents = ( ( org.eclipse.swt.widgets.Composite ) ( super . createDialogArea ( parent ) ) ) ; createRadioControl ( contents ) ; createFilterText ( contents ) ; createFilteredList ( contents ) ; chooseNode ( mChosenRootNode ) ; setInitialSelection ( mChosenRootNode ) ; return contents ; }
public java.lang.String toString ( ) { java.lang.String toString = mSourceLocation.print ( true ) ; if ( ( mPosition ) != null ) { toString += ( ( ":" + ( mPosition.getLine ( ) ) ) + ":" ) + ( mPosition.getColumn ( ) ) ; } return toString ; }
private void sortPackages ( boolean updateButtons ) { if ( ( ( ( mCheckSortApi ) != null ) && ( ! ( mCheckSortApi.isDisposed ( ) ) ) ) && ( mCheckSortApi.getSelection ( ) ) ) { sortByAPI ( ) ; } else { sortBySource ( ) ; } if ( updateButtons ) { updateButtonsState ( ) ; } }
protected void enableService ( ) { android.autofillservice.cts.Helper.enableAutofillService ( android.autofillservice.cts.Helper.getContext ( ) , android.autofillservice.cts.InstrumentedAutoFillService.SERVICE_NAME ) ; android.autofillservice.cts.InstrumentedAutoFillService.setIgnoreUnexpectedRequests ( false ) ; }
public int migrateNetworksFromSupplicant ( java.util.Map < java.lang.String , android.net.wifi.WifiConfiguration > configs , android.util.SparseArray < java.util.Map < java.lang.String , java.lang.String > > networkExtras ) { return mWifiSupplicantControl.loadNetworks ( configs , networkExtras ) ; }
public boolean setWfdEnable ( boolean enable ) { if ( ( com.android.server.wifi.WifiNative.HIDL_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.enableWfd ( enable ) ; } else { return doBooleanCommand ( ( "SET wifi_display " + ( enable ? "1" : "0" ) ) ) ; } }
private void adjustOtherHeadsetPriorities ( com.android.bluetooth.hfp.HeadsetService hsService , java.util.List < android.bluetooth.BluetoothDevice > connectedDeviceList ) { for ( android.bluetooth.BluetoothDevice device : mAdapterService.getBondedDevices ( ) ) { if ( ( ( hsService.getPriority ( device ) ) >= ( android.bluetooth.BluetoothProfile.PRIORITY_AUTO_CONNECT ) ) && ( ! ( connectedDeviceList.contains ( device ) ) ) ) { hsService.setPriority ( device , BluetoothProfile.PRIORITY_ON ) ; } } }
public void onCreate ( android.database.sqlite.SQLiteDatabase db ) { db.execSQL ( ( ( ( ( ( ( ( ( "CREATE TABLE " + ( com.android.cts.verifier.TestResultsProvider.TABLE_NAME ) ) + " (" ) + ( com.android.cts.verifier.TestResultsProvider._ID ) ) + " INTEGER PRIMARY KEY AUTOINCREMENT, " ) + ( com.android.cts.verifier.TestResultsProvider.COLUMN_TEST_NAME ) ) + " TEXT, " ) + ( com.android.cts.verifier.TestResultsProvider.COLUMN_TEST_RESULT ) ) + " INTEGER);" ) ) ; }
void prepareEngines ( ) throws java.lang.Exception { java.nio.channels.Pipe clientSendPipe = java.nio.channels.Pipe.open ( ) ; java.nio.channels.Pipe serverSendPipe = java.nio.channels.Pipe.open ( ) ; java.nio.channels.Pipe.SinkChannel clientSink = clientSendPipe.sink ( ) ; java.nio.channels.Pipe.SourceChannel serverSource = clientSendPipe.source ( ) ; java.nio.channels.Pipe.SinkChannel serverSink = serverSendPipe.sink ( ) ; java.nio.channels.Pipe.SourceChannel clientSource = serverSendPipe.source ( ) ; clientEngine = new tests.api.javax.net.ssl.SSLEngineTest.HandshakeHandler ( true , clientSource , clientSink ) ; serverEngine = new tests.api.javax.net.ssl.SSLEngineTest.HandshakeHandler ( false , serverSource , serverSink ) ; }
public boolean markRead ( boolean read ) { boolean changed = false ; for ( com.android.mail.providers.ParticipantInfo pi : participantInfos ) { changed |= pi.markRead ( read ) ; } if ( read ) { firstSnippet = lastSnippet ; } else { firstSnippet = firstUnreadSnippet ; } return changed ; }
com.android.internal.telephony.gsm.GsmSmsAddress getAddress ( ) { com.android.internal.telephony.gsm.GsmSmsAddress ret ; int addressLength = ( pdu [ cur ] ) & 255 ; int lengthBytes = 2 + ( ( addressLength + 1 ) / 2 ) ; ret = new com.android.internal.telephony.gsm.GsmSmsAddress ( pdu , cur , lengthBytes ) ; cur += lengthBytes ; return ret ; }
public static void computeLdexp ( android.renderscript.cts.TestLdexp.ArgumentsFloatIntFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 1 , 1 , false ) ; android.renderscript.cts.Target.Floaty inX = t.new32 ( args.inX ) ; args.out = t.new32 ( android.renderscript.cts.CoreMathVerifier.ldexp ( inX.mid32 ( ) , args.inY ) , android.renderscript.cts.CoreMathVerifier.ldexp ( inX.min32 ( ) , args.inY ) , android.renderscript.cts.CoreMathVerifier.ldexp ( inX.max32 ( ) , args.inY ) ) ; }
public boolean isCarrierSpecific ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number ) { java.util.List < java.lang.String > regionCodes = getRegionCodesForCountryCode ( number.getCountryCode ( ) ) ; java.lang.String regionCode = getRegionCodeForShortNumberFromRegionList ( number , regionCodes ) ; java.lang.String nationalNumber = com.google.i18n.phonenumbers.ShortNumberInfo.getNationalSignificantNumber ( number ) ; com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneMetadata phoneMetadata = com.google.i18n.phonenumbers.MetadataManager.getShortNumberMetadataForRegion ( regionCode ) ; return ( phoneMetadata != null ) && ( matchesPossibleNumberAndNationalNumber ( nationalNumber , phoneMetadata.carrierSpecific ) ) ; }
private void transformAnnotationSetRefList ( com.android.dx.merge.IndexMap indexMap , com.android.dx.io.DexBuffer.Section refListIn ) { ( contentsOut.annotationSetRefLists.size ) ++ ; annotationSetRefListOut.assertFourByteAligned ( ) ; indexMap.putAnnotationSetRefListOffset ( refListIn.getPosition ( ) , annotationSetRefListOut.getPosition ( ) ) ; int parameterCount = refListIn.readInt ( ) ; annotationSetRefListOut.writeInt ( parameterCount ) ; for ( int p = 0 ; p < parameterCount ; p ++ ) { annotationSetRefListOut.writeInt ( indexMap.adjustAnnotationSet ( refListIn.readInt ( ) ) ) ; } }
private boolean needFullRebuild ( ) { if ( ! ( options.isAutomaticFullRebuildEnabled ( ) ) ) { return false ; } long timestamp = new java.io.File ( options.getOutputDir ( ) , com.android.jack.backend.dex.DexFileWriter.DEX_FILENAME ) . lastModified ( ) ; for ( java.io.File lib : options.getClasspath ( ) ) { if ( isModifiedLibrary ( lib , timestamp ) ) { return true ; } } for ( java.io.File importedJackFiles : options.getJayceImport ( ) ) { if ( isModifiedLibrary ( importedJackFiles , timestamp ) ) { return true ; } } return false ; }
public V get ( java.lang.Object k ) { K key = ( ( K ) ( k ) ) ; V value = compute ( key ) ; com.google.common.base.Preconditions.checkNotNull ( value , ( ( ( ( computingFunction ) + " returned null for key " ) + key ) + "." ) ) ; notifyRemoval ( key , value ) ; return value ; }
synchronized void nAllocationElementData1D ( long id , int xoff , int mip , int compIdx , byte [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationElementData1D ( mContext , id , xoff , mip , compIdx , d , sizeBytes ) ; }
public java.io.InputStream getInputStream ( ) throws java.io.IOException { checkOpen ( ) ; synchronized ( this ) { if ( ( is ) == null ) { is = new org.conscrypt.OpenSSLSocketImpl.SSLInputStream ( ) ; } return is ; } }
android.content.pm.ActivityInfo getActivityInfoForUser ( android.content.pm.ActivityInfo aInfo , int userId ) { if ( ( aInfo == null ) || ( ( userId < 1 ) && ( ( aInfo.applicationInfo.uid ) < ( android.os.UserId.PER_USER_RANGE ) ) ) ) { return aInfo ; } android.content.pm.ActivityInfo info = new android.content.pm.ActivityInfo ( aInfo ) ; info.applicationInfo = getAppInfoForUser ( info.applicationInfo , userId ) ; return info ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String action = intent.getAction ( ) ; if ( action.equals ( AppInterface.STK_CMD_ACTION ) ) { handleCommandMessage ( context , intent ) ; } else if ( action.equals ( AppInterface.STK_SESSION_END_ACTION ) ) { handleSessionEnd ( context , intent ) ; } }
private java.lang.String getVersionCodeString ( int versionCode , com.android.sdklib.internal.export.ApkData apkData ) { int trueVersionCode = versionCode * ( com.android.ant.MultiApkExportTask.OFFSET_VERSION_CODE ) ; trueVersionCode += ( apkData.getBuildInfo ( ) ) * ( com.android.ant.MultiApkExportTask.OFFSET_BUILD_INFO ) ; trueVersionCode += apkData.getMinor ( ) ; return java.lang.Integer.toString ( trueVersionCode ) ; }
private static java.lang.ClassLoader createClassLoader ( com.google.devtools.build.android.desugar.CoreLibraryRewriter rewriter , java.util.List < java.nio.file.Path > bootclasspath , com.google.devtools.build.android.desugar.IndexedJars appAndClasspathIndexedJars ) throws java.io.IOException { java.lang.ClassLoader parent = new com.google.devtools.build.android.desugar.Desugar.ThrowingClassLoader ( ) ; if ( ! ( bootclasspath.isEmpty ( ) ) ) { parent = new com.google.devtools.build.android.desugar.HeaderClassLoader ( new com.google.devtools.build.android.desugar.IndexedJars ( bootclasspath ) , rewriter , parent ) ; } return new com.google.devtools.build.android.desugar.HeaderClassLoader ( appAndClasspathIndexedJars , rewriter , parent ) ; }
private static android.os.ParcelFileDescriptor getDistroParcelFileDescriptor ( android.content.Context context ) { android.os.ParcelFileDescriptor inputFileDescriptor ; try { inputFileDescriptor = context.getContentResolver ( ) . openFileDescriptor ( TimeZoneRulesDataContract.DATA_URI , "r" ) ; if ( inputFileDescriptor == null ) { throw new java.io.FileNotFoundException ( "ContentProvider returned null" ) ; } } catch ( java.io.FileNotFoundException e ) { android.util.Log.e ( com.android.timezone.updater.RulesCheckReceiver.TAG , ( "Unable to open file descriptor" + ( android.provider.TimeZoneRulesDataContract.DATA_URI ) ) , e ) ; return null ; } return inputFileDescriptor ; }
public void endElement ( java.lang.String uri , java.lang.String localName , java.lang.String qName ) { java.lang.StringBuffer sb = new java.lang.StringBuffer ( ) ; sb.append ( uri ) ; sb.append ( tests.api.javax.xml.parsers.SAXParserTestSupport.SEPARATOR_STRING ) ; sb.append ( localName ) ; sb.append ( tests.api.javax.xml.parsers.SAXParserTestSupport.SEPARATOR_STRING ) ; sb.append ( qName ) ; data_endElement.append ( sb ) ; data_endElement.append ( tests.api.javax.xml.parsers.SAXParserTestSupport.SEPARATOR_ELEMENT ) ; }
public boolean factoryReset ( ) { try { if ( ( mService ) != null ) { return mService.factoryReset ( ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } return false ; }
public static com.android.dialer.historyitemactions.IntentModule newVideoCallModule ( android.content.Context context , java.lang.String number , @ android.support.annotation.Nullable android.telecom.PhoneAccountHandle phoneAccountHandle , com.android.dialer.callintent.CallInitiationType.Type initiationType ) { return new com.android.dialer.historyitemactions.IntentModule ( context , com.android.dialer.precall.PreCall.getIntent ( context , new com.android.dialer.callintent.CallIntentBuilder ( number , initiationType ) . setPhoneAccountHandle ( phoneAccountHandle ) . setIsVideoCall ( true ) ) , R.string.video_call , R.drawable.quantum_ic_videocam_vd_white_24 ) ; }
public void run ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( androidMinApiLevel ) < ( com.android.jack.transformations.BridgeInInterfaceRemover.N_API_LEVEL ) ) { if ( ( ( method.getEnclosingType ( ) ) instanceof com.android.jack.ir.ast.JInterface ) && ( method.isBridge ( ) ) ) { com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest ( method.getEnclosingType ( ) ) ; tr.append ( new com.android.jack.transformations.request.Remove ( method ) ) ; tr.commit ( ) ; } } }
private java.lang.String getDeviceTimeZoneState ( com.android.timezone.xts.TimeZoneUpdateHostTest.StateType stateType ) throws java.lang.Exception { java.lang.String output = getDevice ( ) . executeAdbCommand ( "shell" , "dumpsys" , "timezone" , "-format_state" , stateType.getFormatStateChar ( ) ) ; assertNotNull ( output ) ; java.lang.String value = output.split ( ":" ) [ 1 ] ; return value.substring ( 1 , ( ( value.length ( ) ) - 1 ) ) ; }
private void expectNetworkStatsUidDetail ( android.net.NetworkStats detail , java.lang.String [ ] tetherIfacePairs , android.net.NetworkStats tetherStats ) throws java.lang.Exception { org.easymock.EasyMock.expect ( mNetManager.getNetworkStatsUidDetail ( org.easymock.EasyMock.eq ( android.net.NetworkStats.UID_ALL ) ) ) . andReturn ( detail ) . atLeastOnce ( ) ; org.easymock.EasyMock.expect ( mNetManager.getNetworkStatsTethering ( ) ) . andReturn ( tetherStats ) . atLeastOnce ( ) ; }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.SuperReference x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.ast.JClass superClass ; assert ( ( superClass = curClass.classType.getSuperClass ( ) ) == null ) || ( getTypeMap ( ) . get ( x.resolvedType ) . isSameType ( superClass ) ) ; push ( makeThisRef ( makeSourceInfo ( x ) ) ) ; } catch ( java.lang.RuntimeException e ) { throw translateException ( x , e ) ; } }
public void setReporter ( @ javax.annotation.Nonnull com.android.jack.api.v01.ReporterKind arg0 , @ javax.annotation.Nonnull java.io.OutputStream arg1 ) throws com.android.jack.api.v01.ConfigurationException { }
public void handleMessage ( android.os.Message msg ) { switch ( msg.what ) { case com.android.phone.CallFeaturesSetting.EVENT_CLIR_EXECUTED : handleSetCLIRMessage ( ) ; break ; case com.android.phone.CallFeaturesSetting.EVENT_CW_EXECUTED : handleSetCWMessage ( ) ; break ; case com.android.phone.CallFeaturesSetting.EVENT_CF_EXECUTED : handleSetCFMessage ( msg.arg1 , ( ( android.os.AsyncResult ) ( msg.obj ) ) ) ; break ; case com.android.phone.CallFeaturesSetting.EVENT_VOICEMAIL_CHANGED : handleSetVMMessage ( ( ( android.os.AsyncResult ) ( msg.obj ) ) ) ; break ; case com.android.phone.CallFeaturesSetting.EVENT_ENHANCED_VP_EXECUTED : if ( com.android.phone.CallFeaturesSetting.DBG ) android.util.Log.d ( com.android.phone.CallFeaturesSetting.LOG_TAG , "setOptionComplete: Received event EVENT_ENHANCED_VP_EXECUTED" ) ; handleSetVPMessage ( ) ; break ; default : } }
protected void setUp ( ) throws java.lang.Exception { mAndroidKeyStore = android.security.android.security.KeyStore.getInstance ( ) ; assertTrue ( mAndroidKeyStore.reset ( ) ) ; assertFalse ( mAndroidKeyStore.isUnlocked ( ) ) ; assertTrue ( mAndroidKeyStore.password ( "1111" ) ) ; assertTrue ( mAndroidKeyStore.isUnlocked ( ) ) ; assertEquals ( 0 , mAndroidKeyStore.saw ( "" ) . length ) ; mKeyStore = java.security.KeyStore.getInstance ( AndroidKeyStore.NAME ) ; }
public void testEnvironment ( ) throws java.lang.Exception { java.lang.ProcessBuilder pb = new java.lang.ProcessBuilder ( libcore.java.lang.ProcessBuilderTest.shell ( ) , "-c" , "echo $A" ) ; pb.environment ( ) . put ( "A" , "android" ) ; tests.support.Support_Exec.execAndCheckOutput ( pb , "android\n" , "" ) ; }
public void test_getSerialVersionUID_inner_private_class ( ) { java.io.ObjectStreamClass osc1 = java.io.ObjectStreamClass.lookup ( tests.api.java.io.ObjectStreamClassTest.SyntheticTest.class ) ; assertEquals ( ( - 4332969662791850406L ) , osc1.getSerialVersionUID ( ) ) ; java.io.ObjectStreamClass osc2 = java.io.ObjectStreamClass.lookup ( tests.api.java.io.ObjectStreamClassTest.SyntheticTest.X.class ) ; assertEquals ( ( - 3926212872029449440L ) , osc2.getSerialVersionUID ( ) ) ; }
private void responseSms ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.SendSmsResult sms ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { com.android.internal.telephony.SmsResponse ret = null ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { ret = new com.android.internal.telephony.SmsResponse ( sms.messageRef , sms.ackPDU , sms.errorCode ) ; sendMessageResponse ( rr.mResult , ret ) ; } mRil.processResponseDone ( rr , responseInfo , ret ) ; } }
public void testPx ( ) throws java.lang.Exception { assertEquals ( ( "res/layout/now_playing_after.xml:49: Warning: Avoid using \"mm\" as units (it does not work accurately on all devices); use \"dp\" instead [InOrMmUsage]\n" + ( ( ( ( ( ( ( ( " android:layout_width=\"100mm\"\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/now_playing_after.xml:50: Warning: Avoid using \"in\" as units (it does not work accurately on all devices); use \"dp\" instead [InOrMmUsage]\n" ) + " android:layout_height=\"120in\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "res/layout/now_playing_after.xml:41: Warning: Avoid using \"px\" as units; use \"dp\" instead [PxUsage]\n" ) + " android:layout_width=\"1px\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 3 warnings\n" ) ) , lintFiles ( "res/layout/now_playing_after.xml" ) ) ; }
void awaitTermination ( java.lang.Thread t , long timeoutMillis ) { try { t.join ( timeoutMillis ) ; } catch ( java.lang.InterruptedException ie ) { threadUnexpectedException ( ie ) ; } finally { if ( ( t.getState ( ) ) != ( java.lang.Thread.State.TERMINATED ) ) { t.interrupt ( ) ; fail ( "Test timed out" ) ; } } }
public boolean removeCallbacks ( java.lang.Runnable action ) { android.os.Handler handler ; if ( ( mAttachInfo ) != null ) { handler = mAttachInfo.mHandler ; } else { android.view.ViewRoot.getRunQueue ( ) . removeCallbacks ( action ) ; return true ; } handler.removeCallbacks ( action ) ; return true ; }
public void testExistsOnSystem ( ) throws android.system.ErrnoException { assertEquals ( "SECCOMP filter is not installed." , 0 , libcore.java.io.FileTest.installSeccompFilter ( ) ) ; java.io.File sh = new java.io.File ( "/sdcard" ) ; assertTrue ( sh.exists ( ) ) ; }
public void networkAgentMayBeNull ( ) throws java.lang.Exception { mWifiInfo.setRssi ( ( - 33 ) ) ; mWifiScoreReport.enableVerboseLogging ( true ) ; mWifiScoreReport.calculateAndReportScore ( mWifiInfo , null , 0 , mWifiMetrics ) ; org.mockito.Mockito.verify ( mWifiMetrics ) . incrementWifiScoreCount ( org.mockito.Mockito.anyInt ( ) ) ; }
public void enablingVerboseLoggingIncreasesLogRecSize ( ) { org.junit.Assert.assertTrue ( ( ( com.android.server.wifi.WifiStateMachineTest.LOG_REC_LIMIT_IN_VERBOSE_MODE ) > ( WifiStateMachine.NUM_LOG_RECS_NORMAL ) ) ) ; mWsm.enableVerboseLogging ( 1 ) ; for ( int i = 0 ; i < ( ( com.android.server.wifi.WifiStateMachineTest.LOG_REC_LIMIT_IN_VERBOSE_MODE ) * 2 ) ; i ++ ) { mWsm.sendMessage ( WifiStateMachine.CMD_DISCONNECT ) ; } mLooper.dispatchAll ( ) ; org.junit.Assert.assertEquals ( com.android.server.wifi.WifiStateMachineTest.LOG_REC_LIMIT_IN_VERBOSE_MODE , mWsm.getLogRecSize ( ) ) ; }
private java.nio.ByteBuffer getNextAvailableByteBuffer ( java.nio.ByteBuffer [ ] buffers , int offset , int length ) { for ( int i = offset ; i < length ; ++ i ) { if ( ( buffers [ i ] . remaining ( ) ) > 0 ) { return buffers [ i ] ; } } return null ; }
private void sendMessage ( int what , com.android.bluetooth.gatt.ScanClient client ) { android.os.Message message = new android.os.Message ( ) ; message.what = what ; message.obj = client ; mHandler.sendMessage ( message ) ; }
java.lang.Integer getNetworkScore ( android.net.wifi.ScanResult scanResult , com.android.server.wifi.WifiNetworkScoreCache scoreCache ) { if ( ( scoreCache != null ) && ( scoreCache.isScoredNetwork ( scanResult ) ) ) { int score = scoreCache.getNetworkScore ( scanResult , false ) ; localLog ( ( ( ( com.android.server.wifi.WifiNetworkSelector.toScanId ( scanResult ) ) + " has score: " ) + score ) ) ; return score ; } return null ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mInstrumentation = getInstrumentation ( ) ; mContext = mInstrumentation.getTargetContext ( ) ; mIntent = new android.content.Intent ( mContext , android.app.stubs.InstrumentationTestActivity.class ) ; mIntent.addFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; mActivity = ( ( android.app.stubs.InstrumentationTestActivity ) ( mInstrumentation.startActivitySync ( mIntent ) ) ) ; }
public void run ( ) { sortPackages ( true ) ; }
public void listen ( android.telephony.PhoneStateListener listener , int events ) { java.lang.String pkgForDebug = ( ( android.telephony.TelephonyManager.sContext ) != null ) ? android.telephony.TelephonyManager.sContext.getPackageName ( ) : "<unknown>" ; try { java.lang.Boolean notifyNow = ( getITelephony ( ) ) != null ; android.telephony.TelephonyManager.sRegistry.listen ( pkgForDebug , listener.callback , events , notifyNow ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } }
private java.lang.String getReportName ( java.lang.String suiteName ) { java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat ( "yyyy.MM.dd_HH.mm.ss" , java.util.Locale.ENGLISH ) ; BRANCH ( b54bd4 ) ; com.android.cts.verifier.Configurable verifier ; am : java.lang.String date = dateFormat.format ( new java.util.Date ( ) ) ; com.android.cts.verifier.a8ed1f Merge ; }
private com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder processFolder ( com.android.io.IAbstractFolder folder , com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources project ) { java.lang.String [ ] folderSegments = folder.getName ( ) . split ( FolderConfiguration.QUALIFIER_SEP ) ; com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolderType type = com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolderType.getTypeByName ( folderSegments [ 0 ] ) ; if ( type != null ) { com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config = getConfig ( folderSegments ) ; if ( config != null ) { com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder configuredFolder = project.add ( type , config , folder ) ; return configuredFolder ; } } return null ; }
private static boolean nitzOffsetMightBeBogus ( com.android.internal.telephony.NitzData nitzData ) { return ( ( nitzData.getLocalOffsetMillis ( ) ) == 0 ) && ( ! ( nitzData.isDst ( ) ) ) ; }
protected void doRevert ( java.io.File toFile , java.io.File backupFile ) throws java.io.IOException { com.intellij.updater.Utils.delete ( toFile ) ; com.intellij.updater.Utils.copy ( backupFile , toFile ) ; }
public void validateCopyConstructorFromValidSource ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.HomeSP sourceSp = new android.net.wifi.hotspot2.pps.HomeSP ( ) ; sourceSp.fqdn = "fqdn" ; sourceSp.friendlyName = "friendlyName" ; sourceSp.roamingConsortiumOIs = new long [ ] { 85 , 102 } ; android.net.wifi.hotspot2.pps.HomeSP copySp = new android.net.wifi.hotspot2.pps.HomeSP ( sourceSp ) ; org.junit.Assert.assertTrue ( copySp.equals ( sourceSp ) ) ; }
boolean startScoUsingVirtualVoiceCall ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH permission" ) ; synchronized ( mStateMachines ) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get ( device ) ; if ( stateMachine == null ) { android.util.Log.w ( com.android.bluetooth.hfp.HeadsetService.TAG , ( ( "startScoUsingVirtualVoiceCall: device " + device ) + " was never connected/connecting" ) ) ; return false ; } stateMachine.sendMessage ( HeadsetStateMachine.VIRTUAL_CALL_START , device ) ; } return true ; }
public static java.lang.String getSyntheticSwitchMapInitializerName ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedEnum enumType ) { java.lang.String enumName = com.android.jack.util.NamingTools.getValidName ( com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter ( ) . getName ( enumType ) ) ; java.lang.String methodName = com.android.jack.util.NamingTools.getNonSourceConflictingName ( ( ( "get" + enumName ) + ( com.android.jack.transformations.enums.OptimizationUtil.Suffix ) ) ) ; return methodName ; }
public com.android.ide.eclipse.adt.internal.resources.manager.ResourceRepository loadFrameworkResources ( com.android.sdklib.IAndroidTarget androidTarget ) { java.lang.String osResourcesPath = androidTarget.getPath ( IAndroidTarget.RESOURCES ) ; com.android.io.FolderWrapper frameworkRes = new com.android.io.FolderWrapper ( osResourcesPath ) ; if ( frameworkRes.exists ( ) ) { com.android.ide.eclipse.adt.internal.resources.manager.FrameworkResources resources = new com.android.ide.eclipse.adt.internal.resources.manager.FrameworkResources ( ) ; try { loadResources ( resources , frameworkRes ) ; resources.loadPublicResources ( frameworkRes ) ; return resources ; } catch ( java.io.IOException e ) { } } return null ; }
private java.util.Set < ? extends javax.lang.model.element.Element > getElementsAnnotatedWith ( @ javax.annotation.Nonnull javax.annotation.processing.RoundEnvironment roundEnv , @ javax.annotation.Nonnull java.lang.Class < ? extends java.lang.annotation.Annotation > cls ) { assert ( env ) != null ; java.lang.String name = cls.getCanonicalName ( ) ; assert name != null ; javax.lang.model.element.TypeElement element = env.getElementUtils ( ) . getTypeElement ( name ) ; assert element != null ; return roundEnv.getElementsAnnotatedWith ( element ) ; }
public void test_getCertificateChain ( ) { init ( tests.api.javax.net.ssl.X509KeyManagerTest.SERVER ) ; assertNull ( "Not NULL for NULL parameter" , manager.getCertificateChain ( null ) ) ; assertNull ( "Not NULL for empty parameter" , manager.getCertificateChain ( "" ) ) ; assertNull ( "Not NULL for clientAlias_01 parameter" , manager.getCertificateChain ( "clientAlias_01" ) ) ; assertNull ( "Not NULL for serverAlias_00 parameter" , manager.getCertificateChain ( "serverAlias_00" ) ) ; }
public void testGetContentType ( ) throws java.io.IOException { assertEquals ( "application/rtf" , tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType ( "test.rtf" ) ) ; assertEquals ( "text/plain" , tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType ( "test.java" ) ) ; assertEquals ( "application/msword" , tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType ( "test.doc" ) ) ; assertEquals ( "text/html" , tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType ( "test.htx" ) ) ; assertEquals ( "application/xml" , tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType ( "test.xml" ) ) ; assertEquals ( "text/plain" , tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType ( "." ) ) ; }
private void expectFailedEventScan ( org.mockito.InOrder order , com.android.server.wifi.WifiNative.ScanEventHandler eventHandler , java.util.Set < java.lang.Integer > scanFreqs , java.util.Set < java.lang.Integer > networkIds ) { order.verify ( mWifiNative ) . scan ( eq ( scanFreqs ) , eq ( networkIds ) ) ; mWifiMonitor.sendMessage ( mWifiNative.getInterfaceName ( ) , WifiMonitor.SCAN_FAILED_EVENT ) ; assertEquals ( "dispatch message after results event" , 1 , mLooper.dispatchAll ( ) ) ; }
public boolean onKey ( android.view.View view , int keyCode , android.view.KeyEvent event ) { if ( ( keyCode == ( android.view.KeyEvent.KEYCODE_ENTER ) ) && ( ( event.getAction ( ) ) == ( android.view.KeyEvent.ACTION_UP ) ) ) { loadUrlFromUrlBar ( view ) ; return true ; } return false ; }
public void testCarrierPriviledgeLoadedListener ( ) { mUiccProfile.registerForCarrierPrivilegeRulesLoaded ( mMockedHandler , com.android.internal.telephony.uicc.UiccProfileTest.UICCPROFILE_CARRIER_PRIVILEDGE_LOADED_EVENT , null ) ; org.mockito.ArgumentCaptor < android.os.Message > mCaptorMessage = org.mockito.ArgumentCaptor.forClass ( android.os.Message.class ) ; org.mockito.ArgumentCaptor < java.lang.Long > mCaptorLong = org.mockito.ArgumentCaptor.forClass ( java.lang.Long.class ) ; testUpdateUiccProfile ( ) ; org.mockito.Mockito.verify ( mMockedHandler , org.mockito.Mockito.times ( 1 ) ) . sendMessageDelayed ( mCaptorMessage.capture ( ) , mCaptorLong.capture ( ) ) ; org.junit.Assert.assertEquals ( com.android.internal.telephony.uicc.UiccProfileTest.UICCPROFILE_CARRIER_PRIVILEDGE_LOADED_EVENT , mCaptorMessage.getValue ( ) . what ) ; }
public void testAnyOfMatcherWithMoreThanOneMatch ( ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) org.hamcrest.Matcher < android.net.Uri > anyOfMatcher = org.hamcrest.CoreMatchers.anyOf ( android.support.test.espresso.intent.matcher.UriMatchers.hasHost ( org.hamcrest.CoreMatchers.equalTo ( "www.google.com" ) ) , android.support.test.espresso.intent.matcher.UriMatchers.hasPath ( org.hamcrest.CoreMatchers.equalTo ( "/search" ) ) , android.support.test.espresso.intent.matcher.UriMatchers.hasParamWithName ( org.hamcrest.CoreMatchers.equalTo ( "param2" ) ) , android.support.test.espresso.intent.matcher.UriMatchers.hasParamWithValue ( org.hamcrest.CoreMatchers.equalTo ( "ie" ) , org.hamcrest.CoreMatchers.equalTo ( "UTF-8" ) ) ) ; assertTrue ( "AnyOf matcher didn't match" , anyOfMatcher.matches ( uri ) ) ; }
public void normalLogRecSizeIsUsedByDefault ( ) { for ( int i = 0 ; i < ( ( WifiStateMachine.NUM_LOG_RECS_NORMAL ) * 2 ) ; i ++ ) { mWsm.sendMessage ( WifiStateMachine.CMD_DISCONNECT ) ; } mLooper.dispatchAll ( ) ; org.junit.Assert.assertEquals ( WifiStateMachine.NUM_LOG_RECS_NORMAL , mWsm.getLogRecSize ( ) ) ; }
public boolean loadSoundEffects ( ) { int attempts = 3 ; android.media.AudioService.LoadSoundEffectReply reply = new android.media.AudioService.LoadSoundEffectReply ( ) ; synchronized ( reply ) { android.media.AudioService.sendMsg ( mAudioHandler , android.media.AudioService.MSG_LOAD_SOUND_EFFECTS , android.media.AudioService.SENDMSG_QUEUE , 0 , 0 , reply , 0 ) ; while ( ( ( reply.mStatus ) == 1 ) && ( ( attempts -- ) > 0 ) ) { try { reply.wait ( android.media.AudioService.SOUND_EFECTS_LOAD_TIMEOUT_MS ) ; } catch ( java.lang.InterruptedException e ) { android.util.Log.w ( android.media.AudioService.TAG , "loadSoundEffects Interrupted while waiting sound pool loaded." ) ; } } } return ( reply.mStatus ) == 0 ; }
public boolean equals ( java.lang.Object object ) { if ( ( this ) == object ) { return true ; } if ( ! ( object instanceof java.text.DecimalFormat ) ) { return false ; } java.text.DecimalFormat other = ( ( java.text.DecimalFormat ) ( object ) ) ; return ( ( this . dform ) == null ? ( other.dform ) == null : this . dform.equals ( other.dform ) ) && ( getDecimalFormatSymbols ( ) . equals ( other.getDecimalFormatSymbols ( ) ) ) ; }
public void onSizeChanged ( final int w , final int h , final int ow , final int oh ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { onSizeChanged ( w , h , ow , oh ) ; } } ) ; return ; } mAwContents.onSizeChanged ( w , h , ow , oh ) ; }
public void testOk ( ) { mNumberKeyListener = new android.text.method.cts.NumberKeyListenerTest.MockNumberKeyListener ( ) ; assertTrue ( mNumberKeyListener.callOk ( mNumberKeyListener.getAcceptedChars ( ) , '3' ) ) ; assertFalse ( mNumberKeyListener.callOk ( mNumberKeyListener.getAcceptedChars ( ) , 'e' ) ) ; try { mNumberKeyListener.callOk ( null , 'm' ) ; fail ( "should throw NullPointerException." ) ; } catch ( java.lang.NullPointerException e ) { } }
private boolean isAllowedBySettingsLocked ( java.lang.String provider ) { if ( mEnabledProviders.contains ( provider ) ) { return true ; } if ( mDisabledProviders.contains ( provider ) ) { return false ; } android.content.ContentResolver resolver = mContext.getContentResolver ( ) ; java.lang.String allowedProviders = Settings.Secure.getString ( resolver , Settings.Secure.LOCATION_PROVIDERS_ALLOWED ) ; return ( allowedProviders != null ) && ( allowedProviders.contains ( provider ) ) ; }
public void test_handshakeWithEmbeddedSCT ( ) throws java.lang.Exception { org.conscrypt.OpenSSLSocketImplTest.TestConnection connection = new org.conscrypt.OpenSSLSocketImplTest.TestConnection ( new java.security.cert.X509Certificate [ ] { certEmbedded , ca } , certKey , true ) ; connection.clientHooks.ctVerificationEnabled = true ; connection.doHandshake ( ) ; assertTrue ( connection.clientHooks.isHandshakeCompleted ) ; assertTrue ( connection.serverHooks.isHandshakeCompleted ) ; }
public static android.os.Message obtain ( ) { synchronized ( android.os.Message.mPoolSync ) { if ( ( android.os.Message.mPool ) != null ) { android.os.Message m = android.os.Message.mPool ; android.os.Message.mPool = m.next ; m.next = null ; return m ; } } return new android.os.Message ( ) ; }
public int dexOptSecondaryDexPath ( android.content.pm.ApplicationInfo info , java.lang.String path , com.android.server.pm.dex.PackageDexUsage.DexUseInfo dexUseInfo , com.android.server.pm.dex.DexoptOptions options ) { synchronized ( mInstallLock ) { final long acquireTime = acquireWakeLockLI ( info.uid ) ; try { return dexOptSecondaryDexPathLI ( info , path , dexUseInfo , options ) ; } finally { releaseWakeLockLI ( acquireTime ) ; } } }
private static void updateDeliveryNotification ( final android.content.Context context , boolean isStatusMessage , final java.lang.CharSequence message , final long timeMillis ) { if ( ! isStatusMessage ) { return ; } if ( ! ( com.android.mms.ui.MessagingPreferenceActivity.getNotificationEnabled ( context ) ) ) { return ; } com.android.mms.transaction.MessagingNotification.mToastHandler.post ( new java.lang.Runnable ( ) { public void run ( ) { android.widget.Toast.makeText ( context , message , ( ( int ) ( timeMillis ) ) ) . show ( ) ; } } ) ; }
boolean equalNumbers ( @ android.support.annotation.Nullable java.lang.String number1 , @ android.support.annotation.Nullable java.lang.String number2 ) { if ( ( com.android.dialer.phonenumberutil.PhoneNumberHelper.isUriNumber ( number1 ) ) || ( com.android.dialer.phonenumberutil.PhoneNumberHelper.isUriNumber ( number2 ) ) ) { return compareSipAddresses ( number1 , number2 ) ; } else { return com.android.dialer.phonenumberutil.PhoneNumberHelper.compare ( number1 , number2 ) ; } }
private static void assertValues ( android.net.NetworkStats stats , int index , java.lang.String iface , int uid , int set , int tag , int roaming , long rxBytes , long rxPackets , long txBytes , long txPackets , long operations ) { final android.net.NetworkStats.Entry entry = stats.getValues ( index , null ) ; android.net.NetworkStatsTest.assertValues ( entry , iface , uid , set , tag , roaming ) ; android.net.NetworkStatsTest.assertValues ( entry , rxBytes , rxPackets , txBytes , txPackets , operations ) ; }
public void registerNetworkCallback ( android.net.NetworkRequest request , android.app.PendingIntent operation ) { android.net.ConnectivityManager.checkPendingIntent ( operation ) ; try { mService.pendingListenForNetwork ( request.networkCapabilities , operation ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public boolean collectManifestDigest ( android.content.pm.PackageParser.Package pkg ) { try { final java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( mArchiveSourcePath ) ; try { final java.util.zip.ZipEntry je = jarFile.getEntry ( android.content.pm.PackageParser.ANDROID_MANIFEST_FILENAME ) ; if ( je != null ) { pkg.manifestDigest = android.content.pm.ManifestDigest.fromInputStream ( jarFile.getInputStream ( je ) ) ; } } finally { jarFile.close ( ) ; } return true ; } catch ( java.io.IOException e ) { return false ; } }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , int [ ] data ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy2DRangeFromUnchecked" ) ; mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * 4 ) , Element.DataType.SIGNED_32 ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
protected void fillDexLists ( @ javax.annotation.Nonnull java.util.List < com.android.sched.vfs.InputVFile > mainDexList , @ javax.annotation.Nonnull java.util.List < com.android.sched.vfs.InputVFile > anyDexList ) { final com.android.jack.library.OutputJackLibrary jackOutputLibrary = com.android.jack.Jack.getSession ( ) . getJackOutputLibrary ( ) ; for ( com.android.jack.ir.ast.JDefinedClassOrInterface type : com.android.jack.Jack.getSession ( ) . getTypesToEmit ( ) ) { if ( type.containsMarker ( com.android.jack.backend.dex.MainDexMarker.class ) ) { mainDexList.add ( getDexInputVFileOfType ( jackOutputLibrary , type ) ) ; } else { anyDexList.add ( getDexInputVFileOfType ( jackOutputLibrary , type ) ) ; } } }
public void copy1DRangeFromUnchecked ( int off , int count , short [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy1DRangeFromUnchecked" ) ; int dataSize = ( mType.mElement.getBytesSize ( ) ) * count ; data1DChecks ( off , count , ( ( d.length ) * 2 ) , dataSize ) ; mRS.nAllocationData1D ( getIDSafe ( ) , off , mSelectedLOD , count , d , dataSize , Element.DataType.SIGNED_16 ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
synchronized com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir createVDir ( @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.CannotCreateFileException { assert ! ( isClosed ( ) ) ; try { return getVDir ( parent , name ) ; } catch ( com.android.sched.util.file.NoSuchFileException e ) { com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir dir = new com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir ( this , parent , name ) ; parent.putInCache ( name , dir ) ; return dir ; } catch ( com.android.sched.util.file.NotDirectoryException e ) { throw new com.android.sched.util.file.CannotCreateFileException ( getVDirLocation ( parent , name ) ) ; } }
public void test_setDefault_setsICUDefaultLocale ( ) { java.util.Locale.setDefault ( java.util.Locale.GERMANY ) ; assertEquals ( "de_DE" , libcore.icu.ICU.getDefaultLocale ( ) ) ; try { java.util.Locale.setDefault ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { assertEquals ( java.util.Locale.GERMANY , java.util.Locale.getDefault ( ) ) ; } java.util.Locale.setDefault ( new java.util.Locale ( "bogus" , "LOCALE" ) ) ; assertEquals ( "bogus__LOCALE" , libcore.icu.ICU.getDefaultLocale ( ) ) ; }
private static java.lang.String getCurrentHash ( java.lang.String content ) throws java.lang.Exception { if ( content == null ) { return "0" ; } java.security.MessageDigest dgst = java.security.MessageDigest.getInstance ( "SHA512" ) ; byte [ ] encoded = content.getBytes ( ) ; byte [ ] fingerprint = dgst.digest ( encoded ) ; return com.android.server.updates.IntegralToString.bytesToHexString ( fingerprint , false ) ; }
public < T > com.google.common.hash.Hasher putObject ( T instance , com.google.common.hash.Funnel < ? super T > funnel ) { checkNotDone ( ) ; funnel.funnel ( instance , this ) ; return this ; }
static java.nio.ByteBuffer getAndroidManifestFromApk ( java.util.List < com.android.apksig.internal.zip.CentralDirectoryRecord > cdRecords , com.android.apksig.util.DataSource lhfSection ) throws com.android.apksig.apk.ApkFormatException , com.android.apksig.zip.ZipFormatException , java.io.IOException { com.android.apksig.internal.zip.CentralDirectoryRecord androidManifestCdRecord = null ; for ( com.android.apksig.internal.zip.CentralDirectoryRecord cdRecord : cdRecords ) { if ( com.android.apksig.ApkSigner.ANDROID_MANIFEST_ZIP_ENTRY_NAME.equals ( cdRecord.getName ( ) ) ) { androidManifestCdRecord = cdRecord ; break ; } } if ( androidManifestCdRecord == null ) { throw new com.android.apksig.apk.ApkFormatException ( ( "Missing " + ( com.android.apksig.ApkSigner.ANDROID_MANIFEST_ZIP_ENTRY_NAME ) ) ) ; } return java.nio.ByteBuffer.wrap ( com.android.apksig.internal.zip.LocalFileRecord.getUncompressedData ( lhfSection , androidManifestCdRecord , lhfSection.size ( ) ) ) ; }
public void testSetValues011_ClassAsObject ( ) { long classID = getClassIDBySignature ( getDebuggeeClassSignature ( ) ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value actualValue = getStaticFieldValue ( classID , "CLASS_PARAM_VALUE" ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value expectedValue = getStaticFieldValue ( classID , "CLASS_PARAM_VALUE_TO_SET" ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester ( "breakpointObject" , StackTrace002Debuggee.CLASS_AS_OBJECT_SIGNAL ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod ( "runBreakpointObject" ) ; methodInfo.addVariable ( "param" , actualValue , expectedValue ) ; runStackFrameTest ( tester ) ; }
public static final java.text.DateFormat getTimeInstance ( int style , java.util.Locale locale ) { java.text.DateFormat.checkTimeStyle ( style ) ; return new java.text.SimpleDateFormat ( libcore.icu.LocaleData.get ( locale ) . getTimeFormat ( style ) , locale ) ; }
public int getViewBaseline ( java.lang.Object viewObject ) { if ( ( mBridge ) != null ) { return mBridge.getViewBaseline ( viewObject ) ; } return - 1 ; }
private void destroySurface ( ) { if ( ( mLayer ) != null ) { mSurface.detachFromGLContext ( ) ; mLayer.clearStorage ( ) ; boolean shouldRelease = true ; if ( ( mListener ) != null ) { shouldRelease = mListener.onSurfaceTextureDestroyed ( mSurface ) ; } synchronized ( mNativeWindowLock ) { nDestroyNativeWindow ( ) ; } mLayer.destroy ( ) ; if ( shouldRelease ) mSurface.release ( ) ; mSurface = null ; mLayer = null ; mHadSurface = true ; } }
private void setPhoto ( com.android.dialer.voicemail.model.VoicemailEntry voicemailEntry ) { com.android.dialer.contactphoto.ContactPhotoManager.getInstance ( context ) . loadDialerThumbnailOrPhoto ( quickContactBadge , com.android.dialer.voicemail.listui.NewVoicemailViewHolder.parseUri ( voicemailEntry.numberAttributes ( ) . getLookupUri ( ) ) , voicemailEntry.numberAttributes ( ) . getPhotoId ( ) , com.android.dialer.voicemail.listui.NewVoicemailViewHolder.parseUri ( voicemailEntry.numberAttributes ( ) . getPhotoUri ( ) ) , com.android.dialer.voicemail.listui.VoicemailEntryText.buildPrimaryVoicemailText ( context , voicemailEntry ) , LetterTileDrawable.TYPE_DEFAULT ) ; }
private void handleCameraChange ( java.lang.String cameraId ) { if ( com.android.server.telecom.tests.MockVideoProvider.CAMERA_FRONT.equals ( cameraId ) ) { super . changeCameraCapabilities ( new android.telecom.VideoProfile.CameraCapabilities ( com.android.server.telecom.tests.MockVideoProvider.CAMERA_FRONT_DIMENSIONS , com.android.server.telecom.tests.MockVideoProvider.CAMERA_FRONT_DIMENSIONS ) ) ; } else if ( com.android.server.telecom.tests.MockVideoProvider.CAMERA_BACK.equals ( cameraId ) ) { super . changeCameraCapabilities ( new android.telecom.VideoProfile.CameraCapabilities ( com.android.server.telecom.tests.MockVideoProvider.CAMERA_BACK_DIMENSIONS , com.android.server.telecom.tests.MockVideoProvider.CAMERA_BACK_DIMENSIONS ) ) ; } }
native void rsnAllocationData1D ( long con , long id , int off , int mip , int count , float [ ] d , int sizeBytes ) ;
public void testEclipseFormatStyle2 ( ) throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.formatting.XmlFormatPreferences prefs = new com.android.ide.eclipse.adt.internal.editors.formatting.XmlFormatPreferences ( ) { @ java.lang.Override public java.lang.String getOneIndentUnit ( ) { return " " ; } @ java.lang.Override public int getTabWidth ( ) { return 2 ; } } ; prefs.useEclipseIndent = true ; checkFormat ( prefs , "res/values/colors.xml" , ( "<resources>\n" + ( ( ( " <color name=\"enrollment_error\">#99e21f14</color>\n" + "\n" ) + " <color name=\"service_starting_up\">#99000000</color>\n" ) + "</resources>" ) ) , ( "<resources>\n" + ( ( ( ( "\n" + " <color name=\"enrollment_error\">#99e21f14</color>\n" ) + " <color name=\"service_starting_up\">#99000000</color>\n" ) + "\n" ) + "</resources>" ) ) ) ; }
public static void setStatusBarColor ( android.view.Window window , int statusBarColor ) { if ( ( Build.VERSION.SDK_INT ) >= ( Build.VERSION_CODES.LOLLIPOP ) ) { window.addFlags ( WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS ) ; window.setStatusBarColor ( statusBarColor ) ; } }
private android.util.Pair < java.util.List < android.media.Image > , android.hardware.camera2.CaptureResult > captureSingleRawShot ( android.util.Size s , java.util.List < android.media.ImageReader > captureReaders , java.util.List < android.hardware.camera2.cts.CameraTestUtils.SimpleImageReaderListener > captureListeners ) throws java.lang.Exception { return captureRawShots ( s , captureReaders , captureListeners , 1 ) . get ( 0 ) ; }
private com.android.dx.io.EncodedValueReader newEncodedValueReader ( com.android.dx.io.DexBuffer.Section section ) { return new com.android.dx.io.EncodedValueReader ( section ) { @ java.lang.Override protected void visitString ( int type , int index ) { encounterString ( index ) ; } } ; }
public void notifyTestingDeviceDisconnected ( ) { com.android.cts.Log.d ( "busyDeviceDisconnected invoked" ) ; mTestStop = true ; synchronized ( this ) { notify ( ) ; } cleanUp ( ) ; try { com.android.cts.CUIOutputStream.println ( "Test stopped." ) ; mTestThread.join ( ) ; } catch ( java.lang.InterruptedException e ) { com.android.cts.Log.e ( "" , e ) ; } }
public java.lang.String getMeidForSlot ( int slotIndex , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , callingPackage , "getMeidForSlot" ) ) ) { return null ; } com.android.internal.telephony.Phone phone = com.android.internal.telephony.PhoneFactory.getPhone ( slotIndex ) ; return phone == null ? null : phone.getMeid ( ) ; }
public void setMonetaryGroupingSeparator ( char sep ) { monetaryGroupingSeparator = sep ; }
public static void main ( java.lang.String [ ] args ) { java.lang.String os = java.lang.System.getProperty ( "os.name" ) ; if ( os.startsWith ( "Mac OS" ) ) { java.lang.management.RuntimeMXBean rt = java.lang.management.ManagementFactory.getRuntimeMXBean ( ) ; java.lang.System.setProperty ( ( "JAVA_STARTED_ON_FIRST_THREAD_" + ( rt.getName ( ) . split ( "@" ) [ 0 ] ) ) , "1" ) ; } java.lang.Thread.setDefaultUncaughtExceptionHandler ( new com.android.ddms.Main.UncaughtHandler ( ) ) ; com.android.ddms.PrefsDialog.init ( ) ; com.android.ddmlib.Log.d ( "ddms" , "Initializing" ) ; if ( ( ( args.length ) >= 3 ) && ( args [ 0 ] . equals ( "ping" ) ) ) { com.android.sdkstats.SdkStatsService.ping ( args [ 1 ] , args [ 2 ] , null ) ; return ; } else if ( ( args.length ) > 0 ) { com.android.ddmlib.Log.e ( "ddms" , ( "Unknown argument: " + ( args [ 0 ] ) ) ) ; java.lang.System.exit ( 1 ) ; } java.lang.String ddmsParentLocation = java.lang.System.getProperty ( "com.android.ddms.bindir" ) ; com.android.ddms.Main.ping ( ddmsParentLocation ) ; com.android.ddmlib.DebugPortManager.setProvider ( com.android.ddms.DebugPortProvider.getInstance ( ) ) ; com.android.ddms.UIThread ui = com.android.ddms.UIThread.getInstance ( ) ; try { ui.runUI ( ddmsParentLocation ) ; } finally { com.android.ddms.PrefsDialog.save ( ) ; com.android.ddmlib.AndroidDebugBridge.terminate ( ) ; } com.android.ddmlib.Log.d ( "ddms" , "Bye" ) ; java.lang.System.exit ( 0 ) ; }
public void testDownloadRequestOpacity ( ) throws java.lang.Exception { android.content.Intent intent = new android.content.Intent ( "sample_intent_action" ) ; android.telephony.mbms.DownloadRequest request = android.telephony.embms.cts.DOWNLOAD_REQUEST_TEMPLATE.setAppIntent ( intent ) . build ( ) ; android.telephony.mbms.DownloadRequest newRequest = new android.telephony.mbms.DownloadRequest.Builder ( request.getSourceUri ( ) ) . setServiceId ( request.getFileServiceId ( ) ) . setSubscriptionId ( request.getSubscriptionId ( ) ) . setOpaqueData ( request.getOpaqueData ( ) ) . build ( ) ; assertEquals ( request , newRequest ) ; }
public java.lang.String getSymbol ( java.util.Locale locale ) { libcore.icu.LocaleData localeData = libcore.icu.LocaleData.get ( locale ) ; if ( localeData.internationalCurrencySymbol.equals ( currencyCode ) ) { return localeData.currencySymbol ; } java.lang.String symbol = libcore.icu.ICU.getCurrencySymbol ( locale , currencyCode ) ; return symbol != null ? symbol : currencyCode ; }
private void assertBadGateway ( java.net.HttpURLConnection connection ) throws java.io.IOException { try { connection.getInputStream ( ) ; fail ( ) ; } catch ( java.io.FileNotFoundException expected ) { } assertEquals ( java.net.HttpURLConnection.HTTP_BAD_GATEWAY , connection.getResponseCode ( ) ) ; assertEquals ( ( - 1 ) , connection.getErrorStream ( ) . read ( ) ) ; }
public void testDisplayTargetList ( ) { com.android.sdkmanager.Main main = new com.android.sdkmanager.Main ( ) ; main.setLogger ( getLog ( ) ) ; main.setSdkManager ( getSdkManager ( ) ) ; getLog ( ) . clear ( ) ; main.displayTargetList ( ) ; assertEquals ( ( "[P Available Android targets:\n" + ( ( ( ( ( ( ( ( ", P ----------\n" + ", P id: 1 or \"android-0\"\n" ) + ", P Name: Android 0.0\n" ) + ", P Type: Platform\n" ) + ", P API level: 0\n" ) + ", P Revision: 1\n" ) + ", P Skins: , P \n" ) + ", P Tag/ABIs : , P default/armeabi, P , , P tag-1/armeabi, P , , P tag-1/x86, P \n" ) + "]" ) ) , getLog ( ) . toString ( ) ) ; }
public static int [ ] getSubId ( int slotId ) { if ( ! ( android.telephony.SubscriptionManager.isValidSlotId ( slotId ) ) ) { android.telephony.SubscriptionManager.logd ( "[getSubId]- fail" ) ; return null ; } int [ ] subId = null ; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface ( android.os.ServiceManager.getService ( "isub" ) ) ; if ( iSub != null ) { subId = iSub.getSubId ( slotId ) ; } } catch ( android.os.RemoteException ex ) { } return subId ; }
public void TestRTSentMonkey ( ) { int loopCount = 200 ; int seed = 1 ; if ( ( params.inclusion ) >= 9 ) { loopCount = 1000 ; } logln ( "Sentence Break Monkey Test" ) ; android.icu.dev.test.rbbi.RBBITestMonkey.RBBISentenceMonkey m = new android.icu.dev.test.rbbi.RBBITestMonkey.RBBISentenceMonkey ( ) ; android.icu.text.BreakIterator bi = android.icu.text.BreakIterator.getSentenceInstance ( java.util.Locale.US ) ; java.lang.String rules = bi.toString ( ) ; android.icu.text.BreakIterator rtbi = new android.icu.text.RuleBasedBreakIterator ( rules ) ; if ( ( params ) == null ) { loopCount = 30 ; } RunMonkey ( rtbi , m , "sent" , seed , loopCount ) ; }
public void transferAtrResponse ( int token , int resultCode , java.util.ArrayList < java.lang.Byte > atr ) { android.util.Log.d ( com.android.bluetooth.sap.SapRilReceiver.TAG , ( ( ( "transferAtrResponse: token " + token ) + " resultCode " ) + resultCode ) ) ; com.android.bluetooth.sap.SapMessage sapMessage = new com.android.bluetooth.sap.SapMessage ( SapMessage.ID_TRANSFER_ATR_RESP ) ; sapMessage.setResultCode ( resultCode ) ; if ( resultCode == ( SapMessage.RESULT_OK ) ) { sapMessage.setAtr ( com.android.bluetooth.sap.SapRilReceiver.arrayListToPrimitiveArray ( atr ) ) ; } removeOngoingReqAndSendMessage ( token , sapMessage ) ; }
private void updateSendFailedNotification ( ) { final long threadId = mConversation.getThreadId ( ) ; if ( threadId <= 0 ) return ; new java.lang.Thread ( new java.lang.Runnable ( ) { public void run ( ) { com.android.mms.transaction.MessagingNotification.updateSendFailedNotificationForThread ( com.android.mms.ui.ComposeMessageActivity.this , threadId ) ; } } , "updateSendFailedNotification" ) . start ( ) ; }
public void TestNorwegian ( ) { try { com.ibm.icu.util.UResourceBundle rb = com.ibm.icu.util.UResourceBundle.getBundleInstance ( ICUResourceBundle.ICU_REGION_BASE_NAME , "no_NO_NY" ) ; com.ibm.icu.util.UResourceBundle sub = rb.get ( "Countries" ) ; java.lang.String s1 = sub.getString ( "NO" ) ; if ( s1.equals ( "Noreg" ) ) { logln ( "got expected output " ) ; } else { errln ( "did not get the expected result" ) ; } } catch ( java.lang.IllegalArgumentException ex ) { errln ( "Caught an unexpected expected" ) ; } }
public void test5_anyInRange ( ) { int [ ] bits = new int [ 100 ] ; for ( int i = 0 ; i < ( bits.length ) ; i ++ ) { bits [ i ] = - 1 ; } for ( int i = 1 ; i < 100 ; i += 11 ) { assertTrue ( com.android.dx.util._tests.BitsTest.label ( i ) , com.android.dx.util.Bits.anyInRange ( bits , i , 100 ) ) ; } }
boolean okToConnect ( android.bluetooth.BluetoothDevice device ) { com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService ( ) ; boolean ret = true ; if ( ( adapterService == null ) || ( ( ( adapterService.isQuietModeEnabled ( ) ) == true ) && ( ( mTargetDevice ) == null ) ) ) { ret = false ; } return ret ; }
private com.android.jill.frontend.java.Variable getLocalVariable ( @ javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame < org.objectweb.asm.tree.analysis.BasicValue > frame , @ javax.annotation.Nonnegative int localIdx ) { org.objectweb.asm.tree.analysis.BasicValue bv = frame.getLocal ( localIdx ) ; assert bv != ( org.objectweb.asm.tree.analysis.BasicValue.UNINITIALIZED_VALUE ) ; com.android.jill.frontend.java.Variable v ; java.lang.String id = getUnnamedLocalId ( localIdx , bv.getType ( ) ) ; java.lang.String localName = id ; org.objectweb.asm.Type localType = typeToUntyped ( bv.getType ( ) ) ; v = getVariableWithLocalIndex ( localIdx , id , localName , localType , null ) ; return v ; }
public void testNewSmsFromBlockedNumber_noBroadcastsSent ( ) { java.lang.String blockedNumber = "1234567890" ; doReturn ( blockedNumber ) . when ( mInboundSmsTracker ) . getDisplayAddress ( ) ; mFakeBlockedNumberContentProvider.mBlockedNumbers.add ( blockedNumber ) ; transitionFromStartupToIdle ( ) ; mGsmInboundSmsHandler.sendMessage ( InboundSmsHandler.EVENT_NEW_SMS , new android.os.AsyncResult ( null , mSmsMessage , null ) ) ; com.android.internal.telephony.TelephonyTestUtils.waitForMs ( 100 ) ; verify ( mContext , never ( ) ) . sendBroadcast ( any ( android.content.Intent.class ) ) ; assertEquals ( "IdleState" , getCurrentState ( ) . getName ( ) ) ; }
public com.android.builder.model.AndroidProject getSingleModel ( boolean emulateStudio_1_0 ) { org.gradle.tooling.ProjectConnection connection = getProjectConnection ( ) ; try { java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > modelMap = com.android.build.gradle.integration.common.fixture.GradleTestProject.buildModel ( connection , new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction ( ) , emulateStudio_1_0 ) ; org.junit.Assert.assertEquals ( "Quering GradleTestProject.getModel() with multi-project settings" , 1 , modelMap.size ( ) ) ; return modelMap.get ( ":" ) ; } finally { connection.close ( ) ; } }
public boolean equals ( java.lang.Object thatObject ) { if ( thatObject == ( this ) ) { return true ; } else if ( ( thatObject == null ) || ( ( thatObject.getClass ( ) ) != ( com.android.server.wifi.hotspot2.anqp.eap.VendorSpecificAuth.class ) ) ) { return false ; } else { return java.util.Arrays.equals ( ( ( com.android.server.wifi.hotspot2.anqp.eap.VendorSpecificAuth ) ( thatObject ) ) . getData ( ) , getData ( ) ) ; } }
public void onSurfaceChanged ( javax.microedition.khronos.opengles.GL10 unused , int width , int height ) { android.opengl.GLES20.glViewport ( 0 , 0 , width , height ) ; }
public java.lang.String p2pServDiscReq ( java.lang.String addr , java.lang.String query ) { java.lang.String command = "P2P_SERV_DISC_REQ" ; command += " " + addr ; command += " " + query ; return doStringCommand ( command ) ; }
public static void unzip ( @ javax.annotation.Nonnull java.io.File jarfile , @ javax.annotation.Nonnull java.io.File outputFolder ) { java.lang.String [ ] args = new java.lang.String [ ] { "unzip" , "-qo" , jarfile.getAbsolutePath ( ) , "-d" , outputFolder.getAbsolutePath ( ) } ; com.android.jack.test.util.ExecuteFile execFile = new com.android.jack.test.util.ExecuteFile ( args ) ; try { if ( ( execFile.run ( ) ) != 0 ) { throw new java.lang.RuntimeException ( "Unzip exited with an error" ) ; } } catch ( com.android.jack.test.util.ExecFileException e ) { throw new java.lang.RuntimeException ( "An error occured while running unzip" , e ) ; } }
public java.lang.String getIccSerialNumberForSubscriber ( int subId , java.lang.String callingPackage ) { com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mContext , callingPackage , "getIccSerialNumber" ) ) ) { return null ; } return phone.getIccSerialNumber ( ) ; } else { loge ( ( "getIccSerialNumber phone is null for Subscription:" + subId ) ) ; return null ; } }
private static void enforceCarrierPrivilege ( int subId , int uid , java.lang.String message ) { if ( ( com.android.internal.telephony.TelephonyPermissions.getCarrierPrivilegeStatus ( subId , uid ) ) != ( android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_HAS_ACCESS ) ) { if ( com.android.internal.telephony.TelephonyPermissions.DBG ) android.telephony.Rlog.e ( com.android.internal.telephony.TelephonyPermissions.LOG_TAG , "No Carrier Privilege." ) ; throw new java.lang.SecurityException ( message ) ; } }
private boolean isPermissionEnforcedLocked ( java.lang.String permission ) { if ( android.Manifest.permission.READ_EXTERNAL_STORAGE.equals ( permission ) ) { if ( ( mSettings.mReadExternalStorageEnforced ) != null ) { return mSettings.mReadExternalStorageEnforced ; } else { return ( android.provider.Settings.Secure.getInt ( mContext.getContentResolver ( ) , Secure.READ_EXTERNAL_STORAGE_ENFORCED_DEFAULT , 0 ) ) != 0 ; } } else { return true ; } }
public void testLintWarningOnFlagsInStaticField ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/GetSignaturesStaticFieldTest.java:9: Information: Reading app signatures from getPackageInfo: The app signatures could be exploited if not validated properly; see issue explanation for details. [PackageManagerGetSignatures]\n" + ( ( " getPackageManager().getPackageInfo(\"some.pkg\", FLAGS);\n" + " ~~~~~\n" ) + "0 errors, 1 warnings\n" ) ) , lintProject ( ( "src/test/pkg/GetSignaturesStaticFieldTest.java.txt" + "=>src/test/pkg/GetSignaturesStaticFieldTest.java" ) ) ) ; }
public void setTTYMode ( int ttyMode , android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( RILConstants.RIL_REQUEST_SET_TTY_MODE , response ) ; rr.mParcel.writeInt ( 1 ) ; rr.mParcel.writeInt ( ttyMode ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) + " : " ) + ttyMode ) ) ; send ( rr ) ; }
protected void onLayout ( boolean changed , int l , int t , int r , int b ) { if ( ( mPager ) != null ) { final float offset = ( ( mLastKnownPositionOffset ) >= 0 ) ? mLastKnownPositionOffset : 0 ; updateTextPositions ( mPager.getCurrentItem ( ) , offset , true ) ; } }
public java.lang.StringBuffer format ( java.math.BigDecimal number , java.lang.StringBuffer result , java.text.FieldPosition fieldPosition ) { return format ( number , result , fieldPosition , false ) ; }
public void testHashCode ( ) throws java.text.ParseException { java.lang.String rule = "&9 < a < b < c < d" ; java.text.RuleBasedCollator coll = new java.text.RuleBasedCollator ( rule ) ; java.text.RuleBasedCollator same = new java.text.RuleBasedCollator ( rule ) ; assertEquals ( coll.hashCode ( ) , same.hashCode ( ) ) ; }
public void dispose ( ) { }
java.lang.String getSCAddress ( ) { int len ; java.lang.String ret ; len = getByte ( ) ; if ( len == 0 ) { ret = null ; } else { try { ret = android.telephony.PhoneNumberUtils.calledPartyBCDToString ( mPdu , mCur , len ) ; } catch ( java.lang.RuntimeException tr ) { android.telephony.Rlog.d ( com.android.internal.telephony.gsm.SmsMessage.LOG_TAG , "invalid SC address: " , tr ) ; ret = null ; } } mCur += len ; return ret ; }
private void adjustTreeButtons ( org.eclipse.jface.viewers.ISelection selection ) { mRemoveButton.setEnabled ( ( ( ! ( selection.isEmpty ( ) ) ) && ( selection instanceof org.eclipse.jface.viewers.ITreeSelection ) ) ) ; mUpButton.setEnabled ( ( ( ! ( selection.isEmpty ( ) ) ) && ( selection instanceof org.eclipse.jface.viewers.ITreeSelection ) ) ) ; mDownButton.setEnabled ( ( ( ! ( selection.isEmpty ( ) ) ) && ( selection instanceof org.eclipse.jface.viewers.ITreeSelection ) ) ) ; }
protected < DST extends com.android.sched.item.Component > java.util.Iterator < DST > adaptWithLog ( @ javax.annotation.Nonnull com.android.sched.schedulable.AdapterSchedulable < T , DST > adapter , @ javax.annotation.Nonnull T data ) throws java.lang.Exception { com.android.sched.scheduler.ManagedSchedulable managedSchedulable = schedulableManager.getManagedSchedulable ( adapter.getClass ( ) ) ; com.android.sched.util.log.Event event = logAndTrace ( adapter , managedSchedulable ) ; try { return adapter.adapt ( data ) ; } finally { event.end ( ) ; } }
public void test_getAllByName_ip6_localhost ( ) throws java.lang.Exception { java.net.InetAddress [ ] inetAddresses = java.net.InetAddress.getAllByName ( "ip6-localhost" ) ; libcore.java.net.InetAddressTest.assertEquals ( 1 , inetAddresses.length ) ; java.net.InetAddress inetAddress = inetAddresses [ 0 ] ; libcore.java.net.InetAddressTest.assertEquals ( libcore.java.net.InetAddressTest.LOOPBACK6_BYTES , "ip6-localhost" , inetAddress ) ; assertTrue ( inetAddress.isLoopbackAddress ( ) ) ; }
public void setField ( java.lang.String fieldName , java.lang.String valueString ) throws java.lang.NoSuchMethodException { java.lang.reflect.Method m = getClass ( ) . getMethod ( com.ibm.icu.dev.test.format.NumberFormatTestData.fieldToSetter ( fieldName ) , java.lang.String.class ) ; try { m.invoke ( this , valueString ) ; } catch ( java.lang.IllegalAccessException e ) { throw new java.lang.RuntimeException ( e ) ; } catch ( java.lang.reflect.InvocationTargetException e ) { throw new java.lang.RuntimeException ( e ) ; } }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , byte [ ] data ) { mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , data.length ) ; }
public void onFlushCompleted ( android.hardware.Sensor sensor ) { flushReceived.countDown ( ) ; }
public java.util.List < android.content.pm.ResolveInfo > queryIntent ( android.content.Intent intent , java.lang.String resolvedType , int flags ) { mFlags = flags ; return super . queryIntent ( intent , resolvedType , ( ( flags & ( android.content.pm.PackageManager.MATCH_DEFAULT_ONLY ) ) != 0 ) ) ; }
public boolean contains ( java.lang.Object element ) { try { @ java.lang.SuppressWarnings ( value = "unchecked" ) E e = ( ( E ) ( element ) ) ; return ( predicate.apply ( e ) ) && ( unfiltered.contains ( element ) ) ; } catch ( java.lang.NullPointerException e ) { return false ; } catch ( java.lang.ClassCastException e ) { return false ; } }
public com.android.vts.proto.TestSuiteResultMessageProto.TestSuiteResultMessage.Builder setSuitePlan ( java.lang.String value ) { if ( value == null ) { throw new java.lang.NullPointerException ( ) ; } bitField0_ |= 16 ; suitePlan_ = value ; onChanged ( ) ; return this ; }
public android.hardware.cts.helpers.TestSensorEvent [ ] collectEvents ( int eventCount ) { if ( ( mTestSensorEventListener ) != null ) { android.util.Log.w ( android.hardware.cts.helpers.TestSensorManager.LOG_TAG , "Listener already registered, returning." ) ; return null ; } try { registerListener ( ) ; return getEvents ( eventCount ) ; } finally { unregisterListener ( ) ; } }
public void test_getResourceAsStreamLjava_lang_String ( ) { java.io.InputStream is = null ; assertNotNull ( "Failed to find resource: hyts_Foo.c" , ( is = java.lang.ClassLoader.getSystemClassLoader ( ) . getResourceAsStream ( "hyts_Foo.c" ) ) ) ; try { is.close ( ) ; } catch ( java.io.IOException e ) { fail ( ( "Exception during getResourceAsStream: " + ( e.toString ( ) ) ) ) ; } }
public final short getShort ( int index ) { checkIndex ( index , SizeOf.SHORT ) ; return this . block.peekShort ( ( ( offset ) + index ) , order ) ; }
public static com.google.common.io.OutputSupplier < java.io.FileOutputStream > newOutputStreamSupplier ( final java.io.File file , final boolean append ) { com.google.common.base.Preconditions.checkNotNull ( file ) ; return new com.google.common.io.OutputSupplier < java.io.FileOutputStream > ( ) { @ java.lang.Override public java.io.FileOutputStream getOutput ( ) throws java.io.IOException { return new java.io.FileOutputStream ( file , append ) ; } } ; }
public static java.lang.String formatProgressText ( long totalBytes , long currentBytes ) { if ( totalBytes <= 0 ) { return "0%" ; } long progress = ( currentBytes * 100 ) / totalBytes ; java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( progress ) ; sb.append ( '%' ) ; return sb.toString ( ) ; }
private int deleteAttribute ( int attributesCount , proguard.classfile.editor.Attribute [ ] attributes , java.lang.String attributeName ) { int index = findAttribute ( attributesCount , attributes , attributeName ) ; if ( index < 0 ) { return attributesCount ; } java.lang.System.arraycopy ( attributes , ( index + 1 ) , attributes , index , ( ( attributesCount - index ) - 1 ) ) ; attributes [ ( -- attributesCount ) ] = null ; return attributesCount ; }
synchronized boolean unplug ( ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.TAG , "unplug()" ) ; return unplugNative ( ) ; }
private static java.lang.String toTelecomDisconnectReason ( android.content.Context context , int telephonyDisconnectCause , java.lang.String reason ) { if ( context == null ) { return "" ; } switch ( telephonyDisconnectCause ) { case android.telecom.DisconnectCause.POWER_OFF : case android.telecom.DisconnectCause.OUT_OF_SERVICE : if ( com.android.phone.ImsUtil.shouldPromoteWfc ( context ) ) { return android.telecom.DisconnectCause.REASON_WIFI_ON_BUT_WFC_OFF ; } break ; } java.lang.String causeAsString = android.telephony.DisconnectCause.toString ( telephonyDisconnectCause ) ; if ( reason == null ) { return causeAsString ; } else { return ( reason + ", " ) + causeAsString ; } }
private com.android.server.audio.AudioService.ScoClient getScoClient ( android.os.IBinder cb , boolean create ) { synchronized ( mScoClients ) { com.android.server.audio.AudioService.ScoClient client = null ; int size = mScoClients.size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { client = mScoClients.get ( i ) ; if ( ( client.getBinder ( ) ) == cb ) return client ; } if ( create ) { client = new com.android.server.audio.AudioService.ScoClient ( cb ) ; mScoClients.add ( client ) ; } return client ; } }
public void testAttachNoIdentity ( ) { if ( ! ( android.net.wifi.aware.cts.TestUtils.shouldTestWifiAware ( getContext ( ) ) ) ) { return ; } android.net.wifi.aware.cts.SingleDeviceTest.AttachCallbackTest attachCb = new android.net.wifi.aware.cts.SingleDeviceTest.AttachCallbackTest ( ) ; mWifiAwareManager.attach ( attachCb , null ) ; int cbCalled = attachCb.waitForAnyCallback ( ) ; assertEquals ( "Wi-Fi Aware attach" , android.net.wifi.aware.cts.SingleDeviceTest.AttachCallbackTest.ATTACHED , cbCalled ) ; android.net.wifi.aware.WifiAwareSession session = attachCb.getSession ( ) ; assertNotNull ( "Wi-Fi Aware session" , session ) ; session.destroy ( ) ; }
public void turnOffProximitySensor ( boolean screenOnImmediately ) { try { com.android.server.telecom.Log.startSession ( "ICA.tOffPS" , mOwnerComponentName ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { mCallsManager.turnOffProximitySensor ( screenOnImmediately ) ; } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } } finally { com.android.server.telecom.Log.endSession ( ) ; } }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { long time = org.conscrypt.NativeCrypto.SSL_SESSION_get_time ( session ) ; assertTrue ( ( time != 0 ) ) ; assertTrue ( ( time < ( java.lang.System.currentTimeMillis ( ) ) ) ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public void testDefaultConstructor ( ) { android.telephony.CellIdentityTdscdma ci = new android.telephony.CellIdentityTdscdma ( com.android.internal.telephony.CellIdentityTdscdmaTest.MCC_STR , com.android.internal.telephony.CellIdentityTdscdmaTest.MNC_STR , com.android.internal.telephony.CellIdentityTdscdmaTest.LAC , com.android.internal.telephony.CellIdentityTdscdmaTest.CID , com.android.internal.telephony.CellIdentityTdscdmaTest.CPID ) ; assertEquals ( com.android.internal.telephony.CellIdentityTdscdmaTest.MCC_STR , ci.getMccStr ( ) ) ; assertEquals ( com.android.internal.telephony.CellIdentityTdscdmaTest.MNC_STR , ci.getMncStr ( ) ) ; assertEquals ( com.android.internal.telephony.CellIdentityTdscdmaTest.LAC , ci.getLac ( ) ) ; assertEquals ( com.android.internal.telephony.CellIdentityTdscdmaTest.CID , ci.getCid ( ) ) ; assertEquals ( com.android.internal.telephony.CellIdentityTdscdmaTest.CPID , ci.getCpid ( ) ) ; }
private void msgDeviceBrowseConnect ( android.bluetooth.BluetoothDevice device ) { android.util.Log.d ( com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG , ( "msgDeviceBrowseConnect device " + device ) ) ; if ( ! ( device.equals ( mA2dpDevice ) ) ) { android.util.Log.e ( com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG , ( ( ( "Browse connected over different device a2dp " + ( mA2dpDevice ) ) + " browse " ) + device ) ) ; return ; } mBrowseConnected = true ; notifyChildrenChanged ( "__ROOT__" ) ; }
public boolean enableSupplicant ( ) { if ( ( mClientInterface ) == null ) { android.util.Log.e ( com.android.server.wifi.WificondControl.TAG , "No valid wificond client interface handler" ) ; return false ; } try { return mClientInterface.disableSupplicant ( ) ; } catch ( android.os.RemoteException e ) { return false ; } }
public void writeToParcel ( android.os.Parcel dest , int flags ) { dest.writeInt ( mTransportType ) ; dest.writeInt ( mDomain ) ; dest.writeInt ( mRegState ) ; dest.writeInt ( mAccessNetworkTechnology ) ; dest.writeInt ( mReasonForDenial ) ; dest.writeBoolean ( mEmergencyOnly ) ; dest.writeIntArray ( mAvailableServices ) ; dest.writeParcelable ( mCellIdentity , 0 ) ; }
private org.eclipse.jface.text.hyperlink.IHyperlink [ ] createTypeLink ( org.eclipse.jdt.core.IJavaElement element , org.eclipse.jdt.core.IJavaElement type , org.eclipse.jface.text.IRegion wordRegion , boolean isFrameworkResource ) { java.lang.String typeName = type.getElementName ( ) ; if ( isFrameworkResource ) { typeName = ( ( com.android.ide.eclipse.adt.AndroidConstants.ANDROID_PKG ) + ':' ) + typeName ; } java.lang.String elementName = element.getElementName ( ) ; java.lang.String url = ( ( '@' + typeName ) + '/' ) + elementName ; return com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.getResourceLinks ( wordRegion , url ) ; }
protected org.eclipse.core.runtime.IStatus run ( org.eclipse.core.runtime.IProgressMonitor monitor ) { com.android.sdkstats.SdkStatsService stats = new com.android.sdkstats.SdkStatsService ( ) ; java.lang.String sdkPath = com.android.ide.eclipse.monitor.MonitorPlugin.getDefault ( ) . getSdkPath ( ) ; if ( sdkPath == null ) { return org.eclipse.core.runtime.Status.OK_STATUS ; } java.lang.String toolsPath = new org.eclipse.core.runtime.Path ( sdkPath ) . append ( SdkConstants.FD_TOOLS ) . toString ( ) ; com.android.ide.eclipse.monitor.MonitorStartup.ping ( stats , toolsPath ) ; return org.eclipse.core.runtime.Status.OK_STATUS ; }
public void testConstructor_CaliperBenchmark_Profile ( ) throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner ( "-i" , "runtime" ) ; runner.run ( ) ; java.lang.String out = ios.contents ( Stream.OUT ) ; org.junit.Assert.assertTrue ( out.startsWith ( "Profiling is disabled: " ) ) ; out = out.replaceAll ( "^Profiling is disabled:[^\n]+\\n" , "" ) ; out = out.replaceAll ( "\t[^\n]+\\n" , "" ) ; org.junit.Assert.assertEquals ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "" + "//00xx{\"outcome\":\"" ) + ( vogar.target.TestRunnerTest.CaliperBenchmark.class . getName ( ) ) ) + "\"," ) + "\"runner\":\"" ) + ( vogar.target.CaliperRunner.class . getName ( ) ) ) + "\"}\n" ) + "Experiment selection: \n" ) + " Benchmark Methods: [timeMethod]\n" ) + " Instruments: [runtime]\n" ) + " User parameters: {}\n" ) + " Virtual machines: [default]\n" ) + " Selection type: Full cartesian product\n" ) + "\n" ) + "This selection yields 1 experiments.\n" ) + ( com.google.caliper.runner.UserCodeException.class . getName ( ) ) ) + ": An exception was thrown from the benchmark code\n" ) + "Caused by: " ) + ( java.lang.IllegalStateException.class . getName ( ) ) ) + ": " ) + ( vogar.target.TestRunnerTest.CaliperBenchmark.CALIPER_BENCHMARK_MESSAGE ) ) + "\n" ) + "//00xx{\"result\":\"SUCCESS\"}\n" ) + "//00xx{\"completedNormally\":true}\n" ) , out ) ; }
public void printPlan ( @ javax.annotation.Nonnull com.android.sched.scheduler.Plan < ? > plan ) throws com.android.sched.util.file.CannotWriteException { com.android.sched.util.stream.ExtendedPrintWriter writer = null ; try { writer = planFile.getPrintWriter ( ) ; printSubPlan ( plan , writer ) ; } finally { if ( writer != null ) { writer.close ( ) ; try { writer.throwPendingException ( ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.file.CannotWriteException ( planFile.getLocation ( ) , e ) ; } } } }
public synchronized void fillSwitchMapClass ( @ javax.annotation.Nonnull com.android.jack.transformations.enums.OptimizationUtil supportUtil , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedEnum enumType , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClass switchMapClass ) { this . enumType = enumType ; this . supportUtil = supportUtil ; this . switchMapClass = switchMapClass ; com.android.jack.transformations.request.TransformationRequest transformRequest = new com.android.jack.transformations.request.TransformationRequest ( switchMapClass ) ; if ( com.android.jack.transformations.enums.opt.SyntheticClassManager.isSyntheticSwitchMapClass ( switchMapClass ) ) { createInstanceInitIfNotExists ( transformRequest ) ; } if ( ! ( addSyntheticInitializerIfNotExists ( transformRequest ) ) ) { throw new java.lang.AssertionError ( ( "Fails adding synthetic switch map initializer to class: " + switchMapClass ) ) ; } transformRequest.commit ( ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ! ( obj instanceof android.net.LinkAddress ) ) { return false ; } android.net.LinkAddress linkAddress = ( ( android.net.LinkAddress ) ( obj ) ) ; return ( this . address.equals ( linkAddress.address ) ) && ( ( this . prefixLength ) == ( linkAddress.prefixLength ) ) ; }
public void setUp ( ) throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks ( this ) ; mPreparer.setCmdUtil ( mCmdUtil ) ; com.android.tradefed.config.OptionSetter setter = new com.android.tradefed.config.OptionSetter ( mPreparer ) ; setter.setOptionValue ( "adapter-binary-name" , TEST_HAL_ADAPTER_BINARY ) ; setter.setOptionValue ( "hal-package-name" , TEST_HAL_PACKAGE ) ; doReturn ( true ) . when ( mDevice ) . waitForBootComplete ( FRAMEWORK_START_TIMEOUT ) ; doReturn ( "64" ) . when ( mAbi ) . getBitness ( ) ; }
private void startAsyncQuery ( ) { try { setTitle ( getString ( R.string.refreshing ) ) ; setProgressBarIndeterminateVisibility ( true ) ; com.android.mms.data.Conversation.startQueryForAll ( mQueryHandler , com.android.mms.ui.ConversationList.THREAD_LIST_QUERY_TOKEN ) ; com.android.mms.data.Conversation.startQuery ( mQueryHandler , com.android.mms.ui.ConversationList.UNREAD_THREADS_QUERY_TOKEN , ( ( android.provider.Telephony.Threads.READ ) + "=0" ) ) ; } catch ( android.database.sqlite.SQLiteException e ) { android.database.sqlite.SqliteWrapper.checkSQLiteException ( this , e ) ; } }
private android.hardware.cts.helpers.sensorverification.MagnitudeVerification getVerification ( float expected , float threshold , float [ ] ... values ) { android.hardware.cts.helpers.sensorverification.MagnitudeVerification verification = new android.hardware.cts.helpers.sensorverification.MagnitudeVerification ( expected , threshold ) ; for ( float [ ] value : values ) { verification.addSensorEvent ( new android.hardware.cts.helpers.TestSensorEvent ( null , 0 , 0 , value ) ) ; } return verification ; }
static boolean containsKeyImpl ( java.util.Map < ? , ? > map , @ javax.annotation.Nullable java.lang.Object key ) { for ( java.util.Map.Entry < ? , ? > entry : map.entrySet ( ) ) { if ( com.google.common.base.Objects.equal ( entry.getKey ( ) , key ) ) { return true ; } } return false ; }
public void testGetDeviceIdForSlot ( ) { java.lang.String deviceId = mTelephonyManager.getDeviceId ( mTelephonyManager.getDefaultSim ( ) ) ; verifyDeviceId ( deviceId ) ; for ( int i = - 1 ; i <= ( mTelephonyManager.getPhoneCount ( ) ) ; i ++ ) { mTelephonyManager.getDeviceId ( i ) ; } }
public boolean sendReport ( int id , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( "sendReport(): id=" + id ) ) ; com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return false ; } return service.sendReport ( id , data ) ; }
private void maybeStartSearch ( com.android.incallui.call.DialerCall call , boolean isPrimary ) { if ( ( call != null ) && ( ! ( call.isConferenceCall ( ) ) ) ) { startContactInfoSearch ( call , isPrimary , ( ( call.getState ( ) ) == ( com.android.incallui.call.DialerCall.State.INCOMING ) ) ) ; } }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.nio.file.Path dumpDirectory = java.nio.file.Files.createTempDirectory ( "lambdas" ) ; java.lang.System.setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory.toString ( ) ) ; if ( ( ( args.length ) == 1 ) && ( args [ 0 ] . startsWith ( "@" ) ) ) { args = java.nio.file.Files.readAllLines ( java.nio.file.Paths.get ( args [ 0 ] . substring ( 1 ) ) , java.nio.charset.StandardCharsets.ISO_8859_1 ) . toArray ( new java.lang.String [ 0 ] ) ; } com.google.devtools.common.options.OptionsParser optionsParser = com.google.devtools.common.options.OptionsParser.newOptionsParser ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; optionsParser.parseAndExitUponError ( args ) ; com.google.devtools.build.android.desugar.Desugar.Options options = optionsParser.getOptions ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; if ( options.verbose ) { java.lang.System.out.printf ( "Lambda classes will be written under %s%n" , dumpDirectory ) ; } boolean allowDefaultMethods = ( options.minSdkVersion ) >= 24 ; java.lang.ClassLoader parent ; if ( ( options.bootclasspath.isEmpty ( ) ) && ( ! ( options.allowEmptyBootclasspath ) ) ) { parent = java.lang.ClassLoader.getSystemClassLoader ( ) ; } else { parent = new com.google.devtools.build.android.desugar.Desugar.ThrowingClassLoader ( ) ; } java.lang.String prefix = "" ; if ( options.coreLibrary ) { prefix = "__desugar__/" ; } com.google.devtools.build.android.desugar.CoreLibraryRewriter rewriter = new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( prefix ) ; java.lang.ClassLoader loader = com.google.devtools.build.android.desugar.Desugar.createClassLoader ( rewriter , options.bootclasspath , options.inputJar , options.classpath , parent ) ; try ( java.util.zip.ZipFile in = new java.util.zip.ZipFile ( options.inputJar.toFile ( ) ) ; java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( java.nio.file.Files.newOutputStream ( options.outputJar ) ) ) ) { com.google.devtools.build.android.desugar.LambdaClassMaker lambdas = new com.google.devtools.build.android.desugar.LambdaClassMaker ( dumpDirectory ) ; com.google.devtools.build.android.desugar.ClassReaderFactory readerFactory = new com.google.devtools.build.android.desugar.ClassReaderFactory ( in , rewriter ) ; com.google.common.collect.ImmutableSet.Builder < java.lang.String > interfaceLambdaMethodCollector = com.google.common.collect.ImmutableSet.builder ( ) ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > entries = in.entries ( ) ; entries.hasMoreElements ( ) ; ) { java.util.zip.ZipEntry entry = entries.nextElement ( ) ; try ( java.io.InputStream content = in.getInputStream ( entry ) ) { if ( entry.getName ( ) . endsWith ( ".class" ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( content ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.Writer writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , readerFactory ) ; } visitor = new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , interfaceLambdaMethodCollector , allowDefaultMethods ) ; reader.accept ( visitor , 0 ) ; java.lang.String name = entry.getName ( ) ; name = rewriter.unprefix ( name ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , name , writer.toByteArray ( ) ) ; } else { java.util.zip.ZipEntry destEntry = new java.util.zip.ZipEntry ( entry ) ; destEntry.setCompressedSize ( ( - 1 ) ) ; out.putNextEntry ( destEntry ) ; com.google.common.io.ByteStreams.copy ( content , out ) ; out.closeEntry ( ) ; } } } com.google.common.collect.ImmutableSet < java.lang.String > interfaceLambdaMethods = interfaceLambdaMethodCollector.build ( ) ; if ( allowDefaultMethods ) { com.google.common.base.Preconditions.checkState ( interfaceLambdaMethods.isEmpty ( ) , "Desugaring with default methods enabled moved interface lambdas" ) ; } for ( java.util.Map.Entry < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > lambdaClass : lambdas.drain ( ) . entrySet ( ) ) { try ( java.io.InputStream bytecode = java.nio.file.Files.newInputStream ( dumpDirectory.resolve ( lambdaClass.getKey ( ) ) ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( bytecode ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.Writer writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , null ) ; } com.google.devtools.build.android.desugar.LambdaClassFixer lambdaFixer = new com.google.devtools.build.android.desugar.LambdaClassFixer ( visitor , lambdaClass.getValue ( ) , readerFactory , interfaceLambdaMethods , allowDefaultMethods ) ; reader.accept ( new com.google.devtools.build.android.desugar.LambdaDesugaring ( lambdaFixer , loader , lambdas , null , allowDefaultMethods ) , 0 ) ; java.lang.String name = ( lambdaFixer.getInternalName ( ) ) + ".class" ; name = rewriter.unprefix ( name ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , name , writer.toByteArray ( ) ) ; } } java.util.Map < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > leftBehind = lambdas.drain ( ) ; com.google.common.base.Preconditions.checkState ( leftBehind.isEmpty ( ) , "Didn't process %s" , leftBehind ) ; } }
public void testTypeText_NonEnglish ( ) { try { java.lang.String toType = "在一个月之内的话" ; android.support.test.espresso.Espresso.onView ( org.hamcrest.Matchers.allOf ( android.support.test.espresso.matcher.ViewMatchers.withParent ( android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.delegating_edit_text ) ) , android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.delegate_edit_text ) ) ) . perform ( android.support.test.espresso.action.ViewActions.scrollTo ( ) , android.support.test.espresso.action.ViewActions.typeText ( toType ) ) ; fail ( "expected the action above to fail." ) ; } catch ( java.lang.RuntimeException expected ) { } }
public com.android.jack.ir.ast.JDefinedClass create ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage , @ javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader loader ) { assert ( signature ) != null ; assert ( sourceInfo ) != null ; java.lang.String binaryName = com.android.jack.util.NamingTools.getClassBinaryNameFromDescriptor ( signature ) ; java.lang.String simpleName = com.android.jack.util.NamingTools.getSimpleClassNameFromBinaryName ( binaryName ) ; com.android.jack.ir.sourceinfo.SourceInfo jSourceInfo = sourceInfo.exportAsJast ( new com.android.jack.jayce.v0002.io.ExportSession ( loader.getLookup ( ) , enclosingPackage.getSession ( ) , com.android.jack.jayce.NodeLevel.STRUCTURE ) ) ; com.android.jack.ir.ast.JDefinedClass jClassType = new com.android.jack.ir.ast.JDefinedClass ( jSourceInfo , simpleName , modifiers , enclosingPackage , loader ) ; return jClassType ; }
synchronized void nAllocationData2D ( long id , int xoff , int yoff , int mip , int face , int w , int h , int [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes ) ; }
protected void engineUpdate ( byte [ ] arg0 , int arg1 , int arg2 ) throws java.security.SignatureException { spiImpl.engineUpdate ( arg0 , arg1 , arg2 ) ; }
private java.util.List < java.lang.Integer > readTypeIds ( ) { com.android.jack.dx.io.DexBuffer.Section typeIds = open ( tableOfContents.typeIds.off ) ; java.lang.Integer [ ] result = new java.lang.Integer [ tableOfContents.typeIds.size ] ; for ( int i = 0 ; i < ( tableOfContents.typeIds.size ) ; ++ i ) { result [ i ] = java.lang.Integer.valueOf ( typeIds.readInt ( ) ) ; } return java.util.Arrays.asList ( result ) ; }
public java.lang.Long getResult ( ) { long result = checksum.getValue ( ) ; checksum.reset ( ) ; return result ; }
private android.bluetooth.BluetoothHeadsetClientCall getCall ( int ... states ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "getFromCallsWithStates states:" + ( java.util.Arrays.toString ( states ) ) ) ) ; for ( android.bluetooth.BluetoothHeadsetClientCall c : mCalls.values ( ) ) { for ( int s : states ) { if ( ( c.getState ( ) ) == s ) { return c ; } } } return null ; }
private static void asssertContextMenuContainsItemWithEnabledState ( java.lang.String itemLabel , boolean enabled ) { android.widget.espresso.ContextMenuUtils.onContextMenu ( ) . check ( android.support.test.espresso.assertion.ViewAssertions.matches ( android.support.test.espresso.matcher.ViewMatchers.hasDescendant ( org.hamcrest.Matchers.allOf ( android.support.test.espresso.matcher.ViewMatchers.isAssignableFrom ( com.android.internal.view.menu.ListMenuItemView.class ) , ( enabled ? android.support.test.espresso.matcher.ViewMatchers.isEnabled ( ) : org.hamcrest.Matchers.not ( android.support.test.espresso.matcher.ViewMatchers.isEnabled ( ) ) ) , android.support.test.espresso.matcher.ViewMatchers.hasDescendant ( android.support.test.espresso.matcher.ViewMatchers.withText ( itemLabel ) ) ) ) ) ) ; }
private void addFolder ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceRepository resources , com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config , org.eclipse.core.resources.IFile [ ] memberList ) throws java.lang.Exception { java.lang.String folderName = config.getFolderName ( ResourceFolderType.LAYOUT ) ; org.eclipse.core.resources.IFolder folder = com.android.ide.eclipse.mock.Mocks.createFolder ( folderName , memberList ) ; com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder resFolder = _addProjectResourceFolder ( resources , config , folder ) ; for ( org.eclipse.core.resources.IFile file : memberList ) { resFolder.addFile ( new com.android.ide.eclipse.adt.internal.resources.manager.SingleResourceFile ( new com.android.ide.eclipse.adt.io.IFileWrapper ( file ) , resFolder ) ) ; } }
private boolean isDayFirst ( ) { libcore.icu.LocaleData d = libcore.icu.LocaleData.get ( mContext.getResources ( ) . getConfiguration ( ) . locale ) ; java.lang.String value = d.shortDateFormat4 ; return ( value.indexOf ( 'M' ) ) > ( value.indexOf ( 'd' ) ) ; }
public void onClick ( android.view.View v ) { com.android.dialer.common.LogUtil.i ( "VoicemailTosMessageCreator.getPromoMessage" , "open settings" ) ; android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_VIEW ) . setComponent ( new android.content.ComponentName ( context , com.android.dialer.constants.Constants.get ( ) . getSettingsActivity ( ) ) ) . setData ( android.net.Uri.fromParts ( "header" , com.android.dialer.voicemail.settings.VoicemailSettingsFragment.class . getName ( ) , null ) ) ; context.startActivity ( intent ) ; }
public void enter ( ) { removeDeferredMessages ( com.android.bluetooth.a2dp.A2dpStateMachine.CONNECT ) ; log ( ( "Enter Connected: " + ( getCurrentMessage ( ) . what ) ) ) ; broadcastAudioState ( mCurrentDevice , BluetoothA2dp.STATE_NOT_PLAYING , BluetoothA2dp.STATE_PLAYING ) ; }
public void test_getFirst ( ) { assertTrue ( "Returned incorrect first element" , ll.getFirst ( ) . equals ( objArray [ 0 ] ) ) ; ll.clear ( ) ; try { ll.getFirst ( ) ; fail ( "NoSuchElementException expected" ) ; } catch ( java.util.NoSuchElementException e ) { } }
public android.net.IpSecTransform buildTransportModeTransform ( ) throws IpSecManager.ResourceUnavailableException , IpSecManager.SpiUnavailableException , java.io.IOException { mConfig.setMode ( android.net.IpSecTransform.MODE_TRANSPORT ) ; return new android.net.IpSecTransform ( mContext , mConfig ) . activate ( ) ; }
synchronized void nAllocationData3D ( long id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , float [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData3D ( mContext , id , xoff , yoff , zoff , mip , w , h , depth , d , sizeBytes ) ; }
public java.lang.String getText ( java.lang.Object element ) { assert element instanceof com.android.sdkuilib.internal.repository.ArchiveInfo ; com.android.sdkuilib.internal.repository.ArchiveInfo ai = ( ( com.android.sdkuilib.internal.repository.ArchiveInfo ) ( element ) ) ; java.lang.String desc = ai.getShortDescription ( ) ; if ( ai.isDependencyFor ( ) ) { desc += " [*]" ; } return desc ; }
public int compareTo ( java.nio.file.attribute.FileTime.DaysAndNanos other ) { if ( ( this . days ) != ( other.days ) ) return ( this . days ) < ( other.days ) ? - 1 : 1 ; return ( this . excessNanos ) < ( other.excessNanos ) ? - 1 : ( this . excessNanos ) == ( other.excessNanos ) ? 0 : 1 ; }
public void onPause ( ) { super . onPause ( ) ; if ( ( mBluetoothEnabler ) != null ) { mBluetoothEnabler.pause ( ) ; } mLocalAdapter.setScanMode ( BluetoothAdapter.SCAN_MODE_CONNECTABLE ) ; if ( isUiRestricted ( ) ) { return ; } getActivity ( ) . unregisterReceiver ( mReceiver ) ; }
private void sendPing ( java.io.FileDescriptor s , java.net.InetAddress address , byte [ ] packet ) throws java.io.IOException , libcore.io.ErrnoException { int port = ( ( int ) ( ( java.lang.Math.random ( ) ) * 2048 ) ) ; int ret = Libcore.os.sendto ( s , java.nio.ByteBuffer.wrap ( packet ) , 0 , address , port ) ; assertEquals ( packet.length , ret ) ; }
public void testScreenUnlocked ( ) throws java.lang.Exception { android.app.KeyguardManager km = ( ( android.app.KeyguardManager ) ( getContext ( ) . getSystemService ( Context.KEYGUARD_SERVICE ) ) ) ; assertFalse ( "Device must have screen lock disabled" , km.isDeviceSecure ( ) ) ; }
protected void tearDown ( ) throws java.lang.Exception { if ( mShouldTestTelecom ) { cleanupCalls ( ) ; if ( ! ( android.text.TextUtils.isEmpty ( mPreviousDefaultDialer ) ) ) { android.telecom.cts.TestUtils.TestUtils.setDefaultDialer ( getInstrumentation ( ) , mPreviousDefaultDialer ) ; } tearDownConnectionService ( android.telecom.cts.BaseTelecomTestWithMockServices.TEST_PHONE_ACCOUNT_HANDLE ) ; assertMockInCallServiceUnbound ( ) ; } super . tearDown ( ) ; }
public void onSdkChange ( ) { com.android.ide.eclipse.adt.internal.sdk.Sdk currentSdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( currentSdk != null ) { com.android.sdklib.IAndroidTarget target = currentSdk.getTarget ( mEditedFile.getProject ( ) ) ; if ( target != null ) { mConfigComposite.onSdkLoaded ( target ) ; mConfigListener.onConfigurationChange ( ) ; } } }
private int applyUserId ( int uid , int userId ) { return android.os.UserHandle.getUid ( userId , uid ) ; }
public void postUrl ( java.lang.String url , byte [ ] postData ) { org.chromium.content.browser.LoadUrlParams params = org.chromium.content.browser.LoadUrlParams.createLoadHttpPostParams ( url , postData ) ; java.util.Map < java.lang.String , java.lang.String > headers = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; headers.put ( "Content-Type" , "application/x-www-form-urlencoded" ) ; params.setExtraHeaders ( headers ) ; loadUrlOnUiThread ( params ) ; }
private boolean isJackFileNameOf ( @ javax.annotation.Nonnull java.lang.String fileName , @ javax.annotation.Nonnull java.lang.String typeName ) { return ( ( ( fileName.length ( ) ) > ( com.android.jack.backend.jayce.JayceFileImporter.JACK_EXTENSION_LENGTH ) ) && ( fileName.substring ( 0 , ( ( fileName.length ( ) ) - ( com.android.jack.backend.jayce.JayceFileImporter.JACK_EXTENSION_LENGTH ) ) ) . equals ( typeName ) ) ) && ( fileName.substring ( ( ( fileName.length ( ) ) - ( com.android.jack.backend.jayce.JayceFileImporter.JACK_EXTENSION_LENGTH ) ) ) . equalsIgnoreCase ( JayceFileImporter.JAYCE_FILE_EXTENSION ) ) ; }
private static native int nativeForkAndSpecialize ( int uid , int gid , int [ ] gids , int debugFlags , int [ ] [ ] rlimits , int mountExternal , java.lang.String seInfo , java.lang.String niceName , int [ ] fdsToClose , int [ ] fdsToIgnore , java.lang.String instructionSet , java.lang.String appDataDir ) ;
private int getScaledMaxYScroll ( ) { int height ; if ( ( mHeightCanMeasure ) == false ) { height = ( getViewHeight ( ) ) / 4 ; } else { android.graphics.Rect visRect = new android.graphics.Rect ( ) ; calcOurVisibleRect ( visRect ) ; height = ( visRect.height ( ) ) / 2 ; } return viewToContent ( height ) ; }
public java.lang.String findIntegerExamples ( @ com.android.annotations.NonNull java.lang.String language , @ com.android.annotations.NonNull com.android.tools.lint.checks.PluralsDatabase.Quantity quantity ) { return null ; }
synchronized void onIntrDataFromNative ( byte reportId , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "onIntrData(): reportId=" + reportId ) ) ; } java.nio.ByteBuffer bb = java.nio.ByteBuffer.wrap ( data ) ; android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidDeviceService.MESSAGE_INTR_DATA ) ; msg.arg1 = reportId ; msg.obj = bb ; mHandler.sendMessage ( msg ) ; }
public void testGlGetString ( ) { java.lang.String retValue = "testString" ; com.android.ide.eclipse.gldebugger.GLEnum arg1 = com.android.ide.eclipse.gldebugger.GLEnum.GL_RENDERER ; com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage msg = constructGLMessage ( createStringDataType ( retValue ) , Function.glGetString , createEnumDataType ( arg1.value ) ) ; java.lang.String expected = java.lang.String.format ( "%s(name = %s) = (const GLchar*) %s" , Function.glGetString , arg1.toString ( ) , retValue ) ; java.lang.String actual = com.android.ide.eclipse.gltrace.format.GLMessageFormatterTest.sGLMessageFormatter.formatGLMessage ( msg ) ; assertEquals ( expected , actual ) ; }
public boolean updatePublish ( short transactionId , android.net.wifi.nan.PublishConfig config ) { if ( ! ( mIsPublishSession ) ) { android.util.Log.e ( com.android.server.wifi.nan.WifiNanSessionState.TAG , "A SUBSCRIBE session is being used to publish" ) ; try { mCallback.onSessionConfigFail ( WifiNanSessionCallback.REASON_OTHER ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.server.wifi.nan.WifiNanSessionState.TAG , ( "updatePublish: RemoteException=" + e ) ) ; } return false ; } return com.android.server.wifi.nan.WifiNanNative.getInstance ( ) . publish ( transactionId , mPubSubId , config ) ; }
protected void tearDown ( ) throws java.lang.Exception { if ( ( mActivityDoneReceiver ) != null ) { try { mContext.unregisterReceiver ( mActivityDoneReceiver ) ; } catch ( java.lang.IllegalArgumentException e ) { } mActivityDoneReceiver = null ; } super . tearDown ( ) ; }
public static void main ( java.lang.String [ ] arg ) { try { android.icu.dev.test.lang.UCharacterTest test = new android.icu.dev.test.lang.UCharacterTest ( ) ; test.run ( arg ) ; } catch ( java.lang.Exception e ) { e.printStackTrace ( ) ; } }
private static long sadShort2LongAt1 ( char [ ] s1 , char [ ] s2 ) { int min_length = java.lang.Math.min ( s1.length , s2.length ) ; long sad = 1 ; for ( int i = 0 ; i < min_length ; i ++ ) { long x = s1 [ i ] ; long y = s2 [ i ] ; sad += java.lang.Math.abs ( ( x - y ) ) ; } return sad ; }
public void testLibProguardConsumerFile ( ) throws java.lang.Exception { java.io.File project = new java.io.File ( testDir , "libProguardConsumerFiles" ) ; java.io.File debugFileOutput = new java.io.File ( project , "build/bundles/debug" ) ; java.io.File releaseFileOutput = new java.io.File ( project , "build/bundles/release" ) ; runGradleTasks ( sdkDir , BasePlugin.GRADLE_MIN_VERSION , project , "clean" , "build" ) ; com.android.build.gradle.ManualBuildTest.checkFile ( debugFileOutput , "proguard.txt" , new java.lang.String [ ] { "A" } ) ; com.android.build.gradle.ManualBuildTest.checkFile ( releaseFileOutput , "proguard.txt" , new java.lang.String [ ] { "A" , "B" , "C" } ) ; }
public void testGetOutputAfterGetInputStreamFails ( ) throws java.lang.Exception { server.enqueue ( new com.google.mockwebserver.MockResponse ( ) ) ; server.play ( ) ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; connection.setDoOutput ( true ) ; try { connection.getInputStream ( ) ; connection.getOutputStream ( ) ; fail ( ) ; } catch ( java.net.ProtocolException expected ) { } }
public com.google.appengine.api.datastore.Entity toEntity ( ) { com.google.appengine.api.datastore.Entity testEntity = new com.google.appengine.api.datastore.Entity ( com.android.vts.entity.TestEntity.KIND , this . testName ) ; return testEntity ; }
public void checkCall ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.ClassContext context , @ com.android.annotations.NonNull org.objectweb.asm.tree.ClassNode classNode , @ com.android.annotations.NonNull org.objectweb.asm.tree.MethodNode method , @ com.android.annotations.NonNull org.objectweb.asm.tree.MethodInsnNode call ) { java.lang.String owner = call.owner ; if ( ( owner.equals ( "android/util/FloatMath" ) ) && ( ( context.getProject ( ) . getMinSdk ( ) ) >= 8 ) ) { java.lang.String message = java.lang.String.format ( ( "Use java.lang.Math#%1$s instead of android.util.FloatMath#%1$s() " + "since it is faster as of API 8" ) , call.name ) ; context.report ( com.android.tools.lint.checks.MathDetector.ISSUE , method , call , context.getLocation ( call ) , message , null ) ; } }
public void start ( ) { if ( started ( ) ) return ; if ( ! ( mConfigInitialized ) ) { mConfigInitialized = mHwInterface.initOffloadConfig ( ) ; if ( ! ( mConfigInitialized ) ) { mLog.i ( "tethering offload config not supported" ) ; return ; } } mControlInitialized = mHwInterface.initOffloadControl ( ) ; }
public void visitClassConstant ( proguard.classfile.editor.Clazz clazz , proguard.classfile.editor.ClassConstant classConstant ) { if ( proguard.classfile.editor.ClassUtil.isInternalArrayType ( classConstant.getName ( clazz ) ) ) { isInterfaceMethod = false ; } else { proguard.classfile.editor.Clazz referencedClass = classConstant.referencedClass ; if ( referencedClass != null ) { isInterfaceMethod = ( ( referencedClass.getAccessFlags ( ) ) & ( ClassConstants.INTERNAL_ACC_INTERFACE ) ) != 0 ; } } }
protected static java.io.File getJackFile ( @ javax.annotation.Nonnull java.lang.String typeName ) { return new java.io.File ( com.android.jack.experimental.incremental.JackIncremental.jackFilesFolder , new com.android.sched.vfs.VPath ( ( typeName + ( com.android.jack.backend.jayce.JayceFileImporter.JAYCE_FILE_EXTENSION ) ) , com.android.jack.experimental.incremental.JackIncremental.fileSeparator ) . getPathAsString ( java.io.File.separatorChar ) ) ; }
public void addI64 ( android.support.v8.renderscript.Long2 v ) { if ( android.support.v8.renderscript.RenderScript.shouldThunk ( ) ) { mN.addI64 ( new android.support.v8.renderscript.Long2 ( v.x , v.y ) ) ; return ; } addI64 ( v.x ) ; addI64 ( v.y ) ; }
private java.lang.String reformat ( com.android.ide.eclipse.adt.internal.editors.formatting.XmlFormatStyle style , java.lang.String contents ) { if ( com.android.ide.eclipse.adt.internal.preferences.AdtPrefs.getPrefs ( ) . getUseCustomXmlFormatter ( ) ) { com.android.ide.eclipse.adt.internal.editors.formatting.XmlFormatPreferences formatPrefs = com.android.ide.eclipse.adt.internal.editors.formatting.XmlFormatPreferences.create ( ) ; return com.android.ide.eclipse.adt.internal.editors.formatting.XmlPrettyPrinter.prettyPrint ( contents , formatPrefs , style , null ) ; } else { return contents ; } }
private static java.lang.String cleanup ( java.lang.String name ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( name.length ( ) ) ; for ( int i = 0 ; i < ( name.length ( ) ) ; i ++ ) { char c = name.charAt ( i ) ; if ( java.lang.Character.isJavaIdentifierPart ( c ) ) { sb.append ( java.lang.Character.toLowerCase ( c ) ) ; } } return sb.toString ( ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { Main.$opt$TestAllocations ( ) ; Main.$opt$TestWithInitializations ( ) ; Main.testSmaliFilledNewArray ( ) ; Main.testSmaliFillArrayData ( ) ; Main.testSmaliVerifyError ( ) ; }
private com.android.server.VibratorService.Vibration removeVibrationLocked ( android.os.IBinder token ) { java.util.ListIterator < com.android.server.VibratorService.Vibration > iter = mVibrations.listIterator ( 0 ) ; while ( iter.hasNext ( ) ) { com.android.server.VibratorService.Vibration vib = iter.next ( ) ; if ( ( vib.mToken ) == token ) { iter.remove ( ) ; return vib ; } } if ( ( ( mCurrentVibration ) != null ) && ( ( mCurrentVibration.mToken ) == token ) ) { return mCurrentVibration ; } return null ; }
public void testSubscribeBadServiceName ( ) { android.net.wifi.nan.SubscribeConfig subscribeConfig = new android.net.wifi.nan.SubscribeConfig.Builder ( ) . setServiceName ( "InvalidServiceCharacters__" ) . build ( ) ; int clientId = doConnect ( ) ; android.net.wifi.nan.IWifiNanDiscoverySessionCallback mockCallback = org.mockito.Mockito.mock ( android.net.wifi.nan.IWifiNanDiscoverySessionCallback.class ) ; mDut.subscribe ( clientId , subscribeConfig , mockCallback ) ; org.mockito.Mockito.verify ( mNanStateManagerMock ) . subscribe ( clientId , subscribeConfig , mockCallback ) ; }
private static void install ( java.lang.ClassLoader loader , java.util.List < ? extends java.io.File > additionalClassPathEntries , java.io.File optimizedDirectory ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException , java.lang.NoSuchFieldException , java.lang.NoSuchMethodException , java.lang.reflect.InvocationTargetException { java.lang.reflect.Field pathListField = android.support.multidex.MultiDex.findField ( loader , "pathList" ) ; java.lang.Object dexPathList = pathListField.get ( loader ) ; android.support.multidex.MultiDex.expandFieldArray ( dexPathList , "dexElements" , android.support.multidex.MultiDex.V14.makeDexElements ( dexPathList , new java.util.ArrayList < java.io.File > ( additionalClassPathEntries ) , optimizedDirectory ) ) ; }
public void testAesCbcHmacMd5Tcp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth ) ; }
public static void doTest ( ) throws java.lang.Exception { java.lang.reflect.Method say_hi_method = art.Test986.Transform.class . getDeclaredMethod ( "sayHi" ) ; art.Main.bindAgentJNIForClass ( art.Test986.Transform.class ) ; art.Test986.Transform.sayHi ( ) ; art.Test986.setNativeTransform ( say_hi_method , "NoReallySayGoodbye" ) ; art.Main.bindAgentJNIForClass ( art.Test986.Transform.class ) ; art.Test986.Transform.sayHi ( ) ; art.Main.bindAgentJNIForClass ( art.Main.class ) ; art.Main.bindAgentJNIForClass ( art.Test986.class ) ; }
public static boolean isLegal ( java.lang.String str ) { int size = str.length ( ) ; int codepoint ; for ( int i = 0 ; i < size ; i ++ ) { codepoint = android.icu.text.UTF16.charAt ( str , i ) ; if ( ! ( android.icu.lang.UCharacter.isLegal ( codepoint ) ) ) { return false ; } if ( android.icu.lang.UCharacter.isSupplementary ( codepoint ) ) { i ++ ; } } return true ; }
public void setUp ( ) throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks ( this ) ; org.mockito.Mockito.reset ( mContext ) ; org.mockito.Mockito.reset ( mCS ) ; mCM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestConnectivityManager ( mContext , mCS ) ; mUNM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitor ( null , com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.EVENT_UNM_UPDATE , ( ( android.net.ConnectivityManager ) ( mCM ) ) ) ; }
public static java.security.KeyStore getInstance ( java.lang.String type , java.security.Provider provider ) throws java.security.KeyStoreException { if ( provider == null ) { throw new java.lang.IllegalArgumentException ( ) ; } if ( type == null ) { throw new java.lang.NullPointerException ( "type == null" ) ; } try { java.lang.Object spi = java.security.KeyStore.ENGINE.getInstance ( type , provider , null ) ; return new java.security.KeyStore ( ( ( java.security.KeyStoreSpi ) ( spi ) ) , provider , type ) ; } catch ( java.lang.Exception e ) { throw new java.security.KeyStoreException ( e ) ; } }
public void run ( ) { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create ( mCtx ) ; com.android.rs.unittest.ScriptC_noroot s = new com.android.rs.unittest.ScriptC_noroot ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; initializeGlobals ( pRS , s ) ; s.forEach_foo ( A , A ) ; s.invoke_verify_foo ( ) ; s.invoke_noroot_test ( ) ; pRS.finish ( ) ; A.getType ( ) . destroy ( ) ; A.destroy ( ) ; s.destroy ( ) ; pRS.destroy ( ) ; }
public void setComment ( java.lang.String comment ) { if ( comment == null ) { this . commentBytes = null ; return ; } byte [ ] newCommentBytes = comment.getBytes ( Charsets.UTF_8 ) ; if ( ( newCommentBytes.length ) > 65535 ) { throw new java.lang.IllegalArgumentException ( ( ( "Comment too long: " + ( newCommentBytes.length ) ) + " bytes" ) ) ; } this . commentBytes = newCommentBytes ; }
protected void orderItems ( ) { int idx = 0 ; if ( ( items ( ) . size ( ) ) > ( ( com.android.dex.DexFormat.MAX_MEMBER_IDX ) + 1 ) ) { throw new com.android.dex.DexException ( getTooManyMembersMessage ( ) ) ; } for ( java.lang.Object i : items ( ) ) { ( ( com.android.dx.dex.file.MemberIdItem ) ( i ) ) . setIndex ( idx ) ; idx ++ ; } }
protected org.bouncycastle.crypto.tls.TlsStreamCipher createRC4Cipher ( org.bouncycastle.crypto.tls.TlsContext context , int cipherKeySize , int macAlgorithm ) throws java.io.IOException { return new org.bouncycastle.crypto.tls.TlsStreamCipher ( context , createRC4StreamCipher ( ) , createRC4StreamCipher ( ) , createHMACDigest ( macAlgorithm ) , createHMACDigest ( macAlgorithm ) , cipherKeySize ) ; }
public static android.net.MacAddress createRandomUnicastAddress ( android.net.MacAddress base , java.util.Random r ) { long addr = ( ( base.mAddr ) & ( android.net.MacAddress.OUI_MASK ) ) | ( ( android.net.MacAddress.NIC_MASK ) & ( r.nextLong ( ) ) ) ; addr = addr | ( android.net.MacAddress.LOCALLY_ASSIGNED_MASK ) ; addr = addr & ( ~ ( android.net.MacAddress.MULTICAST_MASK ) ) ; return new android.net.MacAddress ( addr ) ; }
synchronized boolean replyReport ( android.bluetooth.BluetoothDevice device , byte type , byte id , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( ( ( ( ( "replyReport(): device=" + device ) + " type=" ) + type ) + " id=" ) + id ) ) ; } return ( ( checkDevice ( device ) ) && ( checkCallingUid ( ) ) ) && ( mHidDeviceNativeInterface.replyReport ( type , id , data ) ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; startActivity ( com.android.cts.taskswitching.control.TaskswitchingDeviceTest.PKG_A , com.android.cts.taskswitching.control.TaskswitchingDeviceTest.ACTIVITY_A ) ; startActivity ( com.android.cts.taskswitching.control.TaskswitchingDeviceTest.PKG_B , com.android.cts.taskswitching.control.TaskswitchingDeviceTest.ACTIVITY_B ) ; android.content.IntentFilter filterA = new android.content.IntentFilter ( ) ; filterA.addAction ( com.android.cts.taskswitching.control.TaskswitchingDeviceTest.PKG_A ) ; android.content.IntentFilter filterB = new android.content.IntentFilter ( ) ; filterB.addAction ( com.android.cts.taskswitching.control.TaskswitchingDeviceTest.PKG_B ) ; getContext ( ) . registerReceiver ( mReceiverA , filterA ) ; getContext ( ) . registerReceiver ( mReceiverB , filterB ) ; }
public void testInitialize ( ) { if ( skipTest ( ) ) return ; android.util.Log.i ( com.android.bluetooth.mapclient.MapClientTest.TAG , "testInitialize, test passed" ) ; }
protected static boolean isInterestingBlock ( @ com.android.annotations.NonNull java.lang.String parent , @ com.android.annotations.Nullable java.lang.String parentParent ) { return ( ( ( parent.equals ( "defaultConfig" ) ) || ( parent.equals ( "android" ) ) ) || ( parent.equals ( "dependencies" ) ) ) || ( ( parentParent != null ) && ( parentParent.equals ( "buildTypes" ) ) ) ; }
synchronized void nAllocationRead ( int id , int [ ] d ) { validate ( ) ; rsnAllocationRead ( mContext , id , d ) ; }
public void onCreate ( android.database.sqlite.SQLiteDatabase db ) { com.android.dialer.common.LogUtil.enterBlock ( "AnnotatedCallLogDatabaseHelper.onCreate" ) ; long startTime = java.lang.System.currentTimeMillis ( ) ; db.execSQL ( com.android.dialer.calllog.database.AnnotatedCallLogDatabaseHelper.CREATE_TABLE_SQL ) ; db.execSQL ( java.lang.String.format ( java.util.Locale.US , com.android.dialer.calllog.database.AnnotatedCallLogDatabaseHelper.CREATE_TRIGGER_SQL , maxRows , maxRows ) ) ; db.execSQL ( com.android.dialer.calllog.database.AnnotatedCallLogDatabaseHelper.CREATE_INDEX_ON_CALL_TYPE_SQL ) ; com.android.dialer.common.LogUtil.i ( "AnnotatedCallLogDatabaseHelper.onCreate" , "took: %dms" , ( ( java.lang.System.currentTimeMillis ( ) ) - startTime ) ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.util.ArrayList < java.lang.String > available = intent.getStringArrayListExtra ( ConnectivityManager.EXTRA_AVAILABLE_TETHER ) ; java.util.ArrayList < java.lang.String > active = intent.getStringArrayListExtra ( ConnectivityManager.EXTRA_ACTIVE_TETHER ) ; sendMessage ( com.android.server.wifi.WifiStateMachine.CMD_TETHER_STATE_CHANGE , new com.android.server.wifi.WifiStateMachine.TetherStateChange ( available , active ) ) ; }
synchronized boolean connect ( ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.TAG , "connect()" ) ; return connectNative ( ) ; }
public void applyTransportModeTransform ( java.io.FileDescriptor socket , int direction , android.net.IpSecTransform transform ) throws java.io.IOException { try ( android.os.ParcelFileDescriptor pfd = android.os.ParcelFileDescriptor.dup ( socket ) ) { applyTransportModeTransform ( pfd , direction , transform ) ; } }
public java.lang.CharSequence getSimCarrierIdName ( ) { try { com.android.internal.telephony.ITelephony service = getITelephony ( ) ; if ( service != null ) { return service.getSubscriptionCarrierName ( getSubId ( ) ) ; } } catch ( android.os.RemoteException ex ) { ex.rethrowAsRuntimeException ( ) ; } return null ; }
public void installPackage ( java.lang.String originPath , android.content.pm.IPackageInstallObserver2 observer , int installFlags , java.lang.String installerPackageName , android.content.pm.VerificationParams verificationParams , java.lang.String packageAbiOverride ) { installPackageAsUser ( originPath , observer , installFlags , installerPackageName , verificationParams , packageAbiOverride , android.os.UserHandle.getCallingUserId ( ) ) ; }
public java.util.Iterator < com.android.sched.vfs.InputVFile > iterator ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType ) { if ( ! ( containsFileType ( fileType ) ) ) { return com.google.common.collect.ImmutableSet.< com.android.sched.vfs.InputVFile > of ( ) . iterator ( ) ; } if ( fileType == ( com.android.jack.library.FileType.RSC ) ) { return resources.iterator ( ) ; } java.util.List < com.android.sched.vfs.InputVFile > inputVFiles = new java.util.ArrayList < com.android.sched.vfs.InputVFile > ( ) ; fillFiles ( inputVFS.getRootInputVDir ( ) , fileType , inputVFiles ) ; return inputVFiles.iterator ( ) ; }
private static void checkTypeDefConstant ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation , @ com.android.annotations.NonNull lombok.ast.Node argument , boolean flag , java.lang.Object value ) { java.lang.Object allowed = annotation.getValue ( ) ; if ( allowed instanceof java.lang.Object [ ] ) { java.lang.Object [ ] allowedValues = ( ( java.lang.Object [ ] ) ( allowed ) ) ; for ( java.lang.Object o : allowedValues ) { if ( o.equals ( value ) ) { return ; } } com.android.tools.lint.checks.SupportAnnotationDetector.reportTypeDef ( context , argument , flag , allowedValues ) ; } }
public void testNonGeographicalRegionMetadataLoadsCorrectly ( ) { java.util.concurrent.ConcurrentHashMap < java.lang.Integer , com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata > map = new java.util.concurrent.ConcurrentHashMap < java.lang.Integer , com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata > ( ) ; com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata metadata = com.google.i18n.phonenumbers.MultiFileMetadataSourceImpl.loadMetadataFromFile ( 800 , map , "/com/google/i18n/phonenumbers/data/PhoneNumberMetadataProtoForTesting" , PhoneNumberUtil.DEFAULT_METADATA_LOADER ) ; assertEquals ( metadata , map.get ( 800 ) ) ; }
private void logStateAndMessage ( android.os.Message message , com.android.internal.util.State state ) { messageHandlingStatus = 0 ; if ( com.android.server.wifi.WifiStateMachine.mLogMessages ) { logd ( ( ( ( " " + ( state.getClass ( ) . getSimpleName ( ) ) ) + " " ) + ( getLogRecString ( message ) ) ) ) ; } }
public void testCallMethodWithNoCreatedFeature ( ) throws android.os.RemoteException { mTestImsServiceBinder.createImsFeature ( android.telephony.ims.ImsServiceTest.TEST_SLOT_0 , ImsFeature.MMTEL , mTestCallback ) ; mTestImsServiceBinder.isConnected ( android.telephony.ims.ImsServiceTest.TEST_SLOT_1 , ImsFeature.MMTEL , 0 , 0 ) ; org.mockito.Mockito.verify ( mTestImsService.mSpyMMTelFeature , org.mockito.Mockito.never ( ) ) . isConnected ( org.mockito.Matchers.anyInt ( ) , org.mockito.Matchers.anyInt ( ) ) ; }
private javax.xml.validation.Validator getValidator ( int version , com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler handler ) throws org.xml.sax.SAXException { java.io.InputStream xsdStream = com.android.sdklib.repository.SdkRepoConstants.getXsdStream ( version ) ; javax.xml.validation.SchemaFactory factory = javax.xml.validation.SchemaFactory.newInstance ( javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI ) ; javax.xml.validation.Schema schema = factory.newSchema ( new javax.xml.transform.stream.StreamSource ( xsdStream ) ) ; javax.xml.validation.Validator validator = schema.newValidator ( ) ; if ( handler != null ) { validator.setErrorHandler ( handler ) ; } return validator ; }
private static com.android.sdklib.devices.ButtonType getButtonType ( @ com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration configuration ) { com.android.sdklib.devices.Device device = configuration.getDevice ( ) ; if ( device != null ) { com.android.sdklib.devices.Hardware hardware = device.getDefaultHardware ( ) ; if ( hardware != null ) { return hardware.getButtonType ( ) ; } } return com.android.sdklib.devices.ButtonType.SOFT ; }
public void testSubjectAltNameWithIpAddress ( ) { assertTrue ( verifyWithServerCertificate ( "1.2.3.4" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_IPA_NAME , "1.2.3.4" ) ) ) ; assertFalse ( verifyWithServerCertificate ( "1.2.3.5" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_IPA_NAME , "1.2.3.4" ) ) ) ; assertTrue ( verifyWithServerCertificate ( "192.168.100.1" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_IPA_NAME , "1.2.3.4" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_IPA_NAME , "192.168.100.1" ) ) ) ; }
public void test_parkUntil_3 ( ) throws java.lang.Exception { java.util.concurrent.CyclicBarrier barrier = new java.util.concurrent.CyclicBarrier ( 1 ) ; tests.api.org.apache.harmony.kernel.dalvik.ThreadsTest.Parker parker = new tests.api.org.apache.harmony.kernel.dalvik.ThreadsTest.Parker ( barrier , true , 1000 ) ; java.lang.Thread parkerThread = new java.lang.Thread ( parker ) ; tests.api.org.apache.harmony.kernel.dalvik.ThreadsTest.UNSAFE.unpark ( parkerThread ) ; parkerThread.start ( ) ; parker.assertDurationIsInRange ( 0 ) ; parkerThread.join ( ) ; }
public void testEmptyRootXml ( ) throws java.lang.Exception { java.lang.String document = ( "<?xml version=\"1.0\"?>" + ( com.android.sdklib.repository.SdkRepositoryTest.OPEN_TAG ) ) + ( com.android.sdklib.repository.SdkRepositoryTest.CLOSE_TAG ) ; javax.xml.transform.Source source = new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( document ) ) ; com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler handler = new com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler ( ) ; javax.xml.validation.Validator validator = getValidator ( SdkRepoConstants.NS_LATEST_VERSION , handler ) ; validator.validate ( source ) ; handler.verify ( ) ; }
protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; getFragmentManager ( ) . beginTransaction ( ) . replace ( android.R.id.content , new com.android.bips.ui.ManualPrintersFragment ( ) ) . commit ( ) ; android.app.ActionBar actionBar = getActionBar ( ) ; if ( actionBar != null ) { actionBar.setDisplayHomeAsUpEnabled ( true ) ; } }
private static com.android.dialer.historyitemactions.HistoryItemActionModule createModuleForAccessingCallDetails ( android.content.Context context , com.android.dialer.calllog.model.CoalescedRow row ) { boolean canReportAsInvalidNumber = row.numberAttributes ( ) . getCanReportAsInvalidNumber ( ) ; boolean canSupportAssistedDialing = ! ( android.text.TextUtils.isEmpty ( row.numberAttributes ( ) . getLookupUri ( ) ) ) ; return new com.android.dialer.historyitemactions.IntentModule ( context , com.android.dialer.calldetails.CallDetailsActivity.newInstance ( context , row.coalescedIds ( ) , com.android.dialer.calllog.ui.menu.Modules.createCallDetailsHeaderInfoFromRow ( context , row ) , canReportAsInvalidNumber , canSupportAssistedDialing ) , R.string.call_details_menu_label , R.drawable.quantum_ic_info_outline_vd_theme_24 ) ; }
public void test_getPrivateExponent ( ) throws java.lang.Exception { for ( java.security.Provider p : java.security.Security.getProviders ( "KeyFactory.RSA" ) ) { java.security.interfaces.RSAPrivateKey key = tests.security.interfaces.RSAPrivateKeyTest.getNonCRTKey ( p ) ; assertEquals ( "invalid private exponent" , tests.security.interfaces.RSAPrivateKeyTest.SIMPLE_D , key.getPrivateExponent ( ) ) ; } }
public void sendDtmf ( char c , android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_DTMF , result ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; rr.mParcel.writeString ( java.lang.Character.toString ( c ) ) ; send ( rr ) ; }
public com.android.jack.library.OutputJackLibrary getOutputJackLibrary ( ) { if ( ( incrementalInputLibrary ) == null ) { return getOutputJackLibraryFromVfs ( ) ; } return com.android.jack.library.JackLibraryFactory.getOutputLibrary ( com.android.sched.util.config.ThreadConfig.get ( Options.LIBRARY_OUTPUT_DIR ) , com.android.jack.Jack.getEmitterId ( ) , com.android.jack.Jack.getVersionString ( ) ) ; }
public synchronized com.android.ide.common.layoutlib.LayoutLibrary getLayoutLibrary ( ) { if ( ( ( mLayoutBridgeInit ) == false ) && ( ( mLayoutLibrary.getStatus ( ) ) == ( com.android.ide.common.sdk.LoadStatus.LOADED ) ) ) { mLayoutLibrary.init ( mTarget.getPath ( IAndroidTarget.FONTS ) , getEnumValueMap ( ) ) ; mLayoutBridgeInit = true ; } return mLayoutLibrary ; }
private void loadPreferences ( ) { org.eclipse.core.runtime.preferences.IEclipsePreferences prefs = new org.eclipse.core.runtime.preferences.InstanceScope ( ) . getNode ( GlTracePlugin.PLUGIN_ID ) ; mActivityToTrace = prefs.get ( com.android.ide.eclipse.gltrace.GLTraceOptionsDialog.PREF_APPNAME , "" ) ; mTraceFilePath = prefs.get ( com.android.ide.eclipse.gltrace.GLTraceOptionsDialog.PREF_TRACEFILE , "" ) ; }
public void testNewInstance ( ) throws java.lang.Exception { java.security.Provider p = new org.apache.harmony.security.tests.java.security.ProviderServiceTest.MyProvider ( ) ; java.security.Provider.Service s = new java.security.Provider.Service ( p , "SecureRandom" , "algorithm" , "org.apache.harmony.security.tests.support.RandomImpl" , null , null ) ; java.lang.Object o = s.newInstance ( null ) ; assertTrue ( "incorrect instance" , ( o instanceof org.apache.harmony.security.tests.support.RandomImpl ) ) ; }
public void testInstall_missingTzDataFile ( ) throws java.lang.Exception { libcore.tzdata.update2.TimeZoneDistro installedDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistro ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEW_RULES_VERSION , 1 ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_SUCCESS , installer.installWithErrorCode ( installedDistro.getBytes ( ) ) ) ; assertDistroInstalled ( installedDistro ) ; libcore.tzdata.update2.TimeZoneDistro incompleteDistro = libcore.tzdata.update2.TimeZoneDistroInstallerTest.createValidTimeZoneDistroBuilder ( libcore.tzdata.update2.TimeZoneDistroInstallerTest.NEWER_RULES_VERSION , 1 ) . clearTzDataForTests ( ) . buildUnvalidated ( ) ; assertEquals ( TimeZoneDistroInstaller.INSTALL_FAIL_BAD_DISTRO_STRUCTURE , installer.installWithErrorCode ( incompleteDistro.getBytes ( ) ) ) ; assertDistroInstalled ( installedDistro ) ; }
public void applySettings ( ) { java.util.Properties props = java.lang.System.getProperties ( ) ; props.setProperty ( ISettingsPage.KEY_HTTP_PROXY_HOST , mProperties.getProperty ( ISettingsPage.KEY_HTTP_PROXY_HOST , "" ) ) ; props.setProperty ( ISettingsPage.KEY_HTTP_PROXY_PORT , mProperties.getProperty ( ISettingsPage.KEY_HTTP_PROXY_PORT , "" ) ) ; }
public void run ( ) { java.util.ArrayList < java.lang.String > pastEntries = mDatabase.getFormData ( mUrl , mName ) ; if ( ( pastEntries.size ( ) ) > 0 ) { android.widget.ArrayAdapter < java.lang.String > adapter = new android.widget.ArrayAdapter < java.lang.String > ( mContext , com.android.internal.R.layout.search_dropdown_item_1line , pastEntries ) ; ( ( java.util.HashMap ) ( mUpdateMessage.obj ) ) . put ( "adapter" , adapter ) ; mUpdateMessage.sendToTarget ( ) ; } }
public boolean setP2pPowerSave ( java.lang.String iface , boolean enabled ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.setPowerSave ( iface , enabled ) ; } else { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( enabled ) { return doBooleanCommandNative ( ( ( "IFNAME=" + iface ) + " P2P_SET ps 1" ) ) ; } else { return doBooleanCommandNative ( ( ( "IFNAME=" + iface ) + " P2P_SET ps 0" ) ) ; } } } }
private void upgradeDatabaseToVersion65 ( android.database.sqlite.SQLiteDatabase db ) { db.execSQL ( ( ( "ALTER TABLE " + ( SmsProvider.TABLE_RAW ) ) + " ADD COLUMN message_body TEXT" ) ) ; }
public void test_getByName_cloning ( ) throws java.lang.Exception { java.net.InetAddress [ ] addresses = java.net.InetAddress.getAllByName ( null ) ; java.net.InetAddress [ ] addresses2 = java.net.InetAddress.getAllByName ( null ) ; assertNotNull ( addresses [ 0 ] ) ; assertNotNull ( addresses [ 1 ] ) ; assertNotSame ( addresses , addresses2 ) ; addresses [ 0 ] = null ; addresses2 = java.net.InetAddress.getAllByName ( null ) ; assertNotNull ( addresses2 [ 0 ] ) ; assertNotNull ( addresses2 [ 1 ] ) ; }
< P_IN > java.util.Spliterator < java.lang.Double > opEvaluateParallelLazy ( java.util.stream.PipelineHelper < java.lang.Double > helper , java.util.Spliterator < P_IN > spliterator ) { return op.opEvaluateParallelLazy ( helper , spliterator ) ; }
public static com.intellij.history.core.tree.Entry readEntry ( java.io.DataInput in ) throws java.io.IOException { int type = com.intellij.util.io.DataInputOutputUtil.readINT ( in ) ; switch ( type ) { case 0 : return new com.intellij.history.core.tree.FileEntry ( in , true ) ; case 1 : return new com.intellij.history.core.tree.DirectoryEntry ( in , true ) ; } throw new java.io.IOException ( ( "unexpected entry type: " + type ) ) ; }
private void startAndroidTask ( com.android.ide.eclipse.adt.internal.sdk.ProjectState projectState ) { int buildApi = projectState.getTarget ( ) . getVersion ( ) . getApiLevel ( ) ; buildfile.append ( "android {\n" ) ; buildfile.append ( ( ( " compileSdkVersion " + buildApi ) + "\n" ) ) ; buildfile.append ( ( ( " buildToolsVersion \"" + buildApi ) + "\"\n" ) ) ; buildfile.append ( "\n" ) ; }
public void exit ( ) { stopDhcpAction ( ) ; if ( ( mIpReachabilityMonitor ) != null ) { mIpReachabilityMonitor.stop ( ) ; mIpReachabilityMonitor = null ; } if ( ( mDhcpClient ) != null ) { mDhcpClient.sendMessage ( DhcpClient.CMD_STOP_DHCP ) ; mDhcpClient.doQuit ( ) ; } if ( ( mApfFilter ) != null ) { mApfFilter.shutdown ( ) ; mApfFilter = null ; } resetLinkProperties ( ) ; }
public void update ( org.jetbrains.plugins.github.AnActionEvent e ) { final com.intellij.openapi.project.Project project = e.getData ( PlatformDataKeys.PROJECT ) ; if ( ( project == null ) || ( project.isDefault ( ) ) ) { org.jetbrains.plugins.github.GithubUtil.setVisibleEnabled ( e , false , false ) ; return ; } org.jetbrains.plugins.github.GithubUtil.setVisibleEnabled ( e , true , true ) ; }
public void testValidateLocalRepositoryFile2 ( ) throws java.lang.Exception { java.io.InputStream xmlStream = this . getClass ( ) . getResourceAsStream ( "/com/android/sdklib/testdata/repository_sample_2.xml" ) ; javax.xml.transform.Source source = new javax.xml.transform.stream.StreamSource ( xmlStream ) ; com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler handler = new com.android.sdklib.repository.SdkRepositoryTest.CaptureErrorHandler ( ) ; javax.xml.validation.Validator validator = getValidator ( 2 , handler ) ; validator.validate ( source ) ; handler.verify ( ) ; }
public void test_lastElement ( ) { assertEquals ( "Incorrect last element returned" , "Test 99" , tVector.lastElement ( ) ) ; tVector.addElement ( null ) ; assertNull ( "Incorrect last element returned--wanted null" , tVector.lastElement ( ) ) ; tVector = new java.util.Vector ( 10 ) ; try { tVector.lastElement ( ) ; fail ( "NoSuchElementException expected" ) ; } catch ( java.util.NoSuchElementException e ) { } }
public void clearView ( ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { clearView ( ) ; } } ) ; return ; } mAwContents.clearView ( ) ; }
public boolean hasChanged ( int filters ) { int minf = java.lang.Integer.lowestOneBit ( filters ) ; for ( int filter = minf ; ( filters != 0 ) && ( filter <= ( com.android.sdklib.repository.local.LocalSdk.PKG_ALL ) ) ; filter <<= 1 ) { if ( ( filters & filter ) == 0 ) { continue ; } filters ^= filter ; for ( com.android.sdklib.repository.local.LocalSdk.DirInfo dirInfo : mVisitedDirs.get ( filter ) ) { if ( dirInfo.hasChanged ( ) ) { return true ; } } } return false ; }
public byte [ ] getFwMemoryDump ( ) { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { if ( com.android.server.wifi.WifiNative.getFwMemoryDumpNative ( com.android.server.wifi.WifiNative.sWlan0Index ) ) { byte [ ] fwMemoryDump = com.android.server.wifi.WifiNative.mFwMemoryDump ; com.android.server.wifi.WifiNative.mFwMemoryDump = null ; return fwMemoryDump ; } else { return null ; } } return null ; } }
public int getMaxTransceiveLength ( int technology ) { switch ( technology ) { case android.nfc.tech.TagTechnology.NFC_A : case android.nfc.tech.TagTechnology.MIFARE_CLASSIC : case android.nfc.tech.TagTechnology.MIFARE_ULTRALIGHT : return 253 ; case android.nfc.tech.TagTechnology.NFC_B : return 253 ; case android.nfc.tech.TagTechnology.NFC_V : return 253 ; case android.nfc.tech.TagTechnology.ISO_DEP : return 261 ; case android.nfc.tech.TagTechnology.NFC_F : return 252 ; default : return 0 ; } }
public void respondToRttRequest ( int id , boolean accept ) { try { android.telecom.Log.startSession ( "ICA.rTRR" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } } finally { android.telecom.Log.endSession ( ) ; } }
public void visitMethodInsn ( int opcode , java.lang.String owner , java.lang.String name , java.lang.String desc ) { super . visitMethodInsn ( opcode , owner , name , desc ) ; if ( ( ( owner.equals ( "android/content/res/Resources" ) ) && ( name.equals ( "getIdentifier" ) ) ) && ( desc.equals ( "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I" ) ) ) { mFoundGetIdentifier = true ; } }
void requestPairConfirmation ( ) { android.content.Intent dialogIntent = new android.content.Intent ( mContext , com.android.nfc.handover.ConfirmConnectActivity.class ) ; dialogIntent.setFlags ( ( ( android.content.Intent.FLAG_ACTIVITY_NEW_TASK ) | ( android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK ) ) ) ; dialogIntent.putExtra ( BluetoothDevice.EXTRA_DEVICE , mDevice ) ; mContext.startActivity ( dialogIntent ) ; }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , short [ ] data ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy2DRangeFromUnchecked" ) ; mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * 2 ) , Element.DataType.SIGNED_16 ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
public static void setup ( com.android.ide.eclipse.adt.internal.resources.manager.GlobalProjectMonitor monitor ) { monitor.addProjectListener ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceManager.sThis.mProjectListener ) ; int mask = ( ( org.eclipse.core.resources.IResourceDelta.ADDED ) | ( org.eclipse.core.resources.IResourceDelta.REMOVED ) ) | ( org.eclipse.core.resources.IResourceDelta.CHANGED ) ; monitor.addFolderListener ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceManager.sThis.mFolderListener , mask ) ; monitor.addFileListener ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceManager.sThis.mFileListener , mask ) ; com.android.ide.eclipse.adt.internal.resources.manager.CompiledResourcesMonitor.setupMonitor ( monitor ) ; }
public com.google.devtools.build.android.UnvalidatedAndroidDirectories convert ( java.lang.String input ) throws com.google.devtools.common.options.OptionsParsingException { try { return com.google.devtools.build.android.UnvalidatedAndroidDirectories.valueOf ( input ) ; } catch ( java.lang.IllegalArgumentException e ) { throw new com.google.devtools.common.options.OptionsParsingException ( java.lang.String.format ( "invalid UnvalidatedAndroidDirectories: %s" , e.getMessage ( ) ) , e ) ; } }
public void setTTYMode ( int ttyMode , android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( RILConstants.RIL_REQUEST_SET_TTY_MODE , response ) ; rr.mp.writeInt ( 1 ) ; rr.mp.writeInt ( ttyMode ) ; send ( rr ) ; }
private java.lang.String doLoad ( java.lang.String name , java.lang.ClassLoader loader ) { java.lang.String ldLibraryPath = null ; java.lang.String dexPath = null ; if ( ( loader != null ) && ( loader instanceof dalvik.system.BaseDexClassLoader ) ) { dalvik.system.BaseDexClassLoader dexClassLoader = ( ( dalvik.system.BaseDexClassLoader ) ( loader ) ) ; ldLibraryPath = dexClassLoader.getLdLibraryPath ( ) ; dexPath = dexClassLoader.getDexPath ( ) ; } synchronized ( this ) { return java.lang.Runtime.nativeLoad ( name , loader , ldLibraryPath , dexPath ) ; } }
private void readVtsTradeFedVendorConfig ( ) throws java.lang.RuntimeException { com.android.tradefed.util.VtsVendorConfigFileUtil configReader = new com.android.tradefed.util.VtsVendorConfigFileUtil ( ) ; if ( configReader.LoadVendorConfig ( null ) ) { try { java.lang.String tracePath = configReader.GetVendorConfigVariable ( com.android.compatibility.common.tradefed.targetprep.HidlProfilerPreparer.HOST_PROFILING_TRACE_PATH_KEY ) ; if ( ( tracePath.length ( ) ) > 0 ) { mHostProfilingTracePath = tracePath ; } } catch ( java.util.NoSuchElementException e ) { } } }
private boolean isEvdo ( ) { return ( ( mServiceState ) != null ) && ( ( ( mServiceState.getRadioTechnology ( ) ) == ( android.telephony.ServiceState.RADIO_TECHNOLOGY_EVDO_0 ) ) || ( ( mServiceState.getRadioTechnology ( ) ) == ( android.telephony.ServiceState.RADIO_TECHNOLOGY_EVDO_A ) ) ) ; }
public void enter ( ) { super . enter ( ) ; mConnectingTimestampMs = java.lang.Long.MIN_VALUE ; mPhonebook.resetAtState ( ) ; updateAgIndicatorEnableState ( null ) ; mVoiceRecognitionStarted = false ; mWaitingForVoiceRecognition = false ; mAudioParams.clear ( ) ; broadcastStateTransitions ( ) ; if ( ( ( mPrevState ) != null ) && ( ( mAdapterService.getBondState ( mDevice ) ) == ( android.bluetooth.BluetoothDevice.BOND_NONE ) ) ) { getHandler ( ) . post ( ( ) -> com.android.bluetooth.hfp.mHeadsetService.removeStateMachine ( com.android.bluetooth.hfp.mDevice ) ) ; } }
public void testNotifyResponseSubscribeCancel ( ) throws org.json.JSONException { final short transactionId = 23 ; android.os.Bundle args = new android.os.Bundle ( ) ; args.putInt ( "status" , WifiAwareNative.AWARE_STATUS_DE_FAILURE ) ; args.putInt ( "value" , 0 ) ; args.putInt ( "response_type" , WifiAwareNative.AWARE_RESPONSE_SUBSCRIBE_CANCEL ) ; com.android.server.wifi.aware.WifiAwareHalMock.callNotifyResponse ( transactionId , com.android.server.wifi.HalMockUtils.convertBundleToJson ( args ) . toString ( ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAwareStateManager ) ; }
public boolean isDefect ( ) { return false ; }
public void testWificondNullWhenSwitchingToApMode ( ) throws java.lang.Exception { when ( mWifiInjector.makeWificond ( ) ) . thenReturn ( null ) ; mWifiStateMachinePrime.enterSoftAPMode ( ) ; mLooper.dispatchNext ( ) ; org.junit.Assert.assertEquals ( "SoftAPModeState" , mWifiStateMachinePrime.getCurrentMode ( ) ) ; mLooper.dispatchNext ( ) ; org.junit.Assert.assertEquals ( "SoftAPModeState" , mWifiStateMachinePrime.getCurrentMode ( ) ) ; }
public java.nio.channels.FileChannel truncate ( long size ) throws java.io.IOException { checkOpen ( ) ; if ( size < 0 ) { throw new java.lang.IllegalArgumentException ( ( "size < 0: " + size ) ) ; } checkWritable ( ) ; if ( size < ( size ( ) ) ) { try { Libcore.os.ftruncate ( fd , size ) ; } catch ( libcore.io.ErrnoException errnoException ) { throw errnoException.rethrowAsIOException ( ) ; } } return this ; }
public void testCannotSetFixedLengthStreamingModeAfterConnect ( ) throws java.lang.Exception { server.enqueue ( new com.google.mockwebserver.MockResponse ( ) . setBody ( "A" ) ) ; server.play ( ) ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; assertEquals ( "A" , readAscii ( connection.getInputStream ( ) , java.lang.Integer.MAX_VALUE ) ) ; try { connection.setFixedLengthStreamingMode ( 1 ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } }
public final com.android.tools.perflib.heap.Instance findReference ( long id ) { for ( com.android.tools.perflib.heap.Heap heap : mHeaps.values ( ) ) { com.android.tools.perflib.heap.Instance instance = heap.getInstance ( id ) ; if ( instance != null ) { return instance ; } } return findClass ( id ) ; }
protected void shutdownOutput ( ) throws java.io.IOException { if ( ( fd ) == null ) { throw new java.io.IOException ( "socket not created" ) ; } shutdown ( fd , false ) ; }
public void testUsesLibrary ( ) throws java.lang.Exception { java.lang.ClassLoader loader = getClass ( ) . getClassLoader ( ) ; if ( loader instanceof dalvik.system.BaseDexClassLoader ) { java.lang.Object [ ] dexElements = getDexElementsFromClassLoader ( ( ( dalvik.system.BaseDexClassLoader ) ( loader ) ) ) ; for ( java.lang.Object dexElement : dexElements ) { dalvik.system.DexFile dexFile = getDexFileFromDexElement ( dexElement ) ; assertTrue ( isDexFileBackedByOatFile ( dexFile ) ) ; } } }
protected void onActivityResult ( int requestCode , int resultCode , android.content.Intent intent ) { if ( resultCode != ( RESULT_OK ) ) { return ; } switch ( requestCode ) { case NEW_PLAYLIST : android.net.Uri uri = intent.getData ( ) ; if ( uri != null ) { long [ ] list = new long [ 1 ] ; list [ 0 ] = com.android.music.MusicUtils.getCurrentAudioId ( ) ; int playlist = java.lang.Integer.parseInt ( uri.getLastPathSegment ( ) ) ; com.android.music.MusicUtils.addToPlaylist ( this , list , playlist ) ; } break ; } }
public boolean countryUsesUtc ( java.lang.String isoCountryCode ) { return ( java.util.Arrays.binarySearch ( com.android.internal.telephony.TimeZoneLookupHelper.GMT_COUNTRY_CODES , isoCountryCode ) ) >= 0 ; }
private void setLoadedProgram ( @ javax.annotation.CheckForNull T program ) { loadedProgram = new java.lang.ref.SoftReference < > ( program ) ; }
private static void assertArrayEquals ( byte [ ] expected , byte [ ] actual ) { if ( ! ( java.util.Arrays.equals ( expected , actual ) ) ) { fail ( ( ( ( "Expected " + ( libcore.util.HexEncoding.encodeToString ( expected ) ) ) + ", got " ) + ( libcore.util.HexEncoding.encodeToString ( actual ) ) ) ) ; } }
public void testGetSetFeature ( ) { java.lang.String [ ] features = new java.lang.String [ ] { tests.api.org.xml.sax.helpers.ParserAdapterTest.NAMESPACES , tests.api.org.xml.sax.helpers.ParserAdapterTest.NAMESPACE_PREFIXES , tests.api.org.xml.sax.helpers.ParserAdapterTest.XMLNS_URIs } ; for ( java.lang.String s : features ) { try { adapter.setFeature ( s , true ) ; assertEquals ( true , adapter.getFeature ( s ) ) ; adapter.setFeature ( s , false ) ; assertEquals ( false , adapter.getFeature ( s ) ) ; } catch ( org.xml.sax.SAXException e ) { throw new java.lang.RuntimeException ( "Unexpected exception" , e ) ; } } try { adapter.setFeature ( "http://argle.bargle" , true ) ; fail ( "SAXNotRecognizedException expected" ) ; } catch ( org.xml.sax.SAXNotRecognizedException e ) { } catch ( org.xml.sax.SAXNotSupportedException e ) { throw new java.lang.RuntimeException ( "Unexpected exception" , e ) ; } }
public static < I , O > com.google.common.util.concurrent.ListenableFuture < O > transform ( com.google.common.util.concurrent.ListenableFuture < I > input , final com.google.common.base.Function < ? super I , ? extends O > function ) { return com.google.common.util.concurrent.Futures.transform ( input , function , com.google.common.util.concurrent.MoreExecutors.sameThreadExecutor ( ) ) ; }
public void testKeyguardLock ( ) throws java.lang.Exception { if ( ! ( supportsKeyguard ( ) ) ) { return ; } gotoKeyguard ( ) ; mAmWmState.waitForKeyguardShowingAndNotOccluded ( mDevice ) ; assertShowingAndNotOccluded ( ) ; launchActivity ( "KeyguardLockActivity" ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { "KeyguardLockActivity" } ) ; mAmWmState.assertVisibility ( "KeyguardLockActivity" , true ) ; executeShellCommand ( android.server.cts.FINISH_ACTIVITY_BROADCAST ) ; mAmWmState.waitForKeyguardShowingAndNotOccluded ( mDevice ) ; assertShowingAndNotOccluded ( ) ; }
public void timeIcuBreakIterator ( int nreps ) { for ( int i = 0 ; i < nreps ; ++ i ) { java.text.BreakIterator it = java.text.com.android.ibm.icu.text.BreakIterator.getLineInstance ( text.locale ) ; it.setText ( text.text ) ; while ( ( it.next ( ) ) != java.text.com.android.ibm.icu.text.BreakIterator ) { } } }
public int handleIncomingUser ( int callingPid , int callingUid , int userId , boolean allowAll , boolean requireFull , java.lang.String name , java.lang.String callerPackage ) { return handleIncomingUser ( callingPid , callingUid , userId , allowAll , ( requireFull ? com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY : com.android.server.am.ActivityManagerService.ALLOW_NON_FULL ) , name , callerPackage ) ; }
protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setResult ( com.android.cts.verifier.sensors.RESULT_CANCELED ) ; mSensorManager = ( ( android.hardware.SensorManager ) ( getApplicationContext ( ) . getSystemService ( Context.SENSOR_SERVICE ) ) ) ; com.android.cts.verifier.sensors.AccelerometerTestRenderer renderer = new com.android.cts.verifier.sensors.AccelerometerTestRenderer ( this ) ; mListener = renderer ; setContentView ( R.layout.pass_fail_gl ) ; mGLSurfaceView = ( ( android.opengl.GLSurfaceView ) ( findViewById ( R.id.gl_surface_view ) ) ) ; mGLSurfaceView.setRenderer ( renderer ) ; }
private boolean isValidDevice ( android.bluetooth.BluetoothDevice device ) { if ( device == null ) return false ; if ( android.bluetooth.BluetoothAdapter.checkBluetoothAddress ( device.getAddress ( ) ) ) return true ; return false ; }
public boolean removeCallbacks ( java.lang.Runnable action ) { android.os.Handler handler ; if ( ( mAttachInfo ) != null ) { handler = mAttachInfo.mHandler ; } else { android.view.ViewRoot.getRunQueue ( ) . removeCallbacks ( action ) ; return true ; } handler.removeCallbacks ( action ) ; return true ; }
public void testCookiesWithLeadingPeriod ( ) throws java.lang.Exception { java.net.CookieManager cm = new java.net.CookieManager ( createCookieStore ( ) , null ) ; java.net.URI uri = new java.net.URI ( "http://services.chargepoint.com" ) ; java.util.List < java.lang.String > list = new java.util.ArrayList < > ( ) ; java.util.Map < java.lang.String , java.util.List < java.lang.String > > responseHeaders = new java.util.HashMap < > ( ) ; list.add ( "b=c; domain=.chargepoint.com;" ) ; responseHeaders.put ( "Set-Cookie" , list ) ; cm.put ( uri , responseHeaders ) ; java.util.Map < java.lang.String , java.util.List < java.lang.String > > cookies = cm.get ( new java.net.URI ( "https://webservices.chargepoint.com/foo" ) , responseHeaders ) ; assertEquals ( 1 , cookies.size ( ) ) ; java.util.List < java.lang.String > cookieList = cookies.values ( ) . iterator ( ) . next ( ) ; assertEquals ( "b=c" , cookieList.get ( 0 ) ) ; }
public void testgetIcon ( ) throws java.lang.Exception { assertNull ( com.android.ide.eclipse.adt.internal.resources.ResourceHelper.getIcon ( com.android.ide.eclipse.adt.internal.resources.ResourceHelperTest.FakeQualifierClass.class ) ) ; com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config = new com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration ( ) ; config.createDefault ( ) ; final int count = com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration.getQualifierCount ( ) ; for ( int i = 0 ; i < count ; i ++ ) { com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier qual = config.getQualifier ( i ) ; assertNotNull ( qual ) ; assertNotNull ( qual.getClass ( ) . getCanonicalName ( ) , com.android.ide.eclipse.adt.internal.resources.ResourceHelper.getIcon ( qual.getClass ( ) ) ) ; } }
private static java.io.File storeMergedConfigFile ( java.util.Map < java.lang.String , java.util.List < java.lang.String > > configMap , java.lang.String moduleName ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { java.io.File folder = com.android.tradefed.util.FileUtil.createTempDir ( com.android.compatibility.common.util.DynamicConfigHandler.MERGED_CONFIG_FILE_FOLDER ) ; java.io.File mergedConfigFile = new java.io.File ( folder , ( moduleName + ".dynamic" ) ) ; java.io.OutputStream stream = new java.io.FileOutputStream ( mergedConfigFile ) ; org.xmlpull.v1.XmlSerializer serializer = org.xmlpull.v1.XmlPullParserFactory.newInstance ( ) . newSerializer ( ) ; serializer.setOutput ( stream , com.android.compatibility.common.util.DynamicConfigHandler.ENCODING ) ; serializer.setFeature ( "http://xmlpull.org/v1/doc/features.html#indent-output" , true ) ; serializer.startDocument ( com.android.compatibility.common.util.DynamicConfigHandler.ENCODING , false ) ; serializer.startTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.CONFIG_TAG ) ; for ( java.lang.String key : configMap.keySet ( ) ) { serializer.startTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.ENTRY_TAG ) ; serializer.attribute ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.KEY_ATTR , key ) ; for ( java.lang.String value : configMap.get ( key ) ) { serializer.startTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.VALUE_TAG ) ; serializer.text ( value ) ; serializer.endTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.VALUE_TAG ) ; } serializer.endTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.ENTRY_TAG ) ; } serializer.endTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.CONFIG_TAG ) ; serializer.endDocument ( ) ; return mergedConfigFile ; }
public com.android.ims.ImsConfig getConfigInterface ( ) throws com.android.ims.ImsException { if ( ( ( mConfig ) != null ) && ( mConfig.isBinderAlive ( ) ) ) { return mConfig ; } checkAndThrowExceptionIfServiceUnavailable ( ) ; try { android.telephony.ims.aidl.IImsConfig config = mMmTelFeatureConnection.getConfigInterface ( ) ; if ( config == null ) { throw new com.android.ims.ImsException ( "getConfigInterface()" , ImsReasonInfo.CODE_LOCAL_SERVICE_UNAVAILABLE ) ; } mConfig = new com.android.ims.ImsConfig ( config , mContext ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getConfigInterface()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } return mConfig ; }
public void testSetNeutralButtonWithParamCharSequence ( ) throws java.lang.Throwable { runTestOnUiThread ( new java.lang.Runnable ( ) { public void run ( ) { mBuilder = new android.app.AlertDialog.Builder ( mContext ) ; mBuilder.setNeutralButton ( mTitle , mOnClickListener ) ; mDialog = mBuilder.show ( ) ; mButton = ( ( android.widget.Button ) ( mDialog.getWindow ( ) . findViewById ( R.id.button3 ) ) ) ; mButton.performClick ( ) ; } } ) ; mInstrumentation.waitForIdleSync ( ) ; assertEquals ( mTitle , mButton.getText ( ) ) ; assertTrue ( mResult ) ; }
static android.renderscript.FieldPacker createFieldPack ( java.lang.Object [ ] args ) { int len = 0 ; for ( java.lang.Object arg : args ) { len += android.renderscript.FieldPacker.getPackedSize ( arg ) ; } android.renderscript.FieldPacker fp = new android.renderscript.FieldPacker ( len ) ; for ( java.lang.Object arg : args ) { android.renderscript.FieldPacker.addToPack ( fp , arg ) ; } return fp ; }
public void testPowerOn ( ) { mSimulatedCommands.setRadioPower ( true , null ) ; mSimulatedCommands.notifyRadioOn ( ) ; org.mockito.Mockito.when ( mUiccController.getUiccCard ( org.mockito.Mockito.anyInt ( ) ) ) . thenReturn ( mUiccCard ) ; mIccCardProxyUT.sendMessage ( mIccCardProxyUT.obtainMessage ( com.android.internal.telephony.uicc.IccCardProxyTest.EVENT_ICC_CHANGED ) ) ; com.android.internal.telephony.TelephonyTestUtils.waitForMs ( com.android.internal.telephony.uicc.IccCardProxyTest.SCARY_SLEEP_MS ) ; org.junit.Assert.assertEquals ( CommandsInterface.RadioState.RADIO_ON , mSimulatedCommands.getRadioState ( ) ) ; org.junit.Assert.assertEquals ( mIccCardProxyUT.getState ( ) , State.NOT_READY ) ; logd ( ( "IccCardProxy state = " + ( mIccCardProxyUT.getState ( ) ) ) ) ; }
public void onHold ( ) { android.util.Log.d ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection.TAG , ( "onHold " + ( mCurrentCall ) ) ) ; if ( ( ! ( mClosed ) ) && ( ( mHeadsetProfile ) != null ) ) { mHeadsetProfile.holdCall ( mDevice ) ; } }
public boolean process ( java.util.Set < ? extends javax.lang.model.element.TypeElement > annotations , javax.annotation.processing.RoundEnvironment roundEnv ) { try { for ( javax.lang.model.element.Element annotatedElement : roundEnv.getElementsAnnotatedWith ( com.google.devtools.common.options.Option.class ) ) { checkModifiers ( annotatedElement ) ; checkInOptionBase ( annotatedElement ) ; } } catch ( com.google.devtools.common.options.processor.OptionProcessor.OptionProcessorException e ) { error ( e.elementInError , e.getMessage ( ) ) ; } return true ; }
private static int compareForRounding ( long n , long d ) { long halfD = d / 2 ; if ( ( n == halfD ) || ( n == ( - halfD ) ) ) { return ( ( int ) ( d & 1 ) ) ; } else { return java.math.BigDecimal.compareAbsoluteValues ( n , halfD ) ; } }
public int freeCache ( long freeStorageSize ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( "freecache" ) ; builder.append ( ' ' ) ; builder.append ( java.lang.String.valueOf ( freeStorageSize ) ) ; return mInstaller.execute ( builder.toString ( ) ) ; }
public static java.lang.String getPropertyName ( org.jetbrains.java.generate.element.FieldElement fieldElement , com.intellij.openapi.project.Project project ) { java.lang.String name = fieldElement.getName ( ) ; com.intellij.psi.codeStyle.JavaCodeStyleManager codeStyleManager = com.intellij.psi.codeStyle.JavaCodeStyleManager.getInstance ( project ) ; return codeStyleManager.variableNameToPropertyName ( name , VariableKind.FIELD ) ; }
private android.graphics.drawable.Drawable getConnectionIcon ( ) { android.telecom.StatusHints statusHints = mPrimary.getTelecommCall ( ) . getDetails ( ) . getStatusHints ( ) ; if ( ( statusHints != null ) && ( ( statusHints.getIconResId ( ) ) != 0 ) ) { android.graphics.drawable.Drawable icon = statusHints.getIcon ( mContext ) ; if ( icon != null ) { return icon ; } } return getCallProviderIcon ( mPrimary ) ; }
public com.android.build.gradle.managed.ProductFlavor apply ( com.android.build.gradle.managed.ProductFlavor productFlavor ) { return new com.android.build.gradle.managed.adaptor.ProductFlavorAdaptor ( productFlavor ) ; }
public void copy1DRangeFrom ( int off , int count , byte [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy1DRangeFrom" ) ; validateIsInt8 ( ) ; copy1DRangeFromUnchecked ( off , count , d ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
private void dumpTimeRecs ( java.util.ArrayList < com.android.traceview.TimeLineView.Record > timeRecs ) { java.lang.System.out.format ( "\nid thread global start,end method\n" ) ; for ( com.android.traceview.TimeLineView.Record record : timeRecs ) { com.android.traceview.Call call = ( ( com.android.traceview.Call ) ( record.block ) ) ; long callTime = call.mThreadStartTime ; java.lang.System.out.format ( "%2d %6d %8d %8d %s\n" , call.getThreadId ( ) , callTime , call.mGlobalStartTime , call.mGlobalEndTime , call.getMethodData ( ) . getName ( ) ) ; } }
public void onPhoneDestroyed ( android.telecom.Phone phone ) { android.util.Log.i ( com.android.server.telecom.testapps.TestInCallServiceImpl.TAG , "onPhoneDestroyed" ) ; mPhone.removeListener ( mPhoneListener ) ; mPhone = null ; com.android.server.telecom.testapps.TestCallList.getInstance ( ) . clearCalls ( ) ; }
public boolean isInEcm ( ) { if ( isPhoneTypeGsm ( ) ) { return false ; } else { return mIsPhoneInEcmState ; } }
public void adjustMasterVolume ( int steps , int flags ) { android.media.IAudioService service = android.media.AudioManager.getService ( ) ; try { service.adjustMasterVolume ( steps , flags , mApplicationContext.getOpPackageName ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.media.AudioManager.TAG , "Dead object in adjustMasterVolume" , e ) ; } }
java.lang.String formatNsnUsingPattern ( java.lang.String nationalNumber , com.google.i18n.phonenumbers.Phonemetadata.NumberFormat formattingPattern , com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberFormat numberFormat ) { return formatNsnUsingPattern ( nationalNumber , formattingPattern , numberFormat , null ) ; }
boolean isMusicActive ( ) { final android.media.AudioManager am = ( ( android.media.AudioManager ) ( mContext.getSystemService ( Context.AUDIO_SERVICE ) ) ) ; if ( am == null ) { android.util.Log.w ( com.android.internal.policy.impl.PhoneWindowManager.TAG , "isMusicActive: couldn't get AudioManager reference" ) ; return false ; } return am.isLocalOrRemoteMusicActive ( ) ; }
public void setCurrency ( java.util.Currency currency ) { if ( currency != ( symbols.getCurrency ( ) ) ) { symbols.setCurrency ( currency ) ; } icuDecimalFormat.setDecimalFormatSymbols ( symbols.getIcuDecimalFormatSymbols ( ) ) ; }
private static org.jetbrains.plugins.github.GithubAuthData getValidAuthData ( @ org.jetbrains.annotations.NotNull final com.intellij.openapi.project.Project project ) { final com.intellij.openapi.util.Ref < org.jetbrains.plugins.github.GithubAuthData > authDataRef = new com.intellij.openapi.util.Ref < org.jetbrains.plugins.github.GithubAuthData > ( ) ; com.intellij.openapi.progress.ProgressManager.getInstance ( ) . run ( new com.intellij.openapi.progress.Task.Modal ( project , "Access to GitHub" , true ) { public void run ( @ org.jetbrains.annotations.NotNull com.intellij.openapi.progress.ProgressIndicator indicator ) { authDataRef.set ( org.jetbrains.plugins.github.GithubUtil.getValidAuthDataFromConfig ( project , indicator ) ) ; } } ) ; return authDataRef.get ( ) ; }
public void testRsEnabledAnnotations ( ) throws java.io.IOException { java.io.File project = new java.io.File ( testDir , "extractRsEnabledAnnotations" ) ; runTasksOn ( project , BasePlugin.GRADLE_TEST_VERSION , "clean" , "assembleDebug" ) ; java.io.File archiveFile = new java.io.File ( project , "build/outputs/aar/extractRsEnabledAnnotations-debug.aar" ) ; assertTrue ( archiveFile.isFile ( ) ) ; java.util.zip.ZipFile archive = null ; try { archive = new java.util.zip.ZipFile ( archiveFile ) ; java.util.zip.ZipEntry entry = archive.getEntry ( "annotations.zip" ) ; assertNotNull ( entry ) ; } finally { if ( archive != null ) { archive.close ( ) ; } } }
public boolean isConnected ( ) { if ( ( android.bluetooth.BluetoothDevice.sService ) == null ) { return false ; } try { return ( android.bluetooth.BluetoothDevice.sService.getConnectionState ( this ) ) != ( android.bluetooth.BluetoothDevice.CONNECTION_STATE_DISCONNECTED ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "" , e ) ; return false ; } }
public void startInPlaceAnimationOnFrontMostApplication ( android.app.ActivityOptions opts ) throws android.os.RemoteException { if ( ( ( opts.getAnimationType ( ) ) != ( android.app.ActivityOptions.ANIM_CUSTOM_IN_PLACE ) ) || ( ( opts.getCustomInPlaceResId ( ) ) == 0 ) ) { throw new java.lang.IllegalArgumentException ( ( "Expected in-place ActivityOption " + "with valid animation" ) ) ; } mWindowManager.prepareAppTransition ( AppTransition.TRANSIT_TASK_IN_PLACE , false ) ; mWindowManager.overridePendingAppTransitionInPlace ( opts.getPackageName ( ) , opts.getCustomInPlaceResId ( ) ) ; mWindowManager.executeAppTransition ( ) ; }
void foo4 ( int [ ] array , int end ) { for ( int i = end ; i > 0 ; i -- ) { array [ ( i - 1 ) ] = 1 ; sum += array [ ( i - 1 ) ] ; } }
public void testLintWarningOnGetSignaturesFlagInBitwiseOrExpression ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/GetSignaturesBitwiseOrTest.java:11: Information: Reading app signatures from getPackageInfo: The app signatures could be exploited if not validated properly; see issue explanation for details. [PackageManagerGetSignatures]\n" + ( ( " .getPackageInfo(\"some.pkg\", GET_GIDS | GET_SIGNATURES | GET_PROVIDERS);\n" + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 1 warnings\n" ) ) , lintProject ( ( "src/test/pkg/GetSignaturesBitwiseOrTest.java.txt" + "=>src/test/pkg/GetSignaturesBitwiseOrTest.java" ) ) ) ; }
public java.lang.String getSdkLocation ( ) { return mManager.getLocation ( ) ; }
public boolean enableDisableTdls ( boolean enable , java.lang.String macAdd , com.android.server.wifi.WifiNative.TdlsEventHandler tdlsCallBack ) { synchronized ( com.android.server.wifi.WifiNative.sLock ) { com.android.server.wifi.WifiNative.sTdlsEventHandler = tdlsCallBack ; return com.android.server.wifi.WifiNative.enableDisableTdlsNative ( com.android.server.wifi.WifiNative.sWlan0Index , enable , macAdd ) ; } }
public boolean setNetworkSSID ( android.net.wifi.WifiConfiguration config , java.lang.String ssid ) { if ( config == null ) { return false ; } if ( mVerboseLoggingEnabled ) localLog ( ( "setNetworkSSID: " + ( config.networkId ) ) ) ; if ( ! ( mWifiNative.setNetworkVariable ( config.networkId , WifiConfiguration.ssidVarName , com.android.server.wifi.WifiSupplicantControl.encodeSSID ( ssid ) ) ) ) { loge ( ( "Set SSID of network in wpa_supplicant failed on " + ( config.networkId ) ) ) ; return false ; } config.SSID = ssid ; return true ; }
public com.android.ims.internal.IImsEcbm getEcbmInterface ( int slotId , int featureType ) throws android.os.RemoteException { synchronized ( mFeatures ) { android.telephony.ims.feature.MMTelFeature feature = resolveMMTelFeature ( slotId , featureType ) ; if ( feature != null ) { return feature.getEcbmInterface ( ) ; } } return null ; }
private static java.lang.Object openDexFile ( java.lang.String sourceName , java.lang.String outputName , int flags ) throws java.io.IOException { return dalvik.system.DexFile.openDexFileNative ( new java.io.File ( sourceName ) . getAbsolutePath ( ) , ( outputName == null ? null : new java.io.File ( outputName ) . getAbsolutePath ( ) ) , flags ) ; }
public void apply ( ) throws com.intellij.openapi.options.ConfigurationException { com.google.gct.testing.config.GoogleCloudTestingConfigurable.GoogleCloudTestingState state = new com.google.gct.testing.config.GoogleCloudTestingConfigurable.GoogleCloudTestingState ( ) ; state.fakeBucketName = fakeBucketNameField.getText ( ) ; state.shouldUseFakeBucket = useFakeBucketCheckbox.isSelected ( ) ; getSavedSettings ( ) . loadState ( state ) ; }
protected void disconnect ( ) { synchronized ( this ) { if ( ( mState ) == ( android.bluetooth.BluetoothPbap.STATE_CONNECTED ) ) { if ( ( mServerSession ) != null ) { mServerSession.close ( ) ; mServerSession = null ; } closeConnectionSocket ( ) ; setState ( BluetoothPbap.STATE_DISCONNECTED , BluetoothPbap.RESULT_CANCELED ) ; } } }
private static int writeSinkToByteBuffer ( org.conscrypt.OpenSSLBIOSink sink , java.nio.ByteBuffer dst ) { int toWrite = java.lang.Math.min ( sink.available ( ) , dst.remaining ( ) ) ; dst.put ( sink.toByteArray ( ) , sink.position ( ) , toWrite ) ; sink.skip ( toWrite ) ; return toWrite ; }
public void logp ( java.util.logging.Level level , java.lang.String sourceClass , java.lang.String sourceMethod , java.lang.String msg ) { if ( ( ( level.intValue ( ) ) < ( levelValue ) ) || ( ( levelValue ) == ( java.util.logging.Logger.offValue ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( level , msg ) ; lr.setSourceClassName ( sourceClass ) ; lr.setSourceMethodName ( sourceMethod ) ; doLog ( lr ) ; }
private static void waitForCondition ( java.util.function.BooleanSupplier condition ) throws java.lang.Exception { int count = 0 ; boolean lastResult ; while ( ( ! ( lastResult = condition.getAsBoolean ( ) ) ) && ( ( count ++ ) < 30 ) ) { java.lang.Thread.sleep ( 1000 ) ; } assertTrue ( ( "Failed condition: " + condition ) , lastResult ) ; }
private boolean shouldShowNoteSentToast ( com.android.incallui.call.DialerCall call ) { return ( ( call != null ) && ( com.android.incallui.CallCardPresenter.hasCallSubject ( call ) ) ) && ( ( ( call.getState ( ) ) == ( com.android.incallui.call.DialerCall.State.DIALING ) ) || ( ( call.getState ( ) ) == ( com.android.incallui.call.DialerCall.State.CONNECTING ) ) ) ; }
void onPostDialContinue ( com.android.server.telecom.Call call , boolean proceed ) { final java.lang.String callId = mCallIdMapper.getCallId ( call ) ; if ( ( callId != null ) && ( isServiceValid ( "onPostDialContinue" ) ) ) { try { logOutgoing ( "onPostDialContinue %s %b" , callId , proceed ) ; mServiceInterface.onPostDialContinue ( callId , proceed ) ; } catch ( android.os.RemoteException ignored ) { } } }
public void test_SSLEngine_getEnableSessionCreation ( ) throws java.lang.Exception { libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create ( ) ; javax.net.ssl.SSLEngine e = c.clientContext.createSSLEngine ( ) ; assertTrue ( e.getEnableSessionCreation ( ) ) ; c.close ( ) ; }
public void testKeyguardLock ( ) throws java.lang.Exception { if ( ! ( isHandheld ( ) ) ) { return ; } gotoKeyguard ( ) ; mAmWmState.waitForKeyguardShowingAndNotOccluded ( mDevice ) ; assertShowingAndNotOccluded ( ) ; launchActivity ( "KeyguardLockActivity" ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { "KeyguardLockActivity" } ) ; mAmWmState.assertVisibility ( "KeyguardLockActivity" , true ) ; executeShellCommand ( android.server.cts.FINISH_ACTIVITY_BROADCAST ) ; mAmWmState.waitForKeyguardShowingAndNotOccluded ( mDevice ) ; assertShowingAndNotOccluded ( ) ; }
public static void main ( java.lang.String [ ] args ) { Main.byteToLong ( ) ; Main.shortToLong ( ) ; Main.intToLong ( ) ; Main.charToLong ( ) ; Main.longToInt ( ) ; }
public void run ( ) { android.os.Looper.prepare ( ) ; android.os.Process.setThreadPriority ( android.os.Process.THREAD_PRIORITY_FOREGROUND ) ; mPolicy.init ( mContext , mService , mPM ) ; synchronized ( this ) { mRunning = true ; notifyAll ( ) ; } android.os.Looper.loop ( ) ; }
public void testWithTextResourceId ( ) { android.widget.TextView textView = new android.widget.TextView ( context ) ; textView.setText ( R.string.something ) ; assertTrue ( android.support.test.espresso.matcher.ViewMatchers.withText ( R.string.something ) . matches ( textView ) ) ; assertFalse ( android.support.test.espresso.matcher.ViewMatchers.withText ( R.string.other_string ) . matches ( textView ) ) ; }
public void copyFrom ( byte [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copyFrom" ) ; mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFrom ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFrom ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFrom ( 0 , mCurrentCount , d ) ; } android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
void playDtmfTone ( char digit ) { if ( ( mConnectionService ) == null ) { com.android.server.telecom.Log.w ( this , "playDtmfTone() request on a call without a connection service." ) ; } else { com.android.server.telecom.Log.i ( this , "Send playDtmfTone to connection service for call %s" , this ) ; mConnectionService.playDtmfTone ( this , digit ) ; com.android.server.telecom.Log.event ( this , Log.Events.START_DTMF , com.android.server.telecom.Log.pii ( digit ) ) ; } }
public void test_entries ( ) throws java.lang.Exception { tests.support.resource.Support_Resources.copyFile ( resources , null , jarName ) ; java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( new java.io.File ( resources , jarName ) ) ; java.util.Enumeration < java.util.jar.JarEntry > e = jarFile.entries ( ) ; int i ; for ( i = 0 ; e.hasMoreElements ( ) ; i ++ ) { e.nextElement ( ) ; } assertEquals ( jarFile.size ( ) , i ) ; jarFile.close ( ) ; assertEquals ( 6 , i ) ; }
public static com.android.jack.dx.rop.code.RopMethod optimize ( com.android.jack.dx.rop.code.RopMethod rmeth , int paramWidth , boolean isStatic , boolean inPreserveLocals , com.android.jack.dx.rop.code.TranslationAdvice inAdvice ) { return com.android.jack.dx.ssa.Optimizer.optimize ( rmeth , paramWidth , isStatic , inPreserveLocals , inAdvice , java.util.EnumSet.allOf ( com.android.jack.dx.ssa.Optimizer.OptionalStep.class ) ) ; }
public com.android.sched.vfs.OutputVFile createFile ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull com.android.sched.vfs.VPath typePath ) throws com.android.sched.util.file.CannotCreateFileException { putProperty ( fileType.getPropertyPrefix ( ) , java.lang.String.valueOf ( true ) ) ; addFileType ( fileType ) ; typePath.addSuffix ( fileType.getFileExtension ( ) ) ; typePath.prependPath ( fileType.getVPathPrefix ( ) ) ; return outputVDir.createOutputVFile ( typePath ) ; }
protected void addPathToBuild ( com.android.tradefed.build.IBuildInfo buildInfo ) { if ( ( buildInfo.getFile ( com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PYTHONPATH ) ) == null ) { buildInfo.setFile ( com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PYTHONPATH , new java.io.File ( mVenvDir , "local/lib/python2.7/site-packages" ) , buildInfo.getBuildId ( ) ) ; } if ( ( buildInfo.getFile ( com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.VIRTUAL_ENV_PATH ) ) == null ) { buildInfo.setFile ( com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.VIRTUAL_ENV_PATH , new java.io.File ( mVenvDir.getAbsolutePath ( ) ) , buildInfo.getBuildId ( ) ) ; } }
private void indexInput ( final com.google.devtools.build.android.desugar.InputFileProvider inputFileProvider ) throws java.io.IOException { for ( java.lang.String relativePath : inputFileProvider ) { if ( ( relativePath.endsWith ( ".class" ) ) && ( ! ( inputFiles.containsKey ( relativePath ) ) ) ) { inputFiles.put ( relativePath , inputFileProvider ) ; } } }
public void dragStart ( org.eclipse.swt.dnd.DragSourceEvent event ) { if ( ! ( adjustEventCoordinates ( event ) ) ) { event.doit = false ; return ; } com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutCanvas canvas = mGraphicalEditorPart.getCanvasControl ( ) ; if ( canvas != null ) { canvas.getDragSourceListener ( ) . dragStart ( event ) ; } }
public static boolean addLegacyPasspointConfig ( android.net.wifi.WifiConfiguration config ) { if ( ( com.android.server.wifi.hotspot2.PasspointManager.sPasspointManager ) == null ) { android.util.Log.e ( com.android.server.wifi.hotspot2.PasspointManager.TAG , "PasspointManager have not been initialized yet" ) ; return false ; } return com.android.server.wifi.hotspot2.PasspointManager.sPasspointManager.addWifiConfig ( config ) ; }
public android.hardware.cts.helpers.TestSensorEvent [ ] collectEvents ( long duration , java.util.concurrent.TimeUnit timeUnit ) { if ( ( mTestSensorEventListener ) != null ) { android.util.Log.w ( android.hardware.cts.helpers.TestSensorManager.LOG_TAG , "Listener already registered, returning." ) ; return null ; } try { registerListener ( ) ; return getEvents ( duration , timeUnit ) ; } finally { unregisterListener ( ) ; } }
native void rsnAllocationData1D ( long con , long id , int off , int mip , int count , short [ ] d , int sizeBytes ) ;
protected void setupEmptyView ( ) { if ( ( ( mEmptyView ) != null ) && ( ( getActivity ( ) ) != null ) ) { if ( ! ( com.android.dialer.util.PermissionsUtil.hasPermission ( getActivity ( ) , android.Manifest.permission.CALL_PHONE ) ) ) { mEmptyView.setImage ( R.drawable.empty_contacts ) ; mEmptyView.setActionLabel ( R.string.permission_single_turn_on ) ; mEmptyView.setDescription ( R.string.permission_place_call ) ; mEmptyView.setActionClickedListener ( this ) ; } else { mEmptyView.setImage ( EmptyContentView.NO_IMAGE ) ; mEmptyView.setActionLabel ( EmptyContentView.NO_LABEL ) ; mEmptyView.setDescription ( EmptyContentView.NO_LABEL ) ; } } }
public void acceptVideoRequest ( ) { int requestedVideoState = callback.getRequestedVideoState ( ) ; com.android.dialer.common.Assert.checkArgument ( ( requestedVideoState != ( android.telecom.VideoProfile.STATE_AUDIO_ONLY ) ) ) ; com.android.dialer.common.LogUtil.i ( "ImsVideoTech.acceptUpgradeRequest" , ( "videoState: " + requestedVideoState ) ) ; call.getVideoCall ( ) . sendSessionModifyResponse ( new android.telecom.VideoProfile ( requestedVideoState ) ) ; setSessionModificationState ( SessionModificationState.NO_REQUEST ) ; listener.onUpgradedToVideo ( false ) ; logger.logImpression ( DialerImpression.Type.IMS_VIDEO_REQUEST_ACCEPTED ) ; }
public boolean isTrue ( ) throws java.lang.Exception { return device.hasObject ( android.support.test.uiautomator.By.text ( com.android.devtools.systemimage.uitest.smoke.VpnTest.NETWORK_MONITORED_TEXT ) ) ; }
public boolean process ( java.io.File outputFile , java.io.File mainFile , java.io.File [ ] libraryFiles , java.util.Map < java.lang.String , java.lang.String > injectAttributes ) { org.w3c.dom.Document mainDoc = com.android.manifmerger.XmlUtils.parseDocument ( mainFile , mLog ) ; if ( mainDoc == null ) { return false ; } boolean success = process ( mainDoc , libraryFiles , injectAttributes ) ; if ( ! ( com.android.manifmerger.XmlUtils.printXmlFile ( mainDoc , outputFile , mLog ) ) ) { success = false ; } return success ; }
public void init ( org.eclipse.ui.IWorkbench workbench , org.eclipse.jface.viewers.IStructuredSelection selection ) { mWorkbench = workbench ; setHelpAvailable ( false ) ; org.eclipse.jface.resource.ImageDescriptor desc = com.android.ide.eclipse.adt.internal.editors.IconFactory.getInstance ( ) . getImageDescriptor ( com.android.ide.eclipse.adt.internal.wizards.templates.TemplateWizard.PROJECT_LOGO_LARGE ) ; setDefaultPageImageDescriptor ( desc ) ; if ( ! ( com.android.ide.eclipse.adt.internal.wizards.templates.UpdateToolsPage.isUpToDate ( ) ) ) { mUpdatePage = new com.android.ide.eclipse.adt.internal.wizards.templates.UpdateToolsPage ( ) ; } setNeedsProgressMonitor ( true ) ; }
public boolean enableNetworkWithoutConnect ( int netId ) { if ( com.android.server.wifi.WifiNative.DBG ) logDbg ( ( "enableNetworkWithoutConnect nid=" + ( java.lang.Integer.toString ( netId ) ) ) ) ; return doBooleanCommand ( ( ( ( "ENABLE_NETWORK " + netId ) + " " ) + "no-connect" ) ) ; }
final boolean isPowered ( int plugTypeSet ) { if ( ( mBatteryStatus ) == ( android.os.BatteryManager.BATTERY_STATUS_UNKNOWN ) ) { return true ; } if ( plugTypeSet == 0 ) { return false ; } int plugTypeBit = 0 ; if ( mAcOnline ) { plugTypeBit |= android.os.BatteryManager.BATTERY_PLUGGED_AC ; } if ( mUsbOnline ) { plugTypeBit |= android.os.BatteryManager.BATTERY_PLUGGED_USB ; } return ( plugTypeSet & plugTypeBit ) != 0 ; }
public final java.nio.DoubleBuffer asDoubleBuffer ( ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } int off = this . position ( ) ; int lim = this . limit ( ) ; assert off <= lim ; int rem = ( off <= lim ) ? lim - off : 0 ; int size = rem > > 3 ; return new java.nio.ByteBufferAsDoubleBuffer ( this , ( - 1 ) , 0 , size , size , off , order ( ) ) ; }
public void onClick ( android.content.DialogInterface dialog , int id ) { java.lang.String password = mView.getText ( R.id.credential_password ) ; if ( android.text.TextUtils.isEmpty ( password ) ) { mView.showError ( R.string.password_empty_error ) ; showDialog ( com.android.certinstaller.CertInstaller.PKCS12_PASSWORD_DIALOG ) ; } else { mNextAction = new com.android.certinstaller.CertInstaller.Pkcs12ExtractAction ( password ) ; mNextAction.run ( this ) ; } }
public void singleScanSuccess ( ) { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder ( ) . withBasePeriod ( 10000 ) . withMaxApPerScan ( 10 ) . addBucketWithBand ( 10000 , WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN , WifiScanner.WIFI_BAND_24_GHZ ) . build ( ) ; doSuccessfulSingleScanTest ( settings , expectedBandScanFreqs ( WifiScanner.WIFI_BAND_24_GHZ ) , new java.util.HashSet < java.lang.Integer > ( ) , com.android.server.wifi.ScanResults.create ( 0 , 2400 , 2450 , 2450 , 2400 , 2450 , 2450 , 2400 , 2450 , 2450 ) , false ) ; }
public boolean isOuterInterface ( java.lang.String outerName , java.lang.String innerName ) { java.lang.Boolean result = known.get ( outerName ) ; if ( result == null ) { org.objectweb.asm.ClassReader outerClass = com.google.common.base.Preconditions.checkNotNull ( classpath.readIfKnown ( outerName ) , "Couldn't find outer class %s of %s" , outerName , innerName ) ; result = com.google.devtools.build.android.desugar.BitFlags.isInterface ( outerClass.getAccess ( ) ) ; known.put ( outerName , result ) ; } return result ; }
public void radioCapabilityUpdated ( com.android.internal.telephony.RadioCapability rc ) { mRadioCapability.set ( rc ) ; if ( android.telephony.SubscriptionManager.isValidSubscriptionId ( getSubId ( ) ) ) { sendSubscriptionSettings ( true ) ; } }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigManagerDialog.DeviceSelection selection = getSelection ( ) ; if ( ( selection.entry ) != null ) { mManager.removeUserConfiguration ( selection.device , selection.entry.getKey ( ) ) ; } else if ( ( selection.device ) != null ) { mManager.removeUserDevice ( selection.device ) ; } mTreeViewer.refresh ( ) ; select ( ( ( selection.entry ) != null ? selection.device : null ) , null ) ; }
public android.view.MotionEvent getPendingTrackballMove ( android.view.IWindow window ) { if ( com.android.server.WindowManagerService.localLOGV ) android.util.Log.v ( com.android.server.WindowManagerService.TAG , ( "IWindow getPendingMotionEvent called for " + window ) ) ; return mKeyWaiter.finishedKey ( this , window , false , com.android.server.WindowManagerService.KeyWaiter.RETURN_PENDING_TRACKBALL ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; java.lang.String testFilePath = com.android.ide.eclipse.tests.AdtTestData.getInstance ( ) . getTestFilePath ( com.android.ide.eclipse.adt.internal.project.AndroidManifestParserTest.TESTAPP_XML ) ; mManifestTestApp = com.android.ide.eclipse.adt.internal.project.AndroidManifestParser.parseForData ( testFilePath ) ; assertNotNull ( mManifestTestApp ) ; testFilePath = com.android.ide.eclipse.tests.AdtTestData.getInstance ( ) . getTestFilePath ( com.android.ide.eclipse.adt.internal.project.AndroidManifestParserTest.INSTRUMENTATION_XML ) ; mManifestInstrumentation = com.android.ide.eclipse.adt.internal.project.AndroidManifestParser.parseForData ( testFilePath ) ; assertNotNull ( mManifestInstrumentation ) ; }
public static int runSmaliTest ( java.lang.String name , boolean input ) { try { java.lang.Class < ? > c = java.lang.Class.forName ( "SmaliTests" ) ; java.lang.reflect.Method m = c.getMethod ( name , new java.lang.Class [ ] { boolean . class } ) ; return ( ( java.lang.Integer ) ( m.invoke ( null , input ) ) ) ; } catch ( java.lang.Exception ex ) { throw new java.lang.Error ( ex ) ; } }
public int getVersionCode ( ) { return versionCode ; }
public void testNativeTcpSocketPair ( ) throws java.lang.Exception { for ( java.lang.String addr : android.net.cts.IpSecBaseTest.LOOPBACK_ADDRS ) { java.net.InetAddress local = java.net.InetAddress.getByName ( addr ) ; try ( android.net.IpSecTransform transform = getTransform ( local ) ) { android.net.cts.IpSecBaseTest.SocketPair < android.net.cts.IpSecBaseTest.NativeTcpSocket > sockets = android.net.cts.IpSecBaseTest.getNativeTcpSocketPair ( local , mISM , transform ) ; checkSocketPair ( sockets.mLeftSock , sockets.mRightSock ) ; } } }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; java.util.prefs.Preferences pref = java.util.prefs.Preferences.userNodeForPackage ( java.util.prefs.Preferences.class ) ; for ( java.lang.String child : pref.childrenNames ( ) ) { pref.node ( child ) . removeNode ( ) ; } pref.clear ( ) ; }
public void initForSecondary ( ) { middleLength = 3 ; minBytes [ 1 ] = 0 ; maxBytes [ 1 ] = 0 ; minBytes [ 2 ] = 0 ; maxBytes [ 2 ] = 0 ; minBytes [ 3 ] = ( Collation.MERGE_SEPARATOR_BYTE ) + 1 ; maxBytes [ 3 ] = 255 ; minBytes [ 4 ] = 2 ; maxBytes [ 4 ] = 255 ; }
private void writeUserLocked ( android.content.pm.UserInfo userInfo ) { java.io.FileOutputStream fos = null ; android.util.AtomicFile userFile = new android.util.AtomicFile ( new java.io.File ( mUsersDir , ( ( userInfo.id ) + ( com.android.server.pm.UserManagerService.XML_SUFFIX ) ) ) ) ; try { fos = userFile.startWrite ( ) ; final java.io.BufferedOutputStream bos = new java.io.BufferedOutputStream ( fos ) ; final org.xmlpull.v1.XmlSerializer serializer = new com.android.internal.util.FastXmlSerializer ( ) ; serializer.setOutput ( bos , "utf-8" ) ; serializer.startDocument ( null , true ) ; serializer.setFeature ( "http://xmlpull.org/v1/doc/features.html#indent-output" , true ) ; serializer.startTag ( null , com.android.server.pm.UserManagerService.TAG_USER ) ; serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_ID , java.lang.Integer.toString ( userInfo.id ) ) ; serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_SERIAL_NO , java.lang.Integer.toString ( userInfo.serialNumber ) ) ; serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_FLAGS , java.lang.Integer.toString ( userInfo.flags ) ) ; serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_CREATION_TIME , java.lang.Long.toString ( userInfo.creationTime ) ) ; serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_LAST_LOGGED_IN_TIME , java.lang.Long.toString ( userInfo.lastLoggedInTime ) ) ; com.android.server.pm.UserManagerService.RestrictionsPinState pinState = mRestrictionsPinStates.get ( userInfo.id ) ; if ( pinState != null ) { if ( ( pinState.salt ) != 0 ) { serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_SALT , java.lang.Long.toString ( pinState.salt ) ) ; } if ( ( pinState.pinHash ) != null ) { serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_PIN_HASH , pinState.pinHash ) ; } if ( ( pinState.failedAttempts ) != 0 ) { serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_FAILED_ATTEMPTS , java.lang.Integer.toString ( pinState.failedAttempts ) ) ; serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_LAST_RETRY_MS , java.lang.Long.toString ( pinState.lastAttemptTime ) ) ; } } if ( ( userInfo.iconPath ) != null ) { serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_ICON_PATH , userInfo.iconPath ) ; } if ( userInfo.partial ) { serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_PARTIAL , "true" ) ; } if ( userInfo.guestToRemove ) { serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_GUEST_TO_REMOVE , "true" ) ; } if ( ( userInfo.profileGroupId ) != ( android.content.pm.UserInfo.NO_PROFILE_GROUP_ID ) ) { serializer.attribute ( null , com.android.server.pm.UserManagerService.ATTR_PROFILE_GROUP_ID , java.lang.Integer.toString ( userInfo.profileGroupId ) ) ; } serializer.startTag ( null , com.android.server.pm.UserManagerService.TAG_NAME ) ; serializer.text ( userInfo.name ) ; serializer.endTag ( null , com.android.server.pm.UserManagerService.TAG_NAME ) ; android.os.Bundle restrictions = mUserRestrictions.get ( userInfo.id ) ; if ( restrictions != null ) { writeRestrictionsLocked ( serializer , restrictions ) ; } serializer.endTag ( null , com.android.server.pm.UserManagerService.TAG_USER ) ; serializer.endDocument ( ) ; userFile.finishWrite ( fos ) ; } catch ( java.lang.Exception ioe ) { android.util.Slog.e ( com.android.server.pm.UserManagerService.LOG_TAG , ( ( ( "Error writing user info " + ( userInfo.id ) ) + "\n" ) + ioe ) ) ; userFile.failWrite ( fos ) ; } }
public void setVisibleRow ( int row ) { myVisibleRow = row ; final java.awt.Rectangle rowBounds = getRowBounds ( myVisibleRow ) ; final int indent = ( rowBounds.x ) - ( getVisibleRect ( ) . x ) ; setPreferredSize ( new java.awt.Dimension ( ( ( getRowBounds ( myVisibleRow ) . width ) + indent ) , getPreferredSize ( ) . height ) ) ; }
public void testCommentAfterDeclaration ( ) throws java.lang.Exception { com.intellij.psi.formatter.java.CodeStyleSettings codeStyleSettings = com.intellij.psi.formatter.java.CodeStyleSettingsManager.getSettings ( getProject ( ) ) ; int oldMargin = codeStyleSettings.getDefaultRightMargin ( ) ; try { codeStyleSettings.setDefaultRightMargin ( 20 ) ; codeStyleSettings.ASSIGNMENT_WRAP = CommonCodeStyleSettings.WRAP_AS_NEEDED ; doMethodTest ( "int i=0; //comment comment" , ( "int i =\n" + " 0; //comment comment" ) ) ; } finally { codeStyleSettings.setDefaultRightMargin ( oldMargin ) ; } }
private com.android.ide.common.rendering.api.RenderSession convertToScene ( com.android.layoutlib.api.ILayoutResult result ) { com.android.ide.common.rendering.api.Result sceneResult ; com.android.ide.common.rendering.api.ViewInfo rootViewInfo ; if ( ( result.getSuccess ( ) ) == ( com.android.layoutlib.api.ILayoutResult.SUCCESS ) ) { sceneResult = Status.SUCCESS.createResult ( ) ; rootViewInfo = convertToViewInfo ( result.getRootView ( ) ) ; } else { sceneResult = Status.ERROR_UNKNOWN.createResult ( result.getErrorMessage ( ) ) ; rootViewInfo = null ; } return new com.android.ide.common.rendering.StaticRenderSession ( sceneResult , rootViewInfo , result.getImage ( ) ) ; }
private void receiveByDatagramSocket ( int bufSize , java.net.InetSocketAddress address , java.lang.String expectedString ) throws java.io.IOException { byte [ ] buf = new byte [ bufSize ] ; this . datagramSocket1.setSoTimeout ( 6000 ) ; java.net.DatagramPacket rdp = new java.net.DatagramPacket ( buf , buf.length ) ; this . datagramSocket1.receive ( rdp ) ; assertEquals ( new java.lang.String ( buf , 0 , bufSize ) . trim ( ) , expectedString ) ; }
boolean connectAudio ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hfp.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; if ( ! ( mStateMachine.isConnected ( ) ) ) { return false ; } if ( mStateMachine.isAudioOn ( ) ) { return false ; } mStateMachine.sendMessage ( HeadsetStateMachine.CONNECT_AUDIO ) ; return true ; }
public void dumpShowsLastFailureTraceAndPendingConnectionTrace ( ) throws java.lang.Exception { mLastMileLogger.reportConnectionEvent ( BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect try #1" ) ; mLastMileLogger.reportConnectionEvent ( BaseWifiDiagnostics.CONNECTION_EVENT_FAILED ) ; mLastMileLogger.reportConnectionEvent ( BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect try #2" ) ; java.lang.String dumpString = getDumpString ( ) ; org.junit.Assert.assertTrue ( dumpString.contains ( "rdev_connect try #1" ) ) ; org.junit.Assert.assertTrue ( dumpString.contains ( "rdev_connect try #2" ) ) ; }
void crashApplication ( com.android.server.am.ProcessRecord r , android.app.ApplicationErrorReport.CrashInfo crashInfo ) { final long origId = android.os.Binder.clearCallingIdentity ( ) ; try { crashApplicationInner ( r , crashInfo ) ; } finally { android.os.Binder.restoreCallingIdentity ( origId ) ; } }
private static java.lang.Process exec ( java.lang.String cmd ) throws java.io.IOException { java.lang.String [ ] cmdarray = new java.lang.String [ ] { "sh" , "-c" , cmd } ; android.util.Log.v ( com.google.android.traceur.AtraceUtils.TAG , ( "exec: " + ( java.util.Arrays.toString ( cmdarray ) ) ) ) ; return com.google.android.traceur.AtraceUtils.RUNTIME.exec ( cmdarray ) ; }
public void writeToParcel ( android.os.Parcel dest , int flags ) { dest.writeParcelable ( uri , flags ) ; dest.writeByteArray ( callSpecificAppData.toByteArray ( ) ) ; dest.writeParcelable ( phoneAccountHandle , flags ) ; dest.writeInt ( ( isVideoCall ? 1 : 0 ) ) ; dest.writeString ( callSubject ) ; dest.writeInt ( ( allowAssistedDial ? 1 : 0 ) ) ; dest.writeBundle ( inCallUiIntentExtras ) ; }
public void testSetLinkPropertiesEmptyDns ( ) throws java.lang.Exception { android.telephony.data.DataCallResponse response = new android.telephony.data.DataCallResponse ( 0 , ( - 1 ) , 1 , 2 , "IP" , com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_IFNAME , java.util.Arrays.asList ( new android.telephony.data.InterfaceAddress ( com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_ADDRESS , 0 ) ) , null , java.util.Arrays.asList ( android.net.NetworkUtils.numericToInetAddress ( com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_GATEWAY ) ) , java.util.Arrays.asList ( com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_PCSCF_ADDRESS ) , 1440 ) ; android.net.LinkProperties linkProperties = new android.net.LinkProperties ( ) ; org.junit.Assert.assertEquals ( SetupResult.SUCCESS , setLinkProperties ( response , linkProperties ) ) ; }
public void test_SSL_CTX_new ( ) throws java.lang.Exception { long c = org.conscrypt.NativeCrypto.SSL_CTX_new ( ) ; assertTrue ( ( c != ( org.conscrypt.NativeCryptoTest.NULL ) ) ) ; long c2 = org.conscrypt.NativeCrypto.SSL_CTX_new ( ) ; assertTrue ( ( c != c2 ) ) ; org.conscrypt.NativeCrypto.SSL_CTX_free ( c ) ; org.conscrypt.NativeCrypto.SSL_CTX_free ( c2 ) ; }
public byte [ ] getEncoded ( ) { try { if ( ( info ) != null ) { return info.getEncoded ( ASN1Encoding.DER ) ; } org.bouncycastle.asn1.pkcs.PrivateKeyInfo info = new org.bouncycastle.asn1.pkcs.PrivateKeyInfo ( new org.bouncycastle.asn1.x509.AlgorithmIdentifier ( org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers.dhKeyAgreement , new org.bouncycastle.asn1.pkcs.DHParameter ( dhSpec.getP ( ) , dhSpec.getG ( ) , dhSpec.getL ( ) ) ) , new org.bouncycastle.asn1.DERInteger ( getX ( ) ) ) ; return info.getEncoded ( ASN1Encoding.DER ) ; } catch ( java.io.IOException e ) { return null ; } }
private void notifyFocusChanged ( com.android.ddmlib.IDevice device ) { com.android.hierarchyviewerlib.models.DeviceSelectionModel.WindowChangeListener [ ] listeners = getWindowChangeListenerList ( ) ; if ( listeners != null ) { for ( int i = 0 ; i < ( listeners.length ) ; i ++ ) { listeners [ i ] . focusChanged ( device ) ; } } }
public void interfaceRemoved ( java.lang.String iface ) { super . interfaceRemoved ( iface ) ; if ( mClatInterfaceName.equals ( iface ) ) { mCallback.setNeighborDiscoveryOffload ( true ) ; } }
public void addHeaderView ( android.view.View v , java.lang.Object data , boolean isSelectable ) { final android.widget.ListView.FixedViewInfo info = new android.widget.ListView.FixedViewInfo ( ) ; info.view = v ; info.data = data ; info.isSelectable = isSelectable ; mHeaderViewInfos.add ( info ) ; if ( ( mAdapter ) != null ) { if ( ! ( ( mAdapter ) instanceof android.widget.HeaderViewListAdapter ) ) { mAdapter = new android.widget.HeaderViewListAdapter ( mHeaderViewInfos , mFooterViewInfos , mAdapter ) ; } if ( ( mDataSetObserver ) != null ) { mDataSetObserver.onChanged ( ) ; } } }
public static long AddNegs3 ( long arg1 , long arg2 ) { long res = 0 ; long n_arg1 = - arg1 ; long n_arg2 = - arg2 ; for ( long i = 0 ; i < 1 ; i ++ ) { res += ( n_arg1 + n_arg2 ) + i ; } return res ; }
private boolean isMarkupElement ( org.w3c.dom.Element element ) { return ( ( mStyle ) == ( XmlFormatStyle.RESOURCE ) ) && ( ( element.getTagName ( ) . length ( ) ) == 1 ) ; }
public java.lang.String [ ] saw ( java.lang.String prefix ) { try { return mBinder.saw ( prefix , ( - 1 ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return null ; } }
public org.objectweb.asm.MethodVisitor visitMethod ( final int access , final java.lang.String name , final java.lang.String desc , final java.lang.String signature , final java.lang.String [ ] exceptions ) { return new org.objectweb.asm.MethodVisitor ( Opcodes.ASM4 , cv.visitMethod ( access , name , desc , signature , exceptions ) ) { @ java.lang.Override public org.objectweb.asm.AnnotationVisitor visitAnnotationDefault ( ) { return null ; } @ java.lang.Override public org.objectweb.asm.AnnotationVisitor visitAnnotation ( java.lang.String desc , boolean visible ) { return null ; } @ java.lang.Override public org.objectweb.asm.AnnotationVisitor visitParameterAnnotation ( int parameter , java.lang.String desc , boolean visible ) { return null ; } } ; }
protected void resetResolvedDrawables ( ) { resetResolvedDrawablesInternal ( ) ; }
private java.lang.String normalizeWord ( java.lang.String word ) { switch ( this ) { case LOWER_HYPHEN : return com.google.common.base.Ascii.toLowerCase ( word ) ; case LOWER_UNDERSCORE : return com.google.common.base.Ascii.toLowerCase ( word ) ; case LOWER_CAMEL : return com.google.common.base.CaseFormat.firstCharOnlyToUpper ( word ) ; case UPPER_CAMEL : return com.google.common.base.CaseFormat.firstCharOnlyToUpper ( word ) ; case UPPER_UNDERSCORE : return com.google.common.base.Ascii.toUpperCase ( word ) ; } throw new java.lang.RuntimeException ( ( "unknown case: " + ( this ) ) ) ; }
private final java.lang.StringBuffer fallbackFormat ( android.icu.util.Calendar fromCalendar , android.icu.util.Calendar toCalendar , java.lang.StringBuffer appendTo , java.text.FieldPosition pos , java.lang.String fullPattern ) { java.lang.String originalPattern = fDateFormat.toPattern ( ) ; fDateFormat.applyPattern ( fullPattern ) ; fallbackFormat ( fromCalendar , toCalendar , appendTo , pos ) ; fDateFormat.applyPattern ( originalPattern ) ; return appendTo ; }
protected void setValue ( java.lang.String verb , java.lang.String directObject , java.lang.String longFlagName , java.lang.Object value ) { java.lang.String key = ( ( ( verb + "/" ) + directObject ) + "/" ) + longFlagName ; com.android.sdkmanager.CommandLineProcessor.Arg arg = mArguments.get ( key ) ; arg.setCurrentValue ( value ) ; }
public void destroy ( ) { validate ( ) ; nContextDeinitToClient ( mContext ) ; mMessageThread.mRun = false ; try { mMessageThread.join ( ) ; } catch ( java.lang.InterruptedException e ) { } nContextDestroy ( ) ; mContext = 0 ; nDeviceDestroy ( mDev ) ; mDev = 0 ; }
public void exit ( ) { mRun = false ; synchronized ( this ) { notifyAll ( ) ; } try { this . join ( ) ; } catch ( java.lang.InterruptedException e ) { } mInPixelsAllocation.destroy ( ) ; mInPixelsAllocation2.destroy ( ) ; mOutPixelsAllocation.destroy ( ) ; mRS.destroy ( ) ; mInPixelsAllocation = null ; mInPixelsAllocation2 = null ; mOutPixelsAllocation = null ; mRS = null ; }
private int getExpectedInstallLocation ( int userSetting ) { int iloc = PackageInfo.INSTALL_LOCATION_UNSPECIFIED ; boolean enable = getUserSettingSetInstallLocation ( ) ; if ( enable ) { if ( userSetting == ( com.android.internal.content.PackageHelper.APP_INSTALL_AUTO ) ) { iloc = PackageInfo.INSTALL_LOCATION_AUTO ; } else if ( userSetting == ( com.android.internal.content.PackageHelper.APP_INSTALL_EXTERNAL ) ) { iloc = PackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL ; } else if ( userSetting == ( com.android.internal.content.PackageHelper.APP_INSTALL_INTERNAL ) ) { iloc = PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY ; } } return iloc ; }
public void enter ( ) { log ( ( "Enter Connected: " + ( getCurrentMessage ( ) . what ) ) ) ; broadcastAudioState ( mCurrentDevice , BluetoothA2dpSink.STATE_NOT_PLAYING , BluetoothA2dpSink.STATE_PLAYING ) ; synchronized ( this ) { if ( ( mStreaming ) == null ) { if ( com.android.bluetooth.a2dpsink.A2dpSinkStateMachine.DBG ) { log ( "Creating New A2dpSinkStreamHandler" ) ; } mStreaming = new com.android.bluetooth.a2dpsink.A2dpSinkStreamHandler ( this , mContext ) ; } } informAudioFocusStateNative ( 0 ) ; }
private void showAvdManagerWindow ( ) { try { com.android.sdkuilib.internal.widgets.MessageBoxLog errorLogger = new com.android.sdkuilib.internal.widgets.MessageBoxLog ( "AVD Manager" , org.eclipse.swt.widgets.Display.getCurrent ( ) , true ) ; com.android.sdkuilib.internal.repository.AvdManagerWindowImpl1 window = new com.android.sdkuilib.internal.repository.AvdManagerWindowImpl1 ( null , errorLogger , mOsSdkFolder , AvdManagerWindowImpl1.AvdInvocationContext.STANDALONE ) ; window.registerPage ( com.android.sdkmanager.internal.repository.SettingsPage.class , UpdaterPage.Purpose.SETTINGS ) ; window.registerPage ( com.android.sdkmanager.internal.repository.AboutPage.class , UpdaterPage.Purpose.ABOUT_BOX ) ; window.open ( ) ; errorLogger.displayResult ( true ) ; } catch ( java.lang.Exception e ) { e.printStackTrace ( ) ; } }
public int getState ( ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "getState " + ( mState ) ) ) ; if ( ! ( com.android.bluetooth.Utils.checkCaller ( ) ) ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "getState(): not allowed for non-active user" ) ; return android.bluetooth.BluetoothPbap.STATE_DISCONNECTED ; } enforceCallingOrSelfPermission ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; return mState ; }
public void reloadSdk ( ) { mSdkManager.reloadSdk ( mSdkLog ) ; if ( ( mAvdManager ) != null ) { try { mAvdManager.reloadAvds ( mSdkLog ) ; } catch ( com.android.prefs.AndroidLocation.AndroidLocationException e ) { } } mLocalSdkParser.clearPackages ( ) ; notifyListeners ( false ) ; }
public boolean validates ( @ com.android.annotations.NonNull com.android.manifmerger.MergingReport.Builder mergingReport , @ com.android.annotations.NonNull com.android.manifmerger.XmlAttribute attribute , @ com.android.annotations.NonNull java.lang.String value ) { java.util.regex.Matcher matcher = com.android.manifmerger.AttributeModel.Hexadecimal32Bits.PATTERN.matcher ( value ) ; boolean valid = ( matcher.matches ( ) ) && ( ( matcher.group ( 1 ) . length ( ) ) <= 8 ) ; if ( ! valid ) { mergingReport.addError ( java.lang.String.format ( ( "Attribute %1$s at %2$s is not a valid hexadecimal 32 bit value," + " found %3$s" ) , attribute.getId ( ) , attribute.printPosition ( ) , value ) ) ; } return valid ; }
protected java.lang.String comparisonKey ( ) { java.lang.String s = super . comparisonKey ( ) ; int pos = s.indexOf ( "|r:" ) ; assert pos > 0 ; s = ( ( ( s.substring ( 0 , pos ) ) + "|abi:" ) + ( getAbiDisplayName ( ) ) ) + ( s.substring ( pos ) ) ; return s ; }
public static boolean requiresClat ( com.android.server.connectivity.NetworkAgentInfo nai ) { final int netType = nai.networkInfo.getType ( ) ; final boolean connected = nai.networkInfo.isConnected ( ) ; final boolean hasIPv4Address = ( ( nai.linkProperties ) != null ) ? nai.linkProperties.hasIPv4Address ( ) : false ; return ( connected && ( ! hasIPv4Address ) ) && ( com.android.internal.util.ArrayUtils.contains ( com.android.server.connectivity.Nat464Xlat.NETWORK_TYPES , netType ) ) ; }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "ToastTest.java:31: Warning: Toast created but not shown: did you forget to call show() ?\n" + ( ( "ToastTest.java:32: Warning: Expected duration Toast.LENGTH_SHORT or Toast.LENGTH_LONG, a custom duration value is not supported\n" + "ToastTest.java:32: Warning: Toast created but not shown: did you forget to call show() ?\n" ) + "ToastTest.java:38: Warning: Toast created but not shown: did you forget to call show() ?" ) ) , lintProject ( "src/test/pkg/ToastTest.java.txt=>src/test/pkg/ToastTest.java" ) ) ; }
public boolean needsPreprocessing ( java.io.File resourceFile ) { return ( ( ( resourceFile.getPath ( ) . endsWith ( ".xml" ) ) && ( isInDrawable ( resourceFile ) ) ) && ( ( getEffectiveVersion ( resourceFile ) ) < ( com.android.builder.png.VectorDrawableRenderer.MIN_SDK_WITH_VECTOR_SUPPORT ) ) ) && ( isRootVector ( resourceFile ) ) ; }
public android.icu.impl.SimplePatternFormatter getByVariant ( java.lang.CharSequence variant ) { assert isValid ( ) ; int idx = android.icu.text.QuantityFormatter.getPluralIndex ( variant ) ; android.icu.impl.SimplePatternFormatter template = templates [ ( idx < 0 ? 0 : idx ) ] ; return template == null ? templates [ 0 ] : template ; }
private synchronized void expectVoiceRecognition ( android.bluetooth.BluetoothDevice device ) { mWaitingForVoiceRecognition = true ; android.os.Message m = obtainMessage ( com.android.bluetooth.hfp.HeadsetStateMachine.START_VR_TIMEOUT ) ; m.obj = getMatchingDevice ( device ) ; sendMessageDelayed ( m , com.android.bluetooth.hfp.HeadsetStateMachine.START_VR_TIMEOUT_MILLIS ) ; if ( ! ( mSystemInterface.getVoiceRecognitionWakeLock ( ) . isHeld ( ) ) ) { mSystemInterface.getVoiceRecognitionWakeLock ( ) . acquire ( com.android.bluetooth.hfp.HeadsetStateMachine.START_VR_TIMEOUT_MILLIS ) ; } }
private void addNewConfiguration ( com.google.gct.testing.CloudTestConfigurationImpl newConfiguration ) { newConfiguration.setIcon ( CloudTestConfigurationProviderImpl.DEFAULT_ICON ) ; int addIndex = ( ( selectedConfiguration ) == null ) ? editableConfigurations.size ( ) : ( editableConfigurations.indexOf ( selectedConfiguration ) ) + 1 ; editableConfigurations.add ( addIndex , newConfiguration ) ; addConfigurationToTree ( addIndex , newConfiguration , true ) ; selectedConfiguration = newConfiguration ; updateConfigurationTree ( ) ; }
protected java.lang.Void doInBackground ( java.lang.Void ... params ) { java.lang.String format = "yyyy-MM-dd-HH-mm-ss" ; java.lang.String now = new java.text.SimpleDateFormat ( format , java.util.Locale.US ) . format ( new java.util.Date ( ) ) ; java.io.File file = new java.io.File ( com.android.traceur.AtraceUtils.TRACE_DIRECTORY , java.lang.String.format ( "trace-%s-%s-%s.ctrace" , Build.BOARD , Build.ID , now ) ) ; com.android.traceur.FileSender.postCaptureNotification ( context , file ) ; com.android.traceur.AtraceUtils.atraceDump ( file ) ; com.android.traceur.FileSender.postNotification ( context , file ) ; return null ; }
public static void insertCommentText ( org.eclipse.jface.text.Document document , org.eclipse.jdt.core.dom.BodyDeclaration bodyDeclaration , java.lang.String text ) { org.eclipse.jdt.core.dom.Javadoc comment = bodyDeclaration.getJavadoc ( ) ; if ( comment == null ) { try { document.replace ( bodyDeclaration.getStartPosition ( ) , 0 , ( ( "/** " + text ) + " */\n" ) ) ; } catch ( org.eclipse.jface.text.BadLocationException e ) { throw new java.lang.AssertionError ( e ) ; } } else { com.google.currysrc.api.transform.JavadocUtils.insertCommentText ( document , comment , text ) ; } }
public void testDeserializeWasSerializableClass ( ) throws java.lang.Exception { final java.lang.String s = "aced0005737200316c6962636f72652e6a6176612e696f2e53657269616c697a6174696f6" + ( "e546573742457617353657269616c697a61626c65000000000000000002000149000169787000000" + "000" ) ; assertFalse ( libcore.java.io.SerializationTest.wasSerializableInitializedFlag ) ; try { libcore.util.SerializationTester.deserializeHex ( s ) ; fail ( ) ; } catch ( java.io.InvalidClassException expected ) { } assertFalse ( libcore.java.io.SerializationTest.wasSerializableInitializedFlag ) ; }
private void checkWorldReadAccess ( java.lang.String path ) throws java.io.FileNotFoundException { try { android.system.StructStat stat = android.system.Os.stat ( path ) ; int accessBits = android.system.OsConstants.S_IROTH ; if ( ( android.system.OsConstants.S_ISREG ( stat.st_mode ) ) && ( ( ( stat.st_mode ) & accessBits ) == accessBits ) ) { checkLeadingPathComponentsWorldExecutable ( path ) ; return ; } } catch ( android.system.ErrnoException e ) { } throw new java.io.FileNotFoundException ( ( "Can't access " + path ) ) ; }
public void unholdCall ( java.lang.String callId ) { try { com.android.server.telecom.Log.startSession ( "ICA.uC" , mOwnerComponentName ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { com.android.server.telecom.Call call = mCallIdMapper.getCall ( callId ) ; if ( call != null ) { mCallsManager.unholdCall ( call ) ; } else { com.android.server.telecom.Log.w ( this , "unholdCall, unknown call id: %s" , callId ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } } finally { com.android.server.telecom.Log.endSession ( ) ; } }
public void run ( org.eclipse.jface.action.IAction action ) { final com.android.ide.eclipse.adt.internal.sdk.Sdk sdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ; if ( sdk != null ) { com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) . refreshSdk ( ) ; com.android.sdkuilib.repository.AvdManagerWindow window = new com.android.sdkuilib.repository.AvdManagerWindow ( com.android.ide.eclipse.adt.AdtPlugin.getDisplay ( ) . getActiveShell ( ) , new com.android.ide.eclipse.adt.internal.sdk.AdtConsoleSdkLog ( ) , sdk.getSdkLocation ( ) , com.android.sdkuilib.repository.AvdManagerWindow.AvdInvocationContext.IDE ) ; window.open ( ) ; } else { com.android.ide.eclipse.adt.AdtPlugin.displayError ( "Android SDK" , "Location of the Android SDK has not been setup in the preferences." ) ; } }
private android.telephony.ims.feature.ImsFeature makeImsFeature ( int slotId , int feature ) { switch ( feature ) { case android.telephony.ims.feature.ImsFeature.EMERGENCY_MMTEL : { return onCreateEmergencyMMTelImsFeature ( slotId ) ; } case android.telephony.ims.feature.ImsFeature.MMTEL : { return onCreateMMTelImsFeature ( slotId ) ; } case android.telephony.ims.feature.ImsFeature.RCS : { return onCreateRcsFeature ( slotId ) ; } } return null ; }
private void loadFromStoreAndMigrateAfterUserSwitch ( int userId ) { if ( mVerboseLoggingEnabled ) { android.util.Log.v ( com.android.server.wifi.WifiConfigManager.TAG , ( "Loading from store after user switch/unlock for " + userId ) ) ; } mWifiConfigStore.switchUserStore ( mWifiConfigStore.createUserFile ( userId ) ) ; if ( loadFromStore ( ) ) { saveToStore ( true ) ; mPendingUnlockStoreRead = false ; } }
private java.lang.String getNewClassName ( java.lang.String className ) { int lastDot = className.lastIndexOf ( "." ) ; if ( lastDot < 0 ) { return mNewName ; } java.lang.String name = className.substring ( lastDot , className.length ( ) ) ; java.lang.String newClassName = ( mNewName ) + name ; return newClassName ; }
private static byte [ ] loadImageByteArray ( java.lang.String file_path ) { android.graphics.Bitmap bitmap = android.graphics.BitmapFactory.decodeFile ( file_path ) ; java.io.ByteArrayOutputStream stream = new java.io.ByteArrayOutputStream ( ) ; bitmap.compress ( Bitmap.CompressFormat.PNG , 100 , stream ) ; return stream.toByteArray ( ) ; }
void resetProperties ( ) { if ( ( mCurrentAppType ) == ( UiccController.APP_FAM_3GPP ) ) { log ( ( "update icc_operator_numeric=" + "" ) ) ; mTelephonyManager.setSimOperatorNumericForPhone ( mPhoneId , "" ) ; mTelephonyManager.setSimCountryIsoForPhone ( mPhoneId , "" ) ; mTelephonyManager.setSimOperatorNameForPhone ( mPhoneId , "" ) ; } }
public void dumpShowsLastFailureTraceAndCurrentConnectionTrace ( ) throws java.lang.Exception { mLastMileLogger.reportConnectionEvent ( BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect try #1" ) ; mLastMileLogger.reportConnectionEvent ( BaseWifiDiagnostics.CONNECTION_EVENT_FAILED ) ; mLastMileLogger.reportConnectionEvent ( BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; android.os.FileUtils.stringToFile ( mTraceDataFile.getPath ( ) , "rdev_connect try #2" ) ; mLastMileLogger.reportConnectionEvent ( BaseWifiDiagnostics.CONNECTION_EVENT_SUCCEEDED ) ; java.lang.String dumpString = getDumpString ( ) ; org.junit.Assert.assertTrue ( dumpString.contains ( "rdev_connect try #1" ) ) ; org.junit.Assert.assertTrue ( dumpString.contains ( "rdev_connect try #2" ) ) ; }
public android.net.wifi.aware.ConfigRequest createFromParcel ( android.os.Parcel in ) { boolean support5gBand = ( in.readInt ( ) ) != 0 ; int masterPreference = in.readInt ( ) ; int clusterLow = in.readInt ( ) ; int clusterHigh = in.readInt ( ) ; return new android.net.wifi.aware.ConfigRequest ( support5gBand , masterPreference , clusterLow , clusterHigh ) ; }
private void fillUi ( ) { if ( ( ( com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent ( ) ) != null ) && ( mProject.isOpen ( ) ) ) { com.android.ide.eclipse.adt.internal.project.ProjectState state = com.android.ide.eclipse.adt.internal.sdk.Sdk.getProjectState ( mProject ) ; mPropertiesWorkingCopy = state.getProperties ( ) . makeWorkingCopy ( ) ; com.android.sdklib.IAndroidTarget target = state.getTarget ( ) ; if ( target != null ) { mSelector.setSelection ( target ) ; } mIsLibrary.setSelection ( state.isLibrary ( ) ) ; mLibraryDependencies.setContent ( state , mPropertiesWorkingCopy ) ; } }
public java.lang.String getSubscriptionCarrierName ( ) { try { com.android.internal.telephony.ITelephony service = getITelephony ( ) ; return service.getSubscriptionCarrierName ( getSubId ( ) ) ; } catch ( android.os.RemoteException ex ) { ex.rethrowAsRuntimeException ( ) ; } catch ( java.lang.NullPointerException ex ) { throw new java.lang.IllegalStateException ( "Telephony service unavailable" ) ; } return null ; }
public void testSetValues014_ThreadAsObject ( ) { long classID = getClassIDBySignature ( getDebuggeeClassSignature ( ) ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value actualValue = getStaticFieldValue ( classID , "THREAD_PARAM_VALUE" ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value expectedValue = getStaticFieldValue ( classID , "THREAD_PARAM_VALUE_TO_SET" ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester ( "breakpointObject" , StackTrace002Debuggee.THREAD_AS_OBJECT_SIGNAL ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod ( "runBreakpointObject" ) ; methodInfo.addVariable ( "param" , actualValue , expectedValue ) ; runStackFrameTest ( tester ) ; }
public android.telephony.ServiceState getServiceStateForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( canReadPhoneState ( callingPackage , "getServiceStateForSubscriber" ) ) ) { return null ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone == null ) { return null ; } return phone.getServiceState ( ) ; }
private void doExtractZipFails ( java.io.ByteArrayOutputStream baos ) { java.io.File dir = createTempDir ( ) ; java.io.File targetDir = new java.io.File ( dir , "target" ) ; libcore.tzdata.update2.TimeZoneDistroTest.TestInputStream inputStream = new libcore.tzdata.update2.TimeZoneDistroTest.TestInputStream ( new java.io.ByteArrayInputStream ( baos.toByteArray ( ) ) ) ; try { libcore.tzdata.update2.TimeZoneDistro.extractZipSafely ( inputStream , targetDir , true ) ; fail ( ) ; } catch ( java.io.IOException expected ) { } inputStream.assertClosed ( ) ; }
protected void collect ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JType type ) { if ( type instanceof com.android.jack.ir.ast.JDefinedClassOrInterface ) { ( ( com.android.jack.ir.ast.JDefinedClassOrInterface ) ( type ) ) . addMarker ( MainDexMarker.INSTANCE ) ; } }
public void wifiNanTerminateSession ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "sessionId" , description = "The session ID returned when session was created using publish or subscribe" ) java.lang.Integer sessionId ) throws android.os.RemoteException { synchronized ( mLock ) { android.net.wifi.nan.WifiNanDiscoveryBaseSession session = mDiscoverySessions.get ( sessionId ) ; if ( session == null ) { throw new java.lang.IllegalStateException ( ( ( "Calling wifiNanTerminateSession before session (session ID " + sessionId ) + ") is ready" ) ) ; } session.terminate ( ) ; mDiscoverySessions.remove ( sessionId ) ; } }
public void testEmptyApk ( ) throws java.lang.Exception { com.android.apksig.ApkVerifierTest.assertVerificationFailure ( verifyForMinSdkVersion ( "empty-unsigned.apk" , 1 ) , Issue.JAR_SIG_NO_MANIFEST ) ; com.android.apksig.ApkVerifierTest.assertVerificationFailure ( verifyForMinSdkVersion ( "v1-only-empty.apk" , 18 ) , Issue.JAR_SIG_NO_SIGNED_ZIP_ENTRIES ) ; com.android.apksig.ApkVerifierTest.assertVerified ( verifyForMinSdkVersion ( "v2-only-empty.apk" , AndroidSdkVersion.N ) ) ; }
private void doAdd ( ) { com.google.gct.testing.CloudTestConfigurationImpl newConfiguration = ( ( selectedConfiguration ) != null ) ? selectedConfiguration.copy ( "Copy of " ) : new com.google.gct.testing.CloudTestConfigurationImpl ( facet ) ; newConfiguration.setIcon ( CloudTestConfigurationProviderImpl.DEFAULT_ICON ) ; int addIndex = ( ( selectedConfiguration ) == null ) ? editableConfigurations.size ( ) : ( editableConfigurations.indexOf ( selectedConfiguration ) ) + 1 ; editableConfigurations.add ( addIndex , newConfiguration ) ; addConfigurationToTree ( addIndex , newConfiguration , true ) ; selectedConfiguration = newConfiguration ; updateConfigurationTree ( ) ; }
boolean enableWBS ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hfp.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; if ( ! ( mStateMachine.isConnected ( ) ) ) { return false ; } if ( mStateMachine.isAudioOn ( ) ) { return false ; } for ( android.bluetooth.BluetoothDevice device : getConnectedDevices ( ) ) { mStateMachine.sendMessage ( HeadsetStateMachine.ENABLE_WBS , device ) ; } return true ; }
private void launchConfirmationDialog ( com.android.internal.telephony.gsm.stk.TextMessage msg ) { msg.title = lastSelectedItem ; android.content.Intent newIntent = new android.content.Intent ( this , com.android.stk.StkDialogActivity.class ) ; newIntent.setFlags ( ( ( ( ( android.content.Intent.FLAG_ACTIVITY_NEW_TASK ) | ( android.content.Intent.FLAG_ACTIVITY_NO_HISTORY ) ) | ( android.content.Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS ) ) | ( getFlagActivityNoUserAction ( com.android.stk.StkAppService.InitiatedByUserAction.unknown ) ) ) ) ; newIntent.putExtra ( "TEXT" , msg ) ; startActivity ( newIntent ) ; }
private synchronized void handleException ( java.lang.Exception e ) { com.android.ddmlib.Log.w ( "PropertyFetcher" , java.lang.String.format ( "%s getting properties for device %s: %s" , e.getClass ( ) . getSimpleName ( ) , mDevice.getSerialNumber ( ) , e.getMessage ( ) ) ) ; for ( java.util.Map.Entry < java.lang.String , com.google.common.util.concurrent.SettableFuture < java.lang.String > > entry : mPendingRequests.entrySet ( ) ) { entry.getValue ( ) . setException ( e ) ; } mPendingRequests.clear ( ) ; }
public com.google.gson.JsonObject toJson ( ) { com.google.gson.JsonObject json = new com.google.gson.JsonObject ( ) ; json.add ( com.android.vts.util.Graph.X_LABEL_KEY , new com.google.gson.JsonPrimitive ( getXLabel ( ) ) ) ; json.add ( com.android.vts.util.Graph.NAME_KEY , new com.google.gson.JsonPrimitive ( getName ( ) ) ) ; json.add ( com.android.vts.util.Graph.TYPE_KEY , new com.google.gson.JsonPrimitive ( getType ( ) . toString ( ) ) ) ; return json ; }
public void startAdvertisingSet ( android.bluetooth.le.AdvertisingSetParameters parameters , android.bluetooth.le.AdvertiseData advertiseData , android.bluetooth.le.AdvertiseData scanResponse , android.bluetooth.le.PeriodicAdvertisingParameters periodicParameters , android.bluetooth.le.AdvertiseData periodicData , android.bluetooth.le.AdvertisingSetCallback callback , android.os.Handler handler ) { startAdvertisingSet ( parameters , advertiseData , scanResponse , periodicParameters , periodicData , 0 , callback , handler ) ; }
public void testOnTearDownRestoreFailed ( ) throws java.lang.Exception { mCmdUtil.mCmdSuccess = false ; try { mPreparer.tearDown ( mDevice , mBuildInfo , null ) ; } catch ( java.lang.RuntimeException e ) { org.junit.Assert.assertEquals ( "Hal restore failed." , e.getMessage ( ) ) ; return ; } org.junit.Assert.fail ( ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Throwable { Main.testThrowException ( ) ; Main.testDropArguments ( ) ; Main.testCatchException ( ) ; Main.testGuardWithTest ( ) ; }
public java.util.List < android.content.pm.PackageInfo > getPreferredPackages ( int flags ) { synchronized ( mPackages ) { final java.util.ArrayList < android.content.pm.PackageInfo > res = new java.util.ArrayList < android.content.pm.PackageInfo > ( ) ; final java.util.ArrayList < com.android.server.PackageManagerService.PackageSetting > pref = mSettings.mPreferredPackages ; final int N = pref.size ( ) ; for ( int i = 0 ; i < N ; i ++ ) { res.add ( generatePackageInfo ( pref.get ( i ) . pkg , flags ) ) ; } return res ; } }
private java.lang.Object getSelectedItem ( ) { org.eclipse.jface.viewers.ISelection sel = mTreeViewPackage.getSelection ( ) ; if ( sel instanceof org.eclipse.jface.viewers.IStructuredSelection ) { java.lang.Object elem = ( ( org.eclipse.jface.viewers.IStructuredSelection ) ( sel ) ) . getFirstElement ( ) ; if ( ( elem instanceof com.android.sdkuilib.internal.repository.ArchiveInfo ) || ( elem instanceof com.android.sdkuilib.internal.repository.SdkUpdaterChooserDialog.LicenseEntry ) ) { return elem ; } } return null ; }
public com.android.sched.vfs.VFS checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull final java.lang.String string ) throws com.android.sched.util.codec.ParsingException { try { return new com.android.sched.vfs.CachedDirectFS ( new com.android.sched.util.file.Directory ( context.getWorkingDirectory ( ) , string , context.getRunnableHooks ( ) , existence , permissions , change ) , permissions ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e ) ; } }
public static int readUnsignedLeb128 ( com.android.dx.util.ByteInput in ) { int result = 0 ; int cur ; int count = 0 ; do { cur = ( in.readByte ( ) ) & 255 ; result |= ( cur & 127 ) << ( count * 7 ) ; count ++ ; } while ( ( ( cur & 128 ) == 128 ) && ( count < 5 ) ) ; if ( ( cur & 128 ) == 128 ) { throw new com.android.dx.util.DexException ( "invalid LEB128 sequence" ) ; } return result ; }
private boolean shouldThrowSocketTimeoutExceptionFromAccept ( java.net.SocketTimeoutException e ) { if ( isBlocking ( ) ) { return true ; } java.lang.Throwable cause = e.getCause ( ) ; if ( cause instanceof libcore.io.ErrnoException ) { if ( ( ( ( libcore.io.ErrnoException ) ( cause ) ) . errno ) == ( EAGAIN ) ) { return false ; } } return true ; }
public void testAllOfWithWrongMatcher ( ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) org.hamcrest.Matcher < android.net.Uri > allOfMatcher = org.hamcrest.CoreMatchers.allOf ( android.support.test.espresso.intent.matcher.UriMatchers.hasHost ( "www.google.com" ) , android.support.test.espresso.intent.matcher.UriMatchers.hasParamWithName ( "sourceid" ) , android.support.test.espresso.intent.matcher.UriMatchers.hasParamWithName ( "param" ) , android.support.test.espresso.intent.matcher.UriMatchers.hasPath ( "/search" ) ) ; assertFalse ( "Matcher shouldn't have matched." , allOfMatcher.matches ( uri ) ) ; }
public void setRttStreams ( boolean shouldBeRtt ) { boolean areStreamsInitialized = ( ( mInCallToConnectionServiceStreams ) != null ) && ( ( mConnectionServiceToInCallStreams ) != null ) ; if ( shouldBeRtt && ( ! areStreamsInitialized ) ) { try { mInCallToConnectionServiceStreams = android.os.ParcelFileDescriptor.createReliablePipe ( ) ; mConnectionServiceToInCallStreams = android.os.ParcelFileDescriptor.createReliablePipe ( ) ; } catch ( java.io.IOException e ) { android.telecom.Log.e ( this , e , "Failed to create pipes for RTT call." ) ; } } else if ( ( ! shouldBeRtt ) && areStreamsInitialized ) { closeRttPipes ( ) ; mInCallToConnectionServiceStreams = null ; mConnectionServiceToInCallStreams = null ; } }
private static java.util.List < com.google.currysrc.api.transform.TransformRule > createTransformRules ( ) { java.util.List < com.google.currysrc.api.transform.TransformRule > transformRules = com.google.common.collect.Lists.newArrayList ( Icu4jTransform.Icu4jRules.getRepackagingRules ( ) ) ; transformRules.add ( com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.transformers.ReplaceTextCommentScanner ( Icu4jTransform.ORIGINAL_ICU_PACKAGE , Icu4jTransform.ANDROID_ICU_PACKAGE ) ) ) ; transformRules.add ( com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.android.icu4j.srcgen.TranslateJcite.BeginEndTagsHandler ( ) ) ) ; return transformRules ; }
private void updateCurrentCheckboxTree ( com.google.common.base.Function < com.intellij.ui.CheckedTreeNode , java.lang.Void > updateFunction ) { com.google.gct.testing.dimension.GoogleCloudTestingDimension selectedDimension = getSelectedDimension ( ) ; com.intellij.ui.CheckboxTree currentCheckboxTree = treeMap.get ( selectedDimension ) ; com.intellij.ui.CheckedTreeNode rootNode = ( ( com.intellij.ui.CheckedTreeNode ) ( currentCheckboxTree.getModel ( ) . getRoot ( ) ) ) ; updateNode ( rootNode , updateFunction ) ; updateUI ( currentCheckboxTree ) ; selectedDimension.dimensionChanged ( ) ; updateConfigurationCountLabel ( ) ; list.updateUI ( ) ; }
public static < T > void assertThat ( java.lang.String reason , T actual , org.hamcrest.Matcher < T > matcher ) { if ( ! ( matcher.matches ( actual ) ) ) { org.hamcrest.Description description = new org.hamcrest.StringDescription ( ) ; description.appendText ( reason ) ; description.appendText ( "\nExpected: " ) ; description.appendDescriptionOf ( matcher ) ; description.appendText ( "\n got: " ) ; description.appendValue ( actual ) ; description.appendText ( "\n" ) ; throw new java.lang.AssertionError ( description.toString ( ) ) ; } }
private org.eclipse.swt.graphics.RGB renderDrawableResource ( java.lang.String themeItemName ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart editor = mPalette.getEditor ( ) ; java.awt.image.BufferedImage image = editor.renderThemeItem ( themeItemName , 100 , 100 ) ; if ( image != null ) { int rgb = image.getRGB ( ( ( image.getWidth ( ) ) / 2 ) , ( ( image.getHeight ( ) ) / 2 ) ) ; return com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageUtils.intToRgb ( rgb ) ; } return null ; }
java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hearingaid.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; return new java.util.ArrayList < > ( ) ; }
public void testAnimation ( ) throws java.lang.Throwable { final android.view.View view = mActivity.findViewById ( R.id.fit_windows ) ; view.setAnimation ( null ) ; assertNull ( view.getAnimation ( ) ) ; view.setAnimation ( mAnimation ) ; runTestOnUiThread ( new java.lang.Runnable ( ) { public void run ( ) { view.invalidate ( ) ; } } ) ; android.view.animation.cts.AnimationTestUtils.assertRunAnimation ( getInstrumentation ( ) , view , mAnimation , android.view.cts.View_AnimationTest.TIME_OUT ) ; }
private void show ( int id ) { android.widget.TextView tv = new android.widget.TextView ( this ) ; tv.setPadding ( 10 , 10 , 10 , 30 ) ; tv.setText ( id ) ; mInstructions.addView ( tv ) ; }
public boolean canConference ( ) { android.util.Log.e ( com.android.internal.telephony.cdma.CDMAPhone.LOG_TAG , "canConference: not possible in CDMA" ) ; return false ; }
public void testV1SignedAttrs ( ) throws java.lang.Exception { com.android.apksig.ApkVerifierTest.assertVerified ( verify ( "v1-only-with-signed-attrs.apk" ) ) ; }
public void testLegacyForegroundAppAndAllPermissions ( ) throws java.lang.Exception { boolean output = false ; mThrowSecurityException = false ; mMockApplInfo.targetSdkVersion = Build.VERSION_CODES.GINGERBREAD ; mPkgNameOfTopActivity = com.android.server.wifi.util.WifiPermissionsUtilTest.TEST_PACKAGE_NAME ; mWifiScanAllowApps = android.app.AppOpsManager.MODE_ALLOWED ; mUid = com.android.server.wifi.util.WifiPermissionsUtilTest.MANAGED_PROFILE_UID ; mCurrentUser = android.os.UserHandle.USER_CURRENT_OR_SELF ; setupTestCase ( ) ; com.android.server.wifi.util.WifiPermissionsUtil codeUnderTest = new com.android.server.wifi.util.WifiPermissionsUtil ( mMockPermissionsWrapper , mMockContext , mMockWifiSettingsStore , mMockUserManager ) ; try { output = codeUnderTest.canAccessScanResults ( com.android.server.wifi.util.WifiPermissionsUtilTest.TEST_PACKAGE_NAME , mUid , mTargetVersion ) ; } catch ( java.lang.SecurityException e ) { throw e ; } org.junit.Assert.assertEquals ( output , true ) ; }
public static < R , C , V > com.google.common.collect.HashBasedTable < R , C , V > create ( int expectedRows , int expectedCellsPerRow ) { com.google.common.base.Preconditions.checkArgument ( ( expectedCellsPerRow >= 0 ) ) ; java.util.Map < R , java.util.Map < C , V > > backingMap = com.google.common.collect.Maps.newHashMapWithExpectedSize ( expectedRows ) ; return new com.google.common.collect.HashBasedTable < R , C , V > ( backingMap , new com.google.common.collect.HashBasedTable.Factory < C , V > ( expectedCellsPerRow ) ) ; }
private static java.lang.String [ ] getDhcpRanges ( android.content.Context ctx ) { final java.lang.String [ ] fromResource = com.android.server.connectivity.tethering.TetheringConfiguration.getResourceStringArray ( ctx , com.android.internal.R.array.config_tether_dhcp_range ) ; if ( ( ( fromResource.length ) > 0 ) && ( ( ( fromResource.length ) % 2 ) == 0 ) ) { return fromResource ; } return com.android.server.connectivity.tethering.TetheringConfiguration.copy ( com.android.server.connectivity.tethering.TetheringConfiguration.DHCP_DEFAULT_RANGE ) ; }
private void enqueue ( java.lang.ref.Reference < ? > list ) { while ( list != null ) { java.lang.ref.Reference < ? > reference ; if ( list == ( list.pendingNext ) ) { reference = list ; reference.pendingNext = null ; list = null ; } else { reference = list.pendingNext ; list.pendingNext = reference.pendingNext ; reference.pendingNext = null ; } reference.enqueueInternal ( ) ; } }
private com.android.jill.frontend.java.Variable getVariableWithLocalIndex ( @ javax.annotation.Nonnegative int localIdx , @ javax.annotation.Nonnull java.lang.String id , @ javax.annotation.Nonnull java.lang.String name , @ javax.annotation.Nonnull org.objectweb.asm.Type type , @ javax.annotation.CheckForNull java.lang.String signature ) { com.android.jill.frontend.java.Variable var = nameToVar.get ( id ) ; if ( var == null ) { var = new com.android.jill.frontend.java.Variable ( id , name , type , signature , localIdx ) ; nameToVar.put ( id , var ) ; } return var ; }
public void sendSingleScanAllChannelsRequest ( ) throws java.lang.Exception { android.net.wifi.WifiScanner.ScanSettings requestSettings = createRequest ( channelsToSpec ( 2400 , 2450 , 5150 , 5175 , 5600 , 5650 , 5660 ) , 0 , 0 , 20 , WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN ) ; doSuccessfulSingleScan ( requestSettings , computeSingleScanNativeSettings ( requestSettings ) , com.android.server.wifi.ScanResults.create ( 0 , true , 2400 , 5150 , 5175 ) ) ; }
public static void doTest ( art.Test1937.Transform t ) { t.sayHi ( ) ; art.Redefinition.doCommonClassRedefinition ( art.Test1937.Transform.class , art.Test1937.CLASS_BYTES , art.Test1937.DEX_BYTES ) ; try { t.sayHi ( ) ; } catch ( java.lang.Throwable e ) { java.lang.System.out.println ( ( ( ( "Caught exception " + ( e.getClass ( ) . getName ( ) ) ) + ": " ) + ( e.getMessage ( ) ) ) ) ; } }
public void releaseIfUnreferencedRecursively ( ) throws android.os.RemoteException { if ( ( mRefCount ) > 0 ) { return ; } else if ( ( mRefCount ) < 0 ) { throw new java.lang.IllegalStateException ( "Invalid operation - resource has already been released." ) ; } mResource.releaseKernelResources ( ) ; for ( com.android.server.IpSecService.RefcountedResource < ? extends com.android.server.IpSecService.IResource > child : mChildren ) { ( child.mRefCount ) -- ; child.releaseIfUnreferencedRecursively ( ) ; } ( mRefCount ) -- ; }
public void onCreateButtonActions ( java.util.List < android.support.v17.leanback.widget.GuidedAction > actions , android.os.Bundle savedInstanceState ) { actions.add ( new android.support.v17.leanback.widget.GuidedAction.Builder ( getActivity ( ) ) . id ( com.android.tv.dvr.ui.SeriesDeletionFragment.ACTION_ID_DELETE ) . title ( getString ( R.string.dvr_detail_delete ) ) . build ( ) ) ; actions.add ( new android.support.v17.leanback.widget.GuidedAction.Builder ( getActivity ( ) ) . clickAction ( GuidedAction.ACTION_ID_CANCEL ) . build ( ) ) ; }
synchronized void nAllocationData2D ( long id , int xoff , int yoff , int mip , int face , int w , int h , short [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes ) ; }
public void testStartCallWithSpeakerphoneNotProvided_SpeakerphoneOffByDefault ( ) { if ( ! ( mShouldTestTelecom ) ) { return ; } android.media.AudioManager am = ( ( android.media.AudioManager ) ( mContext.getSystemService ( Context.AUDIO_SERVICE ) ) ) ; int expectedRoute = ( am.isWiredHeadsetOn ( ) ) ? android.telecom.CallAudioState.ROUTE_WIRED_HEADSET : android.telecom.CallAudioState.ROUTE_EARPIECE ; placeAndVerifyCall ( ) ; verifyConnectionForOutgoingCall ( ) ; assertAudioRoute ( mInCallCallbacks.getService ( ) , expectedRoute ) ; }
public void stopLoading ( ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { stopLoading ( ) ; } } ) ; return ; } mAwContents.stopLoading ( ) ; }
public void test2 ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( ( ( ( ( ( ( "res/values-cs/plurals3.xml:3: Error: For locale \"cs\" (Czech) the following quantities should also be defined: few, many [MissingQuantity]\n" + " <plurals name=\"draft\">\n" ) + " ^\n" ) + "res/values-zh-rCN/plurals3.xml:3: Warning: For language \"zh\" (Chinese) the following quantities are not relevant: one [UnusedQuantity]\n" ) + " <plurals name=\"draft\">\n" ) + " ^\n" ) + "res/values-zh-rCN/plurals3.xml:7: Warning: For language \"zh\" (Chinese) the following quantities are not relevant: one [UnusedQuantity]\n" ) + " <plurals name=\"title_day_dialog_content\">\n" ) + " ^\n" ) + "1 errors, 2 warnings\n" ) ) , lintProject ( "res/values-zh-rCN/plurals3.xml" , "res/values-cs/plurals3.xml" ) ) ; }
private static android.net.NetworkState buildMobile4gState ( java.lang.String iface ) { final android.net.NetworkInfo info = new android.net.NetworkInfo ( android.net.ConnectivityManager.TYPE_WIMAX , 0 , null , null ) ; info.setDetailedState ( DetailedState.CONNECTED , null , null ) ; final android.net.LinkProperties prop = new android.net.LinkProperties ( ) ; prop.setInterfaceName ( iface ) ; return new android.net.NetworkState ( info , prop , null , null , null , null ) ; }
public boolean gattClientRequestLeConnectionParameters ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "index" ) java.lang.Integer index , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "minConnectionInterval" ) java.lang.Integer minConnectionInterval , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "maxConnectionInterval" ) java.lang.Integer maxConnectionInterval , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "slaveLatency" ) java.lang.Integer slaveLatency , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "supervisionTimeout" ) java.lang.Integer supervisionTimeout ) throws java.lang.Exception { boolean result = false ; if ( ( mBluetoothGattList.get ( index ) ) != null ) { result = mBluetoothGattList.get ( index ) . requestLeConnectionUpdate ( minConnectionInterval , maxConnectionInterval , slaveLatency , supervisionTimeout ) ; } else { throw new java.lang.Exception ( ( "Invalid index input:" + index ) ) ; } return result ; }
public static com.android.dialer.contactactions.IntentModule newVideoCallModule ( android.content.Context context , java.lang.String number , @ android.support.annotation.Nullable android.telecom.PhoneAccountHandle phoneAccountHandle , com.android.dialer.callintent.CallInitiationType.Type initiationType ) { return new com.android.dialer.contactactions.IntentModule ( context , new com.android.dialer.callintent.CallIntentBuilder ( number , initiationType ) . setPhoneAccountHandle ( phoneAccountHandle ) . setIsVideoCall ( true ) . build ( ) , R.string.video_call , R.drawable.quantum_ic_videocam_white_24 ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JClassLiteral literal ) { com.android.jack.dx.rop.cst.Constant cst = com.android.jack.backend.dex.rop.RopHelper.getCstType ( literal.getRefType ( ) ) ; com.android.jack.ir.ast.JType type = literal.getType ( ) ; com.android.jack.dx.rop.code.Rop constOp = com.android.jack.dx.rop.code.Rops.opConst ( com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx ( type ) ) ; com.android.jack.dx.rop.code.Insn constInst = new com.android.jack.dx.rop.code.PlainCstInsn ( constOp , com.android.jack.backend.dex.rop.RopHelper.getSourcePosition ( literal ) , destReg , com.android.jack.dx.rop.code.RegisterSpecList.EMPTY , cst ) ; addInstruction ( constInst ) ; return false ; }
final void getUnchecked ( int pos , int [ ] dst , int dstOffset , int length ) { libcore.io.Memory.peekIntArray ( ix ( pos ) , dst , dstOffset , length , ( ! ( nativeByteOrder ) ) ) ; }
public java.lang.String getDeviceSoftwareVersionForSlot ( int slotId , java.lang.String callingPackage ) { if ( ! ( canReadPhoneState ( callingPackage , "getDeviceSoftwareVersionForSlot" ) ) ) { return null ; } com.android.internal.telephony.Phone phone = com.android.internal.telephony.PhoneFactory.getPhone ( slotId ) ; return phone == null ? null : phone.getDeviceSvn ( ) ; }
public java.lang.String getMainDexList ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( java.lang.String classDescriptor : toKeep ) { sb.append ( classDescriptor ) ; sb.append ( com.android.multidex.ClassReferenceListBuilder.CLASS_EXTENSION ) ; sb.append ( com.android.multidex.ClassReferenceListBuilder.EOL ) ; } return sb.toString ( ) ; }
public void run ( ) { org.eclipse.swt.graphics.Image screenshotImage = getScreenshotImage ( device ) ; if ( screenshotImage != null ) { com.android.hierarchyviewerlib.device.ViewNode viewNode = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindowData ( com.android.hierarchyviewerlib.device.Window.getFocusedWindow ( device ) ) ; if ( viewNode != null ) { com.android.hierarchyviewerlib.models.PixelPerfectModel.getModel ( ) . setData ( device , screenshotImage , viewNode ) ; } } }
public void onServiceStateChanged ( android.telephony.ServiceState serviceState ) { int newState = serviceState.getState ( ) ; if ( ( newState == ( android.telephony.ServiceState.STATE_IN_SERVICE ) ) && ( ( mServiceState ) != newState ) ) { tearDownAccounts ( ) ; setupAccounts ( ) ; } mServiceState = newState ; }
public void test_addSubjectAlternativeNameLintLjava_lang_String ( ) { int [ ] types = new int [ ] { org.apache.harmony.security.x509.GeneralName.OTHER_NAME , org.apache.harmony.security.x509.GeneralName.DNS_NAME , org.apache.harmony.security.x509.GeneralName.X400_ADDR , org.apache.harmony.security.x509.GeneralName.DIR_NAME , org.apache.harmony.security.x509.GeneralName.EDIP_NAME , org.apache.harmony.security.x509.GeneralName.UR_ID , org.apache.harmony.security.x509.GeneralName.IP_ADDR , org.apache.harmony.security.x509.GeneralName.REG_ID } ; for ( int i = 0 ; i < ( types.length ) ; i ++ ) { try { new java.security.cert.X509CertSelector ( ) . addSubjectAlternativeName ( types [ i ] , "-0xDFRF" ) ; fail ( ( "IOException expected for type: " + ( types [ i ] ) ) ) ; } catch ( java.io.IOException expected ) { } } }
public void testInjectSms ( ) { transitionFromStartupToIdle ( ) ; mGsmInboundSmsHandler.sendMessage ( InboundSmsHandler.EVENT_INJECT_SMS , new android.os.AsyncResult ( null , mSmsMessage , null ) ) ; com.android.internal.telephony.TelephonyTestUtils.waitForMs ( 100 ) ; verifySmsIntentBroadcasts ( 0 ) ; mGsmInboundSmsHandler.sendMessage ( InboundSmsHandler.EVENT_INJECT_SMS , new android.os.AsyncResult ( null , mSmsMessage , null ) ) ; com.android.internal.telephony.TelephonyTestUtils.waitForMs ( 100 ) ; verify ( mContext , times ( 2 ) ) . sendBroadcast ( any ( android.content.Intent.class ) ) ; assertEquals ( "IdleState" , getCurrentState ( ) . getName ( ) ) ; }
synchronized void nAllocationData1D ( long id , int off , int mip , int count , short [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData1D ( mContext , id , off , mip , count , d , sizeBytes ) ; }
public static com.android.jack.Options buildCommandLineArgs ( @ javax.annotation.Nonnull java.io.File fileOrSourcelist , @ javax.annotation.CheckForNull java.io.File jarjarRules ) throws java.io.IOException { com.android.jack.Options options = com.android.jack.TestTools.buildCommandLineArgs ( null , new java.io.File [ ] { fileOrSourcelist } ) ; if ( jarjarRules != null ) { options.setJarjarRulesFile ( jarjarRules ) ; } return options ; }
public java.util.List < android.bluetooth.BluetoothDevice > getDevicesMatchingConnectionStates ( int [ ] states ) { android.util.Log.v ( android.bluetooth.BluetoothInputHost.TAG , ( "getDevicesMatchingConnectionStates(): states=" + ( java.util.Arrays.toString ( states ) ) ) ) ; final android.bluetooth.IBluetoothInputHost service = mService ; if ( service != null ) { try { return service.getDevicesMatchingConnectionStates ( states ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothInputHost.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothInputHost.TAG , "Proxy not attached to service" ) ; } return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ; }
private com.android.ide.eclipse.adt.internal.editors.uimodel.UiAttributeNode addUnknownAttribute ( java.lang.String xmlFullName , java.lang.String xmlAttrLocalName , java.lang.String xmlNsUri ) { com.android.ide.eclipse.adt.internal.editors.descriptors.TextAttributeDescriptor desc = new com.android.ide.eclipse.adt.internal.editors.descriptors.TextAttributeDescriptor ( xmlAttrLocalName , xmlFullName , xmlNsUri , "Unknown XML attribute" , new com.android.ide.eclipse.adt.internal.resources.AttributeInfo ( xmlAttrLocalName , new com.android.ide.eclipse.adt.editors.layout.gscripts.IAttributeInfo.Format [ ] { com.android.ide.eclipse.adt.editors.layout.gscripts.IAttributeInfo.Format.STRING } ) ) ; com.android.ide.eclipse.adt.internal.editors.uimodel.UiAttributeNode uiAttr = desc.createUiNode ( this ) ; mUnknownUiAttributes.add ( uiAttr ) ; return uiAttr ; }
public void spliceOperationsFrom ( android.net.NetworkStats stats ) { for ( int i = 0 ; i < ( size ) ; i ++ ) { final int j = stats.findIndex ( iface [ i ] , uid [ i ] , set [ i ] , tag [ i ] , roaming [ i ] ) ; if ( j == ( - 1 ) ) { operations [ i ] = 0 ; } else { operations [ i ] = stats.operations [ j ] ; } } }
public void onStop ( ) { super . onStop ( ) ; com.android.dialer.common.LogUtil.i ( "AnswerFragment.onStop" , null ) ; handler.removeCallbacks ( swipeHintRestoreTimer ) ; if ( ( answerVideoCallScreen ) != null ) { answerVideoCallScreen.onVideoScreenStop ( ) ; } }
public boolean supports ( com.android.ide.common.rendering.api.Capability capability ) { if ( ( mBridge ) != null ) { return mBridge.getCapabilities ( ) . contains ( capability ) ; } if ( ( mLegacyBridge ) != null ) { switch ( capability ) { case UNBOUND_RENDERING : return ( getLegacyApiLevel ( ) ) == 4 ; } } return false ; }
private void makeOptionsObjects ( ) { cfOptions = new com.android.dx.dex.cf.CfOptions ( ) ; cfOptions.positionInfo = positionInfo ; cfOptions.localInfo = localInfo ; cfOptions.strictNameCheck = strictNameCheck ; cfOptions.optimize = optimize ; cfOptions.optimizeListFile = optimizeListFile ; cfOptions.dontOptimizeListFile = dontOptimizeListFile ; cfOptions.statistics = statistics ; cfOptions.warn = com.android.dx.command.DxConsole.err ; dexOptions = new com.android.dx.dex.DexOptions ( ) ; dexOptions.forceJumbo = forceJumbo ; }
public void test_getLocalSocketAddress_unbound ( ) throws java.lang.Exception { int portNumber = tests.support.Support_PortManager.getNextPortForUDP ( ) ; java.net.InetSocketAddress localAddress1 = new java.net.InetSocketAddress ( java.net.InetAddress.getLocalHost ( ) , portNumber ) ; java.net.DatagramSocket s = new java.net.DatagramSocket ( localAddress1 ) ; assertEquals ( localAddress1 , s.getLocalSocketAddress ( ) ) ; s.close ( ) ; java.net.InetSocketAddress remoteAddress = ( ( java.net.InetSocketAddress ) ( s.getRemoteSocketAddress ( ) ) ) ; assertNull ( remoteAddress ) ; }
public void run ( ) { handleApplicationWtfInner ( callingUid , callingPid , app , tag , crashInfo ) ; }
public java.lang.String getIanaVersion ( ) { try ( java.io.Reader reader = xmlSource.get ( ) ) { org.xmlpull.v1.XmlPullParserFactory xmlPullParserFactory = org.xmlpull.v1.XmlPullParserFactory.newInstance ( ) ; xmlPullParserFactory.setNamespaceAware ( false ) ; org.xmlpull.v1.XmlPullParser parser = xmlPullParserFactory.newPullParser ( ) ; parser.setInput ( reader ) ; libcore.util.TimeZoneFinder.findRequiredStartTag ( parser , libcore.util.TimeZoneFinder.TIMEZONES_ELEMENT ) ; return parser.getAttributeValue ( null , libcore.util.TimeZoneFinder.IANA_VERSION_ATTRIBUTE ) ; } catch ( org.xmlpull.v1.XmlPullParserException | java.io.IOException e ) { return null ; } }
private java.lang.String format ( long number , android.icu.text.NFRuleSet ruleSet ) { java.lang.StringBuffer result = new java.lang.StringBuffer ( ) ; ruleSet.format ( number , result , 0 ) ; postProcess ( result , ruleSet ) ; return result.toString ( ) ; }
public void testAbiOnlyWithMatch ( ) { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getUniversalOutput ( ) ) ; list.add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest.getAbiOutput ( "foo" ) ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getAbiOutput ( "bar" ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "foo" ) ; assertEquals ( match , result ) ; }
public void testTelephonyFeatures ( ) { int phoneType = mTelephonyManager.getPhoneType ( ) ; switch ( phoneType ) { case android.telephony.TelephonyManager.PHONE_TYPE_GSM : assertAvailable ( PackageManager.FEATURE_TELEPHONY ) ; assertAvailable ( PackageManager.FEATURE_TELEPHONY_GSM ) ; break ; case android.telephony.TelephonyManager.PHONE_TYPE_CDMA : assertAvailable ( PackageManager.FEATURE_TELEPHONY ) ; assertAvailable ( PackageManager.FEATURE_TELEPHONY_CDMA ) ; break ; case android.telephony.TelephonyManager.PHONE_TYPE_NONE : assertNotAvailable ( PackageManager.FEATURE_TELEPHONY ) ; assertNotAvailable ( PackageManager.FEATURE_TELEPHONY_CDMA ) ; assertNotAvailable ( PackageManager.FEATURE_TELEPHONY_GSM ) ; break ; default : throw new java.lang.IllegalArgumentException ( ( "Did you add a new phone type? " + phoneType ) ) ; } }
public java.lang.String [ ] getIsimPcscf ( ) throws android.os.RemoteException { com.android.internal.telephony.Phone phone = getPhone ( getDefaultSubscription ( ) ) ; mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE , "Requires READ_PRIVILEGED_PHONE_STATE" ) ; com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords ( ) ; if ( isim != null ) { return isim.getIsimPcscf ( ) ; } else { return null ; } }
public java.lang.String toString ( ) { return com.google.common.base.Objects.toStringHelper ( this ) . add ( "hitCount" , hitCount ) . add ( "missCount" , missCount ) . add ( "loadSuccessCount" , loadSuccessCount ) . add ( "loadExceptionCount" , loadExceptionCount ) . add ( "totalLoadTime" , totalLoadTime ) . add ( "evictionCount" , evictionCount ) . toString ( ) ; }
protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; com.android.cts.verifier.TestListAdapter adapter = new com.android.cts.verifier.TestListAdapter ( this ) ; setListAdapter ( adapter ) ; com.android.cts.verifier.TestListActivity.TestResultContentObserver observer = new com.android.cts.verifier.TestListActivity.TestResultContentObserver ( adapter ) ; android.content.ContentResolver resolver = getContentResolver ( ) ; resolver.registerContentObserver ( TestResultsProvider.CONTENT_URI , true , observer ) ; }
public void checkServerTrusted ( java.security.cert.X509Certificate [ ] chain , java.lang.String authType , java.net.Socket socket ) throws java.security.cert.CertificateException { javax.net.ssl.SSLSession session = null ; javax.net.ssl.SSLParameters parameters = null ; if ( socket instanceof javax.net.ssl.SSLSocket ) { javax.net.ssl.SSLSocket sslSocket = ( ( javax.net.ssl.SSLSocket ) ( socket ) ) ; session = org.conscrypt.TrustManagerImpl.getHandshakeSessionOrThrow ( sslSocket ) ; parameters = sslSocket.getSSLParameters ( ) ; } checkTrusted ( chain , authType , session , parameters , false ) ; }
int getBuildApi ( ) { if ( ( project ) == null ) { return - 1 ; } com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo manifest = com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo.get ( project ) ; return manifest.getMinSdkVersion ( ) ; }
public void testAesCbcHmacMd5Tcp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth ) ; }
public java.nio.ByteBuffer putShort ( int index , short value ) { checkNotFreed ( ) ; if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } checkIndex ( index , SizeOf.SHORT ) ; this . block.pokeShort ( ( ( offset ) + index ) , value , order ) ; return this ; }
public boolean isMultipleAdvertisementSupported ( ) { if ( ( getState ( ) ) != ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) return false ; try { return mService.isMultiAdvertisementSupported ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "failed to get isMultipleAdvertisementSupported, error: " , e ) ; } return false ; }
public java.io.FileDescriptor socket ( int domain , int type , int protocol ) throws android.system.ErrnoException { return tagSocket ( os.socket ( domain , type , protocol ) ) ; }
public void testDefaultDisconnectedState ( ) { com.android.bluetooth.hfpclient.HeadsetClientService mockService = mock ( com.android.bluetooth.hfpclient.HeadsetClientService.class ) ; android.media.AudioManager mockAudioManager = mock ( android.media.AudioManager.class ) ; when ( mockService.getSystemService ( Context.AUDIO_SERVICE ) ) . thenReturn ( mockAudioManager ) ; com.android.bluetooth.hfpclient.HeadsetClientStateMachine mockSM = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine ( mockService , getContext ( ) . getMainLooper ( ) ) ; assertEquals ( mockSM.getConnectionState ( ( ( android.bluetooth.BluetoothDevice ) ( null ) ) ) , BluetoothProfile.STATE_DISCONNECTED ) ; }
public com.android.jack.dx.io.instructions.DecodedInstruction decode ( int opcodeUnit , com.android.jack.dx.io.instructions.CodeInput in ) throws java.io.EOFException { int opcode = com.android.jack.dx.io.instructions.InstructionCodec.byte0 ( opcodeUnit ) ; int a = com.android.jack.dx.io.instructions.InstructionCodec.byte1 ( opcodeUnit ) ; long literal = in.readLong ( ) ; return new com.android.jack.dx.io.instructions.OneRegisterDecodedInstruction ( this , opcode , 0 , null , 0 , literal , a ) ; }
private static void assertIdent ( com.android.tools.metalava.doclava1.ApiFile.Tokenizer tokenizer , java.lang.String token ) throws com.android.tools.metalava.doclava1.ApiParseException { if ( ! ( com.android.tools.metalava.doclava1.ApiFile.isident ( token.charAt ( 0 ) ) ) ) { throw new com.android.tools.metalava.doclava1.ApiParseException ( ( "Expected identifier: " + token ) , tokenizer.getLine ( ) ) ; } }
public void onStartRtt ( @ android.support.annotation.NonNull com.android.dialer.simulator.impl.RttTextStream rttTextStream ) { com.android.dialer.common.LogUtil.enterBlock ( "SimulatorConnection.onStartRtt" ) ; onEvent ( new com.android.dialer.simulator.Simulator.Event ( com.android.dialer.simulator.Simulator.Event.START_RTT ) ) ; }
private void refreshSimBadInfo ( ) { final com.android.internal.telephony.SimCard.State simState = mUpdateMonitor.getSimState ( ) ; if ( simState == ( SimCard.State.PUK_REQUIRED ) ) { mHeaderSimBad1.setText ( R.string.lockscreen_sim_puk_locked_message ) ; mHeaderSimBad2.setText ( R.string.lockscreen_sim_puk_locked_instructions ) ; } else if ( simState == ( SimCard.State.ABSENT ) ) { mHeaderSimBad1.setText ( R.string.lockscreen_missing_sim_message ) ; mHeaderSimBad2.setVisibility ( View.GONE ) ; } else { mHeaderSimBad1.setVisibility ( View.GONE ) ; mHeaderSimBad2.setVisibility ( View.GONE ) ; } }
public void enter ( ) { if ( ! ( configureIfaceIp ( true ) ) ) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_IFACE_CFG_ERROR ; return ; } try { mNMService.tetherInterface ( mIfaceName ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , ( "Error Tethering: " + ( e.toString ( ) ) ) ) ; mLastError = android.net.ConnectivityManager.TETHER_ERROR_TETHER_IFACE_ERROR ; return ; } if ( ! ( mIPv6TetherSvc.start ( ) ) ) { android.util.Log.e ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , "Failed to start IPv6TetheringInterfaceServices" ) ; return ; } }
private java.lang.String inputStreamToString ( java.io.InputStream in ) throws java.io.IOException { java.io.BufferedReader r = new java.io.BufferedReader ( new java.io.InputStreamReader ( in , java.nio.charset.StandardCharsets.UTF_8 ) ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; java.lang.String str = null ; while ( ( str = r.readLine ( ) ) != null ) { sb.append ( str ) ; } return sb.toString ( ) ; }
public void testEmptyGeneration ( ) { final java.lang.String expectedOutput = "<?xml version='1.0' encoding='UTF-8' ?>" + ( ( ( "<testsuite name=\"test\" tests=\"0\" failures=\"0\" errors=\"0\" time=\"1\" " + "timestamp=\"ignore\" hostname=\"localhost\"> " ) + "<properties />" ) + "</testsuite>" ) ; mResultReporter.testRunStarted ( "test" , 1 ) ; mResultReporter.testRunEnded ( 1 , java.util.Collections.< java.lang.String , java.lang.String > emptyMap ( ) ) ; assertEquals ( expectedOutput , getOutput ( ) ) ; }
public void testWificondExistsOnStartup ( ) throws java.lang.Exception { when ( mWifiInjector.makeWificond ( ) ) . thenReturn ( mWificond ) ; com.android.server.wifi.WifiStateMachinePrime testWifiStateMachinePrime = new com.android.server.wifi.WifiStateMachinePrime ( mWifiInjector , mLooper.getLooper ( ) ) ; verify ( mWificond ) . tearDownInterfaces ( ) ; }
public static synchronized java.util.List < java.security.Provider > getProvidersList ( ) { return new java.util.ArrayList < java.security.Provider > ( org.apache.harmony.security.fortress.Services.providers ) ; }
protected void setKernelData ( int targetLayer , com.android.rs.test.BlurStack blurStack ) { com.android.rs.test.d1new.KernelDataForRenderScriptd1new kernelData = new com.android.rs.test.d1new.KernelDataForRenderScriptd1new ( targetLayer , blurStack , renderScript ) ; if ( ( com.android.rs.test.d1new.RefocusFilterd1new.ENABLE_FAST_FILTER ) && ( ( kernelData.minDiskRadius ) > ( com.android.rs.test.d1new.RefocusFilterd1new.MIN_DISC_RADIUS_FOR_FAST_FILTER ) ) ) { useFastFilterForCurrentLayer = true ; } else { useFastFilterForCurrentLayer = false ; } scriptC.set_g_kernel_stack ( kernelData.stackAllocation ) ; scriptC.set_galloc_kernel_info ( kernelData.infoAllocation ) ; }
public void testMultiFilterWithNoMatch ( ) { java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getOutput ( 320 , "zzz" ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getOutput ( 160 , "bar" ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getOutput ( 320 , "foo" ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "zzz" ) ; assertNull ( result ) ; }
public java.util.ListIterator < java.util.Map.Entry < K , V > > listIterator ( int index ) { return new com.google.common.collect.TransformedListIterator < com.google.common.collect.LinkedListMultimap.Node < K , V > , java.util.Map.Entry < K , V > > ( new NodeIterator ( index ) ) { @ java.lang.Override java.util.Map.Entry < K , V > transform ( com.google.common.collect.LinkedListMultimap.Node < K , V > node ) { return com.google.common.collect.LinkedListMultimap.createEntry ( node ) ; } } ; }
public java.util.List < java.security.cert.X509Certificate > checkServerTrusted ( java.security.cert.X509Certificate [ ] certs , java.lang.String authType , java.lang.String hostname ) throws java.security.cert.CertificateException { android.security.net.config.NetworkSecurityConfig config = mConfig.getConfigForHostname ( hostname ) ; return config.getTrustManager ( ) . checkServerTrusted ( certs , authType , hostname ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mWifiManager = ( ( android.net.wifi.WifiManager ) ( getContext ( ) . getSystemService ( Context.WIFI_SERVICE ) ) ) ; }
public void handleChangedNonJavaFile ( org.eclipse.core.resources.IFolder currentSourceFolder , org.eclipse.core.resources.IFile file , int kind ) { java.lang.String ext = file.getFileExtension ( ) ; if ( AndroidConstants.EXT_AIDL.equalsIgnoreCase ( ext ) ) { com.android.ide.eclipse.adt.internal.build.AidlGenerator.AidlType type = com.android.ide.eclipse.adt.internal.build.AidlGenerator.getAidlType ( file ) ; if ( type == ( com.android.ide.eclipse.adt.internal.build.AidlGenerator.AidlType.INTERFACE ) ) { if ( kind == ( org.eclipse.core.resources.IResourceDelta.REMOVED ) ) { addFileToRemove ( currentSourceFolder , file ) ; } else if ( ( getForceCompile ( ) ) == false ) { addFileToCompile ( currentSourceFolder , file ) ; } } else { setForceCompile ( ) ; } } }
public java.lang.String unprefix ( java.lang.String typeName ) { if ( ( ( prefix.length ( ) ) == 0 ) || ( ! ( typeName.startsWith ( prefix ) ) ) ) { return typeName ; } return typeName.substring ( prefix.length ( ) ) ; }
public void setHorizontalScrollbarOverlay ( final boolean overlay ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { setHorizontalScrollbarOverlay ( overlay ) ; } } ) ; return ; } mAwContents.setHorizontalScrollbarOverlay ( overlay ) ; }
public void getIccSlotsStatus ( android.os.Message result ) { if ( ( mIccSlotStatus ) != null ) { resultSuccess ( result , mIccSlotStatus ) ; } else { resultFail ( result , null , new java.lang.RuntimeException ( "IccSlotStatus not set" ) ) ; } }
public void onCallListChange ( com.android.incallui.call.CallList callList ) { }
public void dup2 ( ) { super . dup2 ( ) ; producerPop ( ) ; producerPop ( ) ; producerPush ( ) ; producerPush ( ) ; producerPush ( ) ; producerPush ( ) ; }
public static < K extends java.lang.Comparable < ? super K > , V > com.google.common.collect.ImmutableSortedMap < K , V > of ( K k1 , V v1 , K k2 , V v2 ) { return new com.google.common.collect.ImmutableSortedMap.Builder < K , V > ( com.google.common.collect.Ordering.natural ( ) ) . put ( k1 , v1 ) . put ( k2 , v2 ) . build ( ) ; }
public void setBackgroundColor ( final int color ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { org.chromium.base.ThreadUtils.postOnUiThread ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { setBackgroundColor ( color ) ; } } ) ; return ; } mAwContents.setBackgroundColor ( color ) ; }
public static android.nfc.NdefRecord newMimeRecord ( java.lang.String type , byte [ ] data ) { com.google.common.base.Preconditions.checkNotNull ( type ) ; com.google.common.base.Preconditions.checkNotNull ( data ) ; byte [ ] typeBytes = type.getBytes ( Charsets.US_ASCII ) ; return new android.nfc.NdefRecord ( android.nfc.NdefRecord.TNF_MIME_MEDIA , typeBytes , new byte [ 0 ] , data ) ; }
public void testAccessAdapter ( ) { mGridView = new android.widget.GridView ( mActivity ) ; android.widget.cts.GridViewTest.ImageAdapter adapter = new android.widget.cts.GridViewTest.ImageAdapter ( mActivity ) ; mGridView.setAdapter ( adapter ) ; assertSame ( adapter , mGridView.getAdapter ( ) ) ; mGridView.setAdapter ( null ) ; assertNull ( mGridView.getAdapter ( ) ) ; }
private com.android.ims.internal.IImsRcsFeature createRcsFeatureInternal ( int slotId , com.android.ims.internal.IImsFeatureStatusCallback c ) { android.telephony.ims.feature.RcsFeature f = onCreateRcsFeature ( slotId ) ; if ( f != null ) { setupFeature ( f , slotId , ImsFeature.RCS , c ) ; return f.getBinder ( ) ; } else { return null ; } }
private int getMonitorDpi ( ) { if ( ( mSettingsController ) != null ) { com.android.sdkuilib.internal.widgets.AvdStartDialog.sMonitorDpi = mSettingsController.getMonitorDensity ( ) ; } if ( ( com.android.sdkuilib.internal.widgets.AvdStartDialog.sMonitorDpi ) == ( - 1 ) ) { com.android.sdkuilib.internal.widgets.AvdStartDialog.sMonitorDpi = java.awt.Toolkit.getDefaultToolkit ( ) . getScreenResolution ( ) ; } return com.android.sdkuilib.internal.widgets.AvdStartDialog.sMonitorDpi ; }
public static void testSendCmasPresAlert ( android.app.Activity activity , int messageId ) { android.telephony.SmsCbMessage cbMessage = com.android.cellbroadcastreceiver.tests.SendCdmaCmasMessages.createCmasSmsMessage ( SmsEnvelope.SERVICE_CATEGORY_CMAS_PRESIDENTIAL_LEVEL_ALERT , messageId , "en" , com.android.cellbroadcastreceiver.tests.SendCdmaCmasMessages.PRES_ALERT , SmsCbCmasInfo.CMAS_CATEGORY_GEO , SmsCbCmasInfo.CMAS_RESPONSE_TYPE_PREPARE , SmsCbCmasInfo.CMAS_SEVERITY_EXTREME , SmsCbCmasInfo.CMAS_URGENCY_EXPECTED , SmsCbCmasInfo.CMAS_CERTAINTY_LIKELY ) ; android.content.Intent intent = new android.content.Intent ( Telephony.Sms.Intents.SMS_EMERGENCY_CB_RECEIVED_ACTION ) ; intent.putExtra ( "message" , cbMessage ) ; activity.sendOrderedBroadcastAsUser ( intent , UserHandle.ALL , Manifest.permission.RECEIVE_EMERGENCY_BROADCAST , AppOpsManager.OP_RECEIVE_EMERGECY_SMS , null , null , Activity.RESULT_OK , null , null ) ; }
public com.android.ide.eclipse.adt.editors.layout.gscripts.Point getCenter ( ) { return new com.android.ide.eclipse.adt.editors.layout.gscripts.Point ( ( ( x ) + ( ( w ) > 0 ? ( w ) / 2 : 0 ) ) , ( ( y ) + ( ( h ) > 0 ? ( h ) / 2 : 0 ) ) ) ; }
private void checkFormatCall ( com.android.tools.lint.detector.api.JavaContext context , lombok.ast.MethodInvocation node ) { org.w3c.dom.Node current = node.getParent ( ) ; while ( ( ( current != null ) && ( ! ( current instanceof lombok.ast.MethodDeclaration ) ) ) && ( ! ( current instanceof lombok.ast.ConstructorDeclaration ) ) ) { current = current.getParent ( ) ; } if ( current != null ) { checkStringFormatCall ( context , current , node ) ; } }
public com.google.common.base.Optional < com.android.manifmerger.XmlDocument > merge ( com.android.manifmerger.XmlDocument lowerPriorityDocument , com.android.manifmerger.MergingReport.Builder mergingReportBuilder ) { mergingReportBuilder.getActionRecorder ( ) . recordDefaultNodeAction ( getRootNode ( ) ) ; getRootNode ( ) . mergeWithLowerPriorityNode ( lowerPriorityDocument.getRootNode ( ) , mergingReportBuilder ) ; return com.google.common.base.Optional.of ( new com.android.manifmerger.XmlDocument ( mPositionXmlParser , mSourceLocation , mRootElement ) ) ; }
private static boolean isBatteryPower ( ) { if ( ( org.chromium.base.PowerMonitor.sInstance ) == null ) org.chromium.base.PowerMonitor.create ( ) ; return org.chromium.base.PowerMonitor.sInstance.mIsBatteryPower ; }
private synchronized void addMediaPlayerInfo ( com.android.bluetooth.avrcp.MediaPlayerInfo info ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.d ( com.android.bluetooth.avrcp.Avrcp.TAG , info.toString ( ) ) ; ( mLastUsedPlayerID ) ++ ; mMediaPlayerInfoList.put ( mLastUsedPlayerID , info ) ; }
public void setTarget ( @ com.android.annotations.NonNull java.lang.String target ) { mTarget = mSdkParser.resolveTarget ( target , mLogger ) ; if ( ( mTarget ) == null ) { throw new java.lang.RuntimeException ( ( "Unknown target: " + target ) ) ; } }
public static void startMethodTracing ( java.lang.String traceFileName , java.io.FileDescriptor fd , int bufferSize , int flags ) { if ( ( traceFileName == null ) || ( fd == null ) ) { throw new java.lang.NullPointerException ( ) ; } dalvik.system.VMDebug.startMethodTracingNative ( traceFileName , fd , bufferSize , flags ) ; }
public void nulledAddedDiffedFieldValues ( ) { com.android.ahat.heapdump.FieldValue nulled = new com.android.ahat.heapdump.FieldValue ( "name" , "type" , null ) ; com.android.ahat.heapdump.DiffedFieldValue x = com.android.ahat.heapdump.DiffedFieldValue.added ( nulled ) ; org.junit.Assert.assertEquals ( "name" , x.name ) ; org.junit.Assert.assertEquals ( "type" , x.type ) ; org.junit.Assert.assertNull ( x.current ) ; org.junit.Assert.assertEquals ( DiffedFieldValue.Status.ADDED , x.status ) ; }
public boolean setCurrentInputMethodSubtype ( android.view.inputmethod.InputMethodSubtype subtype ) { synchronized ( mH ) { try { return mService.setCurrentInputMethodSubtype ( subtype ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.view.inputmethod.InputMethodManager.TAG , ( "IME died: " + ( mCurId ) ) , e ) ; return false ; } } }
public java.lang.String createNetworkSpecifier ( @ android.net.wifi.aware.WifiAwareManager.DataPathRole int role , @ android.annotation.Nullable byte [ ] peer , @ android.annotation.Nullable byte [ ] token ) { android.net.wifi.aware.WifiAwareManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.e ( android.net.wifi.aware.WifiAwareSession.TAG , "createNetworkSpecifier: called post GC on WifiAwareManager" ) ; return "" ; } if ( mTerminated ) { android.util.Log.e ( android.net.wifi.aware.WifiAwareSession.TAG , "createNetworkSpecifier: called after termination" ) ; return "" ; } return mgr.createNetworkSpecifier ( mClientId , role , peer , token ) ; }
public java.lang.Object [ ] getTestObjects ( ) { java.util.Locale [ ] locales = com.ibm.icu.dev.test.serializable.SerializableTest.getLocales ( ) ; com.ibm.icu.text.DateFormat [ ] formats = new com.ibm.icu.text.DateFormat [ locales.length ] ; for ( int i = 0 ; i < ( locales.length ) ; i += 1 ) { com.ibm.icu.util.ULocale uloc = com.ibm.icu.util.ULocale.forLocale ( locales [ i ] ) ; formats [ i ] = com.ibm.icu.dev.test.serializable.FormatTests.getCannedSimpleDateFormat ( ( ( java.lang.String ) ( com.ibm.icu.dev.test.serializable.FormatTests.DateFormatHandler.cannedPatterns.get ( uloc.toString ( ) ) ) ) , uloc ) ; } return formats ; }
private int getDexoptNeeded ( java.lang.String path , java.lang.String isa , java.lang.String compilerFilter , boolean newProfile ) { int dexoptNeeded ; try { dexoptNeeded = dalvik.system.DexFile.getDexOptNeeded ( path , isa , compilerFilter , newProfile ) ; } catch ( java.io.IOException ioe ) { android.util.Slog.w ( com.android.server.pm.PackageDexOptimizer.TAG , ( "IOException reading apk: " + path ) , ioe ) ; return com.android.server.pm.PackageDexOptimizer.DEX_OPT_FAILED ; } return adjustDexoptNeeded ( dexoptNeeded ) ; }
public void test_formatStyle ( java.time.temporal.Temporal temporal , java.time.format.FormatStyle style , java.lang.String formattedStr ) { java.time.format.DateTimeFormatterBuilder builder = new java.time.format.DateTimeFormatterBuilder ( ) ; java.time.format.DateTimeFormatter formatter = builder.appendLocalized ( style , style ) . appendLiteral ( " " ) . appendZoneOrOffsetId ( ) . toFormatter ( ) ; formatter = formatter.withLocale ( java.util.Locale.US ) ; org.testng.Assert.assertEquals ( formatter.format ( temporal ) , formattedStr ) ; }
final void cleanUpActivityServicesLocked ( com.android.server.am.ActivityRecord r ) { if ( ( r.connections ) != null ) { java.util.Iterator < com.android.server.am.ConnectionRecord > it = r.connections.iterator ( ) ; while ( it.hasNext ( ) ) { com.android.server.am.ConnectionRecord c = it.next ( ) ; mService.removeConnectionLocked ( c , null , r ) ; } r.connections = null ; } }
private com.android.ide.common.blame.SourceFragmentPositionRange parseLineNumber ( java.lang.String lineNumberAsText ) throws com.android.ide.common.blame.parser.ParsingFailedException { int lineNumber = - 1 ; if ( lineNumberAsText != null ) { try { lineNumber = java.lang.Integer.parseInt ( lineNumberAsText ) ; } catch ( java.lang.NumberFormatException e ) { throw new com.android.ide.common.blame.parser.ParsingFailedException ( ) ; } } return new com.android.ide.common.blame.SourceFragmentPositionRange ( lineNumber , ( - 1 ) , ( - 1 ) ) ; }
private static void finishAnnotationValueInit ( ) { int depth = 0 ; while ( ( com.google.doclava.Converter.mAnnotationValuesNeedingInit.size ( ) ) > 0 ) { java.util.HashSet < com.google.doclava.AnnotationValue > set = com.google.doclava.Converter.mAnnotationValuesNeedingInit ; com.google.doclava.Converter.mAnnotationValuesNeedingInit = new java.util.HashSet < com.google.doclava.AnnotationValue > ( ) ; for ( com.google.doclava.AnnotationValue o : set ) { com.google.doclava.AnnotationValueInfo v = com.google.doclava.Converter.mAnnotationValues.get ( o ) ; com.google.doclava.Converter.initAnnotationValue ( o , v ) ; } depth ++ ; } com.google.doclava.Converter.mAnnotationValuesNeedingInit = null ; }
public void getIccCardStatus ( android.os.Message result ) { if ( ( mIccCardStatus ) != null ) { resultSuccess ( result , mIccCardStatus ) ; } else { resultFail ( result , null , new java.lang.RuntimeException ( "IccCardStatus not set" ) ) ; } }
public boolean parse3339 ( java.lang.String s ) { if ( s == null ) { throw new java.lang.NullPointerException ( "time string is null" ) ; } if ( nativeParse3339 ( s ) ) { timezone = android.text.format.Time.TIMEZONE_UTC ; return true ; } return false ; }
byte [ ] getIncomingSmsFingerprint ( ) { java.io.ByteArrayOutputStream output = new java.io.ByteArrayOutputStream ( ) ; output.write ( mEnvelope.teleService ) ; output.write ( mEnvelope.origAddress.origBytes , 0 , mEnvelope.origAddress.origBytes.length ) ; output.write ( mEnvelope.bearerData , 0 , mEnvelope.bearerData.length ) ; return output.toByteArray ( ) ; }
public static void computeFract ( android.renderscript.cts.TestFract.ArgumentsFloatFloatFloat args ) { args.ulf = 4 ; args.ulfRelaxed = 12 ; args.outFloor = ( ( float ) ( java.lang.StrictMath.floor ( args.inV ) ) ) ; args.out = ( ( float ) ( java.lang.StrictMath.min ( ( ( args.inV ) - ( args.outFloor ) ) , 0.99999994F ) ) ) ; }
public void terminateSession ( int sessionId ) { com.android.server.wifi.nan.WifiNanSessionState session = mSessions.get ( sessionId ) ; if ( session == null ) { android.util.Log.e ( com.android.server.wifi.nan.WifiNanClientState.TAG , ( "terminateSession: sessionId doesn't exist - " + sessionId ) ) ; return ; } session.terminate ( ) ; mSessions.delete ( sessionId ) ; }
private static java.lang.Class < ? > getProxyClass ( ) throws java.lang.Exception { if ( ( art.Test910.proxyClass ) != null ) { return art.Test910.proxyClass ; } art.Test910.proxyClass = java.lang.reflect.Proxy.getProxyClass ( art.Main.class . getClassLoader ( ) , new java.lang.Class [ ] { java.lang.Runnable.class } ) ; return art.Test910.proxyClass ; }
private void clear ( ) { synchronized ( mLock ) { mConnectionEventList.clear ( ) ; if ( ( mCurrentConnectionEvent ) != null ) { mConnectionEventList.add ( mCurrentConnectionEvent ) ; } mScanReturnEntries.clear ( ) ; mWifiSystemStateEntries.clear ( ) ; mRecordStartTimeSec = ( mClock.getElapsedSinceBootMillis ( ) ) / 1000 ; mRssiPollCounts.clear ( ) ; mWifiAlertReasonCounts.clear ( ) ; mWifiScoreCounts.clear ( ) ; mWifiLogProto.clear ( ) ; } }
public org.bouncycastle.math.ec.ECFieldElement subtract ( org.bouncycastle.math.ec.ECFieldElement b ) { java.math.BigInteger x2 = b.toBigInteger ( ) ; java.math.BigInteger x3 = x.subtract ( x2 ) ; if ( ( x3.signum ( ) ) < 0 ) { x3 = x3.add ( q ) ; } return new org.bouncycastle.math.ec.ECFieldElement.Fp ( q , r , x3 ) ; }
public void testEmptyIterator ( ) { java.util.TreeSet q = new java.util.TreeSet ( ) ; int i = 0 ; java.util.Iterator it = q.iterator ( ) ; while ( it.hasNext ( ) ) { assertTrue ( q.contains ( it.next ( ) ) ) ; ++ i ; } assertEquals ( 0 , i ) ; }
public int getCurrentTtyMode ( java.lang.String callingPackage ) { try { com.android.server.telecom.Log.startSession ( "TSI.gCTM" ) ; if ( ! ( canReadPhoneState ( callingPackage , "getCurrentTtyMode" ) ) ) { return android.telecom.TelecomManager.TTY_MODE_OFF ; } synchronized ( mLock ) { return mCallsManager.getCurrentTtyMode ( ) ; } } finally { com.android.server.telecom.Log.endSession ( ) ; } }
public void bouncyCastle ( ) throws java.lang.Exception { java.io.File bouncyCastleJack = com.android.jack.TestTools.createTempFile ( "bouncyjack" , ".zip" ) ; com.android.jack.TestTools.compileSourceToJack ( new com.android.jack.Options ( ) , com.android.jack.ToolchainTest.BOUNCY_SOURCELIST , com.android.jack.ToolchainTest.corePath.getAbsolutePath ( ) , bouncyCastleJack , true ) ; java.io.File bouncyCastle = com.android.jack.TestTools.createTempFile ( "bouncy" , ".dex" ) ; com.android.jack.TestTools.compileJackToDex ( new com.android.jack.Options ( ) , bouncyCastleJack , bouncyCastle , false ) ; }
private com.android.ims.ImsCall createNewCall ( com.android.ims.internal.ImsCallSession session , com.android.ims.ImsCallProfile profile ) { com.android.ims.ImsCall call = new com.android.ims.ImsCall ( mContext , profile ) ; try { call.attachSession ( session ) ; } catch ( com.android.ims.ImsException e ) { if ( call != null ) { call.close ( ) ; call = null ; } } return call ; }
private void logNudFailed ( android.net.LinkProperties.ProvisioningChange delta ) { long duration = ( android.os.SystemClock.elapsedRealtime ( ) ) - ( mLastProbeTimeMs ) ; boolean isFromProbe = duration < ( android.net.ip.IpReachabilityMonitor.getProbeWakeLockDuration ( ) ) ; boolean isProvisioningLost = delta == ( android.net.LinkProperties.ProvisioningChange.LOST_PROVISIONING ) ; int eventType = android.net.metrics.IpReachabilityEvent.nudFailureEventType ( isFromProbe , isProvisioningLost ) ; mMetricsLog.log ( new android.net.metrics.IpReachabilityEvent ( mInterfaceName , eventType ) ) ; }
public void execute ( java.lang.String programName ) { executionResult = executeCommandWithTimeout ( constructCommand ( programName ) , true ) ; }
public static < T > java.util.Iterator < T > consumingIterator ( final java.util.Iterator < T > iterator ) { com.google.common.base.Preconditions.checkNotNull ( iterator ) ; return new com.google.common.collect.UnmodifiableIterator < T > ( ) { @ java.lang.Override public boolean hasNext ( ) { return iterator.hasNext ( ) ; } @ java.lang.Override public T next ( ) { T next = iterator.next ( ) ; iterator.remove ( ) ; return next ; } } ; }
protected boolean start ( ) { if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , "start()" ) ; initializeNative ( ) ; mAppOps = getSystemService ( android.app.AppOpsManager.class ) ; mAdvertiseManager = new com.android.bluetooth.gatt.AdvertiseManager ( this , com.android.bluetooth.btservice.AdapterService.getAdapterService ( ) ) ; mAdvertiseManager.start ( ) ; mScanManager = new com.android.bluetooth.gatt.ScanManager ( this ) ; mScanManager.start ( ) ; return true ; }
public void testNoResolveEntries ( ) { org.mockito.Mockito.when ( mPackageManager.queryIntentServicesAsUser ( org.mockito.Matchers.any ( android.content.Intent.class ) , org.mockito.Matchers.anyInt ( ) , org.mockito.Matchers.anyInt ( ) ) ) . thenReturn ( java.util.Collections.emptyList ( ) ) ; mFilter.startFilterLookup ( mCall , mCallback ) ; org.mockito.Mockito.verify ( mCallback ) . onCallFilteringComplete ( org.mockito.Matchers.eq ( mCall ) , org.mockito.Matchers.eq ( com.android.server.telecom.tests.CallScreeningServiceFilterTest.PASS_RESULT ) ) ; }
public java.lang.String toString ( ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; if ( ( ownerType ) != null ) { builder.append ( com.google.common.reflect.Types.toString ( ownerType ) ) . append ( '.' ) ; } builder.append ( rawType.getName ( ) ) . append ( '<' ) . append ( com.google.common.reflect.Types.COMMA_JOINER.join ( com.google.common.collect.Iterables.transform ( argumentsList , com.google.common.reflect.Types.TYPE_TO_STRING ) ) ) . append ( '>' ) ; return builder.toString ( ) ; }
public android.webkit.WebBackForwardList copyBackForwardList ( ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { android.webkit.WebBackForwardList ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < android.webkit.WebBackForwardList > ( ) { @ java.lang.Override public android.webkit.WebBackForwardList call ( ) { return copyBackForwardList ( ) ; } } ) ; return ret ; } return new com.android.webview.chromium.WebBackForwardListChromium ( mAwContents.getNavigationHistory ( ) ) ; }
public static com.android.sdklib.repository.descriptors.IPkgDesc newTool ( @ com.android.annotations.NonNull final com.android.sdklib.repository.FullRevision revision , @ com.android.annotations.NonNull final com.android.sdklib.repository.FullRevision minPlatformToolsRev ) { return new com.android.sdklib.repository.descriptors.PkgDesc ( ) { @ java.lang.Override public com.android.sdklib.repository.descriptors.PkgType getType ( ) { return PkgType.PKG_TOOLS ; } @ java.lang.Override public com.android.sdklib.repository.FullRevision getFullRevision ( ) { return revision ; } @ java.lang.Override public com.android.sdklib.repository.FullRevision getMinPlatformToolsRev ( ) { return minPlatformToolsRev ; } } ; }
synchronized void nScriptSetVarJ ( long id , int slot , long val ) { validate ( ) ; rsnScriptSetVarJ ( mContext , id , slot , val ) ; }
public com.android.sdklib.devices.Device build ( ) { if ( ( mSoftware.size ( ) ) <= 0 ) { throw generateBuildException ( "Device software not configured" ) ; } else if ( ( mState.size ( ) ) <= 0 ) { throw generateBuildException ( "Device states not configured" ) ; } if ( ( mMeta ) == null ) { mMeta = new com.android.sdklib.devices.Meta ( ) ; } for ( com.android.sdklib.devices.State s : mState ) { if ( s.mDefaultState ) { mDefaultState = s ; break ; } } return new com.android.sdklib.devices.Device ( this ) ; }
public boolean isInCall ( android.content.Context context ) { if ( com.android.dialer.telecom.TelecomUtil.hasReadPhoneStatePermission ( context ) ) { return com.android.dialer.telecom.TelecomUtil.getTelecomManager ( context ) . isInCall ( ) ; } return false ; }
public void testReadAfterWrite ( ) throws java.lang.Exception { com.android.server.wifi.WifiConfigStoreData writeData = createSingleOpenNetworkStoreData ( ) ; mWifiConfigStore.switchUserStoreAndRead ( mUserStore ) ; mWifiConfigStore.write ( true , writeData ) ; com.android.server.wifi.WifiConfigStoreData readData = mWifiConfigStore.read ( ) ; com.android.server.wifi.WifiConfigStoreDataTest.assertConfigStoreDataEqual ( writeData , readData ) ; }
private void decodeImageBounds ( ) throws android.drm.mobile1.DrmException { com.android.mms.ui.UriImage uriImage = new com.android.mms.ui.UriImage ( mContext , getUriWithDrmCheck ( ) ) ; mWidth = uriImage.getWidth ( ) ; mHeight = uriImage.getHeight ( ) ; if ( com.android.mms.model.ImageModel.LOCAL_LOGV ) { android.util.Log.v ( com.android.mms.model.ImageModel.TAG , ( ( ( "Image bounds: " + ( mWidth ) ) + "x" ) + ( mHeight ) ) ) ; } }
public synchronized void onAcceptFailed ( ) { mServerSockets = null ; if ( ( ( ! ( mInterrupted ) ) && ( ( mAdapter ) != null ) ) && ( mAdapter.isEnabled ( ) ) ) { startSocketListeners ( ) ; } }
public void worked ( int work ) { }
public java.lang.String getImsi ( ) { return mImsi ; }
public void registerMediaButtonIntent ( android.app.PendingIntent pi , android.content.ComponentName eventReceiver ) { if ( pi == null ) { android.util.Log.e ( android.media.AudioManager.TAG , "Cannot call registerMediaButtonIntent() with a null parameter" ) ; return ; } android.media.session.MediaSessionLegacyHelper helper = android.media.session.MediaSessionLegacyHelper.getHelper ( getContext ( ) ) ; helper.addMediaButtonListener ( pi , eventReceiver , getContext ( ) ) ; }
protected void configureShell ( org.eclipse.swt.widgets.Shell shell ) { super . configureShell ( shell ) ; shell.setText ( ( "Traceview: " + ( mTraceName ) ) ) ; java.io.InputStream in = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( "icons/traceview128.png" ) ; if ( in != null ) { shell.setImage ( new org.eclipse.swt.graphics.Image ( shell.getDisplay ( ) , in ) ) ; } shell.setBounds ( 100 , 10 , 1282 , 900 ) ; }
public boolean isPaused ( ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { java.lang.Boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return isPaused ( ) ; } } ) ; return ret ; } return mAwContents.isPaused ( ) ; }
public void testFailures ( ) { assertEquals ( false , rq.checkAndSet ( "" , config ) ) ; assertEquals ( false , rq.checkAndSet ( "rus" , config ) ) ; assertEquals ( false , rq.checkAndSet ( "rUSA" , config ) ) ; assertEquals ( false , rq.checkAndSet ( "abc" , config ) ) ; }
public int acquireDrmInfo ( android.drm.DrmInfoRequest drmInfoRequest ) { if ( ( null == drmInfoRequest ) || ( ! ( drmInfoRequest.isValid ( ) ) ) ) { throw new java.lang.IllegalArgumentException ( "Given drmInfoRequest is invalid/null" ) ; } int result = android.drm.DrmManagerClient.ERROR_UNKNOWN ; if ( null != ( mEventHandler ) ) { android.os.Message msg = mEventHandler.obtainMessage ( android.drm.DrmManagerClient.ACTION_ACQUIRE_DRM_INFO , drmInfoRequest ) ; result = ( mEventHandler.sendMessage ( msg ) ) ? android.drm.DrmManagerClient.ERROR_NONE : result ; } return result ; }
public static com.android.manifmerger.XmlDocument load ( com.android.manifmerger.XmlLoader.SourceLocation sourceLocation , java.lang.String xml ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser ( ) ; org.w3c.dom.Document domDocument = positionXmlParser.parse ( xml ) ; return domDocument != null ? new com.android.manifmerger.XmlDocument ( positionXmlParser , sourceLocation , domDocument.getDocumentElement ( ) ) : null ; }
public boolean canGoBack ( ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { java.lang.Boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return canGoBack ( ) ; } } ) ; return ret ; } return mAwContents.canGoBack ( ) ; }
private void createGraphvizFile ( java.lang.String countryIso , java.time.Instant startInclusive , java.time.Instant endExclusive , java.lang.String outputFile ) throws java.io.IOException { com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country country = countryMap.get ( countryIso ) ; com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree tree = com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.create ( country , startInclusive , endExclusive ) ; tree.createGraphvizFile ( outputFile ) ; }
public com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE getGroupType ( ) { if ( ( this . getNormalizedVersion ( this . buildSystemFingerprint ) ) != ( this . getNormalizedVersion ( this . buildVendorFingerprint ) ) ) { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.OTA ; } else if ( this . buildVendorFingerprint.endsWith ( "release-keys" ) ) { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.SIGNED ; } else { return com.android.vts.entity.TestSuiteResultEntity.GROUP_TYPE.TOT ; } }
public java.lang.String getName ( ) { return com.android.bluetooth.hid.HidHostService.TAG ; }
public void onGeolocationPermissionsShowPrompt ( java.lang.String origin , android.webkit.GeolocationPermissions.Callback callback ) { org.chromium.content.common.TraceEvent.begin ( ) ; if ( ( mWebChromeClient ) != null ) { if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "onGeolocationPermissionsShowPrompt" ) ; mWebChromeClient.onGeolocationPermissionsShowPrompt ( origin , callback ) ; } org.chromium.content.common.TraceEvent.end ( ) ; }
java.lang.String getSCAddress ( ) { int len ; java.lang.String ret ; len = getByte ( ) ; if ( len == 0 ) { ret = null ; } else { try { ret = android.telephony.PhoneNumberUtils.calledPartyBCDToString ( pdu , cur , len ) ; } catch ( java.lang.RuntimeException tr ) { android.util.Log.d ( com.android.internal.telephony.gsm.SmsMessage.LOG_TAG , "invalid SC address: " , tr ) ; ret = null ; } } cur += len ; return ret ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { synchronized ( mStatsLock ) { shutdownLocked ( ) ; } }
public java.lang.String getIccSimChallengeResponse ( int subId , int appType , java.lang.String data ) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo ( ) ; if ( info == null ) return null ; return info.getIccSimChallengeResponse ( subId , appType , data ) ; } catch ( android.os.RemoteException ex ) { return null ; } catch ( java.lang.NullPointerException ex ) { return null ; } }
private synchronized void onIntrData ( byte reportId , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDeviceService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidDeviceService.TAG , ( "onIntrData(): reportId=" + reportId ) ) ; } java.nio.ByteBuffer bb = java.nio.ByteBuffer.wrap ( data ) ; android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidDeviceService.MESSAGE_INTR_DATA ) ; msg.arg1 = reportId ; msg.obj = bb ; mHandler.sendMessage ( msg ) ; }
public void TestParseNegativeWithAlternativeMinusSign ( ) { com.ibm.icu.text.DecimalFormat parser = ( ( com.ibm.icu.text.DecimalFormat ) ( com.ibm.icu.text.NumberFormat.getInstance ( new com.ibm.icu.util.ULocale ( "en" ) ) ) ) ; try { double value = parser.parse ( "₋0.5" ) . doubleValue ( ) ; assertEquals ( "Expect -0.5" , ( - 0.5 ) , value ) ; } catch ( java.text.ParseException e ) { this . errln ( "Parsing -0.5 should have succeeded." ) ; } }
public void run ( ) { int origX = mWebView.getScrollX ( ) ; int origY = mWebView.getScrollY ( ) ; int half = dimension / 2 ; android.graphics.Rect rect = new android.graphics.Rect ( half , half , ( half + 1 ) , ( half + 1 ) ) ; assertTrue ( mWebView.requestChildRectangleOnScreen ( mWebView , rect , true ) ) ; assertTrue ( ( ( mWebView.getScrollX ( ) ) > origX ) ) ; assertTrue ( ( ( mWebView.getScrollY ( ) ) > origY ) ) ; }
protected void runImpl ( final java.lang.String javaPkgName ) throws com.android.cts.ADBServerNeedRestartException , com.android.cts.DeviceDisconnectedException , java.io.IOException { try { if ( ! ( mTestStop ) ) { com.android.cts.Log.d ( "run in individual mode..." ) ; runInIndividualMode ( javaPkgName ) ; } } catch ( com.android.cts.DeviceDisconnectedException e ) { cleanUp ( ) ; throw e ; } }
public synchronized void closeChannels ( ) { java.util.Collection < com.android.se.Channel > col = mChannels.values ( ) ; com.android.se.Channel [ ] channelList = col.toArray ( new com.android.se.Channel [ col.size ( ) ] ) ; for ( com.android.se.Channel channel : channelList ) { closeChannel ( channel ) ; } }
private void verifyStandardDeviation ( ) throws java.lang.Throwable { android.hardware.cts.helpers.sensorTestOperations.VerifySensorOperation verifyStdDev = new android.hardware.cts.helpers.sensorTestOperations.VerifySensorOperation ( this . getApplicationContext ( ) , android.hardware.Sensor.TYPE_MAGNETIC_FIELD , android.hardware.SensorManager.SENSOR_DELAY_FASTEST , 0 , 100 ) ; verifyStdDev.verifyStandardDeviation ( new float [ ] { 2.0F , 2.0F , 2.0F } ) ; verifyStdDev.execute ( ) ; logSuccess ( ) ; }
public com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneMetadata getMetadataForNonGeographicalRegion ( int countryCallingCode ) { synchronized ( countryCodeToNonGeographicalMetadataMap ) { if ( ! ( countryCodeToNonGeographicalMetadataMap.containsKey ( countryCallingCode ) ) ) { loadMetadataFromFile ( PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY , countryCallingCode ) ; } } return countryCodeToNonGeographicalMetadataMap.get ( countryCallingCode ) ; }
public int hashCode ( ) { if ( ( mValue ) != null ) { return mValue.hashCode ( ) ; } return 0 ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mTelephonyManager = ( ( android.telephony.TelephonyManager ) ( getContext ( ) . getSystemService ( Context.TELEPHONY_SERVICE ) ) ) ; android.telephony.cts.CellInfoTest.mCm = ( ( android.net.ConnectivityManager ) ( getContext ( ) . getSystemService ( Context.CONNECTIVITY_SERVICE ) ) ) ; }
public static void loadAllClasses ( ) { art.Test988.MethodThrownThrough.class . toString ( ) ; art.Test988.MethodEntry.class . toString ( ) ; art.Test988.MethodReturn.class . toString ( ) ; art.Test988.FibResult.class . toString ( ) ; art.Test988.FibThrow.class . toString ( ) ; art.Test988.Printable.class . toString ( ) ; java.util.ArrayList.class . toString ( ) ; art.Test988.RecurOp.class . toString ( ) ; art.Test988.IterOp.class . toString ( ) ; java.lang.StringBuilder.class . toString ( ) ; }
private static void writeGradleSettingsFile ( java.io.File settingsFile , java.util.List < java.lang.String > projectPaths ) { java.lang.StringBuilder contents = new java.lang.StringBuilder ( ) ; for ( java.lang.String path : projectPaths ) { contents.append ( "include '" ) . append ( path ) . append ( "\'\n" ) ; } com.android.ide.eclipse.adt.AdtPlugin.writeFile ( settingsFile , contents.toString ( ) ) ; }
private boolean isNanpaNumberWithNationalPrefix ( ) { return ( ( ( ( currentMetadata.countryCode ) == 1 ) && ( ( nationalNumber.charAt ( 0 ) ) == '1' ) ) && ( ( nationalNumber.charAt ( 1 ) ) != '0' ) ) && ( ( nationalNumber.charAt ( 1 ) ) != '1' ) ; }
public boolean isPossibleShortNumber ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number ) { java.util.List < java.lang.String > regionCodes = getRegionCodesForCountryCode ( number.getCountryCode ( ) ) ; java.lang.String shortNumber = com.google.i18n.phonenumbers.ShortNumberInfo.getNationalSignificantNumber ( number ) ; for ( java.lang.String region : regionCodes ) { com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneMetadata phoneMetadata = com.google.i18n.phonenumbers.MetadataManager.getShortNumberMetadataForRegion ( region ) ; if ( phoneMetadata == null ) { continue ; } if ( matcherApi.matchesPossibleNumber ( shortNumber , phoneMetadata.generalDesc ) ) { return true ; } } return false ; }
public java.lang.String test4SensorPeriod ( ) throws java.lang.Throwable { loadOpenCVSuccessfulOrSkip ( ) ; recordSuccessfulOrSkip ( ) ; analyzeSuccessfulOrSkip ( ) ; java.lang.String message = "Test Sensor Period" ; junit.framework.Assert.assertEquals ( "Sensor sample period stdev." , 0.0 , mReport.sensor_period_stdev , com.android.cts.verifier.sensors.RVCVXCheckTestActivity.Criterion.sensor_period_stdev ) ; return message ; }
private static void checkName ( @ com.android.annotations.NonNull java.lang.String name , @ com.android.annotations.NonNull java.lang.String displayName ) { if ( name.startsWith ( com.android.builder.core.BuilderConstants.ANDROID_TEST ) ) { throw new java.lang.RuntimeException ( java.lang.String.format ( "%1$s names cannot start with '%2$s'" , displayName , com.android.builder.core.BuilderConstants.ANDROID_TEST ) ) ; } if ( name.startsWith ( com.android.builder.core.BuilderConstants.UI_TEST ) ) { throw new java.lang.RuntimeException ( java.lang.String.format ( "%1$s names cannot start with %2$s" , displayName , com.android.builder.core.BuilderConstants.UI_TEST ) ) ; } if ( com.android.builder.core.BuilderConstants.LINT.equals ( name ) ) { throw new java.lang.RuntimeException ( java.lang.String.format ( "%1$s names cannot be %2$s" , displayName , com.android.builder.core.BuilderConstants.LINT ) ) ; } }
public void test8862241 ( ) throws java.lang.Exception { java.util.TimeZone tz = java.util.TimeZone.getTimeZone ( "America/Los_Angeles" ) ; long jan_19_2042 = new java.util.Date ( ( 2042 - 1900 ) , 0 , 19 , 3 , 30 , 15 ) . getTime ( ) ; long oct_4_2046 = new java.util.Date ( ( 2046 - 1900 ) , 9 , 4 , 3 , 30 , 15 ) . getTime ( ) ; assertEquals ( "Jan 19, 2042 – Oct 4, 2046" , formatDateRange ( java.util.Locale.US , tz , jan_19_2042 , oct_4_2046 , ( ( FORMAT_SHOW_DATE ) | ( FORMAT_ABBREV_ALL ) ) ) ) ; }
private static com.android.jack.dx.rop.cst.CstNat createSignature ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { com.android.jack.dx.rop.cst.CstString descriptor = new com.android.jack.dx.rop.cst.CstString ( com.android.jack.backend.dex.rop.RopHelper.formatter.getName ( method ) ) ; com.android.jack.dx.rop.cst.CstNat signature = new com.android.jack.dx.rop.cst.CstNat ( descriptor ) ; return signature ; }
public void testNoActionView ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( "AndroidManifest.xml:5: Warning: App is not indexable by Google Search; consider adding at least one Activity with an ACTION-VIEW intent-filler. See issue explanation for more details. [GoogleAppIndexingWarning]\n" + " <application\n" ) + " ^\n" ) + "0 errors, 1 warnings\n" ) ) , lintProject ( xml ( "AndroidManifest.xml" , ( "" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " package=\"com.example.helloworld\" >\n" ) + "\n" ) + " <application\n" ) + " android:allowBackup=\"true\"\n" ) + " android:icon=\"@mipmap/ic_launcher\"\n" ) + " android:label=\"@string/app_name\"\n" ) + " android:theme=\"@style/AppTheme\" >\n" ) + " <activity\n" ) + " android:name=\".MainActivity\"\n" ) + " android:label=\"@string/app_name\" >\n" ) + " <intent-filter>\n" ) + " <action android:name=\"android.intent.action.MAIN\" />\n" ) + " <category android:name=\"android.intent.category.LAUNCHER\" />\n" ) + " </intent-filter>\n" ) + " </activity>\n" ) + " <meta-data android:name=\"com.google.android.gms.version\" android:value=\"@integer/google_play_services_version\" />" ) + " </application>\n" ) + "\n" ) + "</manifest>\n" ) ) ) ) ) ; }
public void test_setOption ( ) throws java.lang.Exception { java.nio.channels.DatagramChannel dc = java.nio.channels.DatagramChannel.open ( ) ; dc.setOption ( java.net.StandardSocketOptions.SO_SNDBUF , 1024 ) ; assertEquals ( 1024 , ( ( int ) ( dc.getOption ( java.net.StandardSocketOptions.SO_SNDBUF ) ) ) ) ; assertEquals ( 1024 , dc.socket ( ) . getSendBufferSize ( ) ) ; dc.close ( ) ; try { dc.setOption ( java.net.StandardSocketOptions.SO_SNDBUF , 1024 ) ; fail ( ) ; } catch ( java.nio.channels.ClosedChannelException expected ) { } }
private boolean isDeadStatement ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JStatement stmt ) { com.android.jack.cfg.BasicBlockMarker bbm = stmt.getMarker ( com.android.jack.cfg.BasicBlockMarker.class ) ; assert bbm != null ; com.android.jack.cfg.BasicBlock basicBlock = bbm.getBasicBlock ( ) ; return ( ( basicBlock != ( exiBlock ) ) && ( ( blockState [ basicBlock.getId ( ) ] ) != 2 ) ) && ( ! ( basicBlockOfVirtualStmt.contains ( basicBlock ) ) ) ; }
protected boolean cleanup ( ) { if ( ( mStateMachine ) != null ) { mStateMachine.cleanup ( ) ; } com.android.bluetooth.hfp.HeadsetService.clearHeadsetService ( ) ; return true ; }
public void onResume ( ) { super . onResume ( ) ; if ( ( ( mLocalManager ) == null ) || ( isUiRestricted ( ) ) ) return ; mLocalManager.setForegroundActivity ( getActivity ( ) ) ; mLocalManager.getEventManager ( ) . registerCallback ( this ) ; updateProgressUi ( mLocalAdapter.isDiscovering ( ) ) ; }
public void checkClass ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.ClassContext context , @ com.android.annotations.NonNull org.objectweb.asm.tree.ClassNode classNode ) { if ( ( ( classNode.name.indexOf ( '$' ) ) != ( - 1 ) ) && ( ( ( classNode.access ) & ( org.objectweb.asm.Opcodes.ACC_STATIC ) ) == 0 ) ) { return ; } if ( ( ( classNode.access ) & ( org.objectweb.asm.Opcodes.ACC_ABSTRACT ) ) != 0 ) { return ; } if ( com.android.tools.lint.checks.ViewConstructorDetector.isViewClass ( context , classNode ) ) { com.android.tools.lint.checks.ViewConstructorDetector.checkConstructors ( context , classNode ) ; } }
public int compare ( com.android.traceview.MethodData md1 , com.android.traceview.MethodData md2 ) { if ( ( md2.getElapsedInclusive ( ) ) > ( md1.getElapsedInclusive ( ) ) ) return 1 ; if ( ( md2.getElapsedInclusive ( ) ) < ( md1.getElapsedInclusive ( ) ) ) return - 1 ; return md1.getName ( ) . compareTo ( md2.getName ( ) ) ; }
public static com.google.gct.intellij.endpoints.util.PsiFile addOrReplaceFile ( com.google.gct.intellij.endpoints.util.PsiDirectory dir , com.google.gct.intellij.endpoints.util.PsiFile file ) { final com.google.gct.intellij.endpoints.util.PsiFile existingFile = dir.findFile ( file.getName ( ) ) ; if ( existingFile != null ) { existingFile.delete ( ) ; } return ( ( com.google.gct.intellij.endpoints.util.PsiFile ) ( dir.add ( file ) ) ) ; }
public com.android.ims.internal.IImsEcbm getEcbmInterface ( ) throws android.os.RemoteException { return mCompatFeature.getEcbmInterface ( ) ; }
public void onResume ( ) { final android.app.Activity activity = getActivity ( ) ; super . onResume ( ) ; removePreference ( "dummy" ) ; if ( ( mWifiEnabler ) != null ) { mWifiEnabler.resume ( activity ) ; } mWifiTracker.startTracking ( ) ; activity.invalidateOptionsMenu ( ) ; }
private com.android.ide.eclipse.gltrace.state.IGLProperty getTextureImageProperty ( com.android.ide.eclipse.gltrace.state.IGLProperty state ) { if ( ( state.getType ( ) ) == ( com.android.ide.eclipse.gltrace.state.GLStateType.TEXTURE_IMAGE ) ) { return state ; } if ( ( state.getType ( ) ) != ( com.android.ide.eclipse.gltrace.state.GLStateType.PER_TEXTURE_LEVEL_STATE ) ) { state = state.getParent ( ) ; } if ( ( state != null ) && ( ( state.getType ( ) ) == ( com.android.ide.eclipse.gltrace.state.GLStateType.PER_TEXTURE_LEVEL_STATE ) ) ) { return ( ( com.android.ide.eclipse.gltrace.state.GLCompositeProperty ) ( state ) ) . getProperty ( GLStateType.TEXTURE_IMAGE ) ; } return null ; }
public com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation getAnnotation ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedMethod method , @ com.android.annotations.NonNull java.lang.String type ) { com.android.tools.lint.ExternalAnnotationRepository.MethodInfo m = findMethod ( method ) ; if ( m == null ) { return null ; } if ( ( m.annotations ) != null ) { for ( com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation : m.annotations ) { if ( type.equals ( annotation.getSignature ( ) ) ) { return annotation ; } } } return null ; }
public boolean validates ( @ com.android.annotations.NonNull com.android.manifmerger.MergingReport.Builder mergingReport , @ com.android.annotations.NonNull com.android.manifmerger.XmlAttribute attribute , @ com.android.annotations.NonNull java.lang.String value ) { boolean matches = ( com.android.manifmerger.AttributeModel.BooleanValidator.TRUE_PATTERN.matcher ( value ) . matches ( ) ) || ( com.android.manifmerger.AttributeModel.BooleanValidator.FALSE_PATTERN.matcher ( value ) . matches ( ) ) ; if ( ! matches ) { mergingReport.addError ( java.lang.String.format ( ( "Attribute %1$s at %2$s has an illegal value=(%3$s), " + "expected 'true' or 'false'" ) , attribute.getId ( ) , attribute.printPosition ( ) , value ) ) ; } return matches ; }
public static java.lang.String apiToMagic ( int targetApiLevel ) { java.lang.String version ; if ( targetApiLevel >= ( com.android.dex.DexFormat.API_CURRENT ) ) { version = com.android.dex.DexFormat.VERSION_CURRENT ; } else if ( targetApiLevel >= ( com.android.dex.DexFormat.API_CONST_METHOD_HANDLE ) ) { version = com.android.dex.DexFormat.VERSION_FOR_API_27 ; } else if ( targetApiLevel >= ( com.android.dex.DexFormat.API_METHOD_HANDLES ) ) { version = com.android.dex.DexFormat.VERSION_FOR_API_26 ; } else if ( targetApiLevel >= ( com.android.dex.DexFormat.API_DEFAULT_INTERFACE_METHODS ) ) { version = com.android.dex.DexFormat.VERSION_FOR_API_24 ; } else { version = com.android.dex.DexFormat.VERSION_FOR_API_13 ; } return ( ( com.android.dex.DexFormat.MAGIC_PREFIX ) + version ) + ( com.android.dex.DexFormat.MAGIC_SUFFIX ) ; }
private void removeMissedCallNotifications ( ) { try { com.android.internal.telephony.ITelephony telephony = ITelephony.Stub.asInterface ( android.os.ServiceManager.getService ( "phone" ) ) ; if ( telephony != null ) { telephony.cancelMissedCallsNotification ( ) ; } else { android.util.Log.w ( com.android.dialer.calllog.CallLogFragment.TAG , ( "Telephony service is null, can't call " + "cancelMissedCallsNotification" ) ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.dialer.calllog.CallLogFragment.TAG , "Failed to clear missed calls notification due to remote exception" ) ; } }
private boolean runCorrectnessPatterns ( com.android.rs.test.RenderScript RS , com.android.rs.test.ScriptC_reduce s ) { boolean pass = true ; pass &= patternDuplicateAnonymousResult ( RS , s ) ; pass &= patternInterleavedReduce ( RS , s ) ; pass &= patternRedundantGet ( RS , s ) ; return pass ; }
private void rewriteClass ( java.util.jar.JarEntry entry , java.io.InputStream inputStream , java.util.jar.JarOutputStream outputStream ) throws java.io.IOException { org.objectweb.asm.ClassReader classReader = new org.objectweb.asm.ClassReader ( inputStream ) ; org.objectweb.asm.tree.ClassNode classNode = new org.objectweb.asm.tree.ClassNode ( org.objectweb.asm.Opcodes.ASM4 ) ; classReader.accept ( classNode , com.android.builder.testing.MockableJarGenerator.EMPTY_FLAGS ) ; modifyClass ( classNode ) ; org.objectweb.asm.ClassWriter classWriter = new org.objectweb.asm.ClassWriter ( com.android.builder.testing.MockableJarGenerator.EMPTY_FLAGS ) ; classNode.accept ( classWriter ) ; outputStream.putNextEntry ( new java.util.zip.ZipEntry ( entry.getName ( ) ) ) ; outputStream.write ( classWriter.toByteArray ( ) ) ; }
public void cleanup ( ) { mRemoteDevices = null ; if ( ( mProfileConnectionState ) != null ) { mProfileConnectionState.clear ( ) ; mProfileConnectionState = null ; } mService = null ; if ( ! ( mBondedDevices.isEmpty ( ) ) ) mBondedDevices.clear ( ) ; }
public void testUpdateBatteryLevel_errorTooLargeValue ( ) { com.android.bluetooth.btservice.RemoteDevices remoteDevices = new com.android.bluetooth.btservice.RemoteDevices ( mAdapterService ) ; int batteryLevel = 101 ; org.junit.Assert.assertNull ( remoteDevices.getDeviceProperties ( mDevice1 ) ) ; remoteDevices.updateBatteryLevel ( mDevice1 , batteryLevel ) ; org.mockito.Mockito.verify ( mAdapterService , org.mockito.Mockito.never ( ) ) . sendBroadcast ( org.mockito.Mockito.any ( ) , org.mockito.Mockito.anyString ( ) ) ; org.junit.Assert.assertNull ( remoteDevices.getDeviceProperties ( mDevice1 ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAdapterService ) ; }
public boolean onPreferenceClick ( android.preference.Preference preference ) { final android.content.Intent intent = new android.content.Intent ( android.provider.Settings.ACTION_APN_SETTINGS ) ; intent.putExtra ( ":settings:show_fragment_as_subsetting" , true ) ; intent.putExtra ( com.android.phone.GsmUmtsOptions.EXTRA_SUB_ID , subId ) ; mPrefFragment.startActivity ( intent ) ; return true ; }
public java.lang.String apply ( com.android.dialer.calllog.RefreshAnnotatedCallLogWorker.RefreshResult refreshResult ) { switch ( refreshResult ) { case NOT_DIRTY : return com.android.dialer.metrics.Metrics.REFRESH_NOT_DIRTY ; case REBUILT_BUT_NO_CHANGES_NEEDED : return checkDirty ? com.android.dialer.metrics.Metrics.REFRESH_NO_CHANGES_NEEDED : com.android.dialer.metrics.Metrics.FORCE_REFRESH_NO_CHANGES_NEEDED ; case REBUILT_AND_CHANGES_NEEDED : return checkDirty ? com.android.dialer.metrics.Metrics.REFRESH_CHANGES_NEEDED : com.android.dialer.metrics.Metrics.FORCE_REFRESH_CHANGES_NEEDED ; default : throw new java.lang.IllegalStateException ( ( "Unsupported result: " + refreshResult ) ) ; } }
private void updateLteEarfcnLists ( ) { android.telephony.CarrierConfigManager configManager = ( ( android.telephony.CarrierConfigManager ) ( mPhone.getContext ( ) . getSystemService ( Context.CARRIER_CONFIG_SERVICE ) ) ) ; android.os.PersistableBundle b = configManager.getConfigForSubId ( mPhone.getSubId ( ) ) ; synchronized ( mLteRsrpBoostLock ) { mLteRsrpBoost = b.getInt ( CarrierConfigManager.KEY_LTE_EARFCNS_RSRP_BOOST_INT , 0 ) ; java.lang.String [ ] earfcnsStringArrayForRsrpBoost = b.getStringArray ( CarrierConfigManager.KEY_BOOSTED_LTE_EARFCNS_STRING_ARRAY ) ; mEarfcnPairListForRsrpBoost = convertEarfcnStringArrayToPairList ( earfcnsStringArrayForRsrpBoost ) ; } }
public java.lang.Object getData ( @ org.jetbrains.annotations.NonNls java.lang.String dataId ) { if ( ( PlatformDataKeys.FILE_EDITOR.is ( dataId ) ) && ( ( myDesigner ) != null ) ) { return myDesigner.getEditor ( ) ; } return null ; }
public boolean doesForceHide ( com.android.internal.policy.impl.WindowState win , android.view.WindowManager.LayoutParams attrs ) { return ( attrs.type ) == ( android.view.WindowManager.LayoutParams.LayoutParams.TYPE_KEYGUARD ) ; }
public java.lang.String onGetDefaultNumber ( com.android.phone.EditPhoneNumberPreference preference ) { if ( preference == ( mSubMenuVoicemailSettings ) ) { if ( com.android.phone.CallFeaturesSetting.DBG ) com.android.phone.CallFeaturesSetting.log ( "updating default for voicemail dialog" ) ; updateVoiceNumberField ( ) ; return null ; } java.lang.String vmDisplay = com.android.internal.telephony.PhoneFactory.getDefaultPhone ( ) . getVoiceMailNumber ( ) ; if ( android.text.TextUtils.isEmpty ( vmDisplay ) ) { return null ; } if ( com.android.phone.CallFeaturesSetting.DBG ) com.android.phone.CallFeaturesSetting.log ( "updating default for call forwarding dialogs" ) ; return ( ( getString ( R.string.voicemail_abbreviated ) ) + " " ) + vmDisplay ; }
public static byte [ ] serialize ( int dropped , java.util.List < android.net.ConnectivityMetricsEvent > events ) throws java.io.IOException { final com.android.server.connectivity.metrics.IpConnectivityLogClass.IpConnectivityLog log = new com.android.server.connectivity.metrics.IpConnectivityLogClass.IpConnectivityLog ( ) ; log.events = com.android.server.connectivity.IpConnectivityEventBuilder.toProto ( events ) ; log.droppedEvents = dropped ; return com.android.server.connectivity.metrics.IpConnectivityLogClass.IpConnectivityLog.toByteArray ( log ) ; }
public static boolean isBitmapFile ( @ com.android.annotations.NonNull java.io.File file ) { java.lang.String path = file.getPath ( ) ; return ( ( ( com.android.tools.lint.detector.api.LintUtils.endsWith ( path , com.android.SdkConstants.DOT_PNG ) ) || ( com.android.tools.lint.detector.api.LintUtils.endsWith ( path , com.android.SdkConstants.DOT_JPG ) ) ) || ( com.android.tools.lint.detector.api.LintUtils.endsWith ( path , com.android.SdkConstants.DOT_GIF ) ) ) || ( com.android.tools.lint.detector.api.LintUtils.endsWith ( path , com.android.SdkConstants.DOT_JPEG ) ) ; }
public void test_minus_Period ( ) { test.java.time.MockSimplePeriod period = test.java.time.MockSimplePeriod.of ( 7 , java.time.temporal.ChronoUnit.MONTHS ) ; java.time.OffsetDateTime t = TEST_2008_6_30_11_30_59_000000500.minus ( period ) ; org.testng.Assert.assertEquals ( t , java.time.OffsetDateTime.of ( 2007 , 11 , 30 , 11 , 30 , 59 , 500 , tck.java.time.TCKOffsetDateTime.OFFSET_PONE ) ) ; }
private static libcore.tzdata.update2.tools.TimeZoneDistroBuilder createValidDistroBuilder ( ) throws java.lang.Exception { java.lang.String distroRulesVersion = com.android.cts.tzdata.TzDataCheckTest.VALID_RULES_VERSION ; libcore.tzdata.shared2.DistroVersion validDistroVersion = new libcore.tzdata.shared2.DistroVersion ( libcore.tzdata.shared2.DistroVersion.CURRENT_FORMAT_MAJOR_VERSION , libcore.tzdata.shared2.DistroVersion.CURRENT_FORMAT_MINOR_VERSION , distroRulesVersion , com.android.cts.tzdata.TzDataCheckTest.VALID_REVISION ) ; return new libcore.tzdata.update2.tools.TimeZoneDistroBuilder ( ) . setDistroVersion ( validDistroVersion ) . setTzDataFile ( com.android.cts.tzdata.TzDataCheckTest.createValidTzDataBytes ( distroRulesVersion ) ) . setIcuDataFile ( new byte [ 10 ] ) ; }
public void getSmdsAddress ( java.lang.String cardId , android.telephony.euicc.EuiccCardManager.ResultCallback < java.lang.String > callback ) { try { getIEuiccCardController ( ) . getSmdsAddress ( mContext.getOpPackageName ( ) , cardId , new com.android.internal.telephony.euicc.IGetSmdsAddressCallback.Stub ( ) { @ java.lang.Override public void onComplete ( int resultCode , java.lang.String address ) { callback.onComplete ( resultCode , address ) ; } } ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.euicc.EuiccCardManager.TAG , "Error calling getSmdsAddress" , e ) ; throw e.rethrowFromSystemServer ( ) ; } }
public char [ ] formatBigDecimal ( java.math.BigDecimal value , java.text.FieldPosition field ) { libcore.icu.NativeDecimalFormat.FieldPositionIterator fpi = libcore.icu.NativeDecimalFormat.FieldPositionIterator.forFieldPosition ( field ) ; char [ ] result = libcore.icu.NativeDecimalFormat.formatDigitList ( this . address , value.toString ( ) , fpi ) ; if ( fpi != null ) { libcore.icu.NativeDecimalFormat.FieldPositionIterator.setFieldPosition ( fpi , field ) ; } return result ; }
public android.view.CompatibilityInfoHolder getCompatibilityInfo ( int displayId ) { return displayId == ( android.view.Display.DEFAULT_DISPLAY ) ? mPackageInfo.mCompatibilityInfo : null ; }
public static int forkSystemServer ( int uid , int gid , int [ ] gids , int debugFlags , int [ ] [ ] rlimits , long permittedCapabilities , long effectiveCapabilities ) { com.android.internal.os.Zygote.VM_HOOKS.preFork ( ) ; int pid = com.android.internal.os.Zygote.nativeForkSystemServer ( uid , gid , gids , debugFlags , rlimits , permittedCapabilities , effectiveCapabilities ) ; if ( pid == 0 ) { android.os.Trace.setTracingEnabled ( true ) ; } com.android.internal.os.Zygote.VM_HOOKS.postForkCommon ( ) ; return pid ; }
public void testGetConfig1 ( ) { com.android.ide.common.resources.configuration.FolderConfiguration configForFolder = com.android.ide.common.resources.configuration.FolderConfiguration.getConfig ( new java.lang.String [ ] { "values" , "en" , "rUS" } ) ; assertNotNull ( configForFolder ) ; assertEquals ( "en" , configForFolder.getLanguageQualifier ( ) . getValue ( ) ) ; assertEquals ( "US" , configForFolder.getRegionQualifier ( ) . getValue ( ) ) ; assertNull ( configForFolder.getScreenDimensionQualifier ( ) ) ; assertNull ( configForFolder.getLayoutDirectionQualifier ( ) ) ; }
public void testHasImeAction ( ) { android.widget.EditText editText = new android.widget.EditText ( context ) ; assertFalse ( android.support.test.espresso.matcher.ViewMatchers.hasImeAction ( EditorInfo.IME_ACTION_GO ) . matches ( editText ) ) ; editText.setImeOptions ( EditorInfo.IME_ACTION_NEXT ) ; assertFalse ( android.support.test.espresso.matcher.ViewMatchers.hasImeAction ( EditorInfo.IME_ACTION_GO ) . matches ( editText ) ) ; assertTrue ( android.support.test.espresso.matcher.ViewMatchers.hasImeAction ( EditorInfo.IME_ACTION_NEXT ) . matches ( editText ) ) ; }
public void onScheduledRecordingRemoved ( com.android.tv.dvr.ScheduledRecording ... scheduledRecordings ) { for ( com.android.tv.dvr.ScheduledRecording schedule : scheduledRecordings ) { com.android.tv.guide.ProgramManager.TableEntry oldEntry = getTableEntry ( schedule ) ; if ( oldEntry != null ) { com.android.tv.guide.ProgramManager.TableEntry newEntry = new com.android.tv.guide.ProgramManager.TableEntry ( oldEntry.channelId , oldEntry.program , null , oldEntry.entryStartUtcMillis , oldEntry.entryEndUtcMillis , oldEntry.isBlocked ( ) ) ; updateEntry ( oldEntry , newEntry ) ; } } }
static int optimalNumOfBits ( int n , double p ) { return ( ( int ) ( ( ( - n ) * ( java.lang.Math.log ( p ) ) ) / ( com.google.common.hash.BloomFilter.LN2_SQUARED ) ) ) ; }
public void write ( byte [ ] b , int off , int len ) throws java.io.IOException { try { mSignature.update ( b , off , len ) ; } catch ( java.security.SignatureException e ) { throw new java.io.IOException ( ( "SignatureException: " + e ) ) ; } super . write ( b , off , len ) ; }
protected void onCreate ( android.os.Bundle icicle ) { super . onCreate ( icicle ) ; mSensorManager = ( ( android.hardware.SensorManager ) ( getSystemService ( Context.SENSOR_SERVICE ) ) ) ; mView = new com.example.android.apis.graphics.SensorTest.SampleView ( this ) ; setContentView ( mView ) ; }
public void testCurrencyUsageFractionOverrides ( ) { android.icu.text.NumberFormat df = android.icu.text.DecimalFormat.getCurrencyInstance ( ULocale.US ) ; expect2 ( df , 35.0 , "$35.00" ) ; df.setMinimumFractionDigits ( 3 ) ; expect2 ( df , 35.0 , "$35.000" ) ; df.setMaximumFractionDigits ( 3 ) ; expect2 ( df , 35.0 , "$35.000" ) ; df.setMinimumFractionDigits ( ( - 1 ) ) ; expect2 ( df , 35.0 , "$35" ) ; df.setMaximumFractionDigits ( ( - 1 ) ) ; expect2 ( df , 35.0 , "$35.00" ) ; }
public void test_forEachRemaining_iterator ( ) throws java.lang.Exception { libcore.java.util.ForEachRemainingTester.runTests ( java.util.ArrayDeque.class , new java.lang.String [ ] { "foo" , "bar" , "baz " } ) ; libcore.java.util.ForEachRemainingTester.runTests ( java.util.ArrayDeque.class , new java.lang.String [ ] { "foo" } ) ; }
private java.lang.String nextToken ( char separator ) { if ( ( lineCharIdx ) >= ( line.length ( ) ) ) { return null ; } char c ; java.lang.StringBuffer token = new java.lang.StringBuffer ( ) ; while ( ( ( lineCharIdx ) < ( line.length ( ) ) ) && ( ( c = line.charAt ( lineCharIdx ) ) != separator ) ) { token.append ( c ) ; ( lineCharIdx ) ++ ; } ( lineCharIdx ) ++ ; return token.toString ( ) ; }
public void test_wrap_ByteBuffer$ByteBuffer_04 ( ) throws java.lang.Exception { java.lang.String host = "new host" ; int port = 8080 ; java.nio.ByteBuffer bb = java.nio.ByteBuffer.allocate ( 10 ) ; java.nio.ByteBuffer [ ] bbA = new java.nio.ByteBuffer [ ] { java.nio.ByteBuffer.allocate ( 5 ) , java.nio.ByteBuffer.allocate ( 10 ) , java.nio.ByteBuffer.allocate ( 5 ) } ; javax.net.ssl.SSLEngine sse = getEngine ( host , port ) ; javax.net.ssl.SSLEngineResult result = sse.wrap ( bbA , bb ) ; assertEquals ( javax.net.ssl.SSLEngineResult.Status.BUFFER_OVERFLOW , result.getStatus ( ) ) ; }
private void responseVoid ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { java.lang.Object ret = null ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { sendMessageResponse ( rr.mResult , ret ) ; } mRil.processResponseDone ( rr , responseInfo , ret ) ; } }
public < T > T [ ] toArray ( T [ ] array ) { return standardToArray ( array ) ; }
public boolean hasChildren ( java.lang.Object element ) { if ( element instanceof com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo ) { return ( ( ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo ) ( element ) ) . getChildren ( ) . size ( ) ) > 0 ; } return false ; }
private java.util.List < java.io.File > getFilesFromPathString ( @ javax.annotation.CheckForNull java.lang.String pathString ) { java.util.List < java.io.File > classpath = new java.util.ArrayList < java.io.File > ( ) ; if ( ( pathString != null ) && ( ! ( pathString.isEmpty ( ) ) ) ) { java.lang.String [ ] paths = pathString.split ( java.io.File.pathSeparator ) ; for ( java.lang.String path : paths ) { classpath.add ( new java.io.File ( path ) ) ; } } return classpath ; }
void write ( java.io.PrintWriter writer ) { if ( annotations.isEmpty ( ) ) { return ; } writer.print ( " <item name=\"" ) ; writer.print ( getSignature ( ) ) ; writer.println ( "\">" ) ; for ( com.android.build.gradle.tasks.annotations.Extractor.AnnotationData annotation : annotations ) { annotation.write ( writer ) ; } writer.print ( " </item>" ) ; writer.println ( ) ; }
public void callDropFeedbackPaint ( com.android.ide.eclipse.adt.editors.layout.gscripts.IGraphics gc , com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy targetNode , com.android.ide.eclipse.adt.editors.layout.gscripts.DropFeedback feedback ) { if ( ( ( gc != null ) && ( feedback != null ) ) && ( ( feedback.painter ) != null ) ) { try { feedback.painter.paint ( gc , targetNode , feedback ) ; } catch ( java.lang.Exception e ) { logError ( "DropFeedback.painter failed: %s" , e.toString ( ) ) ; } } }
public com.android.internal.telephony.CellNetworkScanResult getCellNetworkScanResults ( int subId ) { enforceModifyPermissionOrCarrierPrivilege ( subId ) ; if ( com.android.phone.PhoneInterfaceManager.DBG ) com.android.phone.PhoneInterfaceManager.log ( ( "getCellNetworkScanResults: subId " + subId ) ) ; com.android.internal.telephony.CellNetworkScanResult result = ( ( com.android.internal.telephony.CellNetworkScanResult ) ( sendRequest ( com.android.phone.PhoneInterfaceManager.CMD_PERFORM_NETWORK_SCAN , null , subId ) ) ) ; return result ; }
protected com.android.jack.test.toolchain.JackBasedToolchain getReferenceToolchain ( ) { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain.class ) ; java.io.File internalJackOutputLib ; try { internalJackOutputLib = com.android.jack.TestTools.createTempDir ( "oneDexPerType" , "dex" ) ; toolchain.addProperty ( Options.EMIT_LINE_NUMBER_DEBUG_INFO.getName ( ) , java.lang.Boolean.toString ( withDebugInfos ) ) ; toolchain.addProperty ( ScheduleInstance.DEFAULT_RUNNER.getName ( ) , "single-threaded" ) ; toolchain.addProperty ( Options.INTERNAL_LIBRARY_OUTPUT_DIR.getName ( ) , internalJackOutputLib.getAbsolutePath ( ) ) ; } catch ( java.io.IOException e ) { throw new java.lang.AssertionError ( e ) ; } return toolchain ; }
private java.util.concurrent.ConcurrentSkipListMap.Node < K , V > hiNode ( ) { if ( ( hi ) == null ) return m.findLast ( ) ; else if ( hiInclusive ) return m.findNear ( hi , ( ( m.LT ) | ( m.EQ ) ) ) ; else return m.findNear ( hi , m.LT ) ; }
public void testDependencies ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( com.android.tools.lint.checks.GradleDetector.DEPENDENCY ) ; assertEquals ( ( "" + ( ( ( ( ( ( ( ( ( "build.gradle:5: Warning: Old buildToolsVersion 19.0.0; recommended version is 19.1.0 or later [GradleDependency]\n" + " buildToolsVersion \"19.0.0\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "build.gradle:24: Warning: A newer version of com.google.guava:guava than 11.0.2 is available: 18.0 [GradleDependency]\n" ) + " freeCompile \'com.google.guava:guava:11.0.2\'\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "build.gradle:25: Warning: A newer version of com.android.support:appcompat-v7 than 13.0.0 is available: 20.0.0 [GradleDependency]\n" ) + " compile \'com.android.support:appcompat-v7:13.0.0\'\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 3 warnings\n" ) ) , lintProject ( "gradle/Dependencies.gradle=>build.gradle" ) ) ; }
protected java.lang.Iterable < org.jf.dexlib2.analysis.ClassDef > getDirectInterfaces ( ) { java.lang.Iterable < org.jf.dexlib2.analysis.ClassDef > directInterfaces = com.google.common.collect.Iterables.filter ( getInterfaces ( ) . values ( ) , com.google.common.base.Predicates.notNull ( ) ) ; if ( ! ( interfacesFullyResolved ) ) ; BRANCH ( 76.0 ) ; }
public final void init ( java.security.Key key , java.security.SecureRandom random ) throws java.security.InvalidKeyException { spiImpl.engineInit ( key , random ) ; }
void build ( ) { assert ( entry.getSuccessors ( ) . size ( ) ) == 1 ; com.android.jack.ir.ast.cfg.JBasicBlock block = buildBlock ( entry.getSuccessors ( ) . get ( 0 ) ) ; cfg.entry ( ) . replaceAllSuccessors ( cfg.exit ( ) , block ) ; }
android.net.wifi.WifiInfo getWifiInfo ( ) { android.net.wifi.WifiInfo wifiInfo = mock ( android.net.wifi.WifiInfo.class ) ; when ( wifiInfo.is24GHz ( ) ) . thenReturn ( true ) ; when ( wifiInfo.is5GHz ( ) ) . thenReturn ( false ) ; when ( wifiInfo.getRssi ( ) ) . thenReturn ( ( - 70 ) ) ; when ( wifiInfo.getNetworkId ( ) ) . thenReturn ( WifiConfiguration.INVALID_NETWORK_ID ) ; when ( wifiInfo.getBSSID ( ) ) . thenReturn ( null ) ; return wifiInfo ; }
protected boolean stop ( ) { android.util.Log.v ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "stop()" ) ; if ( ( mContactChangeObserver ) == null ) { android.util.Log.i ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "Avoid unregister when receiver it is not registered" ) ; return true ; } try { unregisterReceiver ( mPbapReceiver ) ; getContentResolver ( ) . unregisterContentObserver ( mContactChangeObserver ) ; mContactChangeObserver = null ; } catch ( java.lang.Exception e ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "Unable to unregister pbap receiver" , e ) ; } mSessionStatusHandler.obtainMessage ( com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN ) . sendToTarget ( ) ; setState ( BluetoothPbap.STATE_DISCONNECTED , BluetoothPbap.RESULT_CANCELED ) ; return true ; }
public com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult getContrastResult ( ) { com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult normalTest = getContrastResultForNormalText ( ) ; com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult largeTest = getContrastResultForLargeText ( ) ; if ( normalTest == largeTest ) { return normalTest ; } else if ( ( mTextSize ) == null ) { return com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult.INDETERMINATE ; } else if ( ( mTextSize ) <= ( com.android.hierarchyviewerlib.models.EvaluateContrastModel.NORMAL_TEXT_SZ_PTS ) ) { return normalTest ; } else { return largeTest ; } }
static java.nio.ByteOrder byteOrder ( ) { if ( ( sun.nio.ch.NativeObject.byteOrder ) != null ) return sun.nio.ch.NativeObject.byteOrder ; long a = sun.nio.ch.NativeObject.unsafe.allocateMemory ( 8 ) ; try { sun.nio.ch.NativeObject.unsafe.putLong ( a , 72623859790382856L ) ; byte b = sun.nio.ch.NativeObject.unsafe.getByte ( a ) ; switch ( b ) { case 1 : sun.nio.ch.NativeObject.byteOrder = java.nio.ByteOrder.BIG_ENDIAN ; break ; case 8 : sun.nio.ch.NativeObject.byteOrder = java.nio.ByteOrder.LITTLE_ENDIAN ; break ; default : assert false ; } } finally { sun.nio.ch.NativeObject.unsafe.freeMemory ( a ) ; } return sun.nio.ch.NativeObject.byteOrder ; }
public void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Severity severity , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { java.lang.String s = ( ( ( ( "Found lint error: " + ( issue.getId ( ) ) ) + ": " ) + message ) + " at " ) + location ; job.setProperty ( ERROR_KEY , s ) ; fail ( s ) ; }
public void run ( ) { if ( ( mAutoScrollCount ) == 0 ) { mAutoScrollTimer.cancel ( ) ; return ; } if ( ( ( mAutoScrollCount ) % 2 ) == 0 ) { setSelectedPosition ( ( ( android.cts.jank.leanback.ui.MainFragment.NUM_ROWS ) - 1 ) ) ; } else { setSelectedPosition ( 0 ) ; } ( mAutoScrollCount ) -- ; }
public void testInstallWithBadlyFormedAndroidRevision ( ) throws java.lang.Exception { java.lang.String invalidAndroidRevision = "A01" ; byte [ ] versionBytes = libcore.tzdata.update2.BundleVersion.getBytes ( BundleVersion.FULL_BUNDLE_FORMAT_VERSION , libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION , invalidAndroidRevision ) ; libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createTimeZoneBundleWithVersionBytes ( versionBytes ) ; assertFalse ( installer.install ( bundle.getBytes ( ) ) ) ; assertNoContentInstalled ( ) ; }
public static int getInt ( java.lang.String key , int def ) { if ( ( key.length ( ) ) > ( android.os.SystemProperties.PROP_NAME_MAX ) ) { throw new java.lang.IllegalArgumentException ( ( "key.length > " + ( android.os.SystemProperties.PROP_NAME_MAX ) ) ) ; } return android.os.SystemProperties.native_get_int ( key , def ) ; }
public android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider ( ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { android.view.accessibility.AccessibilityNodeProvider ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < android.view.accessibility.AccessibilityNodeProvider > ( ) { @ java.lang.Override public android.view.accessibility.AccessibilityNodeProvider call ( ) { return getAccessibilityNodeProvider ( ) ; } } ) ; return ret ; } return mAwContents.getAccessibilityNodeProvider ( ) ; }
public com.google.common.collect.ImmutableList < java.lang.String > digits ( ) { return com.google.common.collect.ImmutableList.of ( 0 , 4 ) . stream ( ) . map ( ( i ) -> i == 0 ? com.google.devtools.build.android.desugar.testdata.java8.ConcreteOverridesDefaultWithLambda.THREE : java.lang.String.valueOf ( i ) ) . collect ( com.google.common.collect.ImmutableList.toImmutableList ( com.google.common.collect.ImmutableList ) ) ; }
private void assertFastPathUtf8DecodedEquals ( java.lang.String expected , java.lang.String hexString ) throws java.io.UnsupportedEncodingException { java.lang.String actual = new java.lang.String ( libcore.java.lang.StringTest.hexStringtoBytes ( hexString ) ) ; assertEquals ( ( ( "Fast-path UTF-8 decoder decodes sequence [" + hexString ) + "] into unexpected String" ) , expected , actual ) ; }
public com.android.jack.load.PackageLoader getLoaderForSubPackage ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading , @ javax.annotation.Nonnull java.lang.String simpleName ) throws com.android.jack.ir.ast.JPackageLookupException { for ( com.android.sched.vfs.InputVElement sub : dir.list ( ) ) { if ( ( sub.isVDir ( ) ) && ( sub.getName ( ) . equals ( simpleName ) ) ) { return new com.android.jack.jayce.JaycePackageLoader ( ( ( com.android.sched.vfs.InputVDir ) ( sub ) ) , lookup , defaultLoadLevel ) ; } } throw new com.android.jack.ir.ast.JPackageLookupException ( simpleName , loading ) ; }
public void test_ClassDescriptor ( ) throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream ( ) ; org.apache.harmony.luni.tests.java.io.ObjectInputStreamTest.ObjectOutputStreamWithWriteDesc oos = new org.apache.harmony.luni.tests.java.io.ObjectInputStreamTest.ObjectOutputStreamWithWriteDesc ( baos ) ; oos.writeObject ( java.lang.String.class ) ; oos.close ( ) ; java.lang.Class cls = org.apache.harmony.luni.tests.java.io.ObjectInputStreamTest.TestClassForSerialization.class ; java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream ( baos.toByteArray ( ) ) ; org.apache.harmony.luni.tests.java.io.ObjectInputStreamTest.ObjectIutputStreamWithReadDesc ois = new org.apache.harmony.luni.tests.java.io.ObjectInputStreamTest.ObjectIutputStreamWithReadDesc ( bais , cls ) ; java.lang.Object obj = ois.readObject ( ) ; ois.close ( ) ; assertEquals ( cls , obj ) ; }
public void testInstallWithMissingBundleVersionFile ( ) throws java.lang.Exception { java.io.File workingDir = new java.io.File ( testInstallDir , TzDataBundleInstaller.WORKING_DIR_NAME ) ; assertTrue ( workingDir.mkdir ( ) ) ; libcore.tzdata.update2.ConfigBundle tzData = createTzDataBundleWithoutFormatVersionFile ( "2030a" ) ; assertFalse ( install ( tzData ) ) ; assertNoContentInstalled ( ) ; }
public static java.lang.StringBuilder formatAndAppend ( java.lang.String compiledPattern , java.lang.StringBuilder appendTo , int [ ] offsets , java.lang.CharSequence ... values ) { int valuesLength = ( values != null ) ? values.length : 0 ; if ( valuesLength < ( android.icu.impl.SimplePatternFormatter.getPlaceholderCount ( compiledPattern ) ) ) { throw new java.lang.IllegalArgumentException ( "Too few values." ) ; } return android.icu.impl.SimplePatternFormatter.format ( compiledPattern , values , appendTo , null , true , offsets ) ; }
boolean matchesDescription ( org.junit.runner.Description description ) { return ( description.hashCode ( ) ) == ( uniqueMethodId.hashCode ( ) ) ; }
public java.nio.ShortBuffer put ( java.nio.ShortBuffer src ) { if ( src == ( this ) ) { throw new java.lang.IllegalArgumentException ( "src == this" ) ; } if ( ( src.remaining ( ) ) > ( remaining ( ) ) ) { throw new java.nio.BufferOverflowException ( ) ; } short [ ] contents = new short [ src.remaining ( ) ] ; src.get ( contents ) ; put ( contents ) ; return this ; }
public boolean isVideoCallingEnabled ( java.lang.String callingPackage ) { if ( ! ( canReadPhoneState ( callingPackage , "isVideoCallingEnabled" ) ) ) { return false ; } return ( ( com.android.ims.ImsManager.isVtEnabledByPlatform ( mPhone.getContext ( ) ) ) && ( com.android.ims.ImsManager.isEnhanced4gLteModeSettingEnabledByUser ( mPhone.getContext ( ) ) ) ) && ( com.android.ims.ImsManager.isVtEnabledByUser ( mPhone.getContext ( ) ) ) ; }
java.util.Collection < ? extends com.android.sched.vfs.BaseVElement > list ( @ javax.annotation.Nonnull com.android.sched.vfs.CaseInsensitiveFS.CaseInsensitiveVDir dir ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void filterNodes ( java.lang.String filterText ) { this . filterText = filterText ; com.android.hierarchyviewerlib.ui.util.DrawableViewNode tree = com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . getTree ( ) ; if ( tree != null ) { tree.viewNode.filter ( filterText ) ; com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . notifySelectionChanged ( ) ; } }
private void removeTransportModeTransforms ( android.os.ParcelFileDescriptor pfd , android.net.IpSecTransform transform ) { try { mService.removeTransportModeTransforms ( pfd , transform.getResourceId ( ) ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
public void setFocusedStack ( int stackId ) { if ( com.android.server.am.ActivityManagerService.DEBUG_FOCUS ) android.util.Slog.d ( com.android.server.am.ActivityManagerService.TAG , ( "setFocusedStack: stackId=" + stackId ) ) ; synchronized ( this ) { com.android.server.am.ActivityStack stack = mStackSupervisor.getStack ( stackId ) ; if ( stack != null ) { com.android.server.am.ActivityRecord r = stack.topRunningActivityLocked ( null ) ; if ( r != null ) { setFocusedActivityLocked ( r ) ; } } } }
public int getPriority ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hid.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH_ADMIN permission" ) ; int priority = Settings.Global.getInt ( getContentResolver ( ) , Settings.Global.getBluetoothInputDevicePriorityKey ( device.getAddress ( ) ) , BluetoothProfile.PRIORITY_UNDEFINED ) ; return priority ; }
public boolean isIgnored ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message ) { return issue != ( com.android.tools.lint.client.api.IssueRegistry.LINT_ERROR ) ; }
public void checkValidity ( ) { if ( ! ( ( ( parent ) instanceof com.android.jack.ir.ast.JSwitchStatement ) || ( ( parent ) instanceof com.android.jack.ir.ast.JCaseStatement ) ) ) { super . checkValidity ( ) ; } }
public android.net.NetworkCapabilities getNetworkCapabilitiesSync ( ) { android.net.NetworkCapabilities value ; if ( isCallerOnDifferentThread ( ) ) { android.os.Message response = sendMessageSynchronously ( com.android.internal.telephony.dataconnection.DcAsyncChannel.REQ_GET_NETWORK_CAPABILITIES ) ; if ( ( response != null ) && ( ( response.what ) == ( com.android.internal.telephony.dataconnection.DcAsyncChannel.RSP_GET_NETWORK_CAPABILITIES ) ) ) { value = rspNetworkCapabilities ( response ) ; } else { value = null ; } } else { value = mDc.getCopyNetworkCapabilities ( ) ; } return value ; }
void logCallback ( java.lang.String callback , com.android.server.wifi.scanner.WifiScanningServiceImpl.ClientInfo ci , int id , java.lang.String extra ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( callback ) . append ( ": " ) . append ( ci.toString ( ) ) . append ( ",Id=" ) . append ( id ) ; if ( extra != null ) { sb.append ( "," ) . append ( extra ) ; } localLog ( sb.toString ( ) ) ; }
public java.nio.FloatBuffer put ( java.nio.FloatBuffer src ) { if ( src == ( this ) ) { throw new java.lang.IllegalArgumentException ( "src == this" ) ; } if ( ( src.remaining ( ) ) > ( remaining ( ) ) ) { throw new java.nio.BufferOverflowException ( ) ; } float [ ] contents = new float [ src.remaining ( ) ] ; src.get ( contents ) ; put ( contents ) ; return this ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JField x ) { print ( com.android.jack.ir.ast.JModifier.getStringFieldModifier ( x.getModifier ( ) ) ) ; printType ( x ) ; space ( ) ; printName ( x ) ; return false ; }
public java.util.List < ? extends com.android.internal.telephony.MmiCode > getPendingMmiCodes ( com.android.internal.telephony.Phone phone ) { android.util.Log.e ( com.android.internal.telephony.CallManager.LOG_TAG , "getPendingMmiCodes not implemented" ) ; return null ; }
public void setDataEnabled ( int subId , boolean enable ) { try { android.util.Log.d ( android.telephony.TelephonyManager.TAG , ( "setDataEnabled: enabled=" + enable ) ) ; com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) telephony.setDataEnabled ( subId , enable ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#setDataEnabled" , e ) ; } }
public java.lang.String getVoiceMailNumberForSubscriber ( int subId , java.lang.String callingPackage ) { com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { if ( ! ( checkReadPhoneState ( callingPackage , "getVoiceMailNumber" ) ) ) { return null ; } java.lang.String number = android.telephony.PhoneNumberUtils.extractNetworkPortion ( phone.getVoiceMailNumber ( ) ) ; if ( com.android.internal.telephony.PhoneSubInfoController.VDBG ) log ( ( "VM: getVoiceMailNUmber: " + number ) ) ; return number ; } else { loge ( ( "getVoiceMailNumber phone is null for Subscription:" + subId ) ) ; return null ; } }
private static com.android.ddmlib.RawImage createRawImage ( java.lang.String name ) throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ObjectInputStream is = new java.io.ObjectInputStream ( com.android.monkeyrunner.ImageUtilsTest.class . getResourceAsStream ( name ) ) ; com.android.monkeyrunner.adb.image.CaptureRawAndConvertedImage.MonkeyRunnerRawImage wrapper = ( ( com.android.monkeyrunner.adb.image.CaptureRawAndConvertedImage.MonkeyRunnerRawImage ) ( is.readObject ( ) ) ) ; is.close ( ) ; return wrapper.toRawImage ( ) ; }
static com.google.devtools.common.options.OptionPriority nextOptionPriority ( com.google.devtools.common.options.OptionPriority priority ) { if ( priority.locked ) { return priority ; } return new com.google.devtools.common.options.OptionPriority ( priority.priorityCategory , ( ( priority.index ) + 1 ) , false ) ; }
public dalvik.system.EmulatedStackFrame.StackFrameAccessor attach ( dalvik.system.EmulatedStackFrame stackFrame ) { frame = stackFrame ; frameBuf = java.nio.ByteBuffer.wrap ( frame.stackFrame ) . order ( java.nio.ByteOrder.LITTLE_ENDIAN ) ; numArgs = frame.type.ptypes ( ) . length ; referencesOffset = 0 ; argumentIdx = 0 ; return this ; }
public void goBackOrForward ( final int steps ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { goBackOrForward ( steps ) ; } } ) ; return ; } mAwContents.goBackOrForward ( steps ) ; }
public void spawnDescendant ( com.android.apksig.SigningCertificateLineage.SignerConfig parent , com.android.apksig.SigningCertificateLineage.SignerConfig child ) throws java.security.InvalidKeyException , java.security.NoSuchAlgorithmException , java.security.SignatureException , java.security.cert.CertificateEncodingException { int flags = calculateDefaultFlags ( ) ; spawnDescendant ( parent , flags , child , flags ) ; }
public void testUpdateBatteryLevel_errorNegativeValue ( ) { com.android.bluetooth.btservice.RemoteDevices remoteDevices = new com.android.bluetooth.btservice.RemoteDevices ( mAdapterService ) ; int batteryLevel = - 1 ; org.junit.Assert.assertNull ( remoteDevices.getDeviceProperties ( mDevice1 ) ) ; remoteDevices.updateBatteryLevel ( mDevice1 , batteryLevel ) ; org.mockito.Mockito.verify ( mAdapterService , org.mockito.Mockito.never ( ) ) . sendBroadcast ( org.mockito.Mockito.any ( ) , org.mockito.Mockito.anyString ( ) ) ; org.junit.Assert.assertNull ( remoteDevices.getDeviceProperties ( mDevice1 ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAdapterService ) ; }
protected void configureShell ( org.eclipse.swt.widgets.Shell shell ) { super . configureShell ( shell ) ; shell.setText ( "Hierarchy Viewer" ) ; com.android.ddmuilib.ImageLoader imageLoader = com.android.ddmuilib.ImageLoader.getLoader ( com.android.hierarchyviewerlib.HierarchyViewerDirector.class ) ; org.eclipse.swt.graphics.Image image = imageLoader.loadImage ( "sdk-hierarchyviewer-128.png" , org.eclipse.swt.widgets.Display.getDefault ( ) ) ; shell.setImage ( image ) ; }
public static java.lang.String getSyntheticSwitchMapFieldName ( com.android.jack.ir.ast.JDefinedEnum enumType ) { java.lang.String fullEnumName = com.android.jack.Jack.getLookupFormatter ( ) . getName ( enumType ) ; fullEnumName = fullEnumName.substring ( 1 , ( ( fullEnumName.length ( ) ) - 1 ) ) ; java.lang.String fieldName = ( ( com.android.jack.transformations.enums.OptimizationUtil.ShorterPrefix ) + ( fullEnumName.replace ( '/' , '_' ) ) ) + ( com.android.jack.transformations.enums.OptimizationUtil.Suffix ) ; return fieldName ; }
private void expectSuccessfulHwDisconnectedPnoScan ( org.mockito.InOrder order , com.android.server.wifi.WifiNative.PnoSettings pnoSettings , com.android.server.wifi.WifiNative.PnoEventHandler eventHandler , com.android.server.wifi.ScanResults scanResults ) { expectHwDisconnectedPnoScanStart ( order , pnoSettings ) ; when ( mWifiNative.getScanResults ( ) ) . thenReturn ( scanResults.getScanDetailArrayList ( ) ) ; mWifiMonitor.sendMessage ( mWifiNative.getInterfaceName ( ) , WifiMonitor.SCAN_RESULTS_EVENT ) ; assertEquals ( "dispatch message after results event" , 1 , mLooper.dispatchAll ( ) ) ; order.verify ( eventHandler ) . onPnoNetworkFound ( scanResults.getRawScanResults ( ) ) ; }
public void sendRttRequest ( ) { try { android.telecom.Log.startSession ( "ICA.sRR" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } } finally { android.telecom.Log.endSession ( ) ; } }
private java.lang.String formatNsn ( java.lang.String number , com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneMetadata metadata , com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberFormat numberFormat , java.lang.String carrierCode ) { com.google.i18n.phonenumbers.nano.Phonemetadata.NumberFormat [ ] intlNumberFormats = metadata.intlNumberFormat ; com.google.i18n.phonenumbers.nano.Phonemetadata.NumberFormat [ ] availableFormats = ( ( ( intlNumberFormats.length ) == 0 ) || ( numberFormat == ( com.google.i18n.phonenumbers.PhoneNumberUtil.PhoneNumberFormat.NATIONAL ) ) ) ? metadata.numberFormat : metadata.intlNumberFormat ; com.google.i18n.phonenumbers.nano.Phonemetadata.NumberFormat formattingPattern = chooseFormattingPatternForNumber ( availableFormats , number ) ; return formattingPattern == null ? number : formatNsnUsingPattern ( number , formattingPattern , numberFormat , carrierCode ) ; }
public boolean containsEntry ( java.lang.Object key , java.lang.Object value ) { java.util.Collection < V2 > values = get ( ( ( K ) ( key ) ) ) ; return values.contains ( value ) ; }
public com.android.incallui.incall.protocol.PrimaryCallState build ( ) { com.android.incallui.incall.protocol.PrimaryCallState primaryCallState = autoBuild ( ) ; if ( ! ( android.text.TextUtils.isEmpty ( primaryCallState.customLabel ( ) ) ) ) { com.android.dialer.common.Assert.checkArgument ( ( ( primaryCallState.state ( ) ) == ( com.android.incallui.call.DialerCall.State.CALL_PENDING ) ) ) ; } return primaryCallState ; }
private void beginObserveCoreSettings ( ) { for ( java.lang.String setting : com.android.server.am.CoreSettingsObserver.sCoreSettingToTypeMap.keySet ( ) ) { android.net.Uri uri = Settings.Secure.getUriFor ( setting ) ; mActivityManagerService.mContext.getContentResolver ( ) . registerContentObserver ( uri , false , this ) ; } }
public void test_unblock_Exception ( ) throws java.lang.Exception { setup ( false ) ; try { key.unblock ( sourceAddress ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } key.drop ( ) ; try { key.unblock ( sourceAddress ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } }
public void modemReset ( int indicationType , java.lang.String var2 ) { }
private java.lang.String dumpEntry ( int offset ) { if ( com.android.tools.lint.checks.ApiLookup.DEBUG_SEARCH ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( int i = offset ; i < ( mData.length ) ; i ++ ) { if ( ( mData [ i ] ) == 0 ) { break ; } char c = ( ( char ) ( com.google.common.primitives.UnsignedBytes.toInt ( mData [ i ] ) ) ) ; sb.append ( c ) ; } return sb.toString ( ) ; } else { return "<disabled>" ; } }
private static java.lang.ref.WeakReference < java.lang.ClassLoader > setUpLoadLibrary ( java.lang.reflect.Constructor constructor ) throws java.lang.Exception { java.lang.ClassLoader loader = ( ( java.lang.ClassLoader ) ( constructor.newInstance ( Main.DEX_FILE , java.lang.ClassLoader.getSystemClassLoader ( ) ) ) ) ; java.lang.Class intHolder = loader.loadClass ( "IntHolder" ) ; java.lang.reflect.Method loadLibrary = intHolder.getDeclaredMethod ( "loadLibrary" , java.lang.String.class ) ; loadLibrary.invoke ( intHolder , Main.nativeLibraryName ) ; Main.waitForCompilation ( intHolder ) ; return new java.lang.ref.WeakReference ( loader ) ; }
private static boolean isCLDRFieldName ( int index ) { if ( ( index < 0 ) && ( index >= ( com.ibm.icu.text.DateTimePatternGenerator.TYPE_LIMIT ) ) ) { return false ; } if ( ( com.ibm.icu.text.DateTimePatternGenerator.CLDR_FIELD_NAME [ index ] . charAt ( 0 ) ) == '*' ) { return false ; } else { return true ; } }
public static java.lang.String externalClassVersion ( int classVersion ) { switch ( classVersion ) { case proguard.classfile.ClassConstants.INTERNAL_CLASS_VERSION_1_0 : return proguard.classfile.ClassConstants.EXTERNAL_CLASS_VERSION_1_0 ; case proguard.classfile.ClassConstants.INTERNAL_CLASS_VERSION_1_2 : return proguard.classfile.ClassConstants.EXTERNAL_CLASS_VERSION_1_2 ; case proguard.classfile.ClassConstants.INTERNAL_CLASS_VERSION_1_3 : return proguard.classfile.ClassConstants.EXTERNAL_CLASS_VERSION_1_3 ; case proguard.classfile.ClassConstants.INTERNAL_CLASS_VERSION_1_4 : return proguard.classfile.ClassConstants.EXTERNAL_CLASS_VERSION_1_4 ; case proguard.classfile.ClassConstants.INTERNAL_CLASS_VERSION_1_5 : return proguard.classfile.ClassConstants.EXTERNAL_CLASS_VERSION_1_5 ; case proguard.classfile.ClassConstants.INTERNAL_CLASS_VERSION_1_6 : return proguard.classfile.ClassConstants.EXTERNAL_CLASS_VERSION_1_6 ; case proguard.classfile.ClassConstants.INTERNAL_CLASS_VERSION_1_7 : return proguard.classfile.ClassConstants.EXTERNAL_CLASS_VERSION_1_7 ; default : return null ; } }
public void write ( int b ) { if ( same ) { if ( ( ( myPageSize ) == ( address ) ) && ( ( address ) < ( myFileLength ) ) ) { base += address ; buffer = storage.getByteBuffer ( base , false ) ; address = 0 ; } same = ( ( address ) < ( myFileLength ) ) && ( ( buffer.get ( ( ( address ) ++ ) ) ) == ( ( byte ) ( b ) ) ) ; } }
public void onCreate ( android.os.Bundle savedInstanceState ) { android.content.Context context = getActivity ( ) ; com.android.tv.ApplicationSingletons app = com.android.tv.TvApplication.getSingletons ( context ) ; mInputManager = app.getTvInputManagerHelper ( ) ; mChannelDataManager = app.getChannelDataManager ( ) ; mSetupUtils = com.android.tv.util.SetupUtils.getInstance ( context ) ; buildInputs ( ) ; mInputManager.addCallback ( mInputCallback ) ; mChannelDataManager.addListener ( mChannelDataManagerListener ) ; super . onCreate ( savedInstanceState ) ; mParentFragment = ( ( com.android.tv.onboarding.SetupSourcesFragment ) ( getParentFragment ( ) ) ) ; }
public boolean setCallTransitionFlag ( boolean flag ) { com.android.internal.telephony.ril_proto.RilCtrlCmds.CtrlSetCallTransitionFlag req = new com.android.internal.telephony.ril_proto.RilCtrlCmds.CtrlSetCallTransitionFlag ( ) ; req.setFlag ( flag ) ; if ( ! ( sendCtrlCommand ( RilCtrlCmds.CTRL_CMD_SET_CALL_TRANSITION_FLAG , 0 , 0 , req ) ) ) { android.util.Log.v ( com.android.internal.telephony.mockril.MockRilController.TAG , "send CTRL_CMD_SET_CALL_TRANSITION_FLAG request failed" ) ; return false ; } return true ; }
public void createOatDir ( java.lang.String oatDir , java.lang.String dexInstructionSet ) throws com.android.internal.os.InstallerConnection.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.createOatDir ( oatDir , dexInstructionSet ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNewArray expr ) { performCommonChecks ( expr ) ; com.android.jack.ir.ast.JNewArray other = otherOrMe ( expr ) ; ensure ( equal ( expr.getArrayType ( ) , other.getArrayType ( ) ) ) ; ensure ( ( ( expr.getDims ( ) . size ( ) ) == ( other.getDims ( ) . size ( ) ) ) ) ; ensure ( ( ( expr.getInitializers ( ) . size ( ) ) == ( other.getInitializers ( ) . size ( ) ) ) ) ; }
int getCount ( ) { int count = 0 ; if ( ( contactsCursor ) != null ) { count += contactsCursor.getCount ( ) ; } if ( ( nearbyPlacesCursor ) != null ) { count += nearbyPlacesCursor.getCount ( ) ; } if ( ( corpDirectoryCursor ) != null ) { count += corpDirectoryCursor.getCount ( ) ; } return count ; }
public void copyFromUnchecked ( int [ ] d ) { mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFromUnchecked ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFromUnchecked ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFromUnchecked ( 0 , mCurrentCount , d ) ; } }
public java.util.Properties loadProperties ( @ com.android.annotations.NonNull java.io.File file ) { java.util.Properties props = new java.util.Properties ( ) ; java.io.FileInputStream fis = null ; try { fis = new java.io.FileInputStream ( file ) ; props.load ( fis ) ; } catch ( java.io.IOException ignore ) { } finally { if ( fis != null ) { try { fis.close ( ) ; } catch ( java.lang.Exception ignore ) { } } } return props ; }
static void $opt$noinline$constantIndexing2 ( int [ ] array ) { array [ 1 ] = 1 ; array [ 2 ] = 1 ; array [ 3 ] = 1 ; array [ 4 ] = 1 ; array [ ( - 1 ) ] = 1 ; if ( ( array [ 1 ] ) == 1 ) { throw new java.lang.Error ( "" ) ; } }
public void testKeepPausedAfterVisitingHome ( ) { mDevice.pressKeyCode ( KeyEvent.KEYCODE_MEDIA_PAUSE ) ; mMenuHelper.assertWaitForMenu ( ) ; assertButtonHasFocus ( com.android.tv.tests.ui.PlayControlsRowViewTest.BUTTON_INDEX_PLAY_PAUSE ) ; mDevice.pressHome ( ) ; mDevice.waitForIdle ( ) ; mDevice.pressHome ( ) ; mDevice.waitForIdle ( ) ; mMenuHelper.assertWaitForMenu ( ) ; assertButtonHasFocus ( com.android.tv.tests.ui.PlayControlsRowViewTest.BUTTON_INDEX_PLAY_PAUSE ) ; }
private static void killProcessGroup ( int uid , int pid ) { android.os.Trace.traceBegin ( Trace.TRACE_TAG_ACTIVITY_MANAGER , "killProcessGroup" ) ; java.lang.Process.killProcessGroup ( uid , pid ) ; android.os.Trace.traceEnd ( Trace.TRACE_TAG_ACTIVITY_MANAGER ) ; }
public void testPinEntryMalformedEntry ( ) throws java.lang.Exception { java.lang.String entry = "*.google.com=" ; try { new org.conscrypt.PinListEntry ( entry , new org.conscrypt.TrustedCertificateStore ( ) ) ; fail ( "Accepted an empty pin list entry." ) ; } catch ( org.conscrypt.PinEntryException expected ) { } }
public final void actionPerformed ( final com.intellij.ui.tabs.impl.AnActionEvent e ) { com.intellij.ui.tabs.impl.JBTabsImpl tabs = e.getData ( com.intellij.ui.tabs.impl.JBTabsImpl.NAVIGATION_ACTIONS_KEY ) ; tabs = findNavigatableTabs ( tabs ) ; if ( tabs == null ) return ; final int index = tabs.myVisibleInfos.indexOf ( tabs.getSelectedInfo ( ) ) ; if ( index == ( - 1 ) ) return ; _actionPerformed ( e , tabs , index ) ; }
public boolean isOffhookForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( canReadPhoneState ( callingPackage , "isOffhookForSubscriber" ) ) ) { return false ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return ( phone.getState ( ) ) == ( PhoneConstants.State.OFFHOOK ) ; } else { return false ; } }
private void showUserSwitchDialog ( int userId , java.lang.String userName ) { android.app.Dialog d = new com.android.server.am.UserSwitchingDialog ( this , mContext , userId , userName , true ) ; d.show ( ) ; }
private java.util.Properties readInfo ( java.io.File info ) { if ( info.exists ( ) ) { java.util.Properties props = new java.util.Properties ( ) ; java.io.InputStream is = null ; try { is = new java.io.FileInputStream ( info ) ; props.load ( is ) ; return props ; } catch ( java.io.IOException ignore ) { } finally { if ( is != null ) { try { is.close ( ) ; } catch ( java.io.IOException ignore ) { } } } } return null ; }
public boolean syncUid ( int sourceUid , int targetUid ) { try { mError = mBinder.sync_uid ( sourceUid , targetUid ) ; return ( mError ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
void makeWindowFreezingScreenIfNeededLocked ( com.android.server.wm.WindowState w ) { if ( ! ( okToDisplay ( ) ) ) { if ( com.android.server.wm.WindowManagerService.DEBUG_ORIENTATION ) android.util.Slog.v ( com.android.server.wm.WindowManagerService.TAG , ( "Changing surface while display frozen: " + w ) ) ; w.mOrientationChanging = true ; mInnerFields.mOrientationChangeComplete = false ; if ( ! ( mWindowsFreezingScreen ) ) { mWindowsFreezingScreen = true ; mH.removeMessages ( com.android.server.wm.WindowManagerService.H.WINDOW_FREEZE_TIMEOUT ) ; mH.sendMessageDelayed ( mH.obtainMessage ( com.android.server.wm.WindowManagerService.H.WINDOW_FREEZE_TIMEOUT ) , com.android.server.wm.WindowManagerService.WINDOW_FREEZE_TIMEOUT_DURATION ) ; } } }
public int getVoiceMessageCount ( ) { int voicemailCount = mIccRecords.getVoiceMessageCount ( ) ; if ( voicemailCount == 0 ) { android.content.SharedPreferences sp = android.preference.PreferenceManager.getDefaultSharedPreferences ( getContext ( ) ) ; voicemailCount = sp.getInt ( com.android.internal.telephony.cdma.CDMAPhone.VM_COUNT_CDMA , 0 ) ; } return voicemailCount ; }
synchronized void nAllocationResize1D ( int id , int dimX ) { validate ( ) ; rsnAllocationResize1D ( mContext , id , dimX ) ; }
public java.lang.String getVersionName ( ) { java.lang.String versionName = mMergedFlavor.getVersionName ( ) ; java.lang.String versionSuffix = mBuildType.getVersionNameSuffix ( ) ; if ( ( versionSuffix != null ) && ( ! ( versionSuffix.isEmpty ( ) ) ) ) { if ( versionName == null ) { if ( ( mType ) != ( com.android.builder.core.VariantConfiguration.Type.TEST ) ) { versionName = getVersionNameFromManifest ( ) ; } else { versionName = "" ; } } versionName = versionName + versionSuffix ; } return versionName ; }
public int getSupportedFeatureSet ( ) { synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { return com.android.server.wifi.WifiNative.getSupportedFeatureSetNative ( com.android.server.wifi.WifiNative.sWlan0Index ) ; } else { android.util.Log.d ( com.android.server.wifi.WifiNative.TAG , "Failing getSupportedFeatureset because HAL isn't started" ) ; return 0 ; } } }
private static void test_String_charAtExc ( ) { java.lang.String testStr = "Now is the time" ; try { testStr.charAt ( ( - 1 ) ) ; junit.framework.Assert.fail ( ) ; } catch ( java.lang.StringIndexOutOfBoundsException expected ) { } try { testStr.charAt ( 80 ) ; junit.framework.Assert.fail ( ) ; } catch ( java.lang.StringIndexOutOfBoundsException expected ) { } java.lang.String strNull = null ; try { strNull.charAt ( 0 ) ; junit.framework.Assert.fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } }
static com.google.i18n.phonenumbers.Phonemetadata.PhoneMetadata getAlternateFormatsForCountry ( int countryCallingCode ) { if ( ! ( com.google.i18n.phonenumbers.MetadataManager.countryCodeSet.contains ( countryCallingCode ) ) ) { return null ; } synchronized ( com.google.i18n.phonenumbers.MetadataManager.callingCodeToAlternateFormatsMap ) { if ( ! ( com.google.i18n.phonenumbers.MetadataManager.callingCodeToAlternateFormatsMap.containsKey ( countryCallingCode ) ) ) { com.google.i18n.phonenumbers.MetadataManager.loadAlternateFormatsMetadataFromFile ( countryCallingCode ) ; } } return com.google.i18n.phonenumbers.MetadataManager.callingCodeToAlternateFormatsMap.get ( countryCallingCode ) ; }
public com.android.dx.ssa.RegisterSpecList getSources ( ) { if ( ( sources ) != null ) { return sources ; } if ( ( operands.size ( ) ) == 0 ) { return RegisterSpecList.EMPTY ; } int szSources = operands.size ( ) ; sources = new com.android.dx.ssa.RegisterSpecList ( szSources ) ; for ( int i = 0 ; i < szSources ; i ++ ) { com.android.dx.ssa.PhiInsn.Operand o = operands.get ( i ) ; sources.set ( i , o.regSpec ) ; } sources.setImmutable ( ) ; return sources ; }
public boolean equals ( java.lang.Object other ) { if ( ( this ) == other ) return true ; if ( ! ( other instanceof sun.security.x509.KeyIdentifier ) ) return false ; return java.util.Arrays.equals ( octetString , ( ( sun.security.x509.KeyIdentifier ) ( other ) ) . getIdentifier ( ) ) ; }
public final void testLocalSdkTest_getPkgInfo_Tools ( ) { assertNull ( mLS.getPkgInfo ( LocalSdk.PKG_TOOLS ) ) ; mLS.clearLocalPkg ( LocalSdk.PKG_ALL ) ; mFOp.recordExistingFolder ( "/sdk/tools" ) ; mFOp.recordExistingFile ( "/sdk/tools/source.properties" , ( "Pkg.License=Terms and Conditions\n" + ( ( ( ( ( "Archive.Os=WINDOWS\n" + "Pkg.Revision=22.3.4\n" ) + "Platform.MinPlatformToolsRev=18\n" ) + "Pkg.LicenseRef=android-sdk-license\n" ) + "Archive.Arch=ANY\n" ) + "Pkg.SourceUrl=https\\://dl-ssl.google.com/android/repository/repository-8.xml" ) ) ) ; mFOp.recordExistingFile ( ( "/sdk/tools/" + ( com.android.SdkConstants.androidCmdName ( ) ) ) , "placeholder" ) ; mFOp.recordExistingFile ( ( "/sdk/tools/" + ( com.android.SdkConstants.FN_EMULATOR ) ) , "placeholder" ) ; com.android.sdklib.repository.local.LocalPkgInfo pi = mLS.getPkgInfo ( LocalSdk.PKG_TOOLS ) ; assertNotNull ( pi ) ; assertTrue ( ( pi instanceof com.android.sdklib.repository.local.LocalToolPkgInfo ) ) ; assertEquals ( new java.io.File ( "/sdk/tools" ) , pi.getLocalDir ( ) ) ; assertSame ( mLS , pi.getLocalSdk ( ) ) ; assertEquals ( null , pi.getLoadError ( ) ) ; assertEquals ( new com.android.sdklib.repository.FullRevision ( 22 , 3 , 4 ) , pi.getFullRevision ( ) ) ; assertEquals ( "<LocalToolPkgInfo FullRev=22.3.4>" , pi.toString ( ) ) ; java.lang.Package pkg = pi.getPackage ( ) ; assertNotNull ( pkg ) ; assertEquals ( new com.android.sdklib.repository.FullRevision ( 22 , 3 , 4 ) , pkg.getRevision ( ) ) ; assertEquals ( "Android SDK Tools, revision 22.3.4" , pkg.getShortDescription ( ) ) ; assertTrue ( pkg.isLocal ( ) ) ; com.android.sdklib.internal.repository.archives.Archive a = pkg.getArchives ( ) [ 0 ] ; assertTrue ( a.isLocal ( ) ) ; assertEquals ( "/sdk/tools" , mFOp.getAgnosticAbsPath ( a.getLocalOsPath ( ) ) ) ; }
public com.android.sdklib.BuildToolInfo getBuildTools ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Project project ) { com.android.sdklib.repositoryv2.AndroidSdkHandler sdk = getSdk ( ) ; return sdk != null ? sdk.getLatestBuildTool ( getRepositoryLogger ( ) ) : null ; }
public void testListIterator1_IndexOutOfBoundsException ( ) { try { java.util.concurrent.CopyOnWriteArrayList c = new java.util.concurrent.CopyOnWriteArrayList ( ) ; c.listIterator ( ( - 1 ) ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } }
private void setImageDescriptor ( ) { org.eclipse.jface.resource.ImageDescriptor desc = com.android.ide.eclipse.adt.internal.editors.IconFactory.getInstance ( ) . getImageDescriptor ( com.android.ide.eclipse.adt.internal.wizards.templates.NewProjectWizard.PROJECT_LOGO_LARGE ) ; setDefaultPageImageDescriptor ( desc ) ; }
private void onInitiateDataPathResponseSuccessLocal ( android.os.Message command , int ndpId ) { if ( com.android.server.wifi.aware.WifiAwareStateManager.VDBG ) { android.util.Log.v ( com.android.server.wifi.aware.WifiAwareStateManager.TAG , ( ( ( "onInitiateDataPathResponseSuccessLocal: command=" + command ) + ", ndpId=" ) + ndpId ) ) ; } mDataPathMgr.onDataPathInitiateSuccess ( ( ( java.lang.String ) ( command.obj ) ) , ndpId ) ; }
public java.lang.String getName ( ) { java.lang.String name = super . getName ( ) ; if ( name.equals ( com.android.ide.eclipse.adt.internal.editors.layout.descriptors.LayoutDescriptors.VIEW_FRAGMENT ) ) { mFragmentLayout = findFragmentLayout ( ) ; if ( ( mFragmentLayout ) != null ) { return com.android.ide.eclipse.adt.internal.editors.layout.descriptors.LayoutDescriptors.VIEW_INCLUDE ; } } else { mFragmentLayout = null ; } return name ; }
public E poll ( long timeout , java.util.concurrent.TimeUnit unit ) throws java.lang.InterruptedException { long nanos = unit.toNanos ( timeout ) ; final java.util.concurrent.locks.ReentrantLock lock = this . lock ; lock.lockInterruptibly ( ) ; E result ; try { while ( ( ( result = extract ( ) ) == null ) && ( nanos > 0 ) ) nanos = notEmpty.awaitNanos ( nanos ) ; } finally { lock.unlock ( ) ; } return result ; }
public void connectionForPatchRequest ( ) throws java.lang.Exception { com.android.volley.mock.TestRequest.Patch request = new com.android.volley.mock.TestRequest.Patch ( ) ; assertEquals ( request.getMethod ( ) , Method.PATCH ) ; com.android.volley.toolbox.HurlStack.setConnectionParametersForRequest ( mMockConnection , request ) ; assertEquals ( "PATCH" , mMockConnection.getRequestMethod ( ) ) ; assertFalse ( mMockConnection.getDoOutput ( ) ) ; }
public void test_checkedSetSerializationCompatability ( ) throws java.lang.Exception { java.util.Set < java.lang.String > c = new java.util.HashSet < java.lang.String > ( ) ; assertFalse ( ( c instanceof java.util.SortedSet ) ) ; c = java.util.Collections.checkedSet ( c , java.lang.String.class ) ; tests.util.SerializationTester.assertCompabilityEquals ( c , "serialization/java/util/Collections_CheckedSet.golden.ser" ) ; }
public boolean equals ( java.lang.Object anObject ) { if ( anObject == ( this ) ) { return true ; } if ( ! ( anObject instanceof org.bouncycastle.math.ec.ECCurve.Fp ) ) { return false ; } org.bouncycastle.math.ec.ECCurve.Fp other = ( ( org.bouncycastle.math.ec.ECCurve.Fp ) ( anObject ) ) ; return ( ( this . q.equals ( other.q ) ) && ( a.equals ( other.a ) ) ) && ( b.equals ( other.b ) ) ; }
private java.lang.String getRealCompilerFilter ( android.content.pm.ApplicationInfo info , java.lang.String targetCompilerFilter , boolean isUsedByOtherApps ) { int flags = info.flags ; boolean vmSafeMode = ( flags & ( android.content.pm.ApplicationInfo.FLAG_VM_SAFE_MODE ) ) != 0 ; if ( vmSafeMode ) { return com.android.server.pm.PackageManagerServiceCompilerMapping.getNonProfileGuidedCompilerFilter ( targetCompilerFilter ) ; } if ( ( dalvik.system.DexFile.isProfileGuidedCompilerFilter ( targetCompilerFilter ) ) && isUsedByOtherApps ) { return com.android.server.pm.PackageManagerServiceCompilerMapping.getNonProfileGuidedCompilerFilter ( targetCompilerFilter ) ; } return targetCompilerFilter ; }
public ActivityManager.TaskThumbnail getTaskThumbnail ( int id ) { synchronized ( this ) { enforceCallingPermission ( android.Manifest.permission.READ_FRAME_BUFFER , "getTaskThumbnail()" ) ; com.android.server.am.TaskRecord tr = mStackSupervisor.anyTaskForIdLocked ( id , false ) ; if ( tr != null ) { return tr.getTaskThumbnailLocked ( ) ; } } return null ; }
public void testGetRestrictBackgroundStatus_whitelisted ( ) throws java.lang.Exception { if ( ! ( isSupported ( ) ) ) return ; setRestrictBackground ( true ) ; assertRestrictBackgroundChangedReceived ( 1 ) ; assertDataSaverStatusOnBackground ( android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_ENABLED ) ; addRestrictBackgroundWhitelist ( mUid ) ; assertRestrictBackgroundChangedReceived ( 2 ) ; assertDataSaverStatusOnBackground ( android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_WHITELISTED ) ; removeRestrictBackgroundWhitelist ( mUid ) ; assertRestrictBackgroundChangedReceived ( 3 ) ; assertDataSaverStatusOnBackground ( android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_ENABLED ) ; assertsForegroundAlwaysHasNetworkAccess ( ) ; assertDataSaverStatusOnBackground ( android.net.ConnectivityManager.RESTRICT_BACKGROUND_STATUS_ENABLED ) ; }
public void registerBuildTypeSourceProvider ( @ com.android.annotations.NonNull java.lang.String name , @ com.android.annotations.NonNull com.android.build.gradle.internal.dsl.GradleBuildType buildType , @ com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider ) { if ( ( extraArtifactMap.get ( name ) ) == null ) { throw new java.lang.IllegalArgumentException ( "Artifact with name $name is not yet registered. Use registerArtifactType()" ) ; } extraBuildTypeSourceProviders.put ( buildType.getName ( ) , new com.android.build.gradle.internal.variant.DefaultSourceProviderContainer ( name , sourceProvider ) ) ; }
public java.lang.Boolean bluetoothHspConnect ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "device" , description = "Name or MAC address of a bluetooth device." ) java.lang.String device ) throws java.lang.Exception { if ( ( com.googlecode.android_scripting.facade.bluetooth.BluetoothHspFacade.sHspProfile ) == null ) return false ; android.bluetooth.BluetoothDevice mDevice = com.googlecode.android_scripting.facade.bluetooth.BluetoothFacade.getDevice ( BluetoothFacade.DiscoveredDevices , device ) ; com.googlecode.android_scripting.Log.d ( ( "Connecting to device " + ( mDevice.getAliasName ( ) ) ) ) ; return hspConnect ( mDevice ) ; }
public void testDoNothing ( ) { com.android.manifmerger.Actions actions = mActionRecorderBuilder.build ( ) ; actions.log ( mLoggerMock ) ; org.mockito.Mockito.verify ( mLoggerMock ) . info ( Actions.HEADER ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mLoggerMock ) ; assertTrue ( actions.getNodeKeys ( ) . isEmpty ( ) ) ; }
private static java.lang.String getCurrentCountryIso ( android.content.Context context , java.util.Locale locale ) { java.lang.String countryIso ; android.location.CountryDetector detector = ( ( android.location.CountryDetector ) ( context.getSystemService ( Context.COUNTRY_DETECTOR ) ) ) ; if ( detector != null ) { countryIso = detector.detectCountry ( ) . getCountryIso ( ) ; } else { countryIso = locale.getCountry ( ) ; android.util.Log.w ( com.android.internal.telephony.CallerInfo.TAG , ( "No CountryDetector; falling back to countryIso based on locale: " + countryIso ) ) ; } return countryIso ; }
public void testGetTimeZoneRegionAll ( ) { for ( java.lang.String id : java.util.TimeZone.getAvailableIDs ( ) ) { java.util.TimeZone zone = java.util.TimeZone.getTimeZone ( id ) ; assertNotNull ( id , zone ) ; java.lang.String region = com.android.ide.common.resources.LocaleManager.getTimeZoneRegion ( zone ) ; assertNotNull ( region , zone.getID ( ) ) ; } }
private com.android.jack.ir.ast.JExpressionStatement makeRequestCall ( com.android.jack.ir.sourceinfo.SourceInfo info ) { assert ( ( ( lockClass ) != null ) && ( ( requestClass ) != null ) ) && ( ( requestMethodId ) != null ) ; return new com.android.jack.ir.ast.JExpressionStatement ( info , new com.android.jack.ir.ast.JMethodCall ( info , null , requestClass , requestMethodId , false ) ) ; }
public java.math.BigInteger getSerialNumber ( ) { return new java.math.BigInteger ( org.conscrypt.NativeCrypto.X509_get_serialNumber ( mContext ) ) ; }
public static java.util.List < java.lang.String > readLines ( java.nio.file.Path path ) throws java.io.IOException { java.util.List < java.lang.String > result = new java.util.ArrayList < > ( ) ; try ( java.io.BufferedReader reader = new java.io.BufferedReader ( new java.io.FileReader ( path.toFile ( ) ) ) ) { java.lang.String line ; while ( ( line = reader.readLine ( ) ) != null ) { result.add ( line ) ; } } return result ; }
public static com.android.jack.dx.rop.cst.CstType getCstType ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JType type ) { com.android.jack.dx.rop.type.Type ropType = com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx ( type ) ; com.android.jack.dx.rop.cst.CstType cstType = com.android.jack.dx.rop.cst.CstType.intern ( ropType ) ; return cstType ; }
public void tearDown ( ) throws java.lang.Exception { mTelecomSystem = null ; super . tearDown ( ) ; }
public static java.text.DateFormat getTimeFormat ( android.content.Context context ) { boolean b24 = android.text.format.DateFormat.is24HourFormat ( context ) ; int res ; if ( b24 ) { res = R.string.twenty_four_hour_time_format ; } else { res = R.string.twelve_hour_time_format ; } return new java.text.SimpleDateFormat ( context.getString ( res ) ) ; }
public com.sun.tools.doclets.internal.toolkit.taglets.TagletOutput getTagletOutput ( com.sun.javadoc.Tag tag , com.sun.tools.doclets.internal.toolkit.taglets.TagletWriter writer ) throws java.lang.IllegalArgumentException { com.sun.tools.doclets.internal.toolkit.taglets.TagletOutput out = writer.getTagletOutputInstance ( ) ; out.setOutput ( toString ( tag ) ) ; return out ; }
public void sealApk ( ) throws com.android.sdklib.build.ApkBuilder.ApkCreationException , com.android.sdklib.build.ApkBuilder.SealedApkException { if ( mIsSealed ) { throw new com.android.sdklib.build.ApkBuilder.SealedApkException ( "APK is already sealed" ) ; } try { mBuilder.close ( ) ; mIsSealed = true ; } catch ( java.lang.Exception e ) { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException ( e , "Failed to seal APK" ) ; } }
public java.lang.String replace ( char oldChar , char newChar ) { java.lang.String replaced = this ; if ( oldChar != newChar ) { for ( int i = 0 ; i < ( count ) ; ++ i ) { if ( ( charAt ( i ) ) == oldChar ) { if ( replaced == ( this ) ) { replaced = java.lang.StringFactory.newStringFromString ( this ) ; } replaced.setCharAt ( i , newChar ) ; } } } return replaced ; }
public void addTcpStatsResult ( int sent , int lost , int rttUs , int sentAckDiffMs ) { pendingSummary.tcpLossRate.count ( lost , sent ) ; pendingSummary.roundTripTimeUs.count ( rttUs ) ; pendingSummary.sentAckTimeDiffenceMs.count ( sentAckDiffMs ) ; }
public static android.content.Intent getIntent ( android.content.Context context ) { android.content.Intent intent = new android.content.Intent ( ) ; intent.setComponent ( new android.content.ComponentName ( context , "com.android.dialer.main.impl.MainActivity" ) ) ; intent.setAction ( Intent.ACTION_VIEW ) ; intent.setFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; return intent ; }
public void defaultWriteObject ( ) throws java.io.IOException { if ( ( curContext ) == null ) { throw new java.io.NotActiveException ( "not in call to writeObject" ) ; } java.lang.Object curObj = curContext.getObj ( ) ; java.io.ObjectStreamClass curDesc = curContext.getDesc ( ) ; bout.setBlockDataMode ( false ) ; defaultWriteFields ( curObj , curDesc ) ; bout.setBlockDataMode ( true ) ; }
protected java.util.Properties createExpectedProps ( ) { java.util.Properties props = super . createExpectedProps ( ) ; props.setProperty ( PkgProps.VERSION_API_LEVEL , "5" ) ; props.setProperty ( PkgProps.SYS_IMG_ABI , "armeabi-v7a" ) ; props.setProperty ( PkgProps.SYS_IMG_TAG_ID , "default" ) ; props.setProperty ( PkgProps.SYS_IMG_TAG_DISPLAY , "Default" ) ; return props ; }
private static void checkIndex ( int length , int offset , int count ) { if ( offset < 0 ) { throw new java.lang.IndexOutOfBoundsException ( "offset < 0" ) ; } else if ( count < 0 ) { throw new java.lang.IndexOutOfBoundsException ( "count < 0" ) ; } else if ( offset > length ) { throw new java.lang.IndexOutOfBoundsException ( "offset > length" ) ; } else if ( offset > ( length - count ) ) { throw new java.lang.IndexOutOfBoundsException ( "offset + count > length" ) ; } }
public boolean isSimPinEnabled ( ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.isSimPinEnabled ( getOpPackageName ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#isSimPinEnabled" , e ) ; } return false ; }
protected org.eclipse.core.runtime.IStatus run ( org.eclipse.core.runtime.IProgressMonitor monitor ) { try { com.android.ide.eclipse.adt.internal.project.ExportHelper.export ( project , new java.io.File ( saveLocation ) , null , null , monitor ) ; com.android.ide.eclipse.adt.AdtPlugin.displayWarning ( "Android IDE Plug-in" , java.lang.String.format ( ( "An unsigned package of the application was saved at\n%1$s\n\n" + ( ( ( ( "Before publishing the application you will need to:\n" + "- Sign the application with your release key,\n" ) + "- run zipalign on the signed package. ZipAlign is located in <SDK>/tools/\n\n" ) + "Aligning applications allows Android to use application resources\n" ) + "more efficiently." ) ) , saveLocation ) ) ; return org.eclipse.core.runtime.Status.OK_STATUS ; } catch ( org.eclipse.core.runtime.CoreException e ) { return e.getStatus ( ) ; } }
public static com.android.manifmerger.XmlDocument load ( java.lang.String displayName , java.io.File xmlFile ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.io.InputStream inputStream = new java.io.BufferedInputStream ( new java.io.FileInputStream ( xmlFile ) ) ; com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser ( ) ; org.w3c.dom.Document domDocument = positionXmlParser.parse ( inputStream ) ; return domDocument != null ? new com.android.manifmerger.XmlDocument ( positionXmlParser , new com.android.manifmerger.XmlLoader.FileSourceLocation ( displayName , xmlFile ) , domDocument.getDocumentElement ( ) ) : null ; }
public void enter ( ) { if ( ! ( configureIfaceIp ( true ) ) ) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_IFACE_CFG_ERROR ; transitionTo ( mInitialState ) ; return ; } try { mNMService.tetherInterface ( mIfaceName ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , ( "Error Tethering: " + ( e.toString ( ) ) ) ) ; mLastError = android.net.ConnectivityManager.TETHER_ERROR_TETHER_IFACE_ERROR ; transitionTo ( mInitialState ) ; return ; } if ( ! ( mIPv6TetherSvc.start ( ) ) ) { android.util.Log.e ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , "Failed to start IPv6TetheringInterfaceServices" ) ; } }
private com.android.tools.lint.checks.PermissionFinder.Result getPermissionRequirement ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedField field , @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation ) { com.android.tools.lint.checks.PermissionRequirement requirement = com.android.tools.lint.checks.PermissionRequirement.create ( mContext , annotation ) ; com.android.tools.lint.client.api.JavaParser.ResolvedClass containingClass = field.getContainingClass ( ) ; java.lang.String name = ( containingClass != null ) ? ( ( containingClass.getSimpleName ( ) ) + "." ) + ( field.getName ( ) ) : field.getName ( ) ; return new com.android.tools.lint.checks.PermissionFinder.Result ( mOperation , requirement , name ) ; }
final java.lang.String readFile ( java.lang.String filename ) { try { java.io.FileInputStream fs = new java.io.FileInputStream ( filename ) ; byte [ ] inp = new byte [ 8192 ] ; int size = fs.read ( inp ) ; fs.close ( ) ; return new java.lang.String ( inp , 0 , 0 , size ) ; } catch ( java.io.IOException e ) { } return "" ; }
public void test_getComment_unset ( ) throws java.lang.Exception { java.io.File file = createTemporaryZipFile ( ) ; java.util.zip.ZipOutputStream out = createZipOutputStream ( file ) ; java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry ( "test entry" ) ; ze.setComment ( "per-entry comment" ) ; out.putNextEntry ( ze ) ; out.close ( ) ; java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile ( file ) ; assertEquals ( null , zipFile.getComment ( ) ) ; }
public void test3_findFirst2 ( ) { for ( int i = 0 ; i < 32 ; i ++ ) { assertEquals ( com.android.dx.util._tests.BitsTest.label ( i ) , ( - 1 ) , com.android.dx.util.Bits.findFirst ( ( ( 1 << i ) > > > 1 ) , i ) ) ; } }
public void copyFromUnchecked ( byte [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copyFromUnchecked" ) ; mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFromUnchecked ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFromUnchecked ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFromUnchecked ( 0 , mCurrentCount , d ) ; } android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
public final int doFinal ( byte [ ] output , int outputOffset ) throws javax.crypto.BadPaddingException , javax.crypto.IllegalBlockSizeException , javax.crypto.ShortBufferException { if ( ( ( mode ) != ( javax.crypto.Cipher.ENCRYPT_MODE ) ) && ( ( mode ) != ( javax.crypto.Cipher.DECRYPT_MODE ) ) ) { throw new java.lang.IllegalStateException ( ) ; } if ( outputOffset < 0 ) { throw new java.lang.IllegalArgumentException ( ( "outputOffset < 0. outputOffset=" + outputOffset ) ) ; } return spiImpl.engineDoFinal ( null , 0 , 0 , output , outputOffset ) ; }
public V get ( @ javax.annotation.Nullable java.lang.Object rowKey , @ javax.annotation.Nullable java.lang.Object columnKey ) { java.lang.Integer rowIndex = rowKeyToIndex.get ( rowKey ) ; java.lang.Integer columnIndex = columnKeyToIndex.get ( columnKey ) ; return ( rowIndex == null ) || ( columnIndex == null ) ? null : array [ rowIndex ] [ columnIndex ] ; }
public void delete ( java.lang.String name ) throws java.io.IOException { if ( name.equalsIgnoreCase ( sun.security.x509.CRLDistributionPointsExtension.POINTS ) ) { distributionPoints = new java.util.ArrayList < sun.security.x509.DistributionPoint > ( ) ; } else { throw new java.io.IOException ( ( ( ( ( ( "Attribute name [" + name ) + "] not recognized by " ) + "CertAttrSet:" ) + ( extensionName ) ) + "." ) ) ; } encodeThis ( ) ; }
public final int startActivityWithConfig ( android.app.IApplicationThread caller , android.content.Intent intent , java.lang.String resolvedType , android.net.Uri [ ] grantedUriPermissions , int grantedMode , android.os.IBinder resultTo , java.lang.String resultWho , int requestCode , boolean onlyIfNeeded , boolean debug , android.content.res.Configuration config ) { return startActivityMayWait ( caller , intent , resolvedType , grantedUriPermissions , grantedMode , resultTo , resultWho , requestCode , onlyIfNeeded , debug , null , config ) ; }
public void removeAllRights ( ) { if ( ( getState ( ) ) == ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) ) { throw new java.lang.IllegalStateException ( "Not Initialized yet" ) ; } _removeAllRights ( mUniqueId ) ; }
public android.hardware.cts.helpers.TestSensorEvent [ ] getEvents ( int count ) { if ( ( mTestSensorEventListener ) == null ) { android.util.Log.w ( android.hardware.cts.helpers.TestSensorManager.LOG_TAG , "No listener registered, returning." ) ; return null ; } mTestSensorEventListener.waitForEvents ( count ) ; android.hardware.cts.helpers.TestSensorEvent [ ] events = mTestSensorEventListener.getEvents ( ) ; mTestSensorEventListener.clearEvents ( ) ; return events ; }
void updateIndex ( int offset , com.android.dx.merge.IndexMap indexMap , int oldIndex , int newIndex ) { if ( ( newIndex < 0 ) || ( newIndex > 65535 ) ) { throw new java.lang.IllegalArgumentException ( ( "proto ID not in [0, 0xffff]: " + newIndex ) ) ; } indexMap.protoIds [ oldIndex ] = ( ( short ) ( newIndex ) ) ; }
public static void showDialog ( ) { if ( com.android.phone.IccNetworkDepersonalizationPanel.sShowingDialog ) { android.util.Log.i ( com.android.phone.TAG , "[IccNetworkDepersonalizationPanel] - showDialog; skipped already shown." ) ; return ; } android.util.Log.i ( com.android.phone.TAG , "[IccNetworkDepersonalizationPanel] - showDialog; showing dialog." ) ; com.android.phone.IccNetworkDepersonalizationPanel.sShowingDialog = true ; com.android.phone.IccNetworkDepersonalizationPanel ndpPanel = new com.android.phone.IccNetworkDepersonalizationPanel ( com.android.phone.PhoneGlobals.getInstance ( ) ) ; ndpPanel.show ( ) ; }
public void createControl ( org.eclipse.swt.widgets.Composite parent ) { mImageCanvas = new com.android.ide.eclipse.gltrace.widgets.ImageCanvas ( parent ) ; mImageCanvas.setFitToCanvas ( false ) ; mFitToCanvasAction = new com.android.ide.eclipse.gltrace.views.FitToCanvasAction ( false , mImageCanvas ) ; mToolBarItems = java.util.Collections.singletonList ( ( ( org.eclipse.jface.action.IContributionItem ) ( new org.eclipse.jface.action.ActionContributionItem ( mFitToCanvasAction ) ) ) ) ; }
private void postMessage ( int messageCode ) { synchronized ( this ) { if ( ( mHandler ) == null ) { mHandler = getNewHandler ( ) ; } if ( ( mHandler ) == null ) { android.telecom.Log.d ( this , "Message %d skipped because there is no handler." , messageCode ) ; } else { mHandler.obtainMessage ( messageCode , null ) . sendToTarget ( ) ; } } }
public boolean replyReport ( byte type , byte id , byte [ ] data ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( ( ( "replyReport(): type=" + type ) + " id=" ) + id ) ) ; com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return false ; } return service.replyReport ( type , id , data ) ; }
protected void postInstall ( android.content.Context context , android.content.Intent intent ) { try { unpackBundle ( ) ; applyUpdate ( ) ; } catch ( java.lang.IllegalArgumentException e ) { android.util.Slog.e ( com.android.server.updates.SELinuxPolicyInstallReceiver.TAG , "SELinux policy update malformed: " , e ) ; } catch ( java.io.IOException e ) { android.util.Slog.e ( com.android.server.updates.SELinuxPolicyInstallReceiver.TAG , "Could not update selinux policy: " , e ) ; } catch ( libcore.io.ErrnoException e ) { android.util.Slog.e ( com.android.server.updates.SELinuxPolicyInstallReceiver.TAG , "Could not update selinux policy: " , e ) ; } }
public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) return true ; if ( ( o == null ) || ( ( getClass ( ) ) != ( o.getClass ( ) ) ) ) return false ; com.google.gct.testing.dimension.GoogleCloudTestingTypeGroup that = ( ( com.google.gct.testing.dimension.GoogleCloudTestingTypeGroup ) ( o ) ) ; if ( ! ( name.equals ( that.name ) ) ) return false ; return true ; }
private void doConnect ( android.net.wifi.WifiManager wifiManager ) { int networkId = wifiManager.addNetwork ( mCurrentWifiConfiguration ) ; if ( networkId < 0 ) { showFailToast ( ) ; } else { wifiManager.connect ( networkId , new android.net.wifi.WifiManager.ActionListener ( ) { @ java.lang.Override public void onSuccess ( ) { android.widget.Toast.makeText ( com.android.nfc.ConfirmConnectToWifiNetworkActivity.this , R.string.status_wifi_connected , Toast.LENGTH_SHORT ) . show ( ) ; } @ java.lang.Override public void onFailure ( int reason ) { showFailToast ( ) ; } } ) ; } }
public void dump ( ) { java.lang.System.out.printf ( "%s [%d, %d]\n" , mName , mGlobalStartTime , mGlobalEndTime ) ; }
public void setSimPowerStateForSlot ( int slotId , boolean powerUp ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) { telephony.setSimPowerStateForSlot ( slotId , powerUp ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#setSimPowerStateForSlot" , e ) ; } catch ( java.lang.SecurityException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Permission error calling ITelephony#setSimPowerStateForSlot" , e ) ; } }
public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) return true ; if ( ! ( o instanceof android.opengl.EGLSurface ) ) return false ; android.opengl.EGLSurface that = ( ( android.opengl.EGLSurface ) ( o ) ) ; return ( getHandle ( ) ) == ( that.getHandle ( ) ) ; }
public void dispose ( ) { synchronized ( mLock ) { if ( com.android.internal.telephony.uicc.UiccCard.DBG ) log ( "Disposing card" ) ; if ( ( mCatService ) != null ) mCatService.dispose ( ) ; for ( com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications ) { if ( app != null ) { app.dispose ( ) ; } } mCatService = null ; mUiccApplications = null ; } }
synchronized void nAllocationData2D ( int id , int xoff , int yoff , int mip , int face , int w , int h , short [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes ) ; }
public void done ( org.eclipse.core.runtime.jobs.IJobChangeEvent event ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart graphicalEditor = getGraphicalEditor ( ) ; if ( graphicalEditor != null ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutActionBar bar = graphicalEditor.getLayoutActionBar ( ) ; if ( ! ( bar.isDisposed ( ) ) ) { bar.updateErrorIndicator ( ) ; } } }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mTelephonyManager = ( ( android.telephony.TelephonyManager ) ( getContext ( ) . getSystemService ( Context.TELEPHONY_SERVICE ) ) ) ; }
public final java.security.Key unwrap ( byte [ ] wrappedKey , java.lang.String wrappedKeyAlgorithm , int wrappedKeyType ) throws java.security.InvalidKeyException , java.security.NoSuchAlgorithmException { if ( ( mode ) != ( javax.crypto.Cipher.UNWRAP_MODE ) ) { throw new java.lang.IllegalStateException ( ) ; } return spiImpl.engineUnwrap ( wrappedKey , wrappedKeyAlgorithm , wrappedKeyType ) ; }
public void testCheckAndSetCaseInsensitive ( ) { assertEquals ( true , lq.checkAndSet ( "b+KOK" , config ) ) ; assertTrue ( ( ( config.getLocaleQualifier ( ) ) != null ) ) ; assertEquals ( "b+kok" , config.getLocaleQualifier ( ) . toString ( ) ) ; assertEquals ( "b+kok" , com.android.ide.common.resources.configuration.LocaleQualifier.getFolderSegment ( "b+KOK" ) ) ; }
public java.net.Socket createSocket ( java.lang.String host , int port , java.net.InetAddress localAddr , int localPort ) throws java.io.IOException { org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl s = ( ( org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl ) ( getDelegate ( ) . createSocket ( host , port , localAddr , localPort ) ) ) ; s.setNpnProtocols ( mNpnProtocols ) ; s.setHandshakeTimeout ( mHandshakeTimeoutMillis ) ; s.setChannelIdPrivateKey ( mChannelIdPrivateKey ) ; if ( mSecure ) { android.net.SSLCertificateSocketFactory.verifyHostname ( s , host ) ; } return s ; }
public void enter ( ) { log ( ( ( ( "Enter Disconnected: " + ( getCurrentMessage ( ) . what ) ) + ", size: " ) + ( mConnectedDevicesList.size ( ) ) ) ) ; mPhonebook.resetAtState ( ) ; mPhoneState.listenForPhoneState ( false ) ; mVoiceRecognitionStarted = false ; mWaitingForVoiceRecognition = false ; }
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( ( ( "BaseConfigImpl{" + "mBuildConfigFields=" ) + ( mBuildConfigFields ) ) + ", mResValues=" ) + ( mResValues ) ) + ", mProguardFiles=" ) + ( mProguardFiles ) ) + ", mConsumerProguardFiles=" ) + ( mConsumerProguardFiles ) ) + ", mManifestPlaceholders=" ) + ( mManifestPlaceholders ) ) + '}' ; }
public android.net.IpSecTransform buildTunnelModeTransform ( java.net.InetAddress localAddress , java.net.InetAddress remoteAddress ) { if ( localAddress == null ) { throw new java.lang.IllegalArgumentException ( "Local address may not be null or empty!" ) ; } if ( remoteAddress == null ) { throw new java.lang.IllegalArgumentException ( "Remote address may not be null or empty!" ) ; } mConfig.setLocalAddress ( localAddress.getHostAddress ( ) ) ; mConfig.setRemoteAddress ( remoteAddress.getHostAddress ( ) ) ; mConfig.setMode ( android.net.IpSecTransform.MODE_TUNNEL ) ; return new android.net.IpSecTransform ( mContext , mConfig ) ; }
public void dispose ( ) throws android.telephony.mbms.MbmsException { if ( ( mService ) == null ) { throw new java.lang.IllegalStateException ( "No streaming service attached" ) ; } try { mService.disposeStream ( mSubscriptionId , mServiceInfo.getServiceId ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.telephony.mbms.StreamingService.LOG_TAG , "Remote process died" ) ; throw new android.telephony.mbms.MbmsException ( MbmsException.ERROR_MIDDLEWARE_LOST ) ; } catch ( java.lang.IllegalArgumentException e ) { throw new java.lang.IllegalStateException ( "StreamingService state inconsistent with middleware" ) ; } finally { mService = null ; } }
public void test_readUnsignedShort ( ) throws java.io.IOException { oos.writeShort ( ( - 1 ) ) ; oos.close ( ) ; ois = new java.io.ObjectInputStream ( new java.io.ByteArrayInputStream ( bao.toByteArray ( ) ) ) ; assertEquals ( "Read incorrect unsignedShort value" , 65535 , ois.readUnsignedShort ( ) ) ; ois.close ( ) ; }
public void testAesCbcHmacMd5Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , true ) ; }
final void decrementAssociatedCallCount ( ) { if ( ( mAssociatedCallCount ) > 0 ) { ( mAssociatedCallCount ) -- ; android.telecom.Log.v ( this , "Call count decrement %d, %s" , mAssociatedCallCount , mComponentName.flattenToShortString ( ) ) ; if ( ( mAssociatedCallCount ) == 0 ) { unbind ( ) ; } } else { android.telecom.Log.wtf ( this , "%s: ignoring a request to decrement mAssociatedCallCount below zero" , mComponentName.getClassName ( ) ) ; } }
public void onPause ( ) { getDuo ( ) . unregisterListener ( this ) ; pauseCache ( ) ; for ( android.net.Uri uri : hiddenItemUris ) { com.android.dialer.app.calllog.CallLogAsyncTaskUtil.deleteVoicemail ( activity , uri , null ) ; } }
private int findRopRegForLocal ( int startReg , int width ) { int reg ; reg = usedRopRegs.nextClearBit ( startReg ) ; while ( true ) { int i = 1 ; while ( ( i < width ) && ( ! ( usedRopRegs.get ( ( reg + i ) ) ) ) ) { i ++ ; } if ( i == width ) { return reg ; } reg = usedRopRegs.nextClearBit ( ( reg + i ) ) ; } }
private void exitVideoMode ( ) { com.android.dialer.common.LogUtil.i ( "VideoCallPresenter.exitVideoMode" , "" ) ; showVideoUi ( VideoProfile.STATE_AUDIO_ONLY , DialerCall.State.ACTIVE , SessionModificationState.NO_REQUEST , false ) ; enableCamera ( primaryCall , false ) ; com.android.incallui.InCallPresenter.getInstance ( ) . setFullScreen ( false ) ; com.android.incallui.InCallPresenter.getInstance ( ) . enableScreenTimeout ( false ) ; com.android.incallui.VideoCallPresenter.isVideoMode = false ; }
public int getApplicationEnabledSetting ( java.lang.String packageName , int userId ) { if ( ! ( com.android.server.pm.PackageManagerService.sUserManager.exists ( userId ) ) ) return android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED ; int uid = android.os.Binder.getCallingUid ( ) ; checkValidCaller ( uid , userId ) ; synchronized ( mPackages ) { return mSettings.getApplicationEnabledSettingLPr ( packageName , userId ) ; } }
public void finish ( ) { if ( ( ! ( mHaveConditional ) ) && ( ( mNodes ) != null ) ) { for ( lombok.ast.Node node : mNodes ) { java.lang.String message = "Unconditional layout inflation from view adapter: " + ( ( "Should use View Holder pattern (use recycled view passed " + "into this method as the second parameter) for smoother " ) + "scrolling" ) ; mContext.report ( com.android.tools.lint.checks.ViewHolderDetector.ISSUE , node , mContext.getLocation ( node ) , message ) ; } } }
private void addCacheHeaders ( java.util.Map < java.lang.String , java.lang.String > headers , com.android.volley.Cache.Entry entry ) { if ( entry == null ) { return ; } if ( ( entry.etag ) != null ) { headers.put ( "If-None-Match" , entry.etag ) ; } if ( ( entry.serverDate ) > 0 ) { java.util.Date refTime = new java.util.Date ( entry.serverDate ) ; headers.put ( "If-Modified-Since" , org.apache.http.impl.cookie.DateUtils.formatDate ( refTime ) ) ; } }
public java.util.SortedSet < R > subSet ( R fromElement , R toElement ) { com.google.common.base.Preconditions.checkNotNull ( fromElement ) ; com.google.common.base.Preconditions.checkNotNull ( toElement ) ; return new com.google.common.collect.StandardRowSortedTable < R , C , V > ( sortedBackingMap ( ) . subMap ( fromElement , toElement ) , factory ) . rowKeySet ( ) ; }
private void setNotification ( android.bluetooth.BluetoothGattCharacteristic characteristic , boolean enable ) { if ( characteristic != null ) { mBluetoothGatt.setCharacteristicNotification ( characteristic , enable ) ; android.bluetooth.BluetoothGattDescriptor descriptor = characteristic.getDescriptor ( com.android.cts.verifier.bluetooth.BleClientService.UPDATE_DESCRIPTOR_UUID ) ; if ( enable ) { if ( characteristic.getUuid ( ) . equals ( com.android.cts.verifier.bluetooth.BleClientService.INDICATE_CHARACTERISTIC_UUID ) ) { descriptor.setValue ( BluetoothGattDescriptor.ENABLE_INDICATION_VALUE ) ; } else { descriptor.setValue ( BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE ) ; } } else { descriptor.setValue ( BluetoothGattDescriptor.DISABLE_NOTIFICATION_VALUE ) ; } mBluetoothGatt.writeDescriptor ( descriptor ) ; } }
private int getClientId ( final int globalId ) { int idx = mClientIds.indexOfValue ( globalId ) ; if ( idx < 0 ) { return idx ; } return mClientIds.keyAt ( idx ) ; }
public boolean disables ( java.security.Key key ) { int size = sun.security.util.KeyUtil.getKeySize ( key ) ; if ( size == 0 ) { return true ; } else if ( size > 0 ) { return ( ( size < ( minSize ) ) || ( size > ( maxSize ) ) ) || ( ( prohibitedSize ) == size ) ; } return false ; }
static com.android.ide.eclipse.adt.internal.editors.formatting.XmlFormatPreferences defaults ( ) { return new com.android.ide.eclipse.adt.internal.editors.formatting.XmlFormatPreferences ( ) ; }
public java.lang.String getType ( android.net.Uri uri ) { int match = com.android.bluetooth.opp.BluetoothOppProvider.sURIMatcher.match ( uri ) ; switch ( match ) { case com.android.bluetooth.opp.BluetoothOppProvider.SHARES : { return com.android.bluetooth.opp.BluetoothOppProvider.SHARE_LIST_TYPE ; } case com.android.bluetooth.opp.BluetoothOppProvider.SHARES_ID : { return com.android.bluetooth.opp.BluetoothOppProvider.SHARE_TYPE ; } default : { if ( com.android.bluetooth.opp.BluetoothOppProvider.D ) { android.util.Log.d ( com.android.bluetooth.opp.BluetoothOppProvider.TAG , ( "calling getType on an unknown URI: " + uri ) ) ; } throw new java.lang.IllegalArgumentException ( ( "Unknown URI: " + uri ) ) ; } } }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JEnumLiteral literal ) { com.android.jack.dx.rop.cst.CstNat nat = com.android.jack.backend.dex.rop.RopHelper.createSignature ( literal.getFieldId ( ) ) ; result = new com.android.jack.dx.rop.cst.CstEnumRef ( nat ) ; return false ; }
private void dumpPosition ( java.lang.StringBuilder stringBuilder , com.android.utils.PositionXmlParser.Position position ) { stringBuilder.append ( "(" ) . append ( position.getLine ( ) ) . append ( "," ) . append ( position.getColumn ( ) ) . append ( ") " ) . append ( mOwnerElement.getDocument ( ) . getSourceLocation ( ) . print ( true ) ) . append ( ":" ) . append ( position.getLine ( ) ) ; }
public void test_isReachable_neverThrows ( ) throws java.lang.Exception { java.net.InetAddress inetAddress = java.net.InetAddress.getByName ( "www.google.com" ) ; final java.net.NetworkInterface netIf = java.net.NetworkInterface.getByName ( "dummy0" ) ; if ( netIf == null ) { java.lang.System.logI ( "Skipping test_isReachable_neverThrows because dummy0 isn't available" ) ; return ; } assertFalse ( inetAddress.isReachable ( netIf , 256 , 500 ) ) ; }
public com.android.jack.ir.ast.JNameValuePair exportAsJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0004.io.ExportSession exportSession , @ javax.annotation.Nonnull com.android.jack.ir.ast.JAnnotationType receiver ) throws com.android.jack.ir.ast.JTypeLookupException , com.android.jack.lookup.JMethodLookupException { assert ( sourceInfo ) != null ; assert ( value ) != null ; assert ( name ) != null ; com.android.jack.ir.ast.JLiteral jValue = value.exportAsJast ( exportSession ) ; com.android.jack.ir.sourceinfo.SourceInfo jSourceInfo = sourceInfo.exportAsJast ( exportSession ) ; com.android.jack.ir.ast.JMethodIdWide methodId = receiver.getOrCreateMethodIdWide ( name , java.util.Collections.< com.android.jack.ir.ast.JType > emptyList ( ) , MethodKind.INSTANCE_VIRTUAL ) ; com.android.jack.ir.ast.JNameValuePair jNameValuePair = new com.android.jack.ir.ast.JNameValuePair ( jSourceInfo , methodId , jValue ) ; return jNameValuePair ; }
public void listen ( android.telephony.PhoneStateListener listener , int events ) { if ( ( mContext ) == null ) return ; try { java.lang.Boolean notifyNow = ( getITelephony ( ) ) != null ; android.telephony.TelephonyManager.sRegistry.listenForSubscriber ( listener.mSubId , getOpPackageName ( ) , listener.callback , events , notifyNow ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } }
private android.content.Intent waitForNoIntent ( int timeoutMs , java.util.concurrent.BlockingQueue < android.content.Intent > queue ) { try { android.content.Intent intent = queue.poll ( timeoutMs , java.util.concurrent.TimeUnit.MILLISECONDS ) ; org.junit.Assert.assertNull ( intent ) ; return intent ; } catch ( java.lang.InterruptedException e ) { org.junit.Assert.fail ( ( "Cannot obtain an Intent from the queue: " + ( e.getMessage ( ) ) ) ) ; } return null ; }
public com.android.sched.vfs.OutputVFS checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull final java.lang.String string ) throws com.android.sched.util.codec.ParsingException { com.android.sched.util.RunnableHooks hooks = context.getRunnableHooks ( ) ; try { com.android.sched.vfs.WriteZipFS vfs = new com.android.sched.vfs.WriteZipFS ( new com.android.sched.util.file.OutputZipFile ( context.getWorkingDirectory ( ) , string , hooks , existence , change ) ) ; return new com.android.sched.vfs.GenericOutputVFS ( vfs ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e.getMessage ( ) , e ) ; } }
private void rewriteCallIntentAction ( android.content.Intent intent , boolean isPotentialEmergencyNumber ) { java.lang.String action = intent.getAction ( ) ; if ( Intent.ACTION_CALL_PRIVILEGED.equals ( action ) ) { if ( isPotentialEmergencyNumber ) { com.android.server.telecom.Log.i ( this , ( "ACTION_CALL_PRIVILEGED is used while the number is a potential" + " emergency number. Using ACTION_CALL_EMERGENCY as an action instead." ) ) ; action = android.content.Intent.ACTION_CALL_EMERGENCY ; } else { action = android.content.Intent.ACTION_CALL ; } com.android.server.telecom.Log.v ( this , " - updating action from CALL_PRIVILEGED to %s" , action ) ; intent.setAction ( action ) ; } }
public boolean isImsRegistered ( ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony == null ) return false ; return telephony.isImsRegistered ( ) ; } catch ( android.os.RemoteException ex ) { return false ; } catch ( java.lang.NullPointerException ex ) { return false ; } }
void putExtra ( java.lang.String callId , java.lang.String key , int value ) { android.telecom.Log.v ( this , "putExtra: %s %s=%d" , callId , key , value ) ; for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { android.os.Bundle bundle = new android.os.Bundle ( ) ; bundle.putInt ( key , value ) ; adapter.putExtras ( callId , bundle ) ; } catch ( android.os.RemoteException ignored ) { } } }
public void testKeyguardLock ( ) throws java.lang.Exception { if ( ! ( isHandheld ( ) ) ) { return ; } gotoKeyguard ( ) ; mAmWmState.waitForKeyguardShowingAndNotOccluded ( mDevice ) ; assertShowingAndNotOccluded ( ) ; launchActivity ( "KeyguardLockActivity" ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { "KeyguardLockActivity" } ) ; mAmWmState.assertVisibility ( "KeyguardLockActivity" , true ) ; executeShellCommand ( android.server.cts.FINISH_ACTIVITY_BROADCAST ) ; mAmWmState.waitForKeyguardShowingAndNotOccluded ( mDevice ) ; assertShowingAndNotOccluded ( ) ; }
public java.time.Instant getNotUsedAfterInstant ( java.lang.String zoneId ) { com.android.libcore.timezone.tzlookup.zonetree.CountryZoneUsage.Entry entry = zoneIdEntryMap.get ( zoneId ) ; if ( entry == null ) { throw new java.lang.IllegalArgumentException ( ( ( ( "No entry for " + zoneId ) + " for " ) + ( isoCode ) ) ) ; } return entry.endInstant ; }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , byte [ ] data ) { mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , data.length ) ; }
private boolean isWindowsExecutable ( org.eclipse.core.runtime.IPath commandPath ) { if ( com.android.ide.eclipse.ndk.internal.build.NdkCommandLauncher.WINDOWS_EXE.equalsIgnoreCase ( commandPath.getFileExtension ( ) ) ) { return true ; } java.io.File exeFile = commandPath.addFileExtension ( com.android.ide.eclipse.ndk.internal.build.NdkCommandLauncher.WINDOWS_EXE ) . toFile ( ) ; if ( exeFile.exists ( ) ) { return true ; } return false ; }
public int getRssi ( ) { int rssi = java.lang.Integer.MIN_VALUE ; for ( android.net.wifi.ScanResult result : mScanResultCache.snapshot ( ) . values ( ) ) { if ( ( result.level ) > rssi ) { rssi = result.level ; } } return rssi ; }
private static void onDisabledEvent ( int status ) { if ( com.android.server.wifi.nan.WifiNanNative.VDBG ) android.util.Log.v ( com.android.server.wifi.nan.WifiNanNative.TAG , ( "onDisabledEvent: status=" + status ) ) ; com.android.server.wifi.nan.WifiNanStateManager.getInstance ( ) . onNanDownNotification ( com.android.server.wifi.nan.WifiNanNative.translateHalStatusToNanEventCallbackReason ( status ) ) ; }
public void test_getPrivateExponent ( ) throws java.lang.Exception { java.security.KeyFactory gen = java.security.KeyFactory.getInstance ( "RSA" ) ; final java.math.BigInteger n = java.math.BigInteger.valueOf ( 3233 ) ; final java.math.BigInteger d = java.math.BigInteger.valueOf ( 2753 ) ; java.security.interfaces.RSAPrivateKey key = ( ( java.security.interfaces.RSAPrivateKey ) ( gen.generatePrivate ( new java.security.spec.RSAPrivateKeySpec ( n , d ) ) ) ) ; assertEquals ( "invalid private exponent" , d , key.getPrivateExponent ( ) ) ; }
public java.lang.String getNamespace ( ) { if ( ( mNamespace ) == null ) { com.android.sdklib.xml.AndroidManifestParser.ManifestData manifestData = com.android.ide.eclipse.adt.internal.project.AndroidManifestHelper.parseForData ( mProject ) ; if ( manifestData != null ) { java.lang.String javaPackage = manifestData.getPackage ( ) ; mNamespace = java.lang.String.format ( AndroidConstants.NS_CUSTOM_RESOURCES , javaPackage ) ; } } return mNamespace ; }
public android.net.IpSecTransform buildTransportModeTransform ( java.net.InetAddress localAddress ) throws IpSecManager.ResourceUnavailableException , IpSecManager.SpiUnavailableException , java.io.IOException { mConfig.setMode ( android.net.IpSecTransform.MODE_TRANSPORT ) ; mConfig.setLocalAddress ( localAddress.getHostAddress ( ) ) ; return new android.net.IpSecTransform ( mContext , mConfig ) . activate ( ) ; }
public static long IntMatCond_LongVarVar ( int a , int b , long x , long y ) { long result = ( a > b ) ? x : y ; return result + ( a > b ? 0L : 1L ) ; }
private void getIccCardStatusDone ( android.os.AsyncResult ar ) { if ( ( ar.exception ) != null ) { android.util.Log.e ( mLogTag , ( "Error getting ICC status. " + ( "RIL_REQUEST_GET_ICC_STATUS should " + "never return an error" ) ) , ar.exception ) ; return ; } handleIccCardStatus ( ( ( com.android.internal.telephony.IccCardStatus ) ( ar.result ) ) ) ; }
public static final double nextDouble ( double value ) { if ( value == ( java.lang.Double.POSITIVE_INFINITY ) ) { return value ; } long bits ; if ( value == 0 ) { bits = 0 ; } else { bits = java.lang.Double.doubleToLongBits ( value ) ; } return java.lang.Double.longBitsToDouble ( ( value < 0 ? bits - 1 : bits + 1 ) ) ; }
public void afterHandshake ( long session , long ssl , long context , java.net.Socket socket , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [ ] negotiated = org.conscrypt.NativeCrypto.SSL_get0_alpn_selected ( ssl ) ; assertEquals ( "spdy/2" , new java.lang.String ( negotiated ) ) ; assertEquals ( "ALPN should not enable cutthrough on the client" , 0 , ( ( org.conscrypt.NativeCrypto.SSL_get_mode ( ssl ) ) & ( org.conscrypt.NativeConstants.SSL_MODE_HANDSHAKE_CUTTHROUGH ) ) ) ; super . afterHandshake ( session , ssl , context , socket , fd , callback ) ; }
public android.app.ContextImpl getSystemContext ( ) { synchronized ( this ) { if ( ( android.app.ActivityThread.mSystemContext ) == null ) { android.app.ContextImpl context = android.app.ContextImpl.createSystemContext ( this ) ; android.app.LoadedApk info = new android.app.LoadedApk ( this , "android" , context , null , android.content.res.CompatibilityInfo.DEFAULT_COMPATIBILITY_INFO ) ; context.init ( info , null , this ) ; context.getResources ( ) . updateConfiguration ( getConfiguration ( ) , getDisplayMetricsLocked ( Display.DEFAULT_DISPLAY , CompatibilityInfo.DEFAULT_COMPATIBILITY_INFO ) ) ; android.app.ActivityThread.mSystemContext = context ; } } return android.app.ActivityThread.mSystemContext ; }
public void continueButtonClickHandler ( android.view.View target ) { startActivity ( new android.content.Intent ( this , com.android.cts.verifier.TestListActivity.class ) ) ; }
public static java.lang.String getMethodName ( java.lang.reflect.ArtMethod artMethod ) { artMethod = artMethod.findOverriddenMethodIfProxy ( ) ; com.android.dex.Dex dex = artMethod.getDeclaringClass ( ) . getDex ( ) ; int nameIndex = dex.nameIndexFromMethodIndex ( artMethod.getDexMethodIndex ( ) ) ; return artMethod.getDexCacheString ( dex , nameIndex ) ; }
public boolean createBondOutOfBand ( int transport , android.bluetooth.OobData oobData ) { try { return android.bluetooth.BluetoothDevice.sService.createBondOutOfBand ( this , transport , oobData ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice.TAG , "" , e ) ; } return false ; }
private void loadResources ( ) { com.android.ddmuilib.ImageLoader loader = com.android.ddmuilib.ImageLoader.getLoader ( this . getClass ( ) ) ; com.android.hierarchyviewerlib.ui.TreeViewOverview.notSelectedImage = loader.loadImage ( "not-selected.png" , org.eclipse.swt.widgets.Display.getDefault ( ) ) ; com.android.hierarchyviewerlib.ui.TreeViewOverview.selectedImage = loader.loadImage ( "selected-small.png" , org.eclipse.swt.widgets.Display.getDefault ( ) ) ; com.android.hierarchyviewerlib.ui.TreeViewOverview.filteredImage = loader.loadImage ( "filtered.png" , org.eclipse.swt.widgets.Display.getDefault ( ) ) ; com.android.hierarchyviewerlib.ui.TreeViewOverview.filteredSelectedImage = loader.loadImage ( "selected-filtered-small.png" , org.eclipse.swt.widgets.Display.getDefault ( ) ) ; }
public void forgotPattern ( boolean isForgotten ) { if ( mEnableFallback ) { mForgotPattern = isForgotten ; updateScreen ( com.android.internal.policy.impl.LockPatternKeyguardView.Mode.UnlockScreen ) ; } }
public static int getSlotId ( int subId ) { if ( ! ( android.telephony.SubscriptionManager.isValidSubscriptionId ( subId ) ) ) { if ( android.telephony.SubscriptionManager.DBG ) { android.telephony.SubscriptionManager.logd ( "[getSlotId]- fail" ) ; } } int result = android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX ; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface ( android.os.ServiceManager.getService ( "isub" ) ) ; if ( iSub != null ) { result = iSub.getSlotId ( subId ) ; } } catch ( android.os.RemoteException ex ) { } return result ; }
private void launchFinish ( byte [ ] token ) { android.content.Intent intent = getFinishIntent ( ) ; intent.addFlags ( Intent.FLAG_ACTIVITY_FORWARD_RESULT ) ; intent.putExtra ( ChooseLockSettingsHelper.EXTRA_KEY_CHALLENGE_TOKEN , token ) ; startActivity ( intent ) ; finish ( ) ; }
public void testAospServiceContexts ( ) throws java.lang.Exception { deviceSvcFile = java.io.File.createTempFile ( "service_contexts" , ".tmp" ) ; deviceSvcFile.deleteOnExit ( ) ; mDevice.pullFile ( "/plat_service_contexts" , deviceSvcFile ) ; aospSvcFile = copyResourceToTempFile ( "/plat_service_contexts" ) ; assertFileEquals ( aospSvcFile , deviceSvcFile ) ; }
public void testN1 ( ) { dot.junit.opcodes.move_exception.d.T_move_exception_1 t = new dot.junit.opcodes.move_exception.d.T_move_exception_1 ( ) ; try { t.run ( ) ; fail ( "ArithmeticException was not thrown" ) ; } catch ( java.lang.ArithmeticException ae ) { } catch ( java.lang.Exception ex ) { fail ( ( ( "Exception " + ex ) + " was thrown instead off ArithmeticException" ) ) ; } }
public void testSecurityPatchFound ( ) { if ( ( Build.VERSION.SDK_INT ) < ( Build.VERSION_CODES.M ) ) { android.util.Log.w ( android.os.cts.SecurityPatchTest.TAG , "Skipping M+ Test." ) ; return ; } java.lang.String buildSecurityPatch = android.os.SystemProperties.get ( "ro.build.version.security_patch" , "" ) ; java.lang.String error = java.lang.String.format ( android.os.cts.SecurityPatchTest.SECURITY_PATCH_ERROR , buildSecurityPatch ) ; assertTrue ( error , ( ! ( buildSecurityPatch.isEmpty ( ) ) ) ) ; }
public void setHomePageInBrowser ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation ( ) ; final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance ( instrumentation ) ; java.lang.String homepage = "espn.com" ; java.lang.String appName = "Browser" ; if ( ( ( testFramework.getApi ( ) ) >= 17 ) && ( ( testFramework.getApi ( ) ) <= 23 ) ) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , appName ) ; setHomePage ( device , "Other" , ( "http://" + homepage ) ) ; device.pressHome ( ) ; com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , appName ) ; device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( Res.BROWSER_TAB_SWITCHER_RES ) ) . clickAndWaitForNewWindow ( ) ; device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( Res.BROWSER_CLOSE_TAB_RES ) ) . clickAndWaitForNewWindow ( ) ; device.pressHome ( ) ; com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , appName ) ; android.support.test.uiautomator.UiObject urlField = device.findObject ( new android.support.test.uiautomator.UiSelector ( ) . resourceId ( Res.BROWSER_URL_TEXT_FIELD_RES ) ) ; urlField.waitForExists ( java.util.concurrent.TimeUnit.SECONDS.toMillis ( 5 ) ) ; org.junit.Assert.assertTrue ( "Homepage not set correctly" , ( ( urlField.exists ( ) ) && ( urlField.getText ( ) . contains ( homepage ) ) ) ) ; device.pressHome ( ) ; com.android.devtools.systemimage.uitest.utils.AppLauncher.launch ( instrumentation , appName ) ; setHomePage ( device , "Default page" ) ; } }
public void invoke ( java.lang.Thread t , java.lang.reflect.Method method , int depth ) { try { java.lang.Object res = get.GetVar ( t , depth ) ; java.lang.System.out.println ( ( ( ( ( ( this ) + " on " ) + method ) + " got value: " ) + res ) ) ; } catch ( java.lang.Exception e ) { java.lang.System.out.println ( ( ( ( ( ( this ) + " on " ) + method ) + " failed due to " ) + ( e.getMessage ( ) ) ) ) ; } }
public void test_d2i_SSL_SESSION ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.d2i_SSL_SESSION ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } try { org.conscrypt.NativeCrypto.d2i_SSL_SESSION ( new byte [ 0 ] ) ; fail ( "Should throw IOException with invalid SSL_SESSION data" ) ; } catch ( java.io.IOException expected ) { } try { org.conscrypt.NativeCrypto.d2i_SSL_SESSION ( new byte [ 1 ] ) ; fail ( "Should throw IOException with invalid SSL_SESSION data" ) ; } catch ( java.io.IOException expected ) { } }
public void visitProgramMethod ( proguard.obfuscate.ProgramClass programClass , proguard.obfuscate.ProgramMethod programMethod ) { java.lang.String name = programMethod.getName ( programClass ) ; if ( ( name.equals ( ClassConstants.INTERNAL_METHOD_NAME_CLINIT ) ) || ( name.equals ( ClassConstants.INTERNAL_METHOD_NAME_INIT ) ) ) { return ; } visitMember ( programClass , programMethod , false ) ; }
private boolean contactsDeleted ( long lastModified ) { try ( android.database.Cursor cursor = appContext.getContentResolver ( ) . query ( DeletedContacts.CONTENT_URI , new java.lang.String [ ] { android.provider.ContactsContract.DeletedContacts.CONTACT_DELETED_TIMESTAMP } , ( ( android.provider.ContactsContract.DeletedContacts.CONTACT_DELETED_TIMESTAMP ) + " > ?" ) , new java.lang.String [ ] { java.lang.Long.toString ( lastModified ) } , null ) ) { if ( cursor == null ) { com.android.dialer.common.LogUtil.w ( "Cp2PhoneLookup.contactsDeleted" , "null cursor" ) ; return false ; } return ( cursor.getCount ( ) ) > 0 ; } }
public void onGuidedActionClicked ( android.support.v17.leanback.widget.GuidedAction action ) { if ( ( action.getId ( ) ) == ( com.android.tv.dvr.ui.DvrInsufficientSpaceErrorFragment.ACTION_OPEN_DVR ) ) { android.content.Intent intent = new android.content.Intent ( getActivity ( ) , com.android.tv.dvr.ui.DvrActivity.class ) ; getActivity ( ) . startActivity ( intent ) ; } dismissDialog ( ) ; }
private static java.util.Set < java.lang.String > getSchemaSet ( android.database.sqlite.SQLiteDatabase db ) { java.util.Set < java.lang.String > schemaSet = com.google.android.collect.Sets.newHashSet ( ) ; android.database.Cursor entityCursor = db.rawQuery ( "SELECT sql FROM sqlite_master" , null ) ; try { while ( entityCursor.moveToNext ( ) ) { java.lang.String sql = entityCursor.getString ( 0 ) ; schemaSet.add ( sql ) ; } } finally { entityCursor.close ( ) ; } return schemaSet ; }
public void run ( ) { mTextView.setText ( "" , BufferType.EDITABLE ) ; mTextView.requestFocus ( ) ; android.text.Selection.setSelection ( ( ( android.text.Editable ) ( mTextView.getText ( ) ) ) , 0 , 0 ) ; mTextView.setKeyListener ( multiTapKeyListener ) ; }
private com.android.apigenerator.ApiClass addClass ( java.util.HashMap < java.lang.String , com.android.apigenerator.ApiClass > classes , java.lang.String name , int apiLevel ) { com.android.apigenerator.ApiClass theClass = classes.get ( name ) ; if ( theClass == null ) { theClass = new com.android.apigenerator.ApiClass ( name , apiLevel ) ; classes.put ( name , theClass ) ; } return theClass ; }
public void test_getIntegerInstance_ar ( ) throws java.lang.Exception { if ( ! ( tests.support.Support_Locale.isLocaleAvailable ( new java.util.Locale ( "ar" ) ) ) ) { return ; } java.text.NumberFormat numberFormat = java.text.NumberFormat.getNumberInstance ( new java.util.Locale ( "ar" ) ) ; assertEquals ( "#,##0.###;#,##0.###-" , ( ( java.text.DecimalFormat ) ( numberFormat ) ) . toPattern ( ) ) ; java.text.NumberFormat integerFormat = java.text.NumberFormat.getIntegerInstance ( new java.util.Locale ( "ar" ) ) ; assertEquals ( "#,##0;#,##0-" , ( ( java.text.DecimalFormat ) ( integerFormat ) ) . toPattern ( ) ) ; }
public static com.android.dx.rop.cst.CstType intern ( com.android.dx.rop.type.Type type ) { synchronized ( com.android.dx.rop.cst.CstType.interns ) { com.android.dx.rop.cst.CstType cst = com.android.dx.rop.cst.CstType.interns.get ( type ) ; if ( cst == null ) { cst = new com.android.dx.rop.cst.CstType ( type ) ; com.android.dx.rop.cst.CstType.interns.put ( type , cst ) ; } return cst ; } }
public void test_unmodifiableList_replaceAll ( ) { try { java.util.Collections.unmodifiableList ( new java.util.ArrayList < > ( ) ) . replaceAll ( ( k ) -> 1 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } try { java.util.ArrayList l = new java.util.ArrayList ( ) ; l.add ( 1 ) ; l.add ( 2 ) ; java.util.Collections.unmodifiableList ( l ) . replaceAll ( ( k ) -> 1 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
public static < T > io.appium.droiddriver.finders.Predicate < T > allOf ( final io.appium.droiddriver.finders.Predicate < ? super T > ... components ) { return io.appium.droiddriver.finders.Predicates.< T > allOf ( java.util.Arrays.asList ( components ) ) ; }
public void testAdd2_IndexOutOfBoundsException ( ) { try { java.util.concurrent.CopyOnWriteArrayList c = new java.util.concurrent.CopyOnWriteArrayList ( ) ; c.add ( "asdasd" ) ; c.add ( "asdasdasd" ) ; c.add ( 100 , "qwerty" ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } }
public boolean setNetworkSelectionModeManual ( int subId , com.android.internal.telephony.OperatorInfo operator , boolean persistSelection ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.setNetworkSelectionModeManual ( subId , operator , persistSelection ) ; } catch ( android.os.RemoteException ex ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , "setNetworkSelectionModeManual RemoteException" , ex ) ; } catch ( java.lang.NullPointerException ex ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , "setNetworkSelectionModeManual NPE" , ex ) ; } return false ; }
public static byte [ ] encode ( java.lang.String s ) throws java.io.UTFDataFormatException { int utfCount = ( ( int ) ( com.android.dx.util.Mutf8.countBytes ( s , true ) ) ) ; byte [ ] result = new byte [ utfCount ] ; com.android.dx.util.Mutf8.encode ( result , 0 , s ) ; return result ; }
public void onDataCallListChanged ( java.util.List < android.telephony.data.DataCallResponse > dataCallList ) { android.telephony.data.IDataServiceCallback callback = mCallback.get ( ) ; if ( callback != null ) { try { callback.onDataCallListChanged ( dataCallList ) ; } catch ( android.os.RemoteException e ) { android.telephony.Rlog.e ( android.telephony.data.DataServiceCallback.mTag , "Failed to onDataCallListChanged on the remote" ) ; } } }
public void testRunEnded ( long elapsedTime , java.util.Map < java.lang.String , java.lang.String > metrics ) { mCurrentModuleResult.addRuntime ( elapsedTime ) ; mCurrentModuleResult.setDone ( ( ( mCurrentTestNum ) >= ( mTotalTestsInModule ) ) ) ; mCurrentModuleResult.setNotExecuted ( java.lang.Math.max ( ( ( mTotalTestsInModule ) - ( mCurrentTestNum ) ) , 0 ) ) ; if ( isShardResultReporter ( ) ) { mMasterResultReporter.mergeModuleResult ( mCurrentModuleResult ) ; } }
public static double max ( double a , double b ) { if ( a != a ) return a ; if ( ( ( a == 0.0 ) && ( b == 0.0 ) ) && ( ( java.lang.Double.doubleToRawLongBits ( a ) ) == ( java.lang.StrictMath.negativeZeroDoubleBits ) ) ) { return b ; } return a >= b ? a : b ; }
private void expectSwPnoScan ( org.mockito.InOrder order , com.android.server.wifi.WifiNative.ScanSettings nativeScanSettings , com.android.server.wifi.ScanResults results ) { when ( mWifiScannerImpl.isHwPnoSupported ( anyBoolean ( ) ) ) . thenReturn ( false ) ; when ( mWifiScannerImpl.shouldScheduleBackgroundScanForHwPno ( ) ) . thenReturn ( true ) ; expectSuccessfulBackgroundScan ( order , nativeScanSettings , results ) ; }
public void disconnectCall ( com.android.server.telecom.Call call ) { com.android.server.telecom.Log.v ( this , "disconnectCall %s" , call ) ; if ( ! ( mCalls.contains ( call ) ) ) { com.android.server.telecom.Log.w ( this , "Unknown call (%s) asked to disconnect" , call ) ; } else { mLocallyDisconnectingCalls.add ( call ) ; call.disconnect ( ) ; } }
void init ( com.android.phone.TimeConsumingPreferenceListener listener , boolean skipReading , com.android.internal.telephony.Phone phone ) { mPhone = phone ; mTcpListener = listener ; if ( ! skipReading ) { mPhone.getOutgoingCallerIdDisplay ( mHandler.obtainMessage ( com.android.phone.CLIRListPreference.MyHandler.MESSAGE_GET_CLIR , com.android.phone.CLIRListPreference.MyHandler.MESSAGE_GET_CLIR , com.android.phone.CLIRListPreference.MyHandler.MESSAGE_GET_CLIR ) ) ; if ( ( mTcpListener ) != null ) { mTcpListener.onStarted ( this , true ) ; } } }
protected synchronized void implCloseSelectableChannel ( ) throws java.io.IOException { onDisconnect ( true ) ; libcore.io.IoBridge.closeSocket ( fd ) ; multicastMembershipHandler = null ; if ( ( ( socket ) != null ) && ( ! ( socket.isClosed ( ) ) ) ) { socket.onClose ( ) ; } }
public boolean onKeyMultiple ( final int keyCode , final int repeatCount , final android.view.KeyEvent event ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { boolean ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) { return onKeyMultiple ( keyCode , repeatCount , event ) ; } } ) ; return ret ; } com.android.webview.chromium.UnimplementedWebViewApi.invoke ( ) ; return false ; }
private static void assertMeidFormat ( java.lang.String deviceId ) { java.lang.String meidPattern = "[0-9a-fA-F]{14}" ; org.junit.Assert.assertTrue ( ( ( ( "MEID device id " + deviceId ) + " does not match pattern " ) + meidPattern ) , java.util.regex.Pattern.matches ( meidPattern , deviceId ) ) ; }
public void onMessageReceived ( int peerId , byte [ ] message ) { android.os.Bundle mResults = new android.os.Bundle ( ) ; mResults.putInt ( "discoverySessionId" , mDiscoverySessionId ) ; mResults.putInt ( "peerId" , peerId ) ; mResults.putByteArray ( "message" , message ) ; mResults.putString ( "messageAsString" , new java.lang.String ( message ) ) ; mEventFacade.postEvent ( "WifiNanSessionOnMessageReceived" , mResults ) ; }
private com.android.jack.ir.ast.JPackage getPackage ( @ javax.annotation.Nonnull java.lang.String [ ] splitClassOrInterfaceName ) { com.android.jack.ir.ast.JPackage currentPackage = topLevelPackage ; int packageLength = ( splitClassOrInterfaceName.length ) - 1 ; for ( int i = 0 ; i < packageLength ; i ++ ) { currentPackage = currentPackage.getOrCreateSubPackage ( splitClassOrInterfaceName [ i ] ) ; } return currentPackage ; }
public void testE3 ( ) { dot.junit.opcodes.aput.d.T_aput_1 t = new dot.junit.opcodes.aput.d.T_aput_1 ( ) ; int [ ] arr = new int [ 2 ] ; try { t.run ( arr , ( - 1 ) , 100000000 ) ; fail ( "expected ArrayIndexOutOfBoundsException" ) ; } catch ( java.lang.ArrayIndexOutOfBoundsException aie ) { } }
com.google.common.collect.ImmutableSet < com.google.common.collect.Multiset.Entry < E > > createEntrySet ( ) { final com.google.common.collect.ImmutableSet < com.google.common.collect.Multiset.Entry < E > > forwardEntrySet = forward.entrySet ( ) ; return new com.google.common.collect.EntrySet ( ) { @ java.lang.Override public int size ( ) { return forwardEntrySet.size ( ) ; } @ java.lang.Override public com.google.common.collect.UnmodifiableIterator < com.google.common.collect.Multiset.Entry < E > > iterator ( ) { return asList ( ) . iterator ( ) ; } @ java.lang.Override com.google.common.collect.ImmutableList < com.google.common.collect.Multiset.Entry < E > > createAsList ( ) { return forwardEntrySet.asList ( ) . reverse ( ) ; } } ; }
public void testQuotaReported ( ) throws java.lang.Exception { if ( ! ( isBackupSupported ( ) ) ) { return ; } java.lang.String separator = clearLogcat ( ) ; exec ( ( "bmgr backupnow " + ( android.backup.cts.KeyValueQuotaTest.BACKUP_APP_NAME ) ) ) ; waitForLogcat ( android.backup.cts.KeyValueQuotaTest.TIMEOUT_SECONDS , separator , ( "quota is " + ( android.backup.cts.KeyValueQuotaTest.LOCAL_TRANSPORT_BACKUP_QUOTA ) ) ) ; }
public android.os.Bundle hasFeatures ( android.accounts.AccountAuthenticatorResponse r , android.accounts.Account account , java.lang.String [ ] strings ) throws android.accounts.NetworkErrorException { android.util.Log.d ( com.android.bluetooth.pbapclient.Authenticator.TAG , "got call" , new java.lang.Exception ( ) ) ; final android.os.Bundle result = new android.os.Bundle ( ) ; result.putBoolean ( AccountManager.KEY_BOOLEAN_RESULT , false ) ; return result ; }
public void testAesGcm64Udp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM , android.net.cts.IpSecManagerTest.getKey ( 288 ) , 64 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , null , null , authCrypt , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , null , null , authCrypt , false , 1 , true ) ; }
public void run ( com.android.tradefed.result.ITestInvocationListener listener ) throws com.android.tradefed.device.DeviceNotAvailableException { for ( java.util.Map.Entry < java.lang.String , java.lang.String > entry : com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.testList.entrySet ( ) ) { java.io.File apk = new java.io.File ( mApkDir , entry.getValue ( ) ) ; getDevice ( ) . installPackage ( apk , true ) ; runDeviceTests ( com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.PACKAGE , com.android.tradefed.testtype.GraphicsBenchmarkHostsideController.CLASS , entry.getKey ( ) ) ; } }
public void frameworkFromJill ( ) throws java.lang.Exception { java.io.File frameworkJackZip = com.android.jill.JillTestTools.createTempFile ( "framework" , ".zip" ) ; com.android.jill.JillTestTools.runJillToZip ( com.android.jill.NoClasspathTest.FRAMEWORK_JAR , frameworkJackZip ) ; java.io.File frameworkDex = com.android.jill.JillTestTools.createTempFile ( "framework" , ".dex" ) ; com.android.jill.JillTestTools.compileJackToDex ( new com.android.jill.Options ( ) , frameworkJackZip , frameworkDex , false ) ; }
public void importFromJast ( @ javax.annotation.Nonnull com.android.jack.jayce.v0002.io.ImportHelper loader , @ javax.annotation.Nonnull java.lang.Object node ) { com.android.jack.ir.ast.JReinterpretCastOperation jReinterpretCastOperation = ( ( com.android.jack.ir.ast.JReinterpretCastOperation ) ( node ) ) ; castType = com.android.jack.jayce.v0002.io.ImportHelper.getSignatureName ( jReinterpretCastOperation.getCastType ( ) ) ; expr = ( ( com.android.jack.jayce.v0002.nodes.NExpression ) ( loader.load ( jReinterpretCastOperation.getExpr ( ) ) ) ) ; sourceInfo = loader.load ( jReinterpretCastOperation.getSourceInfo ( ) ) ; }
public void testGetPath_PathAndApiClassResourceSet ( ) { initializePsiClass ( "\"\"" , "\"res\"" ) ; initializePsiMethod ( "foo" , "\"\"" , "\"boo\"" ) ; org.mockito.MockitoAnnotations.initMocks ( this ) ; com.google.gct.intellij.endpoints.validation.RestSignatureInspection inspection = new com.google.gct.intellij.endpoints.validation.RestSignatureInspection ( ) ; java.lang.String path = inspection.getPath ( mockPsiMethod ) ; junit.framework.Assert.assertEquals ( "boo" , path ) ; }
public java.lang.String getPackageConfigurationName ( ) { if ( name.equals ( SourceSet.MAIN_SOURCE_SET_NAME ) ) { return "apk" ; } else { return java.lang.String.format ( "%sApk" , name ) ; } }
public static com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent toProto ( android.net.metrics.WakeupStats in ) { com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.WakeupStats wakeupStats = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.WakeupStats ( ) ; in.updateDuration ( ) ; wakeupStats.durationSec = in.durationSec ; wakeupStats.totalWakeups = in.totalWakeups ; wakeupStats.rootWakeups = in.rootWakeups ; wakeupStats.systemWakeups = in.systemWakeups ; wakeupStats.nonApplicationWakeups = in.nonApplicationWakeups ; wakeupStats.applicationWakeups = in.applicationWakeups ; wakeupStats.unroutedWakeups = in.unroutedWakeups ; final com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent out = com.android.server.connectivity.IpConnectivityEventBuilder.buildEvent ( 0 , 0 , in.iface ) ; out.setWakeupStats ( wakeupStats ) ; return out ; }
public synchronized void onPlaybackStateChanged ( android.media.session.PlaybackState state ) { if ( com.android.bluetooth.avrcp.Avrcp.DEBUG ) android.util.Log.v ( com.android.bluetooth.avrcp.Avrcp.TAG , ( "onPlaybackStateChanged: state " + ( state.toString ( ) ) ) ) ; updatePlaybackState ( state ) ; byte stateBytes = ( ( byte ) ( convertPlayStateToBytes ( state.getState ( ) ) ) ) ; com.android.bluetooth.avrcp.MediaPlayerInfo player = getAddressedPlayerInfo ( ) ; if ( player != null ) { player.setPlayStatus ( stateBytes ) ; } else { android.util.Log.w ( com.android.bluetooth.avrcp.Avrcp.TAG , ( "onPlaybackStateChanged: no addressed player (id " + ( mCurrAddrPlayerID ) ) ) ; } }
public java.lang.String getMountPoint ( java.lang.String name ) { return mMountPoints.get ( name ) ; }
public boolean hasSource ( com.android.sdklib.internal.repository.SdkSource source ) { for ( com.android.sdklib.internal.repository.SdkSource s : mSources ) { if ( s.equals ( source ) ) { return true ; } } return false ; }
public com.android.sched.vfs.OutputVFS checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull final java.lang.String string ) throws com.android.sched.util.codec.ParsingException { try { return new com.android.sched.vfs.GenericOutputVFS ( new com.android.sched.vfs.DirectFS ( new com.android.sched.util.file.Directory ( string , context.getRunnableHooks ( ) , existence , permissions , change ) , permissions ) ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e.getMessage ( ) , e ) ; } }
public void testAdd1_IndexOutOfBoundsException ( ) { try { java.util.concurrent.CopyOnWriteArrayList c = new java.util.concurrent.CopyOnWriteArrayList ( ) ; c.add ( ( - 1 ) , "qwerty" ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } }
public void notifyPendingSystemUpdate ( long updateReceivedTime ) { throwIfParentInstance ( "notifyPendingSystemUpdate" ) ; if ( ( mService ) != null ) { try { mService.notifyPendingSystemUpdate ( updateReceivedTime ) ; } catch ( android.os.RemoteException re ) { throw re.rethrowFromSystemServer ( ) ; } } }
void onScrollChange ( android.view.View v , int scrollX , int scrollY , int oldScrollX , int oldScrollY ) ;
public void visitMethodInsn ( int opcode , java.lang.String owner , java.lang.String name , java.lang.String desc ) { org.junit.Assert.assertTrue ( ( ! ( getBase ( owner ) . equals ( com.android.tools.layoutlib.create.AsmGeneratorTest.JAVA_CLASS_NAME ) ) ) ) ; org.junit.Assert.assertTrue ( testType ( org.objectweb.asm.Type.getType ( desc ) ) ) ; super . visitMethodInsn ( opcode , owner , name , desc ) ; }
private void sendDisplayPinIntent ( byte [ ] address , int pin , int variant ) { android.content.Intent intent = new android.content.Intent ( android.bluetooth.BluetoothDevice.ACTION_PAIRING_REQUEST ) ; intent.putExtra ( BluetoothDevice.EXTRA_DEVICE , mRemoteDevices.getDevice ( address ) ) ; if ( pin != 0 ) { intent.putExtra ( BluetoothDevice.EXTRA_PAIRING_KEY , pin ) ; } intent.putExtra ( BluetoothDevice.EXTRA_PAIRING_VARIANT , variant ) ; intent.setFlags ( Intent.FLAG_RECEIVER_FOREGROUND ) ; mAdapterService.sendOrderedBroadcast ( intent , mAdapterService.BLUETOOTH_ADMIN_PERM ) ; }
protected static void appendOperator ( java.lang.StringBuilder sb , lombok.ast.BinaryOperator operator ) { sb.append ( ' ' ) ; if ( operator == ( lombok.ast.BinaryOperator.LOGICAL_AND ) ) { sb.append ( "and" ) ; } else if ( operator == ( lombok.ast.BinaryOperator.LOGICAL_OR ) ) { sb.append ( "or" ) ; } else { assert operator == ( lombok.ast.BinaryOperator.BITWISE_XOR ) : operator ; sb.append ( "xor" ) ; } sb.append ( ' ' ) ; }
public void testGetTvInputList ( ) throws java.lang.Exception { if ( ! ( android.media.tv.cts.Utils.hasTvInputFramework ( getContext ( ) ) ) ) { return ; } java.util.List < android.media.tv.TvInputInfo > list = mManager.getTvInputList ( ) ; for ( java.lang.String name : android.media.tv.cts.TvInputManagerTest.VALID_TV_INPUT_SERVICES ) { assertNotNull ( ( "getTvInputList() doesn't contain valid input: " + name ) , android.media.tv.cts.TvInputManagerTest.getInfoForClassName ( list , name ) ) ; } for ( java.lang.String name : android.media.tv.cts.TvInputManagerTest.INVALID_TV_INPUT_SERVICES ) { assertNull ( ( "getTvInputList() contains invalind input: " + name ) , android.media.tv.cts.TvInputManagerTest.getInfoForClassName ( list , name ) ) ; } }
synchronized void nAllocationData2D ( long id , int xoff , int yoff , int mip , int face , int w , int h , short [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes ) ; }
public void TestFormatReplaceOptimization ( ) { android.icu.impl.SimplePatternFormatter fmt = android.icu.impl.SimplePatternFormatter.compile ( "{2}, {0}, {1} and {3}" ) ; int [ ] offsets = new int [ 4 ] ; java.lang.StringBuilder result = new java.lang.StringBuilder ( "original" ) ; assertEquals ( "format" , "original, freddy, frog and by" , fmt.formatAndReplace ( result , offsets , "freddy" , "frog" , result , "by" ) . toString ( ) ) ; int [ ] expectedOffsets = new int [ ] { 10 , 18 , 0 , 27 } ; verifyOffsets ( expectedOffsets , offsets ) ; }
public final int generateSecret ( byte [ ] sharedSecret , int offset ) throws java.lang.IllegalStateException , javax.crypto.ShortBufferException { return spiImpl.engineGenerateSecret ( sharedSecret , offset ) ; }
public synchronized void fillSwitchMapClass ( @ javax.annotation.Nonnull com.android.jack.transformations.enums.OptimizationUtil supportUtil , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedEnum enumType , @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClass switchMapClass ) { this . enumType = enumType ; this . supportUtil = supportUtil ; this . switchMapClass = switchMapClass ; com.android.jack.transformations.request.TransformationRequest transformRequest = new com.android.jack.transformations.request.TransformationRequest ( switchMapClass ) ; if ( com.android.jack.transformations.enums.opt.SyntheticClassManager.isSyntheticSwitchMapClass ( switchMapClass ) ) { createInstanceInitIfNotExists ( transformRequest ) ; } if ( ! ( addSyntheticInitializerIfNotExists ( transformRequest ) ) ) { throw new java.lang.AssertionError ( ( "Fails adding synthetic switch map initializer to class: " + switchMapClass ) ) ; } transformRequest.commit ( ) ; }
public final java.nio.MappedByteBuffer force ( ) { if ( ( mapMode ) == ( java.nio.channels.FileChannel.MapMode.READ_WRITE ) ) { try { Libcore.os.msync ( block.toInt ( ) , block.getSize ( ) , java.nio.MS_SYNC ) ; } catch ( libcore.io.ErrnoException errnoException ) { throw new java.lang.AssertionError ( errnoException ) ; } } return this ; }
public void testConfigurationUpdatesWhenRotatingWhileDocked ( ) throws java.lang.Exception { if ( ! ( supportsScreenRotation ( ) ) ) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay ( LogLevel.INFO , "Skipping test: no rotation support" ) ; return ; } if ( ! ( supportsSplitScreenMultiWindow ( ) ) ) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay ( LogLevel.INFO , "Skipping test: no multi-window support" ) ; return ; } setDeviceRotation ( 0 ) ; launchActivityInDockStack ( android.server.cts.LAUNCHING_ACTIVITY ) ; launchActivityToSide ( false , false , android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME ) ; launchActivity ( false , false , false , android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; final android.server.cts.ReportedSizes initialSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME ) ; rotateAndCheckSizes ( initialSizes ) ; }
public void testCannotSetChunkedStreamingModeAfterFixedLengthStreamingMode ( ) throws java.lang.Exception { server.play ( ) ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; connection.setFixedLengthStreamingMode ( 1 ) ; try { connection.setChunkedStreamingMode ( 1 ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } }
public java.io.OutputStream openWrite ( ) throws java.io.FileNotFoundException { return new java.io.FileOutputStream ( file ) ; }
private android.view.View findScrollingChild ( android.view.View view ) { if ( view instanceof android.support.v4.view.NestedScrollingChild ) { return view ; } if ( view instanceof android.view.ViewGroup ) { android.view.ViewGroup group = ( ( android.view.ViewGroup ) ( view ) ) ; for ( int i = 0 , count = group.getChildCount ( ) ; i < count ; i ++ ) { android.view.View scrollingChild = findScrollingChild ( group.getChildAt ( i ) ) ; if ( scrollingChild != null ) { return scrollingChild ; } } } return null ; }
protected java.lang.String getTestName ( com.android.ddmlib.testrunner.TestIdentifier testId ) { return java.lang.String.format ( "%1$s[%2$s]" , testId.getTestName ( ) , mDeviceName ) ; }
public void computeDominators ( ) { if ( ( mDominators ) == null ) { mTopSort = com.android.tools.perflib.heap.analysis.TopologicalSort.compute ( getGCRoots ( ) ) ; mDominators = new com.android.tools.perflib.heap.analysis.Dominators ( this , mTopSort ) ; mDominators.computeRetainedSizes ( ) ; } }
public void imageLoaded ( ) { org.eclipse.swt.widgets.Display.getDefault ( ) . syncExec ( new java.lang.Runnable ( ) { public void run ( ) { synchronized ( this ) { loadImage ( ) ; crosshairLocation = model.getCrosshairLocation ( ) ; zoom = model.getZoom ( ) ; } } } ) ; doRedraw ( ) ; }
public void testPlus ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( com.android.tools.lint.checks.GradleDetector.PLUS ) ; assertEquals ( ( "" + ( ( ( "build.gradle:9: Warning: Avoid using + in version numbers; can lead to unpredictable and unrepeatable builds (com.android.support:appcompat-v7:+) [GradleDynamicVersion]\n" + " compile \'com.android.support:appcompat-v7:+\'\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 1 warnings\n" ) ) , lintProject ( "gradle/Plus.gradle=>build.gradle" ) ) ; }
public void tearDown ( ) throws java.lang.Exception { if ( testSystemTzDataDir.exists ( ) ) { libcore.tzdata.shared2.FileUtils.deleteRecursive ( testInstallDir ) ; } if ( testInstallDir.exists ( ) ) { libcore.tzdata.shared2.FileUtils.deleteRecursive ( testInstallDir ) ; } if ( tempDir.exists ( ) ) { libcore.tzdata.shared2.FileUtils.deleteRecursive ( tempDir ) ; } super . tearDown ( ) ; }
public void testVerifyAppStats ( ) throws java.lang.Exception { for ( int user : mUsers ) { runDeviceTests ( android.appsecurity.cts.StorageHostTest.PKG_A , android.appsecurity.cts.StorageHostTest.CLASS , "testAllocate" , user ) ; } getDevice ( ) . executeShellCommand ( "sync" ) ; for ( int user : mUsers ) { runDeviceTests ( android.appsecurity.cts.StorageHostTest.PKG_A , android.appsecurity.cts.StorageHostTest.CLASS , "testVerifySpaceManual" , user ) ; runDeviceTests ( android.appsecurity.cts.StorageHostTest.PKG_A , android.appsecurity.cts.StorageHostTest.CLASS , "testVerifySpaceApi" , user ) ; } }
void dispatch ( final java.lang.Object event , final com.google.common.eventbus.EventHandler handler ) { executor.execute ( new java.lang.Runnable ( ) { @ java.lang.Override @ java.lang.SuppressWarnings ( value = "synthetic-access" ) public void run ( ) { com.google.common.eventbus.AsyncEventBus.super . dispatch ( event , handler ) ; } } ) ; }
public boolean isNonTtyOrTtyOnVolteEnabledForSlot ( ) { if ( getBooleanCarrierConfigForSlot ( CarrierConfigManager.KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL ) ) { return true ; } return ( Settings.Secure.getInt ( mContext.getContentResolver ( ) , Settings.Secure.PREFERRED_TTY_MODE , TelecomManager.TTY_MODE_OFF ) ) == ( android.telecom.TelecomManager.TTY_MODE_OFF ) ; }
public void run ( ) { byte [ ] digest = null ; try { digest = getPackageContentsDigest ( ) ; } catch ( java.io.IOException e ) { android.util.Log.w ( com.android.packageinstaller.InstallFlowAnalytics.TAG , "Failed to hash APK contents" , e ) ; } finally { java.lang.String digestHex = ( digest != null ) ? com.android.packageinstaller.IntegralToString.bytesToHexString ( digest , false ) : "" ; com.android.packageinstaller.EventLogTags.writeInstallPackageAttempt ( resultAndFlags , totalElapsedTime , elapsedTimeTillPackageInfoObtained , elapsedTimeTillInstallButtonClick , digestHex ) ; } }
public static void main ( java.lang.String [ ] args ) { Main.testSingleInt ( ) ; Main.testSingle ( ) ; Main.testMultiInt ( ) ; Main.testMulti ( ) ; java.lang.System.out.println ( "ReflectArrayTest passed" ) ; }
private void addStatusBarWindow ( ) { final int height = getStatusBarHeight ( ) ; final android.view.WindowManager.LayoutParams lp = new android.view.WindowManager.LayoutParams ( android.view.ViewGroup.LayoutParams.MATCH_PARENT , height , android.view.ViewGroup.LayoutParams.TYPE_STATUS_BAR , ( ( ( android.view.ViewGroup.LayoutParams.FLAG_NOT_FOCUSABLE ) | ( android.view.ViewGroup.LayoutParams.FLAG_TOUCHABLE_WHEN_WAKING ) ) | ( android.view.ViewGroup.LayoutParams.FLAG_SPLIT_TOUCH ) ) , android.graphics.PixelFormat.TRANSLUCENT ) ; lp.flags |= android.view.ViewGroup.LayoutParams.FLAG_HARDWARE_ACCELERATED ; lp.gravity = getStatusBarGravity ( ) ; lp.setTitle ( "StatusBar" ) ; lp.packageName = mContext.getPackageName ( ) ; makeStatusBarView ( ) ; mWindowManager.addView ( mStatusBarWindow , lp ) ; }
public java.lang.String getDensityFilter ( ) { return densityFilter ; }
protected void addUserInputPages ( ) { com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ExtractIncludeRefactoring ref = ( ( com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ExtractIncludeRefactoring ) ( getRefactoring ( ) ) ) ; java.lang.String initialName = ref.getInitialName ( ) ; addPage ( new com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ExtractIncludeWizard.InputPage ( mEditor.getProject ( ) , initialName ) ) ; }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding targetType = ( ( org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding ) ( x.qualification.resolvedType ) ) ; push ( makeThisReference ( info , targetType , true , scope ) ) ; } catch ( java.lang.RuntimeException e ) { throw translateException ( x , e ) ; } }
protected void displayNetworkSelectionSucceeded ( ) { java.lang.String status = getContext ( ) . getResources ( ) . getString ( R.string.registration_done ) ; final com.android.phone.PhoneGlobals app = com.android.phone.PhoneGlobals.getInstance ( ) ; app.notificationMgr.postTransientNotification ( NotificationMgr.NETWORK_SELECTION_NOTIFICATION , status ) ; }
public void run ( ) { for ( com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction a2 : actions ) { if ( a2 instanceof com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action ) { gre.callClosure ( ( ( com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action ) ( a2 ) ) . getClosure ( ) , a2 , key , ( ! isChecked ) ) ; } } }
static java.util.ArrayList < com.android.internal.telephony.dataconnection.DataCallResponse > convertHalDcList ( java.util.ArrayList < android.hardware.radio.V1_0.SetupDataCallResult > dcList ) { java.util.ArrayList < com.android.internal.telephony.dataconnection.DataCallResponse > dcResponseList = new java.util.ArrayList ( dcList.size ( ) ) ; for ( android.hardware.radio.V1_0.SetupDataCallResult dc : dcList ) { com.android.internal.telephony.dataconnection.DataCallResponse dcResponse = com.android.internal.telephony.RIL.convertHalDc ( dc ) ; dcResponseList.add ( dcResponse ) ; } return dcResponseList ; }
public void widgetSelected ( org.eclipse.swt.events.SelectionEvent e ) { com.android.sdkuilib.internal.widgets.DeviceCreationDialog dlg = new com.android.sdkuilib.internal.widgets.DeviceCreationDialog ( mShell , mDeviceManager , mUpdaterData.getImageFactory ( ) , null ) ; if ( ( dlg.open ( ) ) == ( org.eclipse.jface.window.Window.OK ) ) { setupDevices ( menuBarDevices ) ; } }
public void canBeTetheredAsUsb ( ) throws java.lang.Exception { initStateMachine ( android.net.ConnectivityManager.TETHERING_USB ) ; dispatchCommand ( TetherInterfaceStateMachine.CMD_TETHER_REQUESTED , com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED ) ; org.mockito.InOrder inOrder = org.mockito.Mockito.inOrder ( mTetherHelper , mNMService ) ; inOrder.verify ( mNMService ) . getInterfaceConfig ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME ) ; inOrder.verify ( mNMService ) . setInterfaceConfig ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME , mInterfaceConfiguration ) ; inOrder.verify ( mNMService ) . tetherInterface ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME ) ; inOrder.verify ( mTetherHelper ) . notifyInterfaceStateChange ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME , mTestedSm , com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED , android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mNMService , mStatsService , mTetherHelper ) ; }
public java.util.List < com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction > callGetContextMenu ( com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy selectedNode ) { com.android.ide.eclipse.adt.editors.layout.gscripts.IViewRule rule = loadRule ( selectedNode.getNode ( ) ) ; if ( rule != null ) { try { return rule.getContextMenu ( selectedNode ) ; } catch ( java.lang.Exception e ) { logError ( "%s.getContextMenu() failed: %s" , rule.getClass ( ) . getSimpleName ( ) , e.toString ( ) ) ; } } return null ; }
private int getParameterWordCount ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { int wordCount = ( method.isStatic ( ) ) ? 0 : Type.OBJECT.getWordCount ( ) ; for ( com.android.jack.ir.ast.JParameter param : method.getParams ( ) ) { if ( ( param.getMarker ( com.android.jack.transformations.lambda.CapturedVariable.class ) ) != null ) { continue ; } wordCount += com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx ( param.getType ( ) ) . getWordCount ( ) ; } return wordCount ; }
public int getApplicationEnabledSetting ( java.lang.String packageName ) { synchronized ( mPackages ) { return mSettings.getApplicationEnabledSettingLPr ( packageName ) ; } }
private static void testClassVersion ( ) { java.lang.System.out.println ( java.util.Arrays.toString ( art.Test912.getClassVersion ( art.Main.class ) ) ) ; }
private static org.jetbrains.plugins.terminal.ActionToolbar createToolbar ( @ org.jetbrains.annotations.Nullable final org.jetbrains.plugins.terminal.LocalTerminalDirectRunner terminalRunner , final com.jediterm.terminal.ui.TerminalWidget terminal ) { org.jetbrains.plugins.terminal.DefaultActionGroup group = new org.jetbrains.plugins.terminal.DefaultActionGroup ( ) ; if ( terminalRunner != null ) { group.add ( new org.jetbrains.plugins.terminal.TerminalView.NewSession ( terminalRunner , terminal ) ) ; } return org.jetbrains.plugins.terminal.ActionManager.getInstance ( ) . createActionToolbar ( ActionPlaces.UNKNOWN , group , false ) ; }
public void testAesCbcHmacMd5Udp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , true , 1 , false ) ; }
private void enforceMediaPermissions ( android.content.ComponentName compName , int pid , int uid , int resolvedUserId ) { if ( ( ( getContext ( ) . checkPermission ( android.Manifest.permission.MEDIA_CONTENT_CONTROL , pid , uid ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) && ( ! ( isEnabledNotificationListener ( compName , android.os.UserHandle.getUserId ( uid ) , resolvedUserId ) ) ) ) { throw new java.lang.SecurityException ( "Missing permission to control media." ) ; } }
public void onCreate ( com.android.ide.common.api.INode node , com.android.ide.common.api.INode parent , com.android.ide.common.api.InsertType insertType ) { super . onCreate ( node , parent , insertType ) ; if ( insertType.isCreate ( ) ) { java.lang.String fillParent = getFillParentValueName ( ) ; com.android.ide.common.api.INode hint = node.appendChild ( com.android.ide.common.layout.LayoutConstants.FQCN_EDIT_TEXT ) ; hint.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_TEXT , "Hint" ) ; hint.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ID , "@android:id/hint" ) ; hint.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH , fillParent ) ; com.android.ide.common.api.INode primary = node.appendChild ( com.android.ide.common.layout.LayoutConstants.FQCN_EDIT_TEXT ) ; primary.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_TEXT , "Primary" ) ; primary.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_ID , "@android:id/primary" ) ; primary.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_BELOW , "@android:id/hint" ) ; primary.setAttribute ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_WIDTH , fillParent ) ; } }
private void addRequest ( com.android.internal.telephony.RILRequest rr ) { acquireWakeLock ( rr , com.android.internal.telephony.RIL.FOR_WAKELOCK ) ; synchronized ( mRequestList ) { rr.mStartTimeMs = android.os.SystemClock.elapsedRealtime ( ) ; mRequestList.append ( rr.mSerial , rr ) ; } }
public void visitMethodInsn ( final int opcode , final java.lang.String owner , final java.lang.String name , final java.lang.String desc ) { switch ( opcode ) { case org.objectweb.asm.Opcodes.INVOKESPECIAL : invokespecial ( owner , name , desc ) ; break ; case org.objectweb.asm.Opcodes.INVOKEVIRTUAL : invokevirtual ( owner , name , desc ) ; break ; case org.objectweb.asm.Opcodes.INVOKESTATIC : invokestatic ( owner , name , desc ) ; break ; case org.objectweb.asm.Opcodes.INVOKEINTERFACE : invokeinterface ( owner , name , desc ) ; break ; default : throw new java.lang.IllegalArgumentException ( ) ; } }
private void invokeCompleteCallback ( ) { if ( ( mCompleteCallback ) != null ) { try { mCompleteCallback.send ( android.os.Message.obtain ( null , BeamManager.MSG_BEAM_COMPLETE ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.nfc.beam.BeamSendService.TAG , "failed to invoke Beam complete callback" , e ) ; } } }
public void testPullNonPullableExternalCall ( ) throws java.lang.Exception { mConnectionServiceFixtureA.mConnectionServiceDelegate.mProperties = android.telecom.Connection.PROPERTY_IS_EXTERNAL_CALL ; com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall ( "650-555-1212" , mPhoneAccountA0.getAccountHandle ( ) , mConnectionServiceFixtureA ) ; assertEquals ( Call.STATE_ACTIVE , mInCallServiceFixtureX.getCall ( ids.mCallId ) . getState ( ) ) ; mInCallServiceFixtureX.mInCallAdapter.pullExternalCall ( ids.mCallId ) ; java.lang.Thread.sleep ( com.android.server.telecom.tests.TEST_TIMEOUT ) ; org.mockito.Mockito.verify ( mConnectionServiceFixtureA.getTestDouble ( ) , org.mockito.Mockito.never ( ) ) . pullExternalCall ( ids.mConnectionId ) ; }
public void verifyModifyRetrievedConfig ( ) throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = new android.net.wifi.hotspot2.PasspointConfiguration ( ) ; config.homeSp = new android.net.wifi.hotspot2.pps.HomeSP ( ) ; config.homeSp.fqdn = "test1" ; mProvider = new com.android.server.wifi.hotspot2.PasspointProvider ( config ) ; verifyInstalledConfig ( config , true ) ; android.net.wifi.hotspot2.PasspointConfiguration retrievedConfig = mProvider.getConfig ( ) ; retrievedConfig.homeSp.fqdn = "test2" ; verifyInstalledConfig ( retrievedConfig , false ) ; }
protected com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode createModel ( com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode parent , org.w3c.dom.Element element ) { java.util.List < org.w3c.dom.Element > children = com.android.ide.eclipse.adt.internal.editors.layout.refactoring.RelativeLayoutConversionHelper.getChildren ( element ) ; java.lang.String fqcn = ( com.android.ide.common.layout.LayoutConstants.ANDROID_WIDGET_PREFIX ) + ( element.getTagName ( ) ) ; boolean hasChildren = ( children.size ( ) ) > 0 ; com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode node = createNode ( parent , fqcn , hasChildren ) ; node.setXmlNode ( element ) ; for ( org.w3c.dom.Element child : children ) { createModel ( node , child ) ; } return node ; }
private void updateVoicemailNotifications ( ) { android.content.Intent serviceIntent = new android.content.Intent ( getActivity ( ) , com.android.dialer.calllog.CallLogNotificationsService.class ) ; serviceIntent.setAction ( CallLogNotificationsService.ACTION_UPDATE_NOTIFICATIONS ) ; getActivity ( ) . startService ( serviceIntent ) ; }
public void dataCallListChanged ( int indicationType , java.util.ArrayList < android.hardware.radio.V1_0.SetupDataCallResult > dcList ) { mRil.processIndication ( indicationType ) ; java.util.ArrayList < com.android.internal.telephony.dataconnection.DataCallResponse > response = com.android.internal.telephony.RIL.convertHalDcList ( dcList ) ; if ( RIL.RILJ_LOGD ) mRil.unsljLogRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_DATA_CALL_LIST_CHANGED , response ) ; mRil.mDataNetworkStateRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , response , null ) ) ; }
public void testCookiesWithoutLeadingPeriod ( ) throws java.lang.Exception { java.net.CookieManager cm = new java.net.CookieManager ( createCookieStore ( ) , null ) ; java.util.Map < java.lang.String , java.util.List < java.lang.String > > responseHeaders = new java.util.HashMap < > ( ) ; java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; list.add ( "a=b; domain=chargepoint.com" ) ; responseHeaders.put ( "Set-Cookie" , list ) ; java.net.URI uri = new java.net.URI ( "http://services.chargepoint.com" ) ; cm.put ( uri , responseHeaders ) ; java.util.Map < java.lang.String , java.util.List < java.lang.String > > cookies = cm.get ( new java.net.URI ( "https://webservices.chargepoint.com/foo" ) , responseHeaders ) ; assertEquals ( 0 , cookies.size ( ) ) ; }
public void allowLowRssiIfDataIsMoving ( ) throws java.lang.Exception { mWifiInfo.setRssi ( ( - 80 ) ) ; mWifiInfo.setLinkSpeed ( 6 ) ; mWifiInfo.txSuccessRate = 5.1 ; mWifiInfo.rxSuccessRate = 5.1 ; for ( int i = 0 ; i < 10 ; i ++ ) { mWifiScoreReport.calculateAndReportScore ( mWifiInfo , mNetworkAgent , 0 , mWifiMetrics ) ; } org.junit.Assert.assertTrue ( mWifiScoreReport.isLastReportValid ( ) ) ; int score = fishScoreFromReportString ( mWifiScoreReport.getLastReport ( ) ) ; org.junit.Assert.assertTrue ( ( score > ( com.android.server.wifi.WifiScoreReportTest.CELLULAR_THRESHOLD_SCORE ) ) ) ; }
public void handleMessage ( android.os.Message msg ) { synchronized ( this ) { if ( ( ( mRS ) == null ) || ( ( mOutPixelsAllocation ) == null ) ) { return ; } if ( ( mOutDisplayAllocation ) != ( mOutPixelsAllocation ) ) { mOutDisplayAllocation.copyFrom ( mOutPixelsAllocation ) ; } mOutDisplayAllocation.ioSend ( ) ; mDisplayView.invalidate ( ) ; } }
public boolean connect ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.a2dpsink.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH ADMIN permission" ) ; int connectionState = mStateMachine.getConnectionState ( device ) ; if ( ( connectionState == ( android.bluetooth.BluetoothProfile.STATE_CONNECTED ) ) || ( connectionState == ( android.bluetooth.BluetoothProfile.STATE_CONNECTING ) ) ) { return false ; } mStateMachine.sendMessage ( A2dpSinkStateMachine.CONNECT , device ) ; return true ; }
public boolean shouldOverrideKeyEvent ( android.view.KeyEvent event ) { if ( event.isSystem ( ) ) return true ; org.chromium.content.common.TraceEvent.begin ( ) ; if ( com.android.webview.chromium.WebViewContentsClientAdapter.TRACE ) android.util.Log.d ( com.android.webview.chromium.WebViewContentsClientAdapter.TAG , "shouldOverrideKeyEvent" ) ; boolean result = mWebViewClient.shouldOverrideKeyEvent ( mWebView , event ) ; org.chromium.content.common.TraceEvent.end ( ) ; return result ; }
public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( "<SdkSourceProperties " ) ; synchronized ( com.android.sdklib.internal.repository.SdkSourceProperties.sSourcesProperties ) { for ( java.util.Map.Entry < java.lang.Object , java.lang.Object > entry : com.android.sdklib.internal.repository.SdkSourceProperties.sSourcesProperties.entrySet ( ) ) { sb.append ( '\n' ) . append ( entry.getKey ( ) ) . append ( " = " ) . append ( entry.getValue ( ) ) ; } } sb.append ( "\n>" ) ; return sb.toString ( ) ; }
protected com.android.sched.vfs.OutputVFile getOutputDex ( @ javax.annotation.Nonnull com.android.sched.vfs.OutputVDir outputVDir , int dexCount ) throws com.android.jack.JackIOException { assert dexCount >= 1 ; java.lang.String dexName ; if ( dexCount == 1 ) { dexName = DexFileWriter.DEX_FILENAME ; } else { dexName = ( ( DexFileWriter.DEX_PREFIX ) + dexCount ) + ( DexFileWriter.DEX_FILE_EXTENSION ) ; } try { return outputVDir.createOutputVFile ( new com.android.sched.vfs.VPath ( dexName , '/' ) ) ; } catch ( java.io.IOException e ) { throw new com.android.jack.JackIOException ( ( ( ( "Cannot create dex file '" + dexName ) + "' in " ) + outputVDir ) , e ) ; } }
public void testInstall_unsuccessfulFollowOnUpdate_olderVersion ( ) throws java.lang.Exception { libcore.tzdata.update2.TimeZoneBundle bundle1 = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION , "002" ) ; assertTrue ( installer.install ( bundle1.getBytes ( ) ) ) ; assertBundleInstalled ( bundle1 ) ; libcore.tzdata.update2.TimeZoneBundle bundle2 = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle ( libcore.tzdata.update2.TimeZoneBundleInstallerTest.OLDER_RULES_VERSION , "001" ) ; assertFalse ( installer.install ( bundle2.getBytes ( ) ) ) ; assertBundleInstalled ( bundle1 ) ; }
public static void computeDot ( android.renderscript.cts.TestDot.ArgumentsFloatNFloatNFloat args ) { android.renderscript.cts.Floaty sum = new android.renderscript.cts.Floaty ( 0.0F ) ; for ( int i = 0 ; i < ( args.inLhs.length ) ; i ++ ) { android.renderscript.cts.Floaty a = new android.renderscript.cts.Floaty ( args.inLhs [ i ] ) ; android.renderscript.cts.Floaty b = new android.renderscript.cts.Floaty ( args.inRhs [ i ] ) ; sum.add ( android.renderscript.cts.Floaty.multiply ( a , b ) ) ; } args.out = sum ; }
private com.android.builder.VariantConfiguration getVariant ( ) { com.android.builder.VariantConfiguration variant = new com.android.builder.VariantConfiguration ( mDefaultConfig , new com.android.builder.MockSourceProvider ( "main" ) , mBuildType , new com.android.builder.MockSourceProvider ( "debug" ) , VariantConfiguration.Type.DEFAULT ) { @ java.lang.Override protected void validate ( ) { } } ; variant.addProductFlavor ( mFlavorConfig , new com.android.builder.MockSourceProvider ( "custom" ) ) ; return variant ; }
public void testLibProguard ( ) throws java.lang.Exception { java.io.File project = new java.io.File ( testDir , "libProguard" ) ; java.io.File fileOutput = new java.io.File ( project , ( ( "build/" + ( com.android.build.gradle.BasePlugin.FD_OUTPUTS ) ) + "/proguard/release" ) ) ; runGradleTasks ( sdkDir , ndkDir , BasePlugin.GRADLE_MIN_VERSION , project , "clean" , "build" ) ; com.android.build.gradle.ManualBuildTest.checkFile ( fileOutput , "mapping.txt" , new java.lang.String [ ] { "int proguardInt -> a" } ) ; }
public void testDeserialize ( ) { java.lang.String json = "{\"startLine\":11,\"startColumn\":22,\"startOffset\":33," + "\"endLine\":66,\"endColumn\":77,\"endOffset\":88}" ; com.android.ide.common.blame.SourcePosition range = mGson.fromJson ( json , com.android.ide.common.blame.SourcePosition.class ) ; org.junit.Assert.assertEquals ( range , new com.android.ide.common.blame.SourcePosition ( 11 , 22 , 33 , 66 , 77 , 88 ) ) ; }
public int cloneUserData ( int srcUserId , int targetUserId , boolean copyData ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( "cloneuserdata" ) ; builder.append ( ' ' ) ; builder.append ( srcUserId ) ; builder.append ( ' ' ) ; builder.append ( targetUserId ) ; builder.append ( ' ' ) ; builder.append ( ( copyData ? '1' : '0' ) ) ; return execute ( builder.toString ( ) ) ; }
void visit ( java.lang.Package pkg ) { if ( ( ( mFindMaxApi ) && ( pkg instanceof com.android.sdklib.internal.repository.packages.PlatformPackage ) ) && ( ! ( pkg.isLocal ( ) ) ) ) { com.android.sdklib.internal.repository.packages.PlatformPackage pp = ( ( com.android.sdklib.internal.repository.packages.PlatformPackage ) ( pkg ) ) ; com.android.sdklib.AndroidVersion v = pp.getVersion ( ) ; if ( ! ( v.isPreview ( ) ) ) { int api = v.getApiLevel ( ) ; if ( api > ( mApiLevel ) ) { mApiLevel = api ; } } } }
private static java.io.File getWrittenResources ( ) throws com.android.ide.common.res2.MergingException , java.io.IOException { com.android.ide.common.res2.ResourceMerger resourceMerger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger ( ) ; java.io.File folder = com.google.common.io.Files.createTempDir ( ) ; com.android.ide.common.res2.MergedResourceWriter writer = new com.android.ide.common.res2.MergedResourceWriter ( folder , null ) ; resourceMerger.mergeData ( writer , false ) ; return folder ; }
static void deadInduction ( ) { int dead = 0 ; for ( int i = 0 ; i < ( Main.a.length ) ; i ++ ) { Main.a [ i ] = 1 ; dead += 5 ; } }
public void testEnums ( ) throws java.lang.Exception { org.json.JSONArray a1 = new org.json.JSONArray ( java.lang.annotation.RetentionPolicy.values ( ) ) ; assertEquals ( "[\"SOURCE\",\"CLASS\",\"RUNTIME\"]" , a1.toString ( ) ) ; org.json.JSONArray a2 = new org.json.JSONArray ( org.json.JSONArrayTest.MyEnum.values ( ) ) ; assertEquals ( "[null,null,null]" , a2.toString ( ) ) ; }
public void iccOpenLogicalChannel ( java.lang.String aid , int p2 , android.os.Message response ) { loglocal ( ( ( ( ( ( ( ( "iccOpenLogicalChannel: " + aid ) + " , " ) + p2 ) + " by pid:" ) + ( android.os.Binder.getCallingPid ( ) ) ) + " uid:" ) + ( android.os.Binder.getCallingUid ( ) ) ) ) ; mCi.iccOpenLogicalChannel ( aid , p2 , obtainMessage ( com.android.internal.telephony.uicc.UiccProfile.EVENT_OPEN_LOGICAL_CHANNEL_DONE , response ) ) ; }
public void testRegistrationConfigConstructorsEqual ( ) { android.telephony.ims.internal.stub.ImsFeatureConfiguration testConfig = new android.telephony.ims.internal.stub.ImsFeatureConfiguration ( new int [ ] { android.telephony.ims.internal.feature.ImsFeature.FEATURE_MMTEL , android.telephony.ims.internal.feature.ImsFeature.FEATURE_RCS } ) ; android.telephony.ims.internal.stub.ImsFeatureConfiguration testConfig2 = new android.telephony.ims.internal.stub.ImsFeatureConfiguration.Builder ( ) . addFeature ( ImsFeature.FEATURE_RCS ) . addFeature ( ImsFeature.FEATURE_MMTEL ) . build ( ) ; junit.framework.Assert.assertEquals ( testConfig , testConfig2 ) ; }
public com.google.common.base.Optional < java.lang.String > formatToE164 ( com.android.dialer.DialerPhoneNumber number ) { com.android.dialer.common.Assert.isWorkerThread ( ) ; if ( number.hasDialerInternalPhoneNumber ( ) ) { return com.google.common.base.Optional.of ( phoneNumberUtil.format ( com.android.dialer.phonenumberproto.Converter.protoToPojo ( number.getDialerInternalPhoneNumber ( ) ) , PhoneNumberFormat.E164 ) ) ; } return com.google.common.base.Optional.absent ( ) ; }
public void crunchPng ( java.io.File from , java.io.File to ) throws com.android.ide.common.internal.LoggedErrorException , java.io.IOException , java.lang.InterruptedException { java.lang.String [ ] command = new java.lang.String [ ] { mAaptLocation , "s" , "-i" , from.getAbsolutePath ( ) , "-o" , to.getAbsolutePath ( ) } ; mCommandLineRunner.runCmdLine ( command ) ; }
private void closeSearch ( boolean animate ) { com.android.dialer.common.Assert.checkArgument ( isSearchVisible ( ) ) ; if ( isDialpadVisible ( ) ) { hideDialpad ( animate , true ) ; } else if ( ! ( fab.isShown ( ) ) ) { fab.show ( ) ; } showBottomNav ( ) ; toolbar.collapse ( animate ) ; mainActivity.getFragmentManager ( ) . beginTransaction ( ) . remove ( getSearchFragment ( ) ) . commit ( ) ; }
public int getState ( ) { if ( android.bluetooth.BluetoothSap.VDBG ) android.bluetooth.BluetoothSap.log ( "getState()" ) ; if ( ( mService ) != null ) { try { return mService.getState ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothSap.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothSap.TAG , "Proxy not attached to service" ) ; if ( android.bluetooth.BluetoothSap.DBG ) android.bluetooth.BluetoothSap.log ( android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ; } return android.bluetooth.BluetoothSap.STATE_ERROR ; }
public java.lang.String getTestedApplicationId ( ) { if ( ( mType ) == ( com.android.builder.core.VariantConfiguration.Type.TEST ) ) { assert ( mTestedConfig ) != null ; if ( ( mTestedConfig.mType ) == ( com.android.builder.core.VariantConfiguration.Type.LIBRARY ) ) { return getApplicationId ( ) ; } else { return mTestedConfig.getApplicationId ( ) ; } } return null ; }
public void onClick ( android.view.View v ) { com.android.dialer.common.LogUtil.i ( "VoicemailTosMessageCreator.getPromoMessage" , "acknowledge clicked" ) ; recordTosAcceptance ( ) ; recordFeatureAcknowledgement ( ) ; statusReader.refresh ( ) ; }
public java.lang.Object getCategoryKey ( java.lang.Package pkg ) { if ( pkg instanceof com.android.sdklib.internal.repository.packages.IAndroidVersionProvider ) { return ( ( com.android.sdklib.internal.repository.packages.IAndroidVersionProvider ) ( pkg ) ) . getAndroidVersion ( ) ; } else if ( ( pkg instanceof com.android.sdklib.internal.repository.packages.ToolPackage ) || ( pkg instanceof com.android.sdklib.internal.repository.packages.PlatformToolPackage ) ) { if ( pkg.getRevision ( ) . isPreview ( ) ) { return PkgCategoryApi.KEY_TOOLS_PREVIEW ; } else { return PkgCategoryApi.KEY_TOOLS ; } } else { return PkgCategoryApi.KEY_EXTRA ; } }
private int readHalf ( long offset ) throws java.io.IOException { mFile.seek ( offset ) ; mFile.readFully ( mBuffer , 0 , mWordSize ) ; final int answer ; if ( ( mEndian ) == ( android.security.cts.ReadElf.ELFDATA2LSB ) ) { answer = ( ( mBuffer [ 1 ] ) << 8 ) | ( mBuffer [ 0 ] ) ; } else { answer = ( ( mBuffer [ 0 ] ) << 8 ) | ( mBuffer [ 1 ] ) ; } return answer ; }
protected static void loadLinkerJniLibrary ( ) { java.lang.String libName = ( "lib" + ( org.chromium.base.library_loader.Linker.LINKER_JNI_LIBRARY ) ) + ".so" ; if ( org.chromium.base.library_loader.Linker.DEBUG ) { org.chromium.base.Log.i ( org.chromium.base.library_loader.Linker.TAG , ( "Loading " + libName ) ) ; } java.lang.System.loadLibrary ( org.chromium.base.library_loader.Linker.LINKER_JNI_LIBRARY ) ; }
public void setUp ( ) throws java.lang.Exception { spf = javax.xml.parsers.SAXParserFactory.newInstance ( ) ; is1 = getClass ( ) . getResourceAsStream ( "/simple.xml" ) ; tests.api.javax.xml.parsers.SAXParserFactoryTest.ns = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; tests.api.javax.xml.parsers.SAXParserFactoryTest.attr = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; tests.api.javax.xml.parsers.SAXParserFactoryTest.el = new java.util.Vector < java.lang.String > ( ) ; }
private com.android.builder.core.VariantConfiguration getVariantWithManifestVersion ( final java.lang.String versionName ) { com.android.builder.core.VariantConfiguration variant = new com.android.builder.core.VariantConfiguration ( mDefaultConfig , new com.android.builder.core.MockSourceProvider ( "main" ) , mBuildType , new com.android.builder.core.MockSourceProvider ( "debug" ) , VariantConfiguration.Type.DEFAULT , null ) { @ java.lang.Override public java.lang.String getVersionNameFromManifest ( ) { return versionName ; } } ; variant.addProductFlavor ( mFlavorConfig , new com.android.builder.core.MockSourceProvider ( "custom" ) , "" ) ; return variant ; }
void whitelistOppDevice ( android.bluetooth.BluetoothDevice device ) { if ( com.android.nfc.beam.BeamTransferManager.DBG ) android.util.Log.d ( com.android.nfc.beam.BeamTransferManager.TAG , ( ( "Whitelisting " + device ) + " for BT OPP" ) ) ; android.content.Intent intent = new android.content.Intent ( com.android.nfc.beam.BeamTransferManager.ACTION_WHITELIST_DEVICE ) ; intent.putExtra ( BluetoothDevice.EXTRA_DEVICE , device ) ; mContext.sendBroadcastAsUser ( intent , UserHandle.CURRENT ) ; }
private static java.lang.String getDefaultSignatureAlgorithmForKeyType ( java.lang.String keyType ) { if ( "RSA" . equalsIgnoreCase ( keyType ) ) { return "sha256WithRSA" ; } else if ( "EC" . equalsIgnoreCase ( keyType ) ) { return "sha256WithECDSA" ; } else { throw new java.lang.IllegalArgumentException ( ( "Unsupported key type " + keyType ) ) ; } }
public void testCallbackFiltering1 ( ) throws java.lang.Exception { android.telephony.embms.cts.MbmsDownloadStateCallbackTest.TestDSCallback callback = new android.telephony.embms.cts.MbmsDownloadStateCallbackTest.TestDSCallback ( android.telephony.mbms.DownloadStateCallback.PROGRESS_UPDATES ) ; android.telephony.mbms.DownloadRequest request = android.telephony.embms.cts.DOWNLOAD_REQUEST_TEMPLATE.build ( ) ; mDownloadSession.registerStateCallback ( request , callback , mCallbackHandler ) ; mMiddlewareControl.fireOnStateUpdated ( null , null , 0 ) ; assertNull ( callback.waitOnStateUpdated ( android.telephony.embms.cts.MbmsDownloadStateCallbackTest.SHORT_TIMEOUT ) ) ; mMiddlewareControl.fireOnProgressUpdated ( null , null , 0 , 0 , 0 , 0 ) ; assertNotNull ( callback.waitOnProgressUpdated ( android.telephony.embms.cts.MbmsDownloadStateCallbackTest.SHORT_TIMEOUT ) ) ; }
java.util.List < android.bluetooth.BluetoothDevice > getConnectedDevices ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hearingaid.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; return new java.util.ArrayList < > ( ) ; }
public static java.lang.String apiToMagic ( int targetApiLevel ) { java.lang.String version ; if ( targetApiLevel >= ( com.android.jack.dx.dex.DexFormat.API_ANDROID_O ) ) { version = com.android.jack.dx.dex.DexFormat.VERSION_FOR_API_26 ; } else if ( targetApiLevel >= ( com.android.jack.dx.dex.DexFormat.API_ANDROID_N ) ) { version = com.android.jack.dx.dex.DexFormat.VERSION_FOR_API_24 ; } else { version = com.android.jack.dx.dex.DexFormat.VERSION_FOR_API_13 ; } return ( ( com.android.jack.dx.dex.DexFormat.MAGIC_PREFIX ) + version ) + ( com.android.jack.dx.dex.DexFormat.MAGIC_SUFFIX ) ; }
public boolean resetRoamingConfiguration ( ) { android.util.Log.d ( com.android.server.wifi.WifiNative.TAG , "resetRoamingConfiguration " ) ; try { if ( ( mWifiVendorHal ) != null ) { com.android.server.wifi.WifiNative.RoamingConfig config = new com.android.server.wifi.WifiNative.RoamingConfig ( ) ; return mWifiVendorHal.configureRoaming ( config ) ; } } catch ( java.lang.UnsupportedOperationException e ) { } return false ; }
public final int doFinal ( byte [ ] input , int inputOffset , int inputLen , byte [ ] output , int outputOffset ) throws javax.crypto.BadPaddingException , javax.crypto.IllegalBlockSizeException , javax.crypto.ShortBufferException { if ( ( ( mode ) != ( javax.crypto.Cipher.ENCRYPT_MODE ) ) && ( ( mode ) != ( javax.crypto.Cipher.DECRYPT_MODE ) ) ) { throw new java.lang.IllegalStateException ( ) ; } javax.crypto.Cipher.checkInputOffsetAndCount ( input.length , inputOffset , inputLen ) ; return spiImpl.engineDoFinal ( input , inputOffset , inputLen , output , outputOffset ) ; }
private void handleSessionEnd ( ) { com.android.internal.telephony.cat.CatLog.d ( this , "SESSION END" ) ; mCurrntCmd = mMenuCmd ; android.content.Intent intent = new android.content.Intent ( AppInterface.CAT_SESSION_END_ACTION ) ; mContext.sendBroadcast ( intent ) ; }
public java.lang.String toString ( ) { if ( ( buffer ) == null ) { return ( ( ( ( declaringClassIndex ) + " " ) + ( typeIndex ) ) + " " ) + ( nameIndex ) ; } return ( ( buffer.typeNames ( ) . get ( typeIndex ) ) + "." ) + ( buffer.strings ( ) . get ( nameIndex ) ) ; }
private boolean setupData ( java.lang.String reason ) { com.android.internal.telephony.cdma.CdmaDataConnection conn = findFreeDataConnection ( ) ; if ( conn == null ) { if ( DBG ) log ( "setupData: No free CdmaDataConnectionfound!" ) ; return false ; } mActiveDataConnection = conn ; mIsApnActive = true ; android.os.Message msg = obtainMessage ( ) ; msg.what = EVENT_DATA_SETUP_COMPLETE ; msg.obj = reason ; conn.connect ( msg ) ; setState ( State.INITING ) ; phone.notifyDataConnection ( reason ) ; return true ; }
public void setHighestPriority ( com.android.tv.dvr.ScheduledRecording schedule ) { if ( com.android.tv.common.SoftPreconditions.checkState ( mDataManager.isDvrScheduleLoadFinished ( ) ) ) { long newPriority = mScheduleManager.suggestHighestPriority ( schedule ) ; if ( newPriority != ( schedule.getPriority ( ) ) ) { mDataManager.updateScheduledRecording ( com.android.tv.dvr.ScheduledRecording.buildFrom ( schedule ) . setPriority ( newPriority ) . build ( ) ) ; } } }
public final float getFloat ( int index ) { checkIndex ( index , SizeOf.FLOAT ) ; return java.lang.Float.intBitsToFloat ( this . block.peekInt ( ( ( offset ) + index ) , order ) ) ; }
public static java.lang.invoke.MethodHandle filterArguments ( java.lang.invoke.MethodHandle target , int pos , java.lang.invoke.MethodHandle ... filters ) { java.lang.invoke.MethodHandles.filterArgumentsCheckArity ( target , pos , filters ) ; java.lang.invoke.MethodHandle adapter = target ; int curPos = pos - 1 ; for ( java.lang.invoke.MethodHandle filter : filters ) { curPos += 1 ; if ( filter == null ) continue ; adapter = java.lang.invoke.MethodHandles.filterArgument ( adapter , curPos , filter ) ; } return adapter ; }
public void visitArrayElementValue ( proguard.classfile.visitor.Clazz clazz , proguard.classfile.visitor.Annotation annotation , proguard.classfile.visitor.ArrayElementValue arrayElementValue ) { println ( ( ( ( ( visitorInfo ( arrayElementValue ) ) + " Array element value [" ) + ( ( arrayElementValue.u2elementNameIndex ) == 0 ? "(default)" : clazz.getString ( arrayElementValue.u2elementNameIndex ) ) ) + "]:" ) ) ; indent ( ) ; arrayElementValue.elementValuesAccept ( clazz , annotation , this ) ; outdent ( ) ; }
public static boolean doesDeviceSupportEarpieceRoute ( ) { java.lang.String [ ] characteristics = android.os.SystemProperties.get ( "ro.build.characteristics" ) . split ( "," ) ; for ( java.lang.String characteristic : characteristics ) { if ( "watch" . equals ( characteristic ) ) { return false ; } } return true ; }
public static void log ( int severity , java.lang.String format , java.lang.Object ... args ) { java.lang.String message = java.lang.String.format ( format , args ) ; org.eclipse.core.runtime.Status status = new org.eclipse.core.runtime.Status ( severity , com.android.ide.eclipse.adt.AdtPlugin.PLUGIN_ID , message ) ; com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) . getLog ( ) . log ( status ) ; }
public void testAesCbcHmacSha1Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth ) ; }
public void test_setOption ( ) throws java.lang.Exception { java.nio.channels.DatagramChannel dc = java.nio.channels.DatagramChannel.open ( ) ; dc.setOption ( java.net.StandardSocketOptions.SO_SNDBUF , 1024 ) ; assertEquals ( 1024 , ( ( int ) ( dc.getOption ( java.net.StandardSocketOptions.SO_SNDBUF ) ) ) ) ; assertEquals ( 1024 , dc.socket ( ) . getSendBufferSize ( ) ) ; dc.close ( ) ; try { dc.setOption ( java.net.StandardSocketOptions.SO_SNDBUF , 1024 ) ; fail ( ) ; } catch ( java.nio.channels.ClosedChannelException expected ) { } }
private static boolean hasOperand ( lombok.ast.Expression operand , java.util.List < lombok.ast.MethodInvocation > list ) { for ( lombok.ast.MethodInvocation method : list ) { lombok.ast.Expression operand1 = method.astOperand ( ) ; if ( operand.toString ( ) . equals ( operand1.toString ( ) ) ) { return true ; } } return false ; }
public void testRegisterAndUnregisterIdling ( ) throws java.lang.Exception { android.support.test.espresso.base.OnDemandIdlingResource r1 = new android.support.test.espresso.base.OnDemandIdlingResource ( "r1" ) ; r1.forceIdleNow ( ) ; java.util.concurrent.FutureTask < java.lang.Boolean > resourcesIdle = createIdleCheckTask ( registry ) ; handler.post ( resourcesIdle ) ; assertTrue ( resourcesIdle.get ( ) ) ; r1.reset ( ) ; registry.unregisterResources ( com.google.common.collect.Lists.newArrayList ( r1 ) ) ; resourcesIdle = createIdleCheckTask ( registry ) ; handler.post ( resourcesIdle ) ; assertTrue ( resourcesIdle.get ( ) ) ; }
public void testHasMyPackageName ( ) { java.lang.String targetPackage = android.support.test.InstrumentationRegistry.getTargetContext ( ) . getPackageName ( ) ; android.content.ComponentName targetComponent = new android.content.ComponentName ( targetPackage , ( targetPackage + ".SomeClass " ) ) ; assertTrue ( android.support.test.espresso.intent.matcher.ComponentNameMatchers.hasMyPackageName ( ) . matches ( targetComponent ) ) ; }
public synchronized void release ( ) throws java.io.IOException { java.nio.channels.Channel ch = acquiredBy ( ) ; if ( ! ( ch.isOpen ( ) ) ) throw new java.nio.channels.ClosedChannelException ( ) ; if ( valid ) { if ( ch instanceof sun.nio.ch.FileChannelImpl ) ( ( sun.nio.ch.FileChannelImpl ) ( ch ) ) . release ( this ) ; else throw new java.lang.AssertionError ( ) ; valid = false ; } }
public void testGetValues010_Array ( ) { long classID = getClassIDBySignature ( getDebuggeeClassSignature ( ) ) ; org.apache.harmony.jpda.tests.framework.jdwp.Value expectedValue = getStaticFieldValue ( classID , "ARRAY_PARAM_VALUE" ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester ( "breakpointArray" , StackTrace002Debuggee.ARRAY_SIGNAL ) ; org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod ( "runBreakpointArray" ) ; methodInfo.addVariable ( "param" , expectedValue ) ; runStackFrameTest ( tester ) ; }
private final boolean updateOomAdjLocked ( com.android.server.am.ProcessRecord app , int cachedAdj , com.android.server.am.ProcessRecord TOP_APP , boolean doingAll , long now ) { if ( ( app.thread ) == null ) { return false ; } computeOomAdjLocked ( app , cachedAdj , TOP_APP , doingAll , now ) ; return applyOomAdjLocked ( app , doingAll , now ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.nio.file.Path dumpDirectory = java.nio.file.Files.createTempDirectory ( "lambdas" ) ; java.lang.System.setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory.toString ( ) ) ; com.google.devtools.build.android.desugar.Desugar.deleteTreeOnExit ( dumpDirectory ) ; if ( ( ( args.length ) == 1 ) && ( args [ 0 ] . startsWith ( "@" ) ) ) { args = java.nio.file.Files.readAllLines ( java.nio.file.Paths.get ( args [ 0 ] . substring ( 1 ) ) , java.nio.charset.StandardCharsets.ISO_8859_1 ) . toArray ( new java.lang.String [ 0 ] ) ; } com.google.devtools.common.options.OptionsParser optionsParser = com.google.devtools.common.options.OptionsParser.newOptionsParser ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; optionsParser.parseAndExitUponError ( args ) ; com.google.devtools.build.android.desugar.Desugar.Options options = optionsParser.getOptions ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; if ( options.verbose ) { java.lang.System.out.printf ( "Lambda classes will be written under %s%n" , dumpDirectory ) ; } boolean allowDefaultMethods = ( options.minSdkVersion ) >= 24 ; java.lang.ClassLoader parent ; if ( ( options.bootclasspath.isEmpty ( ) ) && ( ! ( options.allowEmptyBootclasspath ) ) ) { parent = java.lang.ClassLoader.getSystemClassLoader ( ) ; } else { parent = new com.google.devtools.build.android.desugar.Desugar.ThrowingClassLoader ( ) ; } com.google.devtools.build.android.desugar.CoreLibraryRewriter rewriter = new com.google.devtools.build.android.desugar.CoreLibraryRewriter ( ( options.coreLibrary ? "__desugar__/" : "" ) ) ; java.lang.ClassLoader loader = com.google.devtools.build.android.desugar.Desugar.createClassLoader ( rewriter , options.bootclasspath , options.inputJar , options.classpath , parent ) ; try ( java.util.zip.ZipFile in = new java.util.zip.ZipFile ( options.inputJar.toFile ( ) ) ; java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( java.nio.file.Files.newOutputStream ( options.outputJar ) ) ) ) { com.google.devtools.build.android.desugar.LambdaClassMaker lambdas = new com.google.devtools.build.android.desugar.LambdaClassMaker ( dumpDirectory ) ; com.google.devtools.build.android.desugar.ClassReaderFactory readerFactory = new com.google.devtools.build.android.desugar.ClassReaderFactory ( in , rewriter ) ; com.google.common.collect.ImmutableSet.Builder < java.lang.String > interfaceLambdaMethodCollector = com.google.common.collect.ImmutableSet.builder ( ) ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > entries = in.entries ( ) ; entries.hasMoreElements ( ) ; ) { java.util.zip.ZipEntry entry = entries.nextElement ( ) ; try ( java.io.InputStream content = in.getInputStream ( entry ) ) { if ( entry.getName ( ) . endsWith ( ".class" ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( content ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.UnprefixingClassWriter writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , readerFactory ) ; } visitor = new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , interfaceLambdaMethodCollector , allowDefaultMethods ) ; reader.accept ( visitor , 0 ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , entry.getName ( ) , writer.toByteArray ( ) ) ; } else { java.util.zip.ZipEntry destEntry = new java.util.zip.ZipEntry ( entry ) ; destEntry.setCompressedSize ( ( - 1 ) ) ; out.putNextEntry ( destEntry ) ; com.google.common.io.ByteStreams.copy ( content , out ) ; out.closeEntry ( ) ; } } } com.google.common.collect.ImmutableSet < java.lang.String > interfaceLambdaMethods = interfaceLambdaMethodCollector.build ( ) ; if ( allowDefaultMethods ) { com.google.common.base.Preconditions.checkState ( interfaceLambdaMethods.isEmpty ( ) , "Desugaring with default methods enabled moved interface lambdas" ) ; } for ( java.util.Map.Entry < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > lambdaClass : lambdas.drain ( ) . entrySet ( ) ) { try ( java.io.InputStream bytecode = java.nio.file.Files.newInputStream ( dumpDirectory.resolve ( lambdaClass.getKey ( ) ) ) ) { org.objectweb.asm.ClassReader reader = rewriter.reader ( bytecode ) ; com.google.devtools.build.android.desugar.CoreLibraryRewriter.UnprefixingClassWriter writer = rewriter.writer ( ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , ( ( com.google.devtools.build.android.desugar.ClassReaderFactory ) ( null ) ) ) ; } com.google.devtools.build.android.desugar.LambdaClassFixer lambdaFixer = new com.google.devtools.build.android.desugar.LambdaClassFixer ( visitor , lambdaClass.getValue ( ) , readerFactory , interfaceLambdaMethods , allowDefaultMethods ) ; reader.accept ( new com.google.devtools.build.android.desugar.LambdaDesugaring ( lambdaFixer , loader , lambdas , null , allowDefaultMethods ) , 0 ) ; java.lang.String name = rewriter.unprefix ( ( ( lambdaFixer.getInternalName ( ) ) + ".class" ) ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , name , writer.toByteArray ( ) ) ; } } java.util.Map < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > leftBehind = lambdas.drain ( ) ; com.google.common.base.Preconditions.checkState ( leftBehind.isEmpty ( ) , "Didn't process %s" , leftBehind ) ; } }
public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( "ServerSocket: Type: " ) ; switch ( mSocket.getConnectionType ( ) ) { case BluetoothSocket.TYPE_RFCOMM : { sb.append ( "TYPE_RFCOMM" ) ; break ; } case BluetoothSocket.TYPE_L2CAP : { sb.append ( "TYPE_L2CAP" ) ; break ; } case BluetoothSocket.TYPE_SCO : { sb.append ( "TYPE_SCO" ) ; break ; } } sb.append ( " Channel: " ) . append ( mChannel ) ; return sb.toString ( ) ; }
public void bind ( java.net.SocketAddress localAddr ) throws java.io.IOException { if ( channel.isConnected ( ) ) { throw new java.nio.channels.AlreadyConnectedException ( ) ; } if ( ( java.nio.SocketChannelImpl.SOCKET_STATUS_PENDING ) == ( channel.status ) ) { throw new java.nio.channels.ConnectionPendingException ( ) ; } super . bind ( localAddr ) ; channel.initLocalAddressAndPort ( ) ; channel.isBound = true ; }
public int computeVerticalScrollExtent ( ) { mFactory.startYourEngines ( false ) ; if ( checkNeedsPost ( ) ) { int ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer call ( ) { return computeVerticalScrollExtent ( ) ; } } ) ; return ret ; } return mAwContents.computeVerticalScrollExtent ( ) ; }
private void registerNotificationRequestFromNative ( byte [ ] address , int eventId , int param ) { android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.avrcp.Avrcp.MSG_NATIVE_REQ_REGISTER_NOTIFICATION , eventId , param ) ; msg.obj = address ; mHandler.sendMessage ( msg ) ; }
public void testOverlay1Content ( ) throws java.lang.Exception { java.io.File project = buildProject ( "overlay1" , BasePlugin.GRADLE_MIN_VERSION ) ; java.io.File drawableOutput = new java.io.File ( project , "build/res/all/debug/drawable" ) ; com.android.build.gradle.ManualBuildTest.checkImageColor ( drawableOutput , "no_overlay.png" , com.android.build.gradle.ManualBuildTest.GREEN ) ; com.android.build.gradle.ManualBuildTest.checkImageColor ( drawableOutput , "type_overlay.png" , com.android.build.gradle.ManualBuildTest.GREEN ) ; }
public void removeRemotePackage ( java.lang.String remoteFilePath ) throws com.android.ddmlib.InstallException { try { executeShellCommand ( java.lang.String.format ( "rm \"%1$s\"" , remoteFilePath ) , new com.android.ddmlib.NullOutputReceiver ( ) , com.android.ddmlib.Device.INSTALL_TIMEOUT ) ; } catch ( java.io.IOException e ) { throw new com.android.ddmlib.InstallException ( e ) ; } catch ( com.android.ddmlib.TimeoutException e ) { throw new com.android.ddmlib.InstallException ( e ) ; } catch ( com.android.ddmlib.AdbCommandRejectedException e ) { throw new com.android.ddmlib.InstallException ( e ) ; } catch ( com.android.ddmlib.ShellCommandUnresponsiveException e ) { throw new com.android.ddmlib.InstallException ( e ) ; } }
public java.lang.String formatToE164 ( @ android.support.annotation.NonNull com.android.dialer.DialerPhoneNumber number ) { com.android.dialer.common.Assert.isWorkerThread ( ) ; if ( number.hasDialerInternalPhoneNumber ( ) ) { return phoneNumberUtil.format ( com.android.dialer.phonenumberproto.Converter.protoToPojo ( number.getDialerInternalPhoneNumber ( ) ) , PhoneNumberFormat.E164 ) ; } return number.getRawInput ( ) . getNumber ( ) ; }
protected com.intellij.updater.ValidationResult doValidateNotChanged ( java.io.File toFile , com.intellij.updater.ValidationResult.Kind kind , com.intellij.updater.ValidationResult.Action action ) throws java.io.IOException { if ( toFile.exists ( ) ) { if ( isModified ( toFile ) ) { return new com.intellij.updater.ValidationResult ( kind , myPath , action , ValidationResult.MODIFIED_MESSAGE , ValidationResult.Option.IGNORE ) ; } } else if ( ! ( isOptional ) ) { return new com.intellij.updater.ValidationResult ( kind , myPath , action , ValidationResult.ABSENT_MESSAGE , ValidationResult.Option.IGNORE ) ; } return null ; }
public com.android.sched.util.log.tracer.AbstractTracer.TracerEvent start ( @ javax.annotation.Nonnull com.android.sched.util.log.EventType type ) { java.util.Stack < com.android.sched.util.log.tracer.AbstractTracer.TracerEvent > threadPendingEvents = pendingEvents.get ( ) ; com.android.sched.util.log.tracer.AbstractTracer.TracerEvent parent = null ; if ( ! ( threadPendingEvents.isEmpty ( ) ) ) { parent = threadPendingEvents.peek ( ) ; } com.android.sched.util.log.tracer.AbstractTracer.TracerEvent newEvent = new com.android.sched.util.log.tracer.AbstractTracer.TracerEvent ( parent , type ) ; threadPendingEvents.push ( newEvent ) ; return newEvent ; }
public void TestFunctionalEquivalent ( ) { java.lang.String [ ] calCases = new java.lang.String [ ] { "t" , "en_US_POSIX" , "en@calendar=gregorian" , "f" , "ja_JP_TOKYO" , "ja@calendar=gregorian" , "f" , "ja_JP_TOKYO@calendar=japanese" , "ja@calendar=japanese" , "t" , "sr@calendar=gregorian" , "sr@calendar=gregorian" , "t" , "en" , "en@calendar=gregorian" , "t" , "th_TH" , "th@calendar=gregorian" , "t" , "th_TH@calendar=gregorian" , "th@calendar=gregorian" , "f" , "th_TH_Bangkok" , "th@calendar=gregorian" } ; logln ( "Testing functional equivalents for calendar..." ) ; getFunctionalEquivalentTestCases ( ICUResourceBundle.ICU_BASE_NAME , android.icu.util.Calendar.class . getClassLoader ( ) , android.icu.dev.test.util.ICUResourceBundleTest.CALENDAR_RESNAME , android.icu.dev.test.util.ICUResourceBundleTest.CALENDAR_KEYWORD , false , calCases ) ; logln ( "Testing error conditions:" ) ; try { java.lang.ClassLoader cl = android.icu.text.BreakIterator.class . getClassLoader ( ) ; android.icu.impl.ICUResourceBundle.getFunctionalEquivalent ( ICUResourceBundle.ICU_BRKITR_BASE_NAME , cl , "calendar" , "calendar" , new android.icu.util.ULocale ( "ar_EG@calendar=islamic" ) , new boolean [ 1 ] , true ) ; errln ( "Err: expected MissingResourceException" ) ; } catch ( java.util.MissingResourceException t ) { logln ( ( "expected MissingResourceException caught (PASS): " + ( t.toString ( ) ) ) ) ; } }
public static java.lang.String getMethodSignatureWithoutName ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPolymorphicMethodCall call ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( '(' ) ; for ( com.android.jack.ir.ast.JType p : call.getMethodIdWide ( ) . getParamTypes ( ) ) { sb.append ( com.android.jack.backend.dex.rop.RopHelper.formatter.getName ( p ) ) ; } sb.append ( ')' ) ; sb.append ( com.android.jack.backend.dex.rop.RopHelper.formatter.getName ( call.getReturnTypeOfPolymorphicMethod ( ) ) ) ; return sb.toString ( ) ; }
public java.util.List < java.io.File > getRenderscriptImports ( ) { java.util.List < java.io.File > list = com.google.common.collect.Lists.newArrayList ( ) ; for ( com.android.builder.AndroidDependency lib : mFlatLibraries ) { java.io.File rsLib = lib.getRenderscriptFolder ( ) ; if ( ( rsLib != null ) && ( rsLib.isDirectory ( ) ) ) { list.add ( rsLib ) ; } } return list ; }
protected com.android.jack.test.toolchain.JackBasedToolchain getReferenceToolchain ( ) { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( com.android.jack.test.toolchain.JackBasedToolchain.class ) ; java.io.File oneDexPerTypeFolder ; try { oneDexPerTypeFolder = com.android.jack.TestTools.createTempDir ( "oneDexPerType" , "dex" ) ; toolchain.addProperty ( Options.EMIT_LINE_NUMBER_DEBUG_INFO.getName ( ) , java.lang.Boolean.toString ( withDebugInfos ) ) ; toolchain.addProperty ( ScheduleInstance.DEFAULT_RUNNER.getName ( ) , "single-threaded" ) ; toolchain.addProperty ( Options.INTERMEDIATE_DEX_DIR.getName ( ) , oneDexPerTypeFolder.getAbsolutePath ( ) ) ; } catch ( java.io.IOException e ) { throw new java.lang.AssertionError ( e ) ; } return toolchain ; }
public void testInnerInnerClass ( ) { android.signature.cts.JDiffClassDescription clz = new android.signature.cts.JDiffClassDescription ( "android.signature.cts.tests.data" , "NormalClass.InnerClass.InnerInnerClass" , new android.signature.cts.tests.JDiffClassDescriptionTest.NoFailures ( ) ) ; clz.setType ( JDiffClassDescription.JDiffType.CLASS ) ; clz.setModifier ( java.lang.reflect.Modifier.PUBLIC ) ; android.signature.cts.JDiffClassDescription.JDiffField field = new android.signature.cts.JDiffClassDescription.JDiffField ( "innerInnerClassData" , "java.lang.String" , java.lang.reflect.Modifier.PRIVATE ) ; clz.addField ( field ) ; clz.checkSignatureCompliance ( ) ; assertEquals ( clz.toSignatureString ( ) , "public class NormalClass.InnerClass.InnerInnerClass" ) ; }
private void onGetReport ( byte [ ] address , byte [ ] report , int rpt_size ) { android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidService.MESSAGE_ON_GET_REPORT ) ; msg.obj = address ; android.os.Bundle data = new android.os.Bundle ( ) ; data.putByteArray ( BluetoothInputDevice.EXTRA_REPORT , report ) ; data.putInt ( BluetoothInputDevice.EXTRA_REPORT_BUFFER_SIZE , rpt_size ) ; msg.setData ( data ) ; mHandler.sendMessage ( msg ) ; }
public void applyBorder ( android.renderscript.Allocation in , android.renderscript.Allocation out , boolean copyOut , com.android.gallery3d.filtershow.pipeline.FilterEnvironment environment ) { com.android.gallery3d.filtershow.filters.FilterRepresentation border = getFilterRepresentationForType ( FilterRepresentation.TYPE_BORDER ) ; if ( ( border != null ) && ( mDoApplyGeometry ) ) { android.renderscript.Allocation bitmapIn = in ; if ( copyOut ) { bitmapIn = android.renderscript.Allocation.createTyped ( com.android.gallery3d.filtershow.pipeline.CachingPipeline.getRenderScriptContext ( ) , in.getType ( ) ) ; bitmapIn.copyFrom ( out ) ; } environment.applyRepresentation ( border , bitmapIn , out ) ; } }
public void testResetBatteryLevel_testResetBeforeUpdate ( ) { com.android.bluetooth.btservice.RemoteDevices remoteDevices = new com.android.bluetooth.btservice.RemoteDevices ( mAdapterService ) ; org.junit.Assert.assertNull ( remoteDevices.getDeviceProperties ( mDevice1 ) ) ; remoteDevices.resetBatteryLevel ( mDevice1 ) ; org.junit.Assert.assertNull ( remoteDevices.getDeviceProperties ( mDevice1 ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAdapterService ) ; }
protected void startupOnInitialize ( ) { super . startupOnInitialize ( ) ; mDerivedProgressMonitor = new com.android.ide.eclipse.adt.internal.build.builders.PreCompilerBuilder.DerivedProgressMonitor ( ) ; org.eclipse.core.resources.IProject project = getProject ( ) ; mManifestPackage = loadProjectStringProperty ( com.android.ide.eclipse.adt.internal.build.builders.PreCompilerBuilder.PROPERTY_PACKAGE ) ; mGenFolder = project.getFolder ( SdkConstants.FD_GEN_SOURCES ) ; mMustCompileResources = loadProjectBooleanProperty ( com.android.ide.eclipse.adt.internal.build.builders.PreCompilerBuilder.PROPERTY_COMPILE_RESOURCES , true ) ; boolean mustCompileAidl = loadProjectBooleanProperty ( com.android.ide.eclipse.adt.internal.build.builders.PreCompilerBuilder.PROPERTY_COMPILE_AIDL , true ) ; if ( mustCompileAidl ) { org.eclipse.jdt.core.IJavaProject javaProject = org.eclipse.jdt.core.JavaCore.create ( project ) ; java.util.ArrayList < org.eclipse.core.runtime.IPath > sourceFolderPathList = com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.getSourceClasspaths ( javaProject ) ; buildAidlCompilationList ( project , sourceFolderPathList ) ; } }
public void exit ( ) { if ( ( mPhone ) != null ) { mPhone.mCi.unregisterForRilConnected ( getHandler ( ) ) ; mPhone.mCi.unregisterForDataCallListChanged ( getHandler ( ) ) ; } if ( ( mDcTesterDeactivateAll ) != null ) { mDcTesterDeactivateAll.dispose ( ) ; } }
private static com.google.doclava.ParameterInfo convertParameter ( com.google.doclava.Parameter p , com.google.doclava.SourcePosition pos , boolean isVarArg ) { if ( p == null ) return null ; com.google.doclava.ParameterInfo pi = new com.google.doclava.ParameterInfo ( p.name ( ) , p.typeName ( ) , com.google.doclava.Converter.obtainType ( p.type ( ) ) , isVarArg , com.google.doclava.Converter.convertSourcePosition ( pos ) ) ; return pi ; }
public void testOcclude ( ) throws java.lang.Exception { if ( ! ( supportsKeyguard ( ) ) ) { return ; } gotoKeyguard ( ) ; launchActivity ( "ShowWhenLockedActivity" ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { "ShowWhenLockedActivity" } ) ; assertEquals ( "Picked wrong transition" , android.server.cts.WindowManagerState.TRANSIT_KEYGUARD_OCCLUDE , mAmWmState.getWmState ( ) . getLastTransition ( ) ) ; }
private java.lang.String getCalendarTypeFromPath ( java.lang.String path ) { if ( ( path.startsWith ( com.ibm.icu.text.DateIntervalInfo.DateIntervalSink.DATE_INTERVAL_PATH_PREFIX ) ) && ( path.endsWith ( com.ibm.icu.text.DateIntervalInfo.DateIntervalSink.DATE_INTERVAL_PATH_SUFIX ) ) ) { return path.substring ( com.ibm.icu.text.DateIntervalInfo.DateIntervalSink.DATE_INTERVAL_PATH_PREFIX.length ( ) , ( ( path.length ( ) ) - ( com.ibm.icu.text.DateIntervalInfo.DateIntervalSink.DATE_INTERVAL_PATH_SUFIX.length ( ) ) ) ) ; } throw new com.ibm.icu.util.ICUException ( ( "Malformed 'intervalFormat' alias path: " + path ) ) ; }
private int superClassCount ( proguard.evaluation.value.Clazz subClass , java.util.Set classes ) { int count = 0 ; java.util.Iterator iterator = classes.iterator ( ) ; while ( iterator.hasNext ( ) ) { proguard.evaluation.value.Clazz clazz = ( ( proguard.evaluation.value.Clazz ) ( iterator.next ( ) ) ) ; if ( subClass.extendsOrImplements ( clazz ) ) { count ++ ; } } return count ; }
public void log ( java.lang.String log ) { synchronized ( mLogText ) { mLogText.append ( "=> " ) . append ( log ) ; } }
public android.content.res.Resources getResourcesForApplication ( android.content.pm.ApplicationInfo app ) throws android.app.NameNotFoundException { if ( app.packageName.equals ( "system" ) ) { return mContext.mMainThread.getSystemContext ( ) . getResources ( ) ; } android.content.res.Resources r = mContext.mMainThread.getTopLevelResources ( ( ( app.uid ) == ( java.lang.Process.myUid ( ) ) ? app.sourceDir : app.publicSourceDir ) , Display.DEFAULT_DISPLAY , null , mContext.mPackageInfo ) ; if ( r != null ) { return r ; } throw new android.app.NameNotFoundException ( ( "Unable to open " + ( app.publicSourceDir ) ) ) ; }
public byte [ ] getBytes ( ) { return data ; }
public com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation getAnnotation ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedClass cls , @ com.android.annotations.NonNull java.lang.String type ) { com.android.tools.lint.ExternalAnnotationRepository.ClassInfo c = findClass ( cls ) ; if ( c == null ) { return null ; } if ( ( c.annotations ) != null ) { for ( com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation : c.annotations ) { if ( type.equals ( annotation.getSignature ( ) ) ) { return annotation ; } } } return null ; }
static int getMaxLengthValuesArray ( android.hardware.Sensor sensor , int sdkLevel ) { int len = android.hardware.Sensor.sMaxLengthValuesArray [ ( ( sensor.mType ) - 1 ) ] ; if ( ( ( sensor.getType ( ) ) == ( android.hardware.Sensor.TYPE_ROTATION_VECTOR ) ) && ( sdkLevel <= ( Build.VERSION_CODES.JELLY_BEAN_MR1 ) ) ) { len = 3 ; } return len ; }
public void dragSetData ( org.eclipse.swt.dnd.DragSourceEvent e ) { if ( org.eclipse.swt.dnd.TextTransfer.getInstance ( ) . isSupportedType ( e.dataType ) ) { e.data = com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasSelection.getAsText ( mCanvas , mDragSelection ) ; return ; } if ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.SimpleXmlTransfer.getInstance ( ) . isSupportedType ( e.dataType ) ) { e.data = mDragElements ; return ; } e.detail = org.eclipse.swt.dnd.DND.DROP_NONE ; e.doit = false ; }
public void done ( ) { if ( ( mCurrentName ) != null ) { mValues.put ( mCurrentName , mCurrentValue ) ; mCurrentName = null ; mCurrentValue = null ; } if ( ( mValues ) != null ) { mListener.handleStatus ( mValues ) ; mValues = null ; } }
public void put ( android.icu.impl.UResource.Key key , android.icu.impl.UResource.Value value ) { if ( key.contentEquals ( "dnam" ) ) { } else if ( key.contentEquals ( "per" ) ) { setFormatterIfAbsent ( android.icu.text.MeasureFormat.MeasureFormatData.PER_UNIT_INDEX , value , 1 ) ; } else { setFormatterIfAbsent ( android.icu.impl.StandardPlural.indexFromString ( key ) , value , 0 ) ; } }
public void testNoCallbackAfterUnregisteredNetworkRequest ( ) { android.net.NetworkRequest nr = new android.net.NetworkRequest.Builder ( ) . addTransportType ( NetworkCapabilities.TRANSPORT_WIFI ) . build ( ) ; final com.android.server.ConnectivityServiceTest.TestNetworkCallback networkCallback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback ( ) ; final int timeoutMs = 10 ; mCm.requestNetwork ( nr , networkCallback , timeoutMs ) ; mCm.unregisterNetworkCallback ( networkCallback ) ; networkCallback.assertNoCallback ( ) ; mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent ( TRANSPORT_WIFI ) ; mWiFiNetworkAgent.connect ( false ) ; networkCallback.assertNoCallback ( ) ; }
protected junit.framework.TestSuite createCopyOfSuite ( junit.framework.TestSuite s ) { if ( s instanceof com.android.test.runner.junit3.AndroidTestSuite ) { com.android.test.runner.junit3.AndroidTestSuite a = ( ( com.android.test.runner.junit3.AndroidTestSuite ) ( s ) ) ; return new com.android.test.runner.junit3.AndroidTestSuite ( a.getName ( ) , a.getInstrumentation ( ) ) ; } else { return super . createCopyOfSuite ( s ) ; } }
public com.android.sched.vfs.InputVDir getDir ( @ javax.annotation.Nonnull com.android.jack.library.FileType fileType , @ javax.annotation.Nonnull com.android.sched.vfs.VPath typePath ) throws com.android.jack.library.FileTypeDoesNotExistException { try { return vfs.getRootDir ( ) . getInputVDir ( fileType.buildDirVPath ( typePath ) ) ; } catch ( com.android.sched.util.file.NotFileOrDirectoryException e ) { throw new com.android.jack.library.FileTypeDoesNotExistException ( getLocation ( ) , typePath , fileType ) ; } catch ( com.android.sched.util.file.NoSuchFileException e ) { throw new com.android.jack.library.FileTypeDoesNotExistException ( getLocation ( ) , typePath , fileType ) ; } }
public void testConsideringOptions ( ) throws java.lang.Exception { createPatch ( ) ; com.intellij.updater.PatchFileCreator.PreparationResult preparationResult = com.intellij.updater.PatchFileCreator.prepareAndValidate ( myFile , myOlderDir , com.intellij.updater.TEST_UI ) ; java.util.Map < java.lang.String , com.intellij.updater.ValidationResult.Option > options = new java.util.HashMap < java.lang.String , com.intellij.updater.ValidationResult.Option > ( ) ; for ( com.intellij.updater.PatchAction each : preparationResult.patch.getActions ( ) ) { options.put ( each.getPath ( ) , ValidationResult.Option.IGNORE ) ; } assertNothingHasChanged ( preparationResult , options ) ; }
public boolean visit ( org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration , org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope scope ) { org.eclipse.jdt.internal.compiler.ast.Annotation [ ] annotations = typeDeclaration.annotations ; if ( hasRelevantAnnotations ( annotations ) ) { org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding binding = typeDeclaration.binding ; if ( binding == null ) { return true ; } java.lang.String fqn = new java.lang.String ( typeDeclaration.binding.readableName ( ) ) ; com.android.build.gradle.tasks.annotations.Extractor.Item item = com.android.build.gradle.tasks.annotations.Extractor.ClassItem.create ( fqn ) ; addItem ( fqn , item ) ; addAnnotations ( annotations , item ) ; } return true ; }
private void onCurrentCalls ( int index , int dir , int state , int mparty , java.lang.String number ) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent event = new com.android.bluetooth.hfpclient.HeadsetClientStateMachine.StackEvent ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.EVENT_TYPE_CURRENT_CALLS ) ; event.valueInt = index ; event.valueInt2 = dir ; event.valueInt3 = state ; event.valueInt4 = mparty ; event.valueString = number ; android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "incoming " + event ) ) ; sendMessage ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.STACK_EVENT , event ) ; }
static com.android.bluetooth.a2dp.A2dpStateMachine make ( android.bluetooth.BluetoothDevice device , com.android.bluetooth.a2dp.A2dpService svc , android.content.Context context , com.android.bluetooth.a2dp.A2dpNativeInterface a2dpNativeInterface , android.os.Looper looper ) { if ( com.android.bluetooth.a2dp.A2dpStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.a2dp.A2dpStateMachine.TAG , ( "make for device " + device ) ) ; } com.android.bluetooth.a2dp.A2dpStateMachine a2dpSm = new com.android.bluetooth.a2dp.A2dpStateMachine ( device , svc , context , a2dpNativeInterface , looper ) ; a2dpSm.start ( ) ; return a2dpSm ; }
private static void deleteSubElement ( @ javax.annotation.Nonnull java.io.File dir ) { if ( dir.isDirectory ( ) ) { for ( java.io.File sub : dir.listFiles ( ) ) { com.android.sched.util.file.FileUtils.deleteSubElement ( sub ) ; } } dir.delete ( ) ; }
public void testAddAll1_IndexOutOfBoundsException ( ) { try { java.util.concurrent.CopyOnWriteArrayList c = new java.util.concurrent.CopyOnWriteArrayList ( ) ; c.addAll ( ( - 1 ) , new java.util.LinkedList ( ) ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } }
public java.util.List < java.io.File > getRenderscriptSourceList ( ) { java.util.List < java.io.File > sourceList = com.google.common.collect.Lists.newArrayList ( ) ; sourceList.addAll ( mDefaultSourceProvider.getRenderscriptDirectories ( ) ) ; if ( ( mType ) != ( com.android.builder.VariantConfiguration.Type.TEST ) ) { sourceList.addAll ( mBuildTypeSourceProvider.getRenderscriptDirectories ( ) ) ; } if ( hasFlavors ( ) ) { for ( com.android.builder.SourceProvider flavorSourceSet : mFlavorSourceProviders ) { sourceList.addAll ( flavorSourceSet.getRenderscriptDirectories ( ) ) ; } } return sourceList ; }
public void enable ( java.util.List < ? extends com.google.gct.testing.dimension.CloudTestingType > types , java.lang.Iterable < java.lang.String > ids ) { checkIsEditable ( ) ; java.util.Set < java.lang.String > idsSet = com.google.common.collect.Sets.newHashSet ( ids ) ; for ( com.google.gct.testing.dimension.CloudTestingType type : types ) { if ( idsSet.contains ( type.getId ( ) ) ) { validateType ( type ) ; enableType ( type ) ; } } }
public void verifyCallbackChannelRetuned ( ) { android.media.tv.cts.TvInputServiceTest.CountingTvInputService.CountingSession session = android.media.tv.cts.TvInputServiceTest.CountingTvInputService.sSession ; assertNotNull ( session ) ; android.net.Uri fakeChannelUri = android.media.tv.TvContract.buildChannelUri ( 0 ) ; session.notifyChannelRetuned ( fakeChannelUri ) ; new android.cts.util.PollingCheck ( android.media.tv.cts.TvInputServiceTest.TIME_OUT ) { @ java.lang.Override protected boolean check ( ) { return ( mCallback.mChannelRetunedCount ) > 0 ; } } . run ( ) ; }
public static java.lang.String stringAddrFromLongAddr ( long addr ) { addr = ( java.lang.Long.reverseBytes ( addr ) ) > > 16 ; java.util.StringJoiner j = new java.util.StringJoiner ( ":" ) ; for ( int i = 0 ; i < ( android.net.MacAddress.ETHER_ADDR_LEN ) ; i ++ ) { j.add ( java.lang.Integer.toHexString ( ( ( byte ) ( addr ) ) ) ) ; addr = addr > > 8 ; } return j.toString ( ) ; }
public void testInstallWithMissingBundleVersionFile ( ) throws java.lang.Exception { java.io.File workingDir = new java.io.File ( testInstallDir , TzDataBundleInstaller.WORKING_DIR_NAME ) ; assertTrue ( workingDir.mkdir ( ) ) ; libcore.tzdata.update2.ConfigBundle tzData = createTzDataBundleWithoutFormatVersionFile ( "2030a" ) ; assertFalse ( install ( tzData ) ) ; assertNoContentInstalled ( ) ; }
protected void tearDown ( ) { try { if ( ( zfile ) != null ) { zfile.close ( ) ; } java.io.File f = new java.io.File ( org.apache.harmony.tests.java.util.zip.ZipEntryTest.tempFileName ) ; f.delete ( ) ; } catch ( java.io.IOException e ) { java.lang.System.out.println ( "Exception during tearDown" ) ; } }
private void copyResource ( java.io.InputStream is , java.io.OutputStream os , java.lang.String name ) throws java.io.IOException { java.io.OutputStream resourceOS = null ; byte [ ] buffer = new byte [ 4096 ] ; int bytesRead ; while ( ( bytesRead = is.read ( buffer ) ) >= 0 ) { os.write ( buffer , 0 , bytesRead ) ; } os.flush ( ) ; }
public void onServiceStateChanged ( android.telephony.ServiceState state ) { if ( DEBUG ) { android.util.Log.d ( mTag , ( ( ( "onServiceStateChanged voiceState=" + ( state.getVoiceRegState ( ) ) ) + " dataState=" ) + ( state.getDataRegState ( ) ) ) ) ; } mServiceState = state ; mDataNetType = state.getDataNetworkType ( ) ; updateTelephony ( ) ; }
private java.net.HttpURLConnection openConnection ( java.net.URL url , com.android.volley.Request < ? > request ) throws java.io.IOException { java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( url.openConnection ( ) ) ) ; int timeoutMs = request.getTimeoutMs ( ) ; connection.setConnectTimeout ( timeoutMs ) ; connection.setReadTimeout ( timeoutMs ) ; connection.setUseCaches ( false ) ; connection.setDoInput ( true ) ; return connection ; }
private com.android.cts.appsecurity.AppSecurityTests.CollectingTestRunListener doRunTests ( java.lang.String pkgName , java.lang.String testClassName , java.lang.String testMethodName ) { BRANCH ( 0 ) ; com.android.cts.appsecurity.a739d Merge ; com.android.cts.appsecurity.into froyo ; com.android.ddmlib.testrunner.RemoteAndroidTestRunner testRunner = new com.android.ddmlib.testrunner.RemoteAndroidTestRunner ( pkgName , getDevice ( ) ) ; if ( ( testClassName != null ) && ( testMethodName != null ) ) { testRunner.setMethodName ( testClassName , testMethodName ) ; } com.android.cts.appsecurity.AppSecurityTests.CollectingTestRunListener listener = new com.android.cts.appsecurity.AppSecurityTests.CollectingTestRunListener ( ) ; testRunner.run ( listener ) ; return listener ; }
public void cellInfoList ( int indicationType , java.util.ArrayList < com.android.internal.telephony.V1_0.CellInfo > var2 ) { }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String action = intent.getAction ( ) ; if ( action.equals ( AppInterface.CAT_CMD_ACTION ) ) { handleCommandMessage ( context , intent ) ; } else if ( action.equals ( AppInterface.CAT_SESSION_END_ACTION ) ) { handleSessionEnd ( context , intent ) ; } }
public boolean stopFilteringMulticastV6Packets ( ) { return ( ( doBooleanCommand ( "DRIVER RXFILTER-STOP" ) ) && ( doBooleanCommand ( "DRIVER RXFILTER-ADD 3" ) ) ) && ( doBooleanCommand ( "DRIVER RXFILTER-START" ) ) ; }
public void callSessionMergeComplete ( com.android.ims.internal.IImsCallSession newSession ) { if ( ( mListener ) != null ) { if ( newSession != null ) { com.android.ims.internal.ImsCallSession validActiveSession = this ; try { if ( ! ( java.util.Objects.equals ( miSession.getCallId ( ) , newSession.getCallId ( ) ) ) ) { validActiveSession = new com.android.ims.internal.ImsCallSession ( newSession ) ; } } catch ( android.os.RemoteException rex ) { android.util.Log.e ( com.android.ims.internal.ImsCallSession.TAG , "callSessionMergeComplete: exception for getCallId!" ) ; } mListener.callSessionMergeComplete ( validActiveSession ) ; } else { mListener.callSessionMergeComplete ( null ) ; } } }
private boolean needsCoverage ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface declaredType ) { if ( declaredType.isExternal ( ) ) { return false ; } if ( declaredType instanceof com.android.jack.ir.ast.JDefinedInterface ) { return false ; } java.lang.String typeName = com.android.jack.coverage.CodeCoverageSelector.formatter.getName ( declaredType ) ; return filter.matches ( typeName ) ; }
protected void disableService ( ) { if ( ! ( android.autofillservice.cts.Helper.hasAutofillFeature ( ) ) ) return ; android.autofillservice.cts.Helper.disableAutofillService ( android.autofillservice.cts.Helper.getContext ( ) , android.autofillservice.cts.InstrumentedAutoFillService.SERVICE_NAME ) ; android.autofillservice.cts.InstrumentedAutoFillService.setIgnoreUnexpectedRequests ( true ) ; }
public com.android.sched.vfs.InputVFS checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull final java.lang.String string ) throws com.android.sched.util.codec.ParsingException { try { com.android.sched.vfs.VFS vfs = new com.android.sched.vfs.DirectFS ( new com.android.sched.util.file.Directory ( context.getWorkingDirectory ( ) , string , context.getRunnableHooks ( ) , com.android.sched.util.file.FileOrDirectory.Existence.MUST_EXIST , com.android.sched.util.file.FileOrDirectory.Permission.READ , change ) , com.android.sched.util.file.FileOrDirectory.Permission.READ ) ; return new com.android.sched.vfs.GenericInputVFS ( vfs ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e.getMessage ( ) , e ) ; } }
public void run ( ) { try { assertNull ( android.os.Looper.myQueue ( ) ) ; fail ( "should throw exception" ) ; } catch ( java.lang.Throwable e ) { } android.os.Looper.prepare ( ) ; android.os.MessageQueue mq = android.os.Looper.myQueue ( ) ; assertNotNull ( mq ) ; }
public void setFeatureValue ( int feature , int network , int value , com.android.ims.ImsConfigListener listener ) throws android.os.RemoteException { listener.onSetFeatureResponse ( feature , network , value , ImsConfig.OperationStatusConstants.SUCCESS ) ; }
public boolean isVisualVoicemailEnabled ( java.lang.String callingPackage , android.telecom.PhoneAccountHandle phoneAccountHandle ) { if ( ! ( canReadPhoneState ( callingPackage , "isVisualVoicemailEnabled" ) ) ) { return false ; } return com.android.phone.settings.VisualVoicemailSettingsUtil.isEnabled ( mPhone.getContext ( ) , phoneAccountHandle ) ; }
public void timeStringCharArrayCopy ( int reps ) { final int len = arrayLength ; char [ ] dst = new char [ len ] ; java.lang.String str = new java.lang.String ( new char [ len ] ) ; for ( int rep = 0 ; rep < reps ; ++ rep ) { str.getChars ( 0 , len , dst , 0 ) ; } }
public static void setUpClassOnlyOnce ( ) throws java.lang.Exception { com.android.bluetooth.hid.HidDeviceTest.sAdapterService = mock ( com.android.bluetooth.btservice.AdapterService.class ) ; java.lang.reflect.Method method = com.android.bluetooth.btservice.AdapterService.class . getDeclaredMethod ( "setAdapterService" , com.android.bluetooth.btservice.AdapterService.class ) ; method.setAccessible ( true ) ; method.invoke ( com.android.bluetooth.hid.HidDeviceTest.sAdapterService , com.android.bluetooth.hid.HidDeviceTest.sAdapterService ) ; com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface = mock ( com.android.bluetooth.hid.HidDeviceNativeInterface.class ) ; method = com.android.bluetooth.hid.HidDeviceNativeInterface.class . getDeclaredMethod ( "setInstance" , com.android.bluetooth.hid.HidDeviceNativeInterface.class ) ; method.setAccessible ( true ) ; method.invoke ( null , com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface ) ; }
public final java.nio.ShortBuffer asShortBuffer ( ) { if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } int off = this . position ( ) ; int lim = this . limit ( ) ; assert off <= lim ; int rem = ( off <= lim ) ? lim - off : 0 ; int size = rem > > 1 ; return new java.nio.ByteBufferAsShortBuffer ( this , ( - 1 ) , 0 , size , size , off , order ( ) ) ; }
public void testCompile022 ( ) throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test022.jack" ; java.util.Map < java.lang.String , com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo > input = com.google.common.collect.Maps.newHashMap ( ) ; { input.put ( "Switch1" , new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo ( true ) . specifyInfo ( "java-lang-Thread$State" , true ) ) ; } checkCompiledCode ( packageName , input ) ; }
public com.android.tools.lint.detector.api.Location getLocation ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Node node , int start , int end ) { com.android.tools.lint.LintCliXmlParser.OffsetPosition pos = ( ( com.android.tools.lint.LintCliXmlParser.OffsetPosition ) ( getPosition ( node , start , end ) ) ) ; if ( pos != null ) { return com.android.tools.lint.detector.api.Location.create ( context.file , pos , ( ( com.android.tools.lint.LintCliXmlParser.OffsetPosition ) ( pos.getEnd ( ) ) ) ) ; } return com.android.tools.lint.detector.api.Location.create ( context.file ) ; }
private com.android.layoutlib.api.LayoutScene convertToScene ( com.android.layoutlib.api.ILayoutResult result ) { com.android.layoutlib.api.SceneResult sceneResult ; com.android.layoutlib.api.ViewInfo rootViewInfo ; if ( ( result.getSuccess ( ) ) == ( com.android.layoutlib.api.ILayoutResult.SUCCESS ) ) { sceneResult = com.android.layoutlib.api.SceneResult.SUCCESS ; rootViewInfo = convertToViewInfo ( result.getRootView ( ) ) ; } else { sceneResult = new com.android.layoutlib.api.SceneResult ( result.getErrorMessage ( ) ) ; rootViewInfo = null ; } return new com.android.ide.common.layoutlib.BasicLayoutScene ( sceneResult , rootViewInfo , result.getImage ( ) ) ; }
public void testRunFailed ( java.lang.String errorMessage ) { }
public void testEndCallWithRingingForegroundCall ( ) throws java.lang.Exception { com.android.server.telecom.Call call = org.mockito.Mockito.mock ( com.android.server.telecom.Call.class ) ; org.mockito.Mockito.when ( call.getState ( ) ) . thenReturn ( CallState.RINGING ) ; org.mockito.Mockito.when ( mFakeCallsManager.getForegroundCall ( ) ) . thenReturn ( call ) ; org.junit.Assert.assertTrue ( mTSIBinder.endCall ( null ) ) ; org.mockito.Mockito.verify ( call ) . reject ( false , null ) ; }
public void testGradleOverrides ( ) throws java.lang.Exception { mEnabled = java.util.Collections.singleton ( ManifestDetector.GRADLE_OVERRIDES ) ; assertEquals ( ( "" + ( ( ( ( ( ( ( ( ( ( ( ( "AndroidManifest.xml:4: Warning: This versionCode value (1) is not used; it is always overridden by the value specified in the Gradle build script (2) [GradleOverrides]\n" + " android:versionCode=\"1\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "AndroidManifest.xml:5: Warning: This versionName value (1.0) is not used; it is always overridden by the value specified in the Gradle build script (MyName) [GradleOverrides]\n" ) + " android:versionName=\"1.0\" >\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "AndroidManifest.xml:7: Warning: This minSdkVersion value (14) is not used; it is always overridden by the value specified in the Gradle build script (5) [GradleOverrides]\n" ) + " <uses-sdk android:minSdkVersion=\"14\" android:targetSdkVersion=\"17\" />\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "AndroidManifest.xml:7: Warning: This targetSdkVersion value (17) is not used; it is always overridden by the value specified in the Gradle build script (16) [GradleOverrides]\n" ) + " <uses-sdk android:minSdkVersion=\"14\" android:targetSdkVersion=\"17\" />\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 4 warnings\n" ) ) , lintProject ( "gradle_override.xml=>AndroidManifest.xml" , "multiproject/library.properties=>build.gradle" ) ) ; }
protected void networkStatus ( int status ) { if ( status == ( android.net.NetworkAgent.INVALID_NETWORK ) ) { if ( com.android.server.wifi.WifiStateMachine.DBG ) log ( ( "WifiNetworkAgent -> Wifi networkStatus invalid score " + ( java.lang.Integer.toString ( mWifiInfo.score ) ) ) ) ; unwantedNetwork ( com.android.server.wifi.WifiStateMachine.network_status_unwanted_disable_autojoin ) ; } }
private static boolean isBooleanField ( java.lang.reflect.Field field , com.google.devtools.common.options.Converter < ? > converter ) { return ( ( field.getType ( ) . equals ( boolean . class ) ) || ( field.getType ( ) . equals ( com.google.devtools.common.options.TriState.class ) ) ) || ( converter instanceof com.google.devtools.common.options.BoolOrEnumConverter ) ; }
public void setUseColor ( boolean useColor , int passColor , int warnColor , int failColor ) { this . useColor = useColor ; vogar.Console.Color.PASS.setCode ( passColor ) ; vogar.Console.Color.WARN.setCode ( warnColor ) ; vogar.Console.Color.FAIL.setCode ( failColor ) ; vogar.Console.Color.COMMENT.setCode ( 34 ) ; }
private void handleSuccessfulIpConfiguration ( ) { mLastSignalLevel = - 1 ; com.android.server.wifi.WifiConfiguration c = getCurrentWifiConfiguration ( ) ; if ( c != null ) { c.numConnectionFailures = 0 ; } if ( c != null ) { com.android.server.wifi.ScanResult result = getCurrentScanResult ( ) ; if ( result == null ) { loge ( ( "WifiStateMachine: handleSuccessfulIpConfiguration and no scan results" + ( c.configKey ( ) ) ) ) ; } else { result.numIpConfigFailures = 0 ; mWifiNative.clearBlacklist ( ) ; } } }
public com.android.sched.vfs.VPath prependPath ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) { assert ! ( path.isRoot ( ) ) ; if ( ! ( this . isRoot ( ) ) ) { pathFragments.add ( 0 , new com.android.sched.vfs.VPath.VPathFragment ( java.lang.String.valueOf ( com.android.sched.vfs.VPath.INTERNAL_SEPARATOR ) , com.android.sched.vfs.VPath.INTERNAL_SEPARATOR ) ) ; } pathFragments.addAll ( 0 , path.getPathFragments ( ) ) ; return this ; }
private void reportConnectionAttemptStart ( android.net.wifi.WifiConfiguration config , java.lang.String targetBSSID , int roamType ) { mWifiMetrics.startConnectionEvent ( config , targetBSSID , roamType ) ; mWifiDiagnostics.reportConnectionEvent ( WifiDiagnostics.CONNECTION_EVENT_STARTED ) ; }
private byte [ ] desugar ( org.objectweb.asm.ClassReader reader ) { org.objectweb.asm.ClassWriter writer = new org.objectweb.asm.ClassWriter ( org.objectweb.asm.ClassWriter.COMPUTE_MAXS ) ; com.google.devtools.build.android.desugar.DefaultMethodClassFixer fixer = new com.google.devtools.build.android.desugar.DefaultMethodClassFixer ( writer , classpathReader , bootclassPath , classLoader ) ; reader.accept ( fixer , 0 ) ; return writer.toByteArray ( ) ; }
public void paintIcon ( java.awt.Component c , java.awt.Graphics g , int x , int y ) { mVdTree.draw ( g , c.getWidth ( ) , c.getHeight ( ) ) ; }
private static android.telephony.SmsCbMessage createFromPdu ( byte [ ] pdu ) { try { com.android.internal.telephony.gsm.SmsCbHeader header = new com.android.internal.telephony.gsm.SmsCbHeader ( pdu ) ; byte [ ] [ ] pdus = new byte [ 1 ] [ ] ; pdus [ 0 ] = pdu ; return com.android.internal.telephony.gsm.GsmSmsCbMessage.createSmsCbMessage ( header , com.android.internal.telephony.gsm.GsmSmsCbTest.sTestLocation , pdus ) ; } catch ( java.lang.IllegalArgumentException e ) { return null ; } }
public boolean isProtectedBroadcast ( java.lang.String actionName ) { synchronized ( mPackages ) { return mProtectedBroadcasts.contains ( actionName ) ; } }
public void test_get_put ( ) throws java.lang.Exception { libcore.java.net.OldCookieHandlerTest.MockCookieHandler mch = new libcore.java.net.OldCookieHandlerTest.MockCookieHandler ( ) ; java.net.CookieHandler defaultHandler = java.net.CookieHandler.getDefault ( ) ; try { java.net.CookieHandler.setDefault ( mch ) ; com.google.mockwebserver.MockWebServer server = new com.google.mockwebserver.MockWebServer ( ) ; server.enqueue ( new com.google.mockwebserver.MockResponse ( ) . addHeader ( ( ( ( ( ( ( ( ( ( ( "Set-Cookie2: a=\"android\"; " + ( ( ( "Comment=\"this cookie is delicious\"; " + "CommentURL=\"http://google.com/\"; " ) + "Discard; " ) + "Domain=\"" ) ) + ( server.getCookieDomain ( ) ) ) + "\"; " ) + "Max-Age=\"60\"; " ) + "Path=\"/path\"; " ) + "Port=\"80,443," ) + ( server.getPort ( ) ) ) + "\"; " ) + "Secure; " ) + "Version=\"1\"" ) ) ) ; server.play ( ) ; java.net.URLConnection connection = server.getUrl ( "/path/foo" ) . openConnection ( ) ; connection.getContent ( ) ; assertTrue ( mch.wasGetCalled ( ) ) ; assertTrue ( mch.wasPutCalled ( ) ) ; } finally { java.net.CookieHandler.setDefault ( defaultHandler ) ; } }
static final < K , V > java.util.concurrent.ConcurrentHashMap.HashEntry < K , V > entryAt ( java.util.concurrent.ConcurrentHashMap.HashEntry < K , V > [ ] tab , int i ) { return tab == null ? null : ( ( java.util.concurrent.ConcurrentHashMap.HashEntry < K , V > ) ( java.util.concurrent.ConcurrentHashMap.UNSAFE.getObjectVolatile ( tab , ( ( ( ( long ) ( i ) ) << ( java.util.concurrent.ConcurrentHashMap.TSHIFT ) ) + ( java.util.concurrent.ConcurrentHashMap.TBASE ) ) ) ) ) ; }
protected void engineInit ( int opmode , java.security.Key key , java.security.AlgorithmParameters params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { if ( params != null ) { throw new java.security.InvalidAlgorithmParameterException ( ( "unknown param type: " + ( params.getClass ( ) . getName ( ) ) ) ) ; } engineInitInternal ( opmode , key ) ; }
boolean accept ( java.lang.Package pkg ) { if ( pkg instanceof com.android.sdklib.internal.repository.ExtraPackage ) { com.android.sdklib.internal.repository.ExtraPackage ep = ( ( com.android.sdklib.internal.repository.ExtraPackage ) ( pkg ) ) ; if ( ep.getVendorId ( ) . equals ( mVendor ) ) { if ( ep.getPath ( ) . equals ( mPath ) ) { return true ; } for ( java.lang.String oldPath : ep.getOldPaths ( ) ) { if ( oldPath.equals ( mPath ) ) { return true ; } } } } return false ; }
public void nvWriteItem ( int itemID , java.lang.String itemValue , android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_NV_WRITE_ITEM , response ) ; rr.mParcel.writeInt ( itemID ) ; rr.mParcel.writeString ( itemValue ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) + ' ' ) + itemID ) + ": " ) + itemValue ) ) ; send ( rr ) ; }
public void disconnectResponse ( int token ) { android.util.Log.d ( com.android.bluetooth.sap.SapRilReceiver.TAG , ( "disconnectResponse: token " + token ) ) ; com.android.bluetooth.sap.SapMessage sapMessage = new com.android.bluetooth.sap.SapMessage ( SapMessage.ID_DISCONNECT_RESP ) ; sapMessage.setResultCode ( SapMessage.INVALID_VALUE ) ; removeOngoingReqAndSendMessage ( token , sapMessage ) ; }
public void test_enumerateLThreadArray ( ) { int numThreads = initialThreadGroup.activeCount ( ) ; java.lang.Thread [ ] listOfThreads = new java.lang.Thread [ numThreads ] ; int countThread = initialThreadGroup.enumerate ( listOfThreads ) ; assertEquals ( numThreads , countThread ) ; assertTrue ( "Current thread must be in enumeration of threads" , inListOfThreads ( listOfThreads ) ) ; }
public android.net.VpnService.Builder addAddress ( java.net.InetAddress address , int prefixLength ) { check ( address , prefixLength ) ; if ( address.isAnyLocalAddress ( ) ) { throw new java.lang.IllegalArgumentException ( "Bad address" ) ; } mAddresses.append ( java.lang.String.format ( " %s/%d" , address.getHostAddress ( ) , prefixLength ) ) ; return this ; }
private java.lang.CharSequence getAppLabel ( java.lang.String appPackage ) { android.content.pm.PackageManager pm = mContext.getPackageManager ( ) ; try { android.content.pm.ApplicationInfo appInfo = pm.getApplicationInfo ( appPackage , 0 ) ; return appInfo.loadSafeLabel ( pm ) ; } catch ( android.content.pm.PackageManager e ) { android.telephony.Rlog.e ( com.android.internal.telephony.SMSDispatcher.TAG , ( "PackageManager Name Not Found for package " + appPackage ) ) ; return appPackage ; } }
private static java.util.Vector < org.apache.harmony.tests.java.text.FieldContainer > getNegativeCurrencyVectorTR ( ) { java.util.Vector < org.apache.harmony.tests.java.text.FieldContainer > v = new java.util.Vector < org.apache.harmony.tests.java.text.FieldContainer > ( ) ; v.add ( new org.apache.harmony.tests.java.text.FieldContainer ( 0 , 1 , java.text.NumberFormat.Field.SIGN ) ) ; v.add ( new org.apache.harmony.tests.java.text.FieldContainer ( 1 , 4 , java.text.NumberFormat.Field.INTEGER ) ) ; v.add ( new org.apache.harmony.tests.java.text.FieldContainer ( 5 , 7 , java.text.NumberFormat.Field.CURRENCY ) ) ; return v ; }
public void testNotifyPackageDataDestroyComplete ( ) { java.util.List < java.lang.String > fooSecondaries = mFooUser0.getSecondaryDexPaths ( ) ; notifyDexLoad ( mFooUser0 , fooSecondaries , mUser0 ) ; mDexManager.notifyPackageDataDestroyed ( mFooUser0.getPackageName ( ) , mUser0 ) ; com.android.server.pm.dex.PackageDexUsage.PackageUseInfo pui = getPackageUseInfo ( mFooUser0 ) ; org.junit.Assert.assertNull ( pui ) ; }
public void testPublishBadServiceName ( ) { android.net.wifi.nan.PublishConfig publishConfig = new android.net.wifi.nan.PublishConfig.Builder ( ) . setServiceName ( "Including invalid characters - spaces" ) . build ( ) ; int clientId = doConnect ( ) ; android.net.wifi.nan.IWifiNanSessionCallback mockCallback = org.mockito.Mockito.mock ( android.net.wifi.nan.IWifiNanSessionCallback.class ) ; mDut.publish ( clientId , publishConfig , mockCallback ) ; org.mockito.Mockito.verify ( mNanStateManagerMock ) . publish ( clientId , publishConfig , mockCallback ) ; }
private boolean newlineAfterElementClose ( org.w3c.dom.Element element , int depth ) { if ( hasBlankLineAbove ( ) ) { return false ; } return ( ( element.getParentNode ( ) . getNodeType ( ) ) == ( org.w3c.dom.Node.ELEMENT_NODE ) ) && ( ! ( keepElementAsSingleLine ( ( depth - 1 ) , ( ( org.w3c.dom.Element ) ( element.getParentNode ( ) ) ) ) ) ) ; }
public static java.io.File getDevicePolicyFile ( com.android.tradefed.device.ITestDevice device ) throws java.lang.Exception { java.io.File file ; synchronized ( android.security.cts.SELinuxHostTest.cachedDevicePolicyFiles ) { file = android.security.cts.SELinuxHostTest.cachedDevicePolicyFiles.get ( device ) ; } if ( file != null ) { return file ; } file = java.io.File.createTempFile ( "sepolicy" , ".tmp" ) ; file.deleteOnExit ( ) ; device.pullFile ( "/sys/fs/selinux/policy" , file ) ; synchronized ( android.security.cts.SELinuxHostTest.cachedDevicePolicyFiles ) { android.security.cts.SELinuxHostTest.cachedDevicePolicyFiles.put ( device , file ) ; } return file ; }
protected void invoke ( int slot , android.support.v8.renderscript.FieldPacker v ) { if ( v != null ) { mRS.nScriptInvokeV ( getID ( mRS ) , slot , v.getData ( ) ) ; } else { mRS.nScriptInvoke ( getID ( mRS ) , slot ) ; } }
final void get ( double [ ] dst , int dstOffset , int doubleCount ) { int byteCount = checkGetBounds ( SizeOf.DOUBLE , dst.length , dstOffset , doubleCount ) ; this . block.peekDoubleArray ( ( ( offset ) + ( position ) ) , dst , dstOffset , doubleCount , order.needsSwap ) ; position += byteCount ; }
public static boolean removeAll ( java.util.Iterator < ? > removeFrom , java.util.Collection < ? > elementsToRemove ) { com.google.common.base.Preconditions.checkNotNull ( elementsToRemove ) ; boolean modified = false ; while ( removeFrom.hasNext ( ) ) { if ( elementsToRemove.contains ( removeFrom.next ( ) ) ) { removeFrom.remove ( ) ; modified = true ; } } return modified ; }
public static void main ( java.lang.String [ ] args ) { java.lang.System.out.println ( "Hello, world!" ) ; for ( java.lang.String a : args ) { if ( a.startsWith ( "agent:" ) ) { java.lang.String agent = a.substring ( 6 ) ; try { dalvik.system.VMDebug.attachAgent ( agent ) ; } catch ( java.io.IOException e ) { e.printStackTrace ( java.lang.System.out ) ; } } } java.lang.System.out.println ( "Goodbye!" ) ; }
public void copy1DRangeFromUnchecked ( int off , int count , short [ ] d ) { int dataSize = ( mType.mElement.getBytesSize ( ) ) * count ; data1DChecks ( off , count , ( ( d.length ) * 2 ) , dataSize ) ; mRS.nAllocationData1D ( getIDSafe ( ) , off , mSelectedLOD , count , d , dataSize ) ; }
public static java.lang.String getCurrentCountryIso ( android.content.Context context , @ android.support.annotation.Nullable android.telecom.PhoneAccountHandle phoneAccountHandle ) { java.lang.String countryIso = com.android.dialer.compat.telephony.TelephonyManagerCompat.getNetworkCountryIsoForPhoneAccountHandle ( context , phoneAccountHandle ) ; if ( android.text.TextUtils.isEmpty ( countryIso ) ) { countryIso = com.android.dialer.compat.CompatUtils.getLocale ( context ) . getCountry ( ) ; com.android.dialer.common.LogUtil.i ( "PhoneNumberHelper.getCurrentCountryIso" , ( "No CountryDetector; falling back to countryIso based on locale: " + countryIso ) ) ; } countryIso = countryIso.toUpperCase ( ) ; return countryIso ; }
public void flingScroll ( int vx , int vy ) { int maxX = java.lang.Math.max ( ( ( computeHorizontalScrollRange ( ) ) - ( getViewWidth ( ) ) ) , 0 ) ; int maxY = java.lang.Math.max ( ( ( computeVerticalScrollRange ( ) ) - ( getViewHeight ( ) ) ) , 0 ) ; mScroller.fling ( mScrollX , mScrollY , vx , vy , 0 , maxX , 0 , maxY ) ; invalidate ( ) ; }
public void requestUninstall_asyncUninstallFail ( ) throws java.lang.Exception { configureCallerHasPermission ( ) ; com.android.server.timezone.CheckToken token = createArbitraryToken ( ) ; byte [ ] tokenBytes = token.toByteArray ( ) ; com.android.server.timezone.RulesManagerServiceTest.TestCallback callback = new com.android.server.timezone.RulesManagerServiceTest.TestCallback ( ) ; org.junit.Assert.assertEquals ( RulesManager.SUCCESS , mRulesManagerService.requestUninstall ( tokenBytes , callback ) ) ; verifyNoInstallerCallsMade ( ) ; callback.assertNoResultReceived ( ) ; configureStageUninstallExpectation ( false ) ; mFakeExecutor.simulateAsyncExecutionOfLastCommand ( ) ; verifyStageUninstallCalled ( ) ; verifyPackageTrackerCalled ( token , false ) ; callback.assertResultReceived ( Callback.ERROR_UNKNOWN_FAILURE ) ; }
private static boolean isAttributeOperationPresent ( com.android.manifmerger.XmlElement xmlElement , java.util.Map.Entry < com.android.manifmerger.XmlNode.NodeName , com.android.manifmerger.AttributeOperationType > attributeOperation , com.android.manifmerger.ActionRecorder recorder , com.android.manifmerger.ActionRecorder.ActionType action ) { com.android.manifmerger.ActionRecorder.DecisionTreeRecord record = recorder.getAllRecords ( ) . get ( xmlElement.getId ( ) ) ; for ( com.android.manifmerger.ActionRecorder.AttributeRecord attributeRecord : record.getAttributeRecords ( attributeOperation.getKey ( ) ) ) { if ( ( attributeRecord.getActionType ( ) ) == action ) { return true ; } } return false ; }
public boolean equals ( java.lang.Object o ) { if ( o instanceof android.app.ActivityThread.ProviderKey ) { final android.app.ActivityThread.ProviderKey other = ( ( android.app.ActivityThread.ProviderKey ) ( o ) ) ; return ( com.android.internal.util.Objects.equal ( authority , other.authority ) ) && ( ( userId ) == ( other.userId ) ) ; } return false ; }
private void updateProvisionedValues ( ) { if ( com.android.ims.ImsManager.getBooleanCarrierConfig ( mContext , CarrierConfigManager.KEY_CARRIER_VOLTE_PROVISIONING_REQUIRED_BOOL ) ) { new com.android.ims.ImsManager.AsyncUpdateProvisionedValues ( ) . execute ( ) ; } }
public void setUp ( ) throws java.lang.Exception { mCacheQueue = new com.android.volley.mock.WaitableQueue ( ) ; mNetworkQueue = new com.android.volley.mock.WaitableQueue ( ) ; mCache = new com.android.volley.mock.MockCache ( ) ; mDelivery = new com.android.volley.mock.MockResponseDelivery ( ) ; mRequest = new com.android.volley.mock.MockRequest ( ) ; mDispatcher = new com.android.volley.CacheDispatcher ( mCacheQueue , mNetworkQueue , mCache , mDelivery ) ; mDispatcher.start ( ) ; }
public void testNoPackageSubstitution ( ) { org.mockito.Mockito.when ( mAttr.getValue ( ) ) . thenReturn ( "com.foo.foo2.ActivityOne" ) ; assertNotNull ( new com.android.manifmerger.XmlAttribute ( mXmlElement , mAttr ) ) ; org.mockito.Mockito.verify ( mAttr ) . getNamespaceURI ( ) ; org.mockito.Mockito.verify ( mAttr ) . getLocalName ( ) ; org.mockito.Mockito.verify ( mAttr ) . getValue ( ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAttr ) ; }
public void test_valueUnbound ( ) throws java.io.IOException , java.net.UnknownHostException { javax.net.ssl.SSLSocket sock = ( ( javax.net.ssl.SSLSocket ) ( javax.net.ssl.SSLSocketFactory.getDefault ( ) . createSocket ( ) ) ) ; javax.net.ssl.SSLSession ss = sock.getSession ( ) ; tests.api.javax.net.ssl.SSLSessionBindingListenerTest.mySSLSessionBindingListener sbl = new tests.api.javax.net.ssl.SSLSessionBindingListenerTest.mySSLSessionBindingListener ( ) ; ss.putValue ( "test" , sbl ) ; ss.removeValue ( "test" ) ; assertTrue ( "valueUnbound was not called." , sbl.unboundDone ) ; }
public final int startActivity ( android.app.IApplicationThread caller , java.lang.String callingPackage , android.content.Intent intent , java.lang.String resolvedType , android.os.IBinder resultTo , java.lang.String resultWho , int requestCode , int startFlags , android.app.ProfilerInfo profilerInfo , android.os.Bundle options ) { return startActivityAsUser ( caller , callingPackage , intent , resolvedType , resultTo , resultWho , requestCode , startFlags , profilerInfo , options , android.os.UserHandle.getCallingUserId ( ) ) ; }
public static void encode ( com.android.tools.rpclib.rpc.Encoder e , com.android.tools.rpclib.rpc.Device o ) throws java.io.IOException { e.string ( o.Name ) ; e.string ( o.Model ) ; e.string ( o.OS ) ; e.uint64 ( o.MaxMemorySize ) ; e.bool ( o.RequiresShaderPatching ) ; }
public void getRulesState_stagedRulesError ( ) throws java.lang.Exception { configureCallerHasPermission ( ) ; java.lang.String systemRulesVersion = "2016a" ; configureDeviceSystemRulesVersion ( systemRulesVersion ) ; configureDeviceCannotReadStagedDistroOperation ( ) ; libcore.tzdata.shared2.DistroVersion installedDistroVersion = new libcore.tzdata.shared2.DistroVersion ( libcore.tzdata.shared2.DistroVersion.CURRENT_FORMAT_MAJOR_VERSION , ( ( libcore.tzdata.shared2.DistroVersion.CURRENT_FORMAT_MINOR_VERSION ) - 1 ) , "2016b" , 4 ) ; configureInstalledDistroVersion ( installedDistroVersion ) ; android.app.timezone.DistroRulesVersion installedDistroRulesVersion = new android.app.timezone.DistroRulesVersion ( installedDistroVersion.rulesVersion , installedDistroVersion.revision ) ; android.app.timezone.RulesState expectedRuleState = new android.app.timezone.RulesState ( "2016a" , RulesManagerService.DISTRO_FORMAT_VERSION_SUPPORTED , false , android.app.timezone.RulesState.STAGED_OPERATION_UNKNOWN , null , android.app.timezone.RulesState.DISTRO_STATUS_INSTALLED , installedDistroRulesVersion ) ; org.junit.Assert.assertEquals ( expectedRuleState , mRulesManagerService.getRulesState ( ) ) ; }
public void onNewFrame ( final java.awt.image.BufferedImage image ) { ( mCount ) ++ ; mImageOverlay.setImage ( image ) ; synchronized ( this ) { if ( ( mPendingDrawing ) == false ) { getDisplay ( ) . asyncExec ( new java.lang.Runnable ( ) { public void run ( ) { drawImage ( ) ; } } ) ; mPendingDrawing = true ; } } }
public void clearAppData ( java.lang.String uuid , java.lang.String pkgname , int userid , int flags , long ceDataInode ) throws com.android.internal.os.InstallerConnection.InstallerException { mInstaller.execute ( "clear_app_data" , uuid , pkgname , userid , flags , ceDataInode ) ; }
protected static java.util.Map < java.lang.String , java.lang.String > convertHeaders ( org.apache.http.Header [ ] headers ) { java.util.Map < java.lang.String , java.lang.String > result = new java.util.TreeMap < java.lang.String , java.lang.String > ( java.lang.String.CASE_INSENSITIVE_ORDER ) ; for ( int i = 0 ; i < ( headers.length ) ; i ++ ) { result.put ( headers [ i ] . getName ( ) , headers [ i ] . getValue ( ) ) ; } return result ; }
public void testSendMessageTooLong ( ) { int sessionId = 2394 ; int peerId = 2032 ; byte [ ] message = new byte [ ( com.android.server.wifi.nan.WifiNanServiceImplTest.MAX_LENGTH ) + 1 ] ; int messageId = 2043 ; int clientId = doConnect ( ) ; mDut.sendMessage ( clientId , sessionId , peerId , message , messageId , 0 ) ; org.mockito.Mockito.verify ( mNanStateManagerMock ) . sendMessage ( clientId , sessionId , peerId , message , messageId , 0 ) ; }
private boolean scanWithParams ( java.lang.String freqList , java.lang.String hiddenNetworkSSIDList ) { java.lang.StringBuilder scanCommand = new java.lang.StringBuilder ( ) ; scanCommand.append ( "SCAN TYPE=ONLY" ) ; if ( freqList != null ) { scanCommand.append ( ( " freq=" + freqList ) ) ; } if ( hiddenNetworkSSIDList != null ) { scanCommand.append ( ( " ssid " + hiddenNetworkSSIDList ) ) ; } return doBooleanCommand ( scanCommand.toString ( ) ) ; }
protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; com.android.dialer.common.LogUtil.enterBlock ( "MainActivity.onCreate" ) ; if ( com.android.dialer.configprovider.ConfigProviderComponent.get ( this ) . getConfigProvider ( ) . getBoolean ( "nui_peer_enabled" , false ) ) { activePeer = new com.android.dialer.main.impl.NewMainActivityPeer ( this ) ; } else { activePeer = new com.android.dialer.main.impl.OldMainActivityPeer ( this ) ; } activePeer.onActivityCreate ( savedInstanceState ) ; }
static java.lang.String getLineOfOffset ( java.lang.String contents , int offset ) { int end = contents.indexOf ( '\n' , offset ) ; return contents.substring ( offset , ( end != ( - 1 ) ? end : contents.length ( ) ) ) ; }
private void deleteAvd ( ) { try { java.lang.String avdName = mSdkCommandLine.getParamName ( ) ; com.android.sdklib.internal.avd.AvdManager avdManager = new com.android.sdklib.internal.avd.AvdManager ( mSdkManager , mSdkLog ) ; com.android.sdklib.internal.avd.AvdManager.AvdInfo info = avdManager.getAvd ( avdName , false ) ; if ( info == null ) { errorAndExit ( "There is no Android Virtual Device named '%s'." , avdName ) ; return ; } avdManager.deleteAvd ( info , mSdkLog ) ; } catch ( com.android.prefs.AndroidLocation.AndroidLocationException e ) { errorAndExit ( e.getMessage ( ) ) ; } }
public static void computeIlogb ( android.renderscript.cts.TestIlogb.ArgumentsFloatInt args ) { args.ulf = 4 ; args.ulfRelaxed = 12 ; args.out = ( ( int ) ( ( ( ( java.lang.Float.floatToIntBits ( args.in ) ) > > 23 ) & 255 ) - 127.0F ) ) ; }
private boolean needFullRebuild ( ) { if ( ! ( options.isAutomaticFullRebuildEnabled ( ) ) ) { return false ; } long timestamp = new java.io.File ( options.getOutputDir ( ) , com.android.jack.backend.dex.DexFileWriter.DEX_FILENAME ) . lastModified ( ) ; for ( java.io.File lib : options.getClasspath ( ) ) { if ( isModifiedLibrary ( lib , timestamp ) ) { return true ; } } for ( java.io.File importedJackFiles : options.getJayceImport ( ) ) { if ( isModifiedLibrary ( importedJackFiles , timestamp ) ) { return true ; } } return false ; }
protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; com.android.dialer.common.LogUtil.enterBlock ( "MainActivity.onCreate" ) ; if ( com.android.dialer.configprovider.ConfigProviderComponent.get ( this ) . getConfigProvider ( ) . getBoolean ( "nui_peer_enabled" , false ) ) { activePeer = new com.android.dialer.main.impl.NewMainActivityPeer ( this ) ; } else { activePeer = new com.android.dialer.main.impl.OldMainActivityPeer ( this ) ; } activePeer.onActivityCreate ( savedInstanceState ) ; }
public boolean onCanceledViaNewOutgoingCallBroadcast ( final com.android.server.telecom.Call call ) { mPendingCallsToDisconnect.add ( call ) ; mHandler.postDelayed ( new java.lang.Runnable ( "CM.oCVNOCB" ) { @ java.lang.Override public void loggedRun ( ) { synchronized ( mLock ) { if ( mPendingCallsToDisconnect.remove ( call ) ) { com.android.server.telecom.Log.i ( this , "Delayed disconnection of call: %s" , call ) ; call.disconnect ( ) ; } } } } . prepare ( ) , com.android.server.telecom.Timeouts.getNewOutgoingCallCancelMillis ( mContext.getContentResolver ( ) ) ) ; return true ; }
public boolean setPermissionGrantState ( @ android.annotation.NonNull android.content.ComponentName admin , java.lang.String packageName , java.lang.String permission , int grantState ) { throwIfParentInstance ( "setPermissionGrantState" ) ; try { return mService.setPermissionGrantState ( admin , packageName , permission , grantState ) ; } catch ( android.os.RemoteException re ) { throw re.rethrowFromSystemServer ( ) ; } }
public void testCheckAccessLevel_hasAppOpsBitDefault_grantedPermission ( ) throws java.lang.Exception { setHasCarrierPrivileges ( false ) ; setIsDeviceOwner ( false ) ; setIsProfileOwner ( true ) ; setHasAppOpsPermission ( AppOpsManager.MODE_DEFAULT , true ) ; setHasReadHistoryPermission ( false ) ; assertEquals ( NetworkStatsAccess.Level.USER , com.android.server.net.NetworkStatsAccess.checkAccessLevel ( mContext , com.android.server.net.NetworkStatsAccessTest.TEST_UID , com.android.server.net.NetworkStatsAccessTest.TEST_PKG ) ) ; }
public void insert ( com.google.common.collect.ImmutableList < com.android.dialer.speeddial.database.SpeedDialEntry > entries ) { if ( entries.isEmpty ( ) ) { return ; } android.database.sqlite.SQLiteDatabase db = getWritableDatabase ( ) ; db.beginTransaction ( ) ; try { insert ( db , entries ) ; db.setTransactionSuccessful ( ) ; } finally { db.endTransaction ( ) ; db.close ( ) ; } }
public static void assertEqualCertificateChains ( byte [ ] [ ] expected , byte [ ] [ ] actual ) { org.conscrypt.NativeCryptoTest.assertEqualByteArrays ( expected , actual ) ; }
private void setupFunctioningHardwareInterface ( ) { org.mockito.Mockito.when ( mHardware.initOffloadConfig ( ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( mHardware.initOffloadControl ( org.mockito.Matchers.any ( OffloadHardwareInterface.ControlCallback.class ) ) ) . thenReturn ( true ) ; }
public void changeBarringPassword ( java.lang.String facility , java.lang.String oldPwd , java.lang.String newPwd , android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_CHANGE_BARRING_PASSWORD , result ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; rr.mParcel.writeInt ( 3 ) ; rr.mParcel.writeString ( facility ) ; rr.mParcel.writeString ( oldPwd ) ; rr.mParcel.writeString ( newPwd ) ; send ( rr ) ; }
public void copyFrom ( float [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copyFrom" ) ; mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFrom ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFrom ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFrom ( 0 , mCurrentCount , d ) ; } android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
private void setCalcTypeForLocale ( com.ibm.icu.util.ULocale locale ) { java.lang.String localeCalType = com.ibm.icu.impl.CalendarUtil.getCalendarType ( locale ) ; if ( "islamic-civil" . equals ( localeCalType ) ) setType ( com.ibm.icu.util.IslamicCalendar.CalculationType.ISLAMIC_CIVIL ) ; else if ( "islamic-umalqura" . equals ( localeCalType ) ) setType ( com.ibm.icu.util.IslamicCalendar.CalculationType.ISLAMIC_UMALQURA ) ; else if ( "islamic-tbla" . equals ( localeCalType ) ) setType ( com.ibm.icu.util.IslamicCalendar.CalculationType.ISLAMIC_TBLA ) ; else if ( localeCalType.startsWith ( "islamic" ) ) setType ( com.ibm.icu.util.IslamicCalendar.CalculationType.ISLAMIC ) ; else setType ( com.ibm.icu.util.IslamicCalendar.CalculationType.ISLAMIC_CIVIL ) ; }
public void visitResourceReference ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context , @ com.android.annotations.Nullable lombok.ast.AstVisitor visitor , @ com.android.annotations.NonNull org.w3c.dom.Node node , @ com.android.annotations.NonNull java.lang.String type , @ com.android.annotations.NonNull java.lang.String name , boolean isFramework ) { if ( ! isFramework ) { com.android.resources.ResourceType t = com.android.resources.ResourceType.getEnum ( type ) ; assert t != null : type ; com.android.tools.lint.checks.ResourceUsageModel.markReachable ( mModel.addResource ( t , name , null ) ) ; } }
public synchronized void close ( ) throws java.io.IOException { if ( ! ( closed ) ) { if ( ( zipFile.getStatus ( ) ) == ( com.android.sched.util.file.StreamFileStatus.OPEN ) ) { zipFile.getOutputStream ( ) . close ( ) ; } closed = true ; } }
public static void register ( java.util.Map taglets ) { com.ibm.icu.dev.tool.docs.ICUTaglet.ICUInternalTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUDraftTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUStableTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUProvisionalTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUObsoleteTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUIgnoreTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUNewTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUNoteTaglet.register ( taglets ) ; com.ibm.icu.dev.tool.docs.ICUTaglet.ICUEnhancedTaglet.register ( taglets ) ; }
public void onExternalCallChanged ( com.android.server.telecom.Call call , boolean isExternalCall ) { if ( isExternalCall ) { mEventHandler.obtainMessage ( com.android.server.telecom.ConnectionServiceFocusManager.MSG_REMOVE_CALL , call ) . sendToTarget ( ) ; } else { mEventHandler.obtainMessage ( com.android.server.telecom.ConnectionServiceFocusManager.MSG_ADD_CALL , call ) . sendToTarget ( ) ; } }
void dispatchAborted ( ) { if ( ( ( mDialogInfo ) != null ) && ( ( mDialogInfo.callback ) != null ) ) { final android.content.pm.IPackageDeleteObserver2 observer = IPackageDeleteObserver2.Stub.asInterface ( mDialogInfo.callback ) ; try { observer.onPackageDeleted ( mDialogInfo.appInfo.packageName , PackageManager.DELETE_FAILED_ABORTED , "Cancelled by user" ) ; } catch ( android.os.RemoteException ignored ) { } } }
public com.android.build.gradle.internal.dsl.Map < java.lang.String , java.lang.Integer > getSeverityOverrides ( ) { if ( ( ( severities ) == null ) || ( severities.isEmpty ( ) ) ) { return null ; } com.android.build.gradle.internal.dsl.Map < java.lang.String , java.lang.Integer > map = com.google.common.collect.Maps.newHashMapWithExpectedSize ( severities.size ( ) ) ; for ( com.android.build.gradle.internal.dsl.Map.Entry < java.lang.String , com.android.tools.lint.detector.api.Severity > entry : severities.entrySet ( ) ) { map.put ( entry.key , com.android.build.gradle.internal.dsl.LintOptions.convert ( entry.value ) ) ; } return map ; }
public void testIncludeAllPackagesUnderHere ( ) throws java.lang.Exception { junit.framework.TestSuite testSuite = new android.test.suitebuilder.examples.OuterTest ( ) . buildTestsUnderHereRecursively ( ) ; assertContentsInOrder ( android.test.suitebuilder.ListTestCaseNames.getTestCaseNames ( testSuite ) , "testOuter" , "testErrorOne" , "testErrorTwo" , "testFailOne" , "testFailTwo" , "testInstrumentation" , "testLevel1" , "testLevel2" , "testAnotherOne" , "testSimpleOne" , "testSimpleTwo" , "testNonSmoke" , "testSmoke" , "testSubclass" , "testSuperclass" , "testUnSuppressedMethod" ) ; }
public void testLaunchToSide ( ) throws java.lang.Exception { if ( ( ! ( supportsMultiWindowMode ( ) ) ) || ( ! ( supportsSplitScreenMultiWindow ( ) ) ) ) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay ( LogLevel.INFO , "Skipping test: no multi-window support" ) ; return ; } launchActivityInDockStack ( android.server.cts.LAUNCHING_ACTIVITY ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { LAUNCHING_ACTIVITY } ) ; launchActivityToSide ( ) ; HEAD ( 2 ) ; android.server.cts.a1541 Merge ; }
private java.util.List < com.android.jack.analysis.DefinitionMarker > getDefinitions ( @ javax.annotation.Nonnull java.util.List < com.android.jack.analysis.DefinitionMarker > definitions , @ javax.annotation.Nonnull java.util.BitSet in ) { java.util.List < com.android.jack.analysis.DefinitionMarker > reachingDefs = new java.util.ArrayList < com.android.jack.analysis.DefinitionMarker > ( ) ; for ( int i = in.nextSetBit ( 0 ) ; i >= 0 ; i = in.nextSetBit ( ( i + 1 ) ) ) { reachingDefs.add ( definitions.get ( i ) ) ; } return reachingDefs ; }
synchronized void nAllocationData2D ( long id , int xoff , int yoff , int mip , int face , int w , int h , byte [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes ) ; }
public void validatePolicyWithInvalidServerUri ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.UpdateParameter updateParam = android.net.wifi.hotspot2.pps.UpdateParameterTest.createUpdateParameter ( ) ; byte [ ] rawUriBytes = new byte [ ( android.net.wifi.hotspot2.pps.UpdateParameterTest.MAX_URI_BYTES ) + 1 ] ; java.util.Arrays.fill ( rawUriBytes , ( ( byte ) ( 'a' ) ) ) ; updateParam.serverUri = new java.lang.String ( rawUriBytes , java.nio.charset.StandardCharsets.UTF_8 ) ; org.junit.Assert.assertFalse ( updateParam.validate ( ) ) ; }
public void onIsConferencedChanged ( com.android.server.telecom.Call call ) { if ( ( call.getParentCall ( ) ) != null ) { com.android.server.telecom.Log.d ( this , "Ignoring onIsConferenceChanged from child call with new parent" ) ; return ; } if ( ( call.getChildCalls ( ) . size ( ) ) == 1 ) { com.android.server.telecom.Log.d ( this , "Ignoring onIsConferenceChanged from parent with only one child call" ) ; return ; } updateHeadsetWithCallState ( false ) ; }
public void testAesCbcHmacSha384Tcp4 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA384 , getAuthKey ( 384 ) , 192 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , false , 1 , true ) ; }
private void dispatchUncaughtException ( java.lang.Throwable e ) { getUncaughtExceptionHandler ( ) . uncaughtException ( this , e ) ; }
protected void handle ( long taskId , @ javax.annotation.Nonnull org.simpleframework.http.Request request , @ javax.annotation.Nonnull org.simpleframework.http.Response response ) { com.android.jack.server.tasks.ReloadConfig.logger.log ( java.util.logging.Level.INFO , "Reloading configuration" ) ; response.setContentLength ( 0 ) ; try { jackServer.reloadConfig ( ) ; response.setStatus ( Status.OK ) ; } catch ( com.android.sched.util.file.NotFileException | com.android.jack.server.api.v01.ServerException | com.android.sched.util.file.WrongPermissionException | java.io.IOException | com.android.sched.util.file.CannotCreateFileException e ) { com.android.jack.server.tasks.ReloadConfig.logger.log ( java.util.logging.Level.SEVERE , ( "Failed to reload configuration: " + ( e.getMessage ( ) ) ) ) ; response.setStatus ( Status.INTERNAL_SERVER_ERROR ) ; } }
public void connectionEventFailedDoesNotCrashIfDataFileIsMissing ( ) throws java.lang.Exception { mTraceDataFile.delete ( ) ; mLastMileLogger.reportConnectionEvent ( BaseWifiDiagnostics.CONNECTION_EVENT_FAILED ) ; }
public void setSupplicantLogLevel ( boolean turnOnVerbose ) { doStringCommand ( ( "LOG_LEVEL " + ( turnOnVerbose ? "DEBUG" : "INFO" ) ) ) ; }
public void testNonDstZoneNameWithDstTimestamp ( ) throws java.lang.Exception { java.text.SimpleDateFormat format = new java.text.SimpleDateFormat ( "yyyy-MM-dd'T'HH:mm zzzz" ) ; java.util.Calendar calendar = new java.util.GregorianCalendar ( libcore.java.text.SimpleDateFormatTest.AMERICA_LOS_ANGELES ) ; calendar.setTime ( format.parse ( "2010-12-21T10:00 Pacific Daylight Time" ) ) ; assertEquals ( 9 , calendar.get ( java.util.Calendar.HOUR_OF_DAY ) ) ; assertEquals ( 0 , calendar.get ( java.util.Calendar.MINUTE ) ) ; }
public void testConnectsToEmergencyNumber_BR ( ) { assertTrue ( shortInfo.connectsToEmergencyNumber ( "911" , RegionCode.BR ) ) ; assertTrue ( shortInfo.connectsToEmergencyNumber ( "190" , RegionCode.BR ) ) ; assertFalse ( shortInfo.connectsToEmergencyNumber ( "999" , RegionCode.BR ) ) ; }
public void testMergeWrite ( ) throws java.lang.Exception { com.android.builder.resources.ResourceMerger merger = com.android.builder.resources.ResourceMergerTest.getResourceMerger ( ) ; java.io.File folder = com.android.builder.resources.ResourceMergerTest.getWrittenResources ( ) ; com.android.builder.resources.ResourceSet writtenSet = new com.android.builder.resources.ResourceSet ( "unused" ) ; writtenSet.addSource ( folder ) ; writtenSet.loadFromFiles ( ) ; compareResourceMaps ( merger , writtenSet , false ) ; }
public void testAesCbcHmacSha256Udp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 , getAuthKey ( 256 ) , 128 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , false , 1 , true ) ; }
private void refreshDisplay ( ) { com.android.monkeyrunner.MonkeyImage snapshot = device.takeSnapshot ( ) ; currentImage = snapshot.createBufferedImage ( ) ; java.awt.Graphics2D g = scaledImage.createGraphics ( ) ; g.drawImage ( currentImage , 0 , 0 , scaledImage.getWidth ( ) , scaledImage.getHeight ( ) , null ) ; g.dispose ( ) ; display.setIcon ( new javax.swing.ImageIcon ( scaledImage ) ) ; pack ( ) ; }
public static long getMobileTcpRxPackets ( ) { long total = 0 ; for ( java.lang.String iface : android.net.TrafficStats.getMobileIfaces ( ) ) { long stat = android.net.TrafficStats.UNSUPPORTED ; try { stat = android.net.TrafficStats.getStatsService ( ) . getIfaceStats ( iface , android.net.TrafficStats.TYPE_TCP_RX_PACKETS ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } if ( stat != ( android.net.TrafficStats.UNSUPPORTED ) ) { total += stat ; } } return total ; }
public K next ( ) { com.google.common.collect.LinkedListMultimap.checkElement ( next ) ; current = next ; seenKeys.add ( current.key ) ; do { next = next.next ; } while ( ( ( next ) != null ) && ( ! ( seenKeys.add ( next.key ) ) ) ) ; return current.key ; }
public void saveSendingFileInfo ( java.lang.String mimeType , java.lang.String uriString , boolean isHandover ) throws java.lang.IllegalArgumentException { synchronized ( this ) { mMultipleFlag = false ; mMimeTypeOfSendingFile = mimeType ; mUriOfSendingFile = uriString ; mIsHandoverInitiated = isHandover ; android.net.Uri uri = android.net.Uri.parse ( uriString ) ; com.android.bluetooth.opp.BluetoothOppUtility.putSendFileInfo ( uri , com.android.bluetooth.opp.BluetoothOppSendFileInfo.generateFileInfo ( mContext , uri , mimeType ) ) ; storeApplicationData ( ) ; } }
public boolean [ ] someBoolVectorMethod ( boolean [ ] x ) { android.util.Log.d ( com.android.commands.hidl_test_java.HidlTestJava.TAG , ( ( "Baz someBoolVectorMethod(" + ( com.android.commands.hidl_test_java.HidlTestJava.toString ( x ) ) ) + ")" ) ) ; boolean [ ] out = new boolean [ x.length ] ; for ( int i = 0 ; i < ( x.length ) ; ++ i ) { out [ i ] = ! ( x [ i ] ) ; } return out ; }
public void testEncryption ( ) throws java.lang.Exception { if ( android.security.cts.EncryptionTest.deviceIsEncrypted ( ) ) { return ; } if ( hasLowRAM ( ) ) { android.util.Log.i ( android.security.cts.EncryptionTest.TAG , "hasLowRAM: true" ) ; return ; } assertFalse ( "Device encryption is required" , android.security.cts.EncryptionTest.aesIsFast ( ) ) ; }
public void testSetPublicIdGetPublicId ( ) { org.xml.sax.helpers.LocatorImpl l = new org.xml.sax.helpers.LocatorImpl ( ) ; l.setPublicId ( tests.api.org.xml.sax.helpers.LocatorImplTest.PUB ) ; assertEquals ( tests.api.org.xml.sax.helpers.LocatorImplTest.PUB , l.getPublicId ( ) ) ; l.setPublicId ( null ) ; assertEquals ( null , l.getPublicId ( ) ) ; }
static float computeStraightness ( float [ ] points , float totalLen ) { float dx = ( points [ 2 ] ) - ( points [ 0 ] ) ; float dy = ( points [ 3 ] ) - ( points [ 1 ] ) ; return ( ( float ) ( java.lang.Math.sqrt ( ( ( dx * dx ) + ( dy * dy ) ) ) ) ) / totalLen ; }
private java.util.List < java.lang.String > getEnabledTypes ( com.google.gct.testing.GoogleCloudTestingDimension dimension ) { java.util.List < java.lang.String > enabledTypes = new java.util.LinkedList < java.lang.String > ( ) ; for ( com.google.gct.testing.GoogleCloudTestingType type : dimension.getEnabledTypes ( ) ) { enabledTypes.add ( type.getId ( ) ) ; } return enabledTypes ; }
public java.lang.String getDeviceSoftwareVersion ( int slotId ) { int [ ] subId = android.telephony.SubscriptionManager.getSubId ( slotId ) ; if ( ( subId == null ) || ( ( subId.length ) == 0 ) ) { return null ; } try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo ( ) ; if ( info == null ) return null ; return info.getDeviceSvnUsingSubId ( subId [ 0 ] , mContext.getOpPackageName ( ) ) ; } catch ( android.os.RemoteException ex ) { return null ; } catch ( java.lang.NullPointerException ex ) { return null ; } }
private org.objectweb.asm.ClassReader getClassReader ( java.lang.String internalClassName , java.util.zip.ZipFile jar , java.util.zip.ZipEntry entry ) { try ( java.io.InputStream bytecode = jar.getInputStream ( entry ) ) { return rewriter.reader ( bytecode ) ; } catch ( java.io.IOException e ) { throw new java.lang.IllegalStateException ( ( "Couldn't load " + internalClassName ) , e ) ; } }
private void setVpnForcedLocked ( boolean enforce ) { final java.util.Set < android.net.UidRange > removedRanges = new android.util.ArraySet ( mBlockedUsers ) ; if ( enforce ) { final java.util.Set < android.net.UidRange > addedRanges = createUserAndRestrictedProfilesRanges ( mUserHandle , null , java.util.Collections.singletonList ( mPackage ) ) ; removedRanges.removeAll ( addedRanges ) ; addedRanges.removeAll ( mBlockedUsers ) ; setAllowOnlyVpnForUids ( false , removedRanges ) ; setAllowOnlyVpnForUids ( true , addedRanges ) ; } else { setAllowOnlyVpnForUids ( false , removedRanges ) ; } }
private static boolean isService ( com.android.ide.eclipse.adt.internal.editors.Hyperlinks.XmlContext context ) { org.w3c.dom.Attr attribute = context.getAttribute ( ) ; org.w3c.dom.Element node = context.getElement ( ) ; java.lang.String nodeName = node.getNodeName ( ) ; if ( ( ( com.android.sdklib.xml.AndroidManifest.NODE_SERVICE.equals ( nodeName ) ) && ( com.android.sdklib.xml.AndroidManifest.ATTRIBUTE_NAME.equals ( attribute.getLocalName ( ) ) ) ) && ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI.equals ( attribute.getNamespaceURI ( ) ) ) ) { return true ; } return false ; }
private boolean abortIdleOptimizations ( long lowStorageThreshold ) { if ( mAbortIdleOptimization.get ( ) ) { return true ; } long usableSpace = mDataDir.getUsableSpace ( ) ; if ( usableSpace < lowStorageThreshold ) { android.util.Log.w ( com.android.server.pm.BackgroundDexOptService.TAG , ( "Aborting background dex opt job due to low storage: " + usableSpace ) ) ; return true ; } return false ; }
public void testAesCbcHmacSha1Udp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 , getAuthKey ( 160 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , true , 1 , false ) ; }
public void startAdvertisingSet ( android.bluetooth.le.AdvertisingSetParameters parameters , android.bluetooth.le.AdvertiseData advertiseData , android.bluetooth.le.AdvertiseData scanResponse , android.bluetooth.le.PeriodicAdvertisingParameters periodicParameters , android.bluetooth.le.AdvertiseData periodicData , android.bluetooth.le.AdvertisingSetCallback callback ) { startAdvertisingSet ( parameters , advertiseData , scanResponse , periodicParameters , periodicData , 0 , 0 , callback , new android.os.Handler ( android.os.Looper.getMainLooper ( ) ) ) ; }
public int processBlock ( byte [ ] in , int inOff , byte [ ] out , int outOff ) throws java.lang.IllegalStateException , org.bouncycastle.crypto.DataLengthException { return encrypting ? encryptBlock ( in , inOff , out , outOff ) : decryptBlock ( in , inOff , out , outOff ) ; }
public boolean onMenuItemClick ( android.view.MenuItem item ) { switch ( item.getItemId ( ) ) { case R.id.menu_about : about ( ) ; org.chromium.webview_shell.WebViewBrowserActivity.hideKeyboard ( mUrlBar ) ; return true ; default : return false ; } }
public java.lang.String describeFirstNonRequestableCapability ( ) { if ( hasCapability ( android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED ) ) return "NET_CAPABILITY_VALIDATED" ; if ( hasCapability ( android.net.NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL ) ) return "NET_CAPABILITY_CAPTIVE_PORTAL" ; if ( hasCapability ( android.net.NetworkCapabilities.NET_CAPABILITY_FOREGROUND ) ) return "NET_CAPABILITY_FOREGROUND" ; if ( ( ( mNetworkCapabilities ) & ( android.net.NetworkCapabilities.NON_REQUESTABLE_CAPABILITIES ) ) != 0 ) { return "unknown non-requestable capabilities " + ( java.lang.Long.toHexString ( mNetworkCapabilities ) ) ; } if ( ( ( mLinkUpBandwidthKbps ) != 0 ) || ( ( mLinkDownBandwidthKbps ) != 0 ) ) return "link bandwidth" ; if ( hasSignalStrength ( ) ) return "signalStrength" ; return null ; }
public boolean equals ( java.lang.Object obj ) { if ( obj instanceof com.android.server.net.NetworkStatsCollection.Key ) { final com.android.server.net.NetworkStatsCollection.Key key = ( ( com.android.server.net.NetworkStatsCollection.Key ) ( obj ) ) ; return ( ( ( ( uid ) == ( key.uid ) ) && ( ( set ) == ( key.set ) ) ) && ( ( tag ) == ( key.tag ) ) ) && ( com.android.internal.util.Objects.equal ( ident , key.ident ) ) ; } return false ; }
public java.util.Set < java.lang.String > getApplicableFilters ( @ com.android.annotations.NonNull java.util.Set < java.lang.String > allFilters ) { java.util.Set < java.lang.String > list = super . getApplicableFilters ( allFilters ) ; if ( ( isEnable ( ) ) && ( universalApk ) ) { list.add ( null ) ; } return list ; }
private void updateHoverRegion ( int x , int y ) { x = imageXCoordinate ( x ) ; y = imageYCoordinate ( y ) ; com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo verticalUpdateRegion = findVerticalPatch ( x , y ) ; com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo horizontalUpdateRegion = findHorizontalPatch ( x , y ) ; computeHighlightRegions ( verticalUpdateRegion , horizontalUpdateRegion ) ; java.awt.Cursor c = getCursor ( x , y , verticalUpdateRegion , horizontalUpdateRegion ) ; setCursor ( c ) ; }
public boolean hasResources ( com.android.resources.ResourceType type ) { java.util.List < com.android.resources.ResourceFolderType > folderTypes = com.android.resources.FolderTypeRelationship.getRelatedFolders ( type ) ; boolean valid = false ; for ( com.android.resources.ResourceFolderType rft : folderTypes ) { if ( rft == ( mType ) ) { valid = true ; break ; } } if ( valid ) { if ( ( mFiles ) != null ) { for ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFile f : mFiles ) { if ( f.hasResources ( type ) ) { return true ; } } } } return false ; }
public void test_setMinimumIntegerDigitsI ( ) { java.text.DecimalFormat df = new java.text.DecimalFormat ( "###0.##" , new java.text.DecimalFormatSymbols ( java.util.Locale.US ) ) ; df.setMinimumIntegerDigits ( 3 ) ; assertEquals ( "Not set" , 3 , df.getMinimumIntegerDigits ( ) ) ; assertEquals ( "Wrong minimum" , "012" , df.format ( 12 ) ) ; df.setMaximumIntegerDigits ( 2 ) ; assertEquals ( "Not changed" , 2 , df.getMinimumIntegerDigits ( ) ) ; assertEquals ( "Incorrect integer" , "00.7" , df.format ( 0.7 ) ) ; }
public void testOnKeyShortcut ( ) throws java.lang.Throwable { final android.view.cts.MockView view = ( ( android.view.cts.MockView ) ( mActivity.findViewById ( R.id.mock_view ) ) ) ; runTestOnUiThread ( new java.lang.Runnable ( ) { public void run ( ) { view.setFocusable ( true ) ; } } ) ; android.view.KeyEvent event = new android.view.KeyEvent ( android.view.KeyEvent.ACTION_DOWN , android.view.KeyEvent.KEYCODE_MENU ) ; getInstrumentation ( ) . sendKeySync ( event ) ; event = new android.view.KeyEvent ( android.view.KeyEvent.ACTION_DOWN , android.view.KeyEvent.KEYCODE_0 ) ; getInstrumentation ( ) . sendKeySync ( event ) ; assertTrue ( view.hasCalledOnKeyShortcut ( ) ) ; }
private void addCommonOptionsForMultiDex ( @ javax.annotation.Nonnull com.android.jack.test.toolchain.JackApiToolchain toolchain , @ javax.annotation.Nonnull java.io.File configFile ) { toolchain.addProperty ( MultiDexLegacy.MULTIDEX_LEGACY.getName ( ) , "true" ) ; toolchain.addProperty ( PreProcessor.ENABLE.getName ( ) , "true" ) ; toolchain.addProperty ( PreProcessor.FILE.getName ( ) , configFile.getAbsolutePath ( ) ) ; }
public void testFiveCount_c ( ) throws java.lang.Exception { assertEquals ( "Thu" , formatDate ( java.util.Locale.ENGLISH , "c" ) ) ; assertEquals ( "Thu" , formatDate ( java.util.Locale.ENGLISH , "cc" ) ) ; assertEquals ( "Thu" , formatDate ( java.util.Locale.ENGLISH , "ccc" ) ) ; assertEquals ( "Thursday" , formatDate ( java.util.Locale.ENGLISH , "cccc" ) ) ; assertEquals ( "T" , formatDate ( java.util.Locale.ENGLISH , "ccccc" ) ) ; }
void abort ( com.android.server.telecom.Call call ) { final java.lang.String callId = mCallIdMapper.getCallId ( call ) ; if ( ( callId != null ) && ( isServiceValid ( "abort" ) ) ) { try { logOutgoing ( "abort %s" , callId ) ; mServiceInterface.abort ( callId ) ; } catch ( android.os.RemoteException e ) { } } removeCall ( call , new android.telecom.DisconnectCause ( android.telecom.DisconnectCause.LOCAL ) ) ; }
public void onServiceDisconnected ( android.content.ComponentName componentName ) { try { android.telecom.Log.startSession ( "SBC.oSD" ) ; synchronized ( mLock ) { logServiceDisconnected ( "onServiceDisconnected" ) ; mServiceConnection = null ; clearAbort ( ) ; handleServiceDisconnected ( ) ; } } finally { android.telecom.Log.endSession ( ) ; } }
public void testWarningWhenAddJavascriptInterfaceCalledOnWebView ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/AddJavascriptInterfaceTest.java:16: Warning: WebView.addJavascriptInterface should not be called [AddJavascriptInterface]\n" + ( ( " webView.addJavascriptInterface(object, string);\n" + " ~~~~~~~~~~~~~~~~~~~~~~\n" ) + "0 errors, 1 warnings\n" ) ) , lintProject ( "bytecode/.classpath=>.classpath" , "bytecode/AndroidManifest.xml=>AndroidManifest.xml" , "bytecode/AddJavascriptInterfaceTest.java.txt=>src/test/pkg/AddJavascriptInterfaceTest.java" , "bytecode/AddJavascriptInterfaceTest.class.data=>bin/classes/test/pkg/AddJavascriptInterfaceTest.class" , ( "bytecode/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnWebView.class.data=>" + "bin/classes/test/pkg/AddJavascriptInterfaceTest$CallAddJavascriptInterfaceOnWebView.class" ) ) ) ; }
public android.drm.DrmConvertedStatus closeConvertSession ( int convertId ) { if ( ( getState ( ) ) == ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) ) { throw new java.lang.IllegalStateException ( "Not Initialized yet" ) ; } return _closeConvertSession ( mUniqueId , convertId ) ; }
public void onClick ( android.view.View v ) { if ( ( v != null ) && ( ( R.id.text_layout ) == ( v.getId ( ) ) ) ) { android.content.Context context = getContext ( ) ; if ( context != null ) { int pos = java.lang.Integer.parseInt ( getKey ( ) ) ; android.net.Uri url = android.content.ContentUris.withAppendedId ( Telephony.Carriers.CONTENT_URI , pos ) ; context.startActivity ( new android.content.Intent ( android.content.Intent.ACTION_EDIT , url ) ) ; } } }
private void toggleRecentApps ( ) { mPreloadedRecentApps = false ; sendCloseSystemWindows ( com.android.internal.policy.impl.PhoneWindowManager.SYSTEM_DIALOG_REASON_RECENT_APPS ) ; try { com.android.internal.statusbar.IStatusBarService statusbar = getStatusBarService ( ) ; if ( statusbar != null ) { statusbar.toggleRecentApps ( ) ; } } catch ( android.os.RemoteException e ) { android.util.Slog.e ( com.android.internal.policy.impl.PhoneWindowManager.TAG , "RemoteException when showing recent apps" , e ) ; mStatusBarService = null ; } }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; java.util.List < com.android.jack.ir.ast.JExpression > arguments = popCallArgs ( info , x.arguments , x.binding ) ; pushNewExpression ( info , x , x.enclosingInstance ( ) , arguments , scope ) ; } catch ( java.lang.RuntimeException e ) { throw translateException ( x , e ) ; } }
private void onGetReport ( byte [ ] address , byte [ ] report , int rptSize ) { if ( com.android.bluetooth.hid.HidService.DBG ) android.util.Log.d ( com.android.bluetooth.hid.HidService.TAG , "onGetReport()" ) ; android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidService.MESSAGE_ON_GET_REPORT ) ; msg.obj = address ; android.os.Bundle data = new android.os.Bundle ( ) ; data.putByteArray ( BluetoothHidHost.EXTRA_REPORT , report ) ; data.putInt ( BluetoothHidHost.EXTRA_REPORT_BUFFER_SIZE , rptSize ) ; msg.setData ( data ) ; mHandler.sendMessage ( msg ) ; }
public void aggregateContact ( android.database.sqlite.SQLiteDatabase db , long rawContactId , java.lang.String accountType , java.lang.String accountName , long currentContactId ) { if ( ! ( mEnabled ) ) { return ; } com.android.providers.contacts.ContactAggregator.MatchCandidateList candidates = new com.android.providers.contacts.ContactAggregator.MatchCandidateList ( ) ; com.android.providers.contacts.ContactMatcher matcher = new com.android.providers.contacts.ContactMatcher ( ) ; android.content.ContentValues values = new android.content.ContentValues ( ) ; aggregateContact ( db , rawContactId , accountType , accountName , currentContactId , candidates , matcher , values ) ; }
public static void genRandomBytes ( long seed , int min , int max , byte [ ] array ) { java.util.Random r = new java.util.Random ( seed ) ; for ( int i = 0 ; i < ( array.length ) ; i ++ ) { array [ i ] = ( ( byte ) ( min + ( r.nextInt ( ( ( max - min ) + 1 ) ) ) ) ) ; } }
public static com.google.devtools.common.options.OptionValueDescription createOptionValueDescription ( com.google.devtools.common.options.OptionDefinition option ) { if ( option.allowsMultiple ( ) ) { return new com.google.devtools.common.options.OptionValueDescription.RepeatableOptionValueDescription ( option ) ; } else if ( option.isExpansionOption ( ) ) { return new com.google.devtools.common.options.OptionValueDescription.ExpansionOptionValueDescription ( option ) ; } else if ( ( option.getImplicitRequirements ( ) . length ) > 0 ) { return new com.google.devtools.common.options.OptionValueDescription.OptionWithImplicitRequirementsValueDescription ( option ) ; } else if ( option.isWrapperOption ( ) ) { return new com.google.devtools.common.options.OptionValueDescription.WrapperOptionValueDescription ( option ) ; } else { return new com.google.devtools.common.options.OptionValueDescription.SingleOptionValueDescription ( option ) ; } }
public static void notify ( java.lang.Object thisReference , int uniqueId , int infoType , java.lang.String message ) { android.drm.DrmManagerClient instance = ( ( android.drm.DrmManagerClient ) ( ( ( java.lang.ref.WeakReference ) ( thisReference ) ) . get ( ) ) ) ; if ( ( null != instance ) && ( null != ( instance.mEventHandler ) ) ) { android.os.Message m = instance.mEventHandler.obtainMessage ( android.drm.DrmManagerClient.EventHandler.INFO_EVENT_TYPE , uniqueId , infoType , message ) ; instance.mEventHandler.sendMessage ( m ) ; } }
public com.android.sdklib.internal.avd.AvdManager.AvdInfo [ ] getBrokenAvds ( ) { synchronized ( mAllAvdList ) { if ( ( mBrokenAvdList ) == null ) { java.util.ArrayList < com.android.sdklib.internal.avd.AvdManager.AvdInfo > list = new java.util.ArrayList < com.android.sdklib.internal.avd.AvdManager.AvdInfo > ( ) ; for ( com.android.sdklib.internal.avd.AvdManager.AvdInfo avd : mAllAvdList ) { if ( ( avd.getStatus ( ) ) != ( com.android.sdklib.internal.avd.AvdManager.AvdInfo.AvdStatus.OK ) ) { list.add ( avd ) ; } } mBrokenAvdList = list.toArray ( new com.android.sdklib.internal.avd.AvdManager.AvdInfo [ list.size ( ) ] ) ; } return mBrokenAvdList ; } }
protected boolean start ( ) { android.util.Log.i ( com.android.bluetooth.avrcp.AvrcpTargetService.TAG , "Starting the AVRCP Target Service" ) ; com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = this ; mCurrentData = new com.android.bluetooth.avrcp.MediaData ( null , null , null ) ; mNativeInterface = com.android.bluetooth.avrcp.AvrcpNativeInterface.getInterface ( ) ; mReceiver = new com.android.bluetooth.avrcp.AvrcpTargetService.AvrcpBroadcastReceiver ( ) ; android.content.IntentFilter filter = new android.content.IntentFilter ( ) ; filter.addAction ( BluetoothA2dp.ACTION_ACTIVE_DEVICE_CHANGED ) ; registerReceiver ( mReceiver , filter ) ; return true ; }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , float [ ] data ) { mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * 4 ) ) ; }
private java.lang.String [ ] splitSignature ( @ javax.annotation.Nonnull java.lang.String signature ) { assert com.android.jack.util.NamingTools.isClassDescriptor ( signature ) ; java.lang.String [ ] splitName = signature.substring ( 1 , ( ( signature.length ( ) ) - 1 ) ) . split ( java.lang.String.valueOf ( JLookup.PACKAGE_SEPARATOR ) ) ; return splitName ; }
public void waitForFlushComplete ( ) { java.util.concurrent.CountDownLatch latch = mFlushLatch ; try { if ( latch != null ) { java.lang.String message = android.hardware.cts.helpers.SensorCtsHelper.formatAssertionMessage ( mSensor , "WaitForFlush" ) ; junit.framework.Assert.assertTrue ( message , latch.await ( android.hardware.cts.helpers.TestSensorEventListener.FLUSH_TIMEOUT_US , java.util.concurrent.TimeUnit.MICROSECONDS ) ) ; } } catch ( java.lang.InterruptedException e ) { } }
private void runAndVerify ( java.lang.String expectedCmd ) throws java.lang.Exception { mMockDevice.executeShellCommand ( expectedCmd , ( ( com.android.ddmlib.IShellOutputReceiver ) ( org.easymock.EasyMock.anyObject ( ) ) ) , org.easymock.EasyMock.eq ( 0 ) ) ; org.easymock.EasyMock.replay ( mMockDevice ) ; mRunner.run ( mMockListener ) ; org.easymock.EasyMock.verify ( mMockDevice ) ; }
public static void computeFma ( android.renderscript.cts.TestFma.ArgumentsFloatFloatFloatFloat args , android.renderscript.cts.Target t ) { t.setPrecision ( 1 , 1 , false ) ; android.renderscript.cts.Target.Floaty ab = t.multiply ( t.new32 ( args.inA ) , t.new32 ( args.inB ) ) ; args.out = t.add ( ab , t.new32 ( args.inC ) ) ; }
public void getNeighboringCids ( android.os.Message response ) { if ( isPhoneTypeGsm ( ) ) { mCi.getNeighboringCids ( response ) ; } else { if ( response != null ) { com.android.internal.telephony.CommandException ce = new com.android.internal.telephony.CommandException ( CommandException.Error.REQUEST_NOT_SUPPORTED ) ; android.os.AsyncResult.forMessage ( response ) . exception = ce ; response.sendToTarget ( ) ; } } }
void createSizedHelper ( android.renderscript.Element e ) { for ( int i = 1 ; i <= 8 ; i ++ ) { android.renderscript.Allocation A = android.renderscript.Allocation.createSized ( mRS , e , i ) ; assertEquals ( A.getType ( ) . getElement ( ) , e ) ; assertEquals ( A.getType ( ) . getX ( ) , i ) ; } }
public static void writeUint32 ( long i , java.io.OutputStream output ) throws java.io.IOException { output.write ( ( ( int ) ( i > > 24 ) ) ) ; output.write ( ( ( int ) ( i > > 16 ) ) ) ; output.write ( ( ( int ) ( i > > 8 ) ) ) ; output.write ( ( ( int ) ( i ) ) ) ; }
public void startLceService ( int reportIntervalMs , boolean pullMode , android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_START_LCE , response ) ; rr.mParcel.writeInt ( 2 ) ; rr.mParcel.writeInt ( reportIntervalMs ) ; rr.mParcel.writeInt ( ( pullMode ? 1 : 0 ) ) ; if ( com.android.internal.telephony.RIL.RILJ_LOGD ) { riljLog ( ( ( ( rr.serialString ( ) ) + "> " ) + ( com.android.internal.telephony.RIL.requestToString ( rr.mRequest ) ) ) ) ; } send ( rr ) ; }
private static void setMainTableEntry ( char char1 , char char2 , int entry ) { if ( ( ( ( char1 < 'A' ) || ( char1 > 'Z' ) ) || ( char2 < 'A' ) ) || ( char2 > 'Z' ) ) { throw new java.lang.IllegalArgumentException ( ) ; } java.util.Currency.mainTable [ ( ( ( char1 - 'A' ) * ( java.util.Currency.A_TO_Z ) ) + ( char2 - 'A' ) ) ] = entry ; }
public void dump ( android.os.ParcelFileDescriptor fd ) { com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) return ; service.dump ( fd.getFileDescriptor ( ) ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JAssertStatement x ) { print ( com.android.jack.ir.impl.BaseGenerationVisitor.CHARS_ASSERT ) ; accept ( x.getTestExpr ( ) ) ; if ( ( x.getArg ( ) ) != null ) { print ( " : " ) ; accept ( x.getArg ( ) ) ; } return false ; }
public void hangupConnectionByIndex ( com.android.internal.telephony.GsmCdmaCall call , int index ) throws com.android.internal.telephony.CallStateException { int count = call.mConnections.size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { com.android.internal.telephony.GsmCdmaConnection cn = ( ( com.android.internal.telephony.GsmCdmaConnection ) ( call.mConnections.get ( i ) ) ) ; if ( ( cn.getGsmCdmaIndex ( ) ) == index ) { mCi.hangupConnection ( index , obtainCompleteMessage ( ) ) ; return ; } } throw new com.android.internal.telephony.CallStateException ( "no GsmCdma index found" ) ; }
private void processSlcConnected ( ) { if ( ( mPhoneProxy ) != null ) { try { mPhoneProxy.queryPhoneState ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.bluetooth.hfp.HeadsetStateMachine.TAG , android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ; } } else { android.util.Log.e ( com.android.bluetooth.hfp.HeadsetStateMachine.TAG , "Handsfree phone proxy null for query phone state" ) ; } }
public void visitInnerClassesInfo ( proguard.classfile.editor.Clazz clazz , proguard.classfile.editor.InnerClassesInfo innerClassesInfo ) { int innerClassIndex = innerClassesInfo.u2innerClassIndex ; int innerNameIndex = innerClassesInfo.u2innerNameIndex ; if ( ( innerClassIndex != 0 ) && ( innerNameIndex != 0 ) ) { java.lang.String newInnerName = clazz.getClassName ( innerClassIndex ) ; int index = newInnerName.lastIndexOf ( ClassConstants.INTERNAL_INNER_CLASS_SEPARATOR ) ; if ( index >= 0 ) { innerClassesInfo.u2innerNameIndex = new proguard.classfile.editor.ConstantPoolEditor ( ( ( proguard.classfile.editor.ProgramClass ) ( clazz ) ) ) . addUtf8Constant ( newInnerName.substring ( ( index + 1 ) ) ) ; } } }
public void testNoDpi ( ) throws java.lang.Exception { assertEquals ( ( "res/drawable-mdpi/frame.png: Warning: The following images appear in both -nodpi and in a density folder: frame.png [IconNoDpi]\n" + ( ( ( ( ( "res/drawable-xlarge-nodpi-v11/frame.png: Warning: The frame.png icon has identical contents in the following configuration folders: drawable-mdpi, drawable-nodpi, drawable-xlarge-nodpi-v11 [IconDuplicatesConfig]\n" + " res/drawable-nodpi/frame.png: <No location-specific message\n" ) + " res/drawable-mdpi/frame.png: <No location-specific message\n" ) + "res: Warning: Missing density variation folders in res: drawable-hdpi, drawable-xhdpi [IconMissingDensityFolder]\n" ) + "0 errors, 3 warnings\n" ) + "" ) ) , lintProject ( "res/drawable-mdpi/frame.png" , "res/drawable-nodpi/frame.png" , "res/drawable-xlarge-nodpi-v11/frame.png" ) ) ; }
public java.lang.Void call ( ) throws java.lang.Exception { org.apache.http.HttpResponse response = mServer.getResponse ( mRequest ) ; mConnection.sendResponseHeader ( response ) ; mConnection.sendResponseEntity ( response ) ; mConnection.close ( ) ; return null ; }
static void constantIndexing2 ( int [ ] array ) { array [ 1 ] = 1 ; array [ 2 ] = 1 ; array [ 3 ] = 1 ; array [ 4 ] = 1 ; array [ ( - 1 ) ] = 1 ; }
public int getLeState ( ) { int state = android.bluetooth.BluetoothAdapter.STATE_OFF ; try { mServiceLock.readLock ( ) . lock ( ) ; if ( ( mService ) != null ) { state = mService.getState ( ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } finally { mServiceLock.readLock ( ) . unlock ( ) ; } if ( android.bluetooth.BluetoothAdapter.VDBG ) android.util.Log.d ( android.bluetooth.BluetoothAdapter.TAG , ( "getLeState() returning " + state ) ) ; return state ; }
public void setLockScreenShown ( boolean shown ) { if ( ( checkCallingPermission ( android.Manifest.permission.DEVICE_POWER ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { throw new java.lang.SecurityException ( ( "Requires permission " + ( android.Manifest.permission.DEVICE_POWER ) ) ) ; } synchronized ( this ) { long ident = android.os.Binder.clearCallingIdentity ( ) ; try { if ( com.android.server.am.ActivityManagerService.DEBUG_LOCKSCREEN ) logLockScreen ( ( " shown=" + shown ) ) ; mLockScreenShown = shown ; comeOutOfSleepIfNeededLocked ( ) ; } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } } }
public static void computeMax ( android.renderscript.cts.TestMax.ArgumentsUintUintUint args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = ( ( int ) ( java.lang.StrictMath.max ( ( ( long ) ( ( args.inV1 ) & 4294967295L ) ) , ( ( long ) ( ( args.inV2 ) & 4294967295L ) ) ) ) ) ; }
public void setRemoteFeatureMask ( int supportedFeatures ) { if ( com.android.bluetooth.map.BluetoothMapMasInstance.V ) android.util.Log.v ( TAG , ( "setRemoteFeatureMask : Curr: " + ( mRemoteFeatureMask ) ) ) ; mRemoteFeatureMask = supportedFeatures ; if ( ( mObserver ) != null ) { mObserver.setObserverRemoteFeatureMask ( mRemoteFeatureMask ) ; if ( com.android.bluetooth.map.BluetoothMapMasInstance.V ) android.util.Log.v ( TAG , ( "setRemoteFeatureMask : set: " + ( mRemoteFeatureMask ) ) ) ; } }
public void junit ( ) throws java.lang.Exception { java.io.File junitJack = com.android.jack.TestTools.createTempFile ( "junit" , ".zip" ) ; com.android.jack.TestTools.compileSourceToJack ( new com.android.jack.Options ( ) , com.android.jack.ToolchainTest.JUNIT_SOURCELIST , ( ( ( com.android.jack.ToolchainTest.corePath.getAbsolutePath ( ) ) + ( java.io.File.pathSeparator ) ) + ( com.android.jack.TestTools.getFromAndroidTree ( "out/host/common/obj/JAVA_LIBRARIES/hamcrest-core-hostdex-jack_intermediates/classes.jar" ) ) ) , junitJack , true ) ; java.io.File junitOutFolder = com.android.jack.TestTools.createTempDir ( "junit" , "dex" ) ; com.android.jack.TestTools.compileJackToDex ( new com.android.jack.Options ( ) , junitJack , junitOutFolder , false ) ; }
public com.android.server.am.ContentProviderHolder getContentProviderExternal ( java.lang.String name , int userId , android.os.IBinder token ) { enforceCallingPermission ( android.Manifest.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY , "Do not have permission in call getContentProviderExternal()" ) ; userId = handleIncomingUser ( android.os.Binder.getCallingPid ( ) , android.os.Binder.getCallingUid ( ) , userId , false , com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY , "getContentProvider" , null ) ; return getContentProviderExternalUnchecked ( name , token , userId ) ; }
private java.lang.String quotedAttrValue ( java.lang.String attrValue ) { if ( ( attrValue.indexOf ( '"' ) ) == ( - 1 ) ) { return ( '"' + attrValue ) + '"' ; } if ( ( attrValue.indexOf ( '\'' ) ) == ( - 1 ) ) { return ( '\'' + attrValue ) + '\'' ; } attrValue = attrValue.replace ( "\"" , "&quot;" ) ; return ( '"' + attrValue ) + '"' ; }
public void logrb ( java.util.logging.Level level , java.lang.String sourceClass , java.lang.String sourceMethod , java.lang.String bundleName , java.lang.String msg , java.lang.Object [ ] params ) { if ( ( ( level.intValue ( ) ) < ( levelValue ) ) || ( ( levelValue ) == ( java.util.logging.Logger.offValue ) ) ) { return ; } java.util.logging.LogRecord lr = new java.util.logging.LogRecord ( level , msg ) ; lr.setSourceClassName ( sourceClass ) ; lr.setSourceMethodName ( sourceMethod ) ; lr.setParameters ( params ) ; doLog ( lr , bundleName ) ; }
private boolean doesNotHaveExtension ( @ android.support.annotation.NonNull java.util.Optional < com.google.i18n.phonenumbers.Phonenumber.PhoneNumber > parsedPhoneNumber ) { if ( ( parsedPhoneNumber.get ( ) . hasExtension ( ) ) && ( ! ( android.text.TextUtils.isEmpty ( parsedPhoneNumber.get ( ) . getExtension ( ) ) ) ) ) { com.android.dialer.common.LogUtil.i ( "Constraints.doesNotHaveExtension" , "phone number has an extension" ) ; return false ; } return true ; }
public void registerProductFlavorSourceProvider ( @ com.android.annotations.NonNull java.lang.String name , @ com.android.annotations.NonNull com.android.build.gradle.internal.dsl.ProductFlavor productFlavor , @ com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider ) { if ( ( extraArtifactMap.get ( name ) ) == null ) { throw new java.lang.IllegalArgumentException ( "Artifact with name $name is not yet registered. Use registerArtifactType()" ) ; } extraProductFlavorSourceProviders.put ( productFlavor.getName ( ) , new com.android.build.gradle.internal.variant.DefaultSourceProviderContainer ( name , sourceProvider ) ) ; }
public void testSerializationCompatibility_SimpleImmutableEntry ( ) throws java.lang.Exception { java.util.AbstractMap.SimpleImmutableEntry e = new java.util.AbstractMap.SimpleImmutableEntry < java.lang.Integer , java.lang.String > ( 1 , "test" ) ; if ( ! ( ( tests.util.SerializationTester.readObject ( e , "serialization/java/util/AbstractMapTest_SimpleImmutableEntry.golden.ser" ) ) instanceof java.util.AbstractMap.SimpleImmutableEntry ) ) { fail ( "should be SimpleImmutableEntry" ) ; } tests.util.SerializationTester.assertCompabilityEquals ( e , "serialization/java/util/AbstractMapTest_SimpleImmutableEntry.golden.ser" ) ; }
public void test6_findFirst2 ( ) { for ( int i = 0 ; i < 32 ; i ++ ) { int value = 1 << i ; value |= value > > > 1 ; assertEquals ( com.android.dx.util._tests.BitsTest.label ( i ) , i , com.android.dx.util.Bits.findFirst ( value , i ) ) ; } }
void makeWindowFreezingScreenIfNeededLocked ( com.android.server.wm.WindowState w ) { if ( ! ( okToDisplay ( ) ) ) { if ( com.android.server.wm.WindowManagerService.DEBUG_ORIENTATION ) android.util.Slog.v ( com.android.server.wm.WindowManagerService.TAG , ( "Changing surface while display frozen: " + w ) ) ; w.mOrientationChanging = true ; w.mLastFreezeDuration = 0 ; mInnerFields.mOrientationChangeComplete = false ; if ( ! ( mWindowsFreezingScreen ) ) { mWindowsFreezingScreen = true ; mH.removeMessages ( com.android.server.wm.WindowManagerService.H.WINDOW_FREEZE_TIMEOUT ) ; mH.sendEmptyMessageDelayed ( com.android.server.wm.WindowManagerService.H.WINDOW_FREEZE_TIMEOUT , com.android.server.wm.WindowManagerService.WINDOW_FREEZE_TIMEOUT_DURATION ) ; } } }
public void run ( java.util.Collection < com.android.ddmlib.testrunner.ITestRunListener > listeners ) throws com.android.ddmlib.TimeoutException , java.io.IOException { final java.lang.String runCaseCommandStr = java.lang.String.format ( "am instrument -w -r %s %s" , getArgsCommand ( ) , getRunnerPath ( ) ) ; com.android.ddmlib.Log.i ( com.android.ddmlib.testrunner.RemoteAndroidTestRunner.LOG_TAG , java.lang.String.format ( "Running %s on %s" , runCaseCommandStr , mRemoteDevice.getSerialNumber ( ) ) ) ; mParser = new com.android.ddmlib.testrunner.InstrumentationResultParser ( listeners ) ; mRemoteDevice.executeShellCommand ( runCaseCommandStr , mParser ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JArrayRef x ) { com.android.jack.ir.ast.JExpression instance = x.getInstance ( ) ; parenPush ( x , instance ) ; accept ( instance ) ; parenPop ( x , instance ) ; print ( '[' ) ; accept ( x.getIndexExpr ( ) ) ; print ( ']' ) ; return false ; }
public static void initialize ( com.android.utils.ILogger logger , java.io.File out ) throws java.io.IOException { synchronized ( com.android.builder.profile.ProcessRecorderFactory.LOCK ) { if ( ( com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.isInitialized ( ) ) || ( ! ( com.android.builder.profile.ProcessRecorderFactory.isEnabled ( ) ) ) ) { return ; } com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.setLogger ( logger ) ; com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.setOutputFile ( out ) ; com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.setRecordWriter ( new com.android.builder.profile.ProcessRecorder.JsonRecordWriter ( new java.io.FileWriter ( out ) ) ) ; com.android.builder.profile.ProcessRecorderFactory.publishInitialRecords ( ) ; } }
public boolean disconnect ( ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , "disconnect()" ) ; com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return false ; } return service.disconnect ( ) ; }
private void reportConnectionAttemptEnd ( int level2FailureCode , int connectivityFailureCode ) { mWifiMetrics.endConnectionEvent ( level2FailureCode , connectivityFailureCode ) ; switch ( level2FailureCode ) { case WifiMetrics.ConnectionEvent.FAILURE_NONE : mWifiDiagnostics.reportConnectionEvent ( WifiDiagnostics.CONNECTION_EVENT_SUCCEEDED ) ; break ; case WifiMetrics.ConnectionEvent.FAILURE_REDUNDANT_CONNECTION_ATTEMPT : case WifiMetrics.ConnectionEvent.FAILURE_CONNECT_NETWORK_FAILED : break ; default : mWifiDiagnostics.reportConnectionEvent ( WifiDiagnostics.CONNECTION_EVENT_FAILED ) ; } }
public void test_zh_CN ( ) throws java.lang.Exception { libcore.icu.ImmutableIndex zh_CN = libcore.icu.AlphabeticIndexTest.createIndex ( new java.util.Locale ( "zh" , "CN" ) ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_CN , "贾" , "J" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_CN , "沈" , "C" ) ; libcore.icu.AlphabeticIndexTest.assertHasLabel ( zh_CN , "瀋" , "S" ) ; }
static android.renderscript.cts.CoreMathVerifier.RemainderAndQuotient remainderAndQuotient ( float numerator , float denominator ) { android.renderscript.cts.CoreMathVerifier.RemainderAndQuotient result = new android.renderscript.cts.CoreMathVerifier.RemainderAndQuotient ( ) ; if ( denominator == 0.0F ) { result.quotient = 0 ; result.remainder = java.lang.Float.NaN ; } else { result.quotient = ( ( int ) ( java.lang.StrictMath.round ( ( numerator / denominator ) ) ) ) ; result.remainder = numerator - ( ( result.quotient ) * denominator ) ; } return result ; }
private static void checkSelectorPresence ( com.android.manifmerger.MergingReport.Builder mergingReport , com.android.manifmerger.XmlElement element ) { org.w3c.dom.Attr selectorAttribute = element.getXml ( ) . getAttributeNodeNS ( SdkConstants.TOOLS_URI , Selector.SELECTOR_LOCAL_NAME ) ; if ( ( selectorAttribute != null ) && ( ! ( element.getOperationType ( ) . isSelectable ( ) ) ) ) { java.lang.String message = java.lang.String.format ( "Unsupported tools:selector=\"%1$s\" found on node %2$s at %3$s" , selectorAttribute.getValue ( ) , element.getId ( ) , element.printPosition ( ) ) ; mergingReport.addError ( message ) ; } }
public void testResetBatteryLevel_testResetBeforeUpdate ( ) { com.android.bluetooth.btservice.RemoteDevices remoteDevices = new com.android.bluetooth.btservice.RemoteDevices ( mAdapterService ) ; org.junit.Assert.assertNull ( remoteDevices.getDeviceProperties ( mDevice1 ) ) ; remoteDevices.resetBatteryLevel ( mDevice1 ) ; org.junit.Assert.assertNull ( remoteDevices.getDeviceProperties ( mDevice1 ) ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mAdapterService ) ; }
public boolean enableDataConnectivity ( ) { enforceModifyPermission ( ) ; int subId = mSubscriptionController.getDefaultDataSubId ( ) ; final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { phone.setDataEnabled ( true ) ; return true ; } else { return false ; } }
private static java.util.List < com.google.currysrc.api.process.Rule > createTransformRules ( ) throws java.io.IOException { com.google.currysrc.api.process.Rule [ ] repackageRules = com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.getRepackagingRules ( ) ; com.google.currysrc.api.process.Rule [ ] apiDocsRules = new com.google.currysrc.api.process.Rule [ ] { com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createReplaceSelectedJavadocRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.processors.ReplaceTextCommentScanner ( com.android.icu4j.srcgen.Icu4jTransform.ORIGINAL_ICU_PACKAGE , com.android.icu4j.srcgen.Icu4jTransform.ANDROID_ICU_PACKAGE ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createHidePublicClassesRule ( ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createHideOriginalDeprecatedClassesRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.android.icu4j.srcgen.HideDraftProvisionalInternal ( ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createFixupBidiClassDocRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.processors.RemoveJavaDocTags ( "@stable" , "@draft" , "@provisional" , "@internal" , "@since" ) ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.android.icu4j.srcgen.ReplaceIcuTags ( ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createTranslateJciteInclusionRule ( ) } ; java.util.List < com.google.currysrc.api.process.Rule > rulesList = com.google.common.collect.Lists.newArrayList ( repackageRules ) ; rulesList.addAll ( java.util.Arrays.asList ( apiDocsRules ) ) ; return rulesList ; }
public boolean onPreferenceTreeClick ( android.preference.PreferenceScreen preferenceScreen , android.preference.Preference preference ) { if ( preference.getKey ( ) . equals ( com.android.phone.CdmaOptions.BUTTON_CDMA_ROAMING_KEY ) ) { return true ; } return false ; }
public java.util.Iterator < V > iterator ( ) { final java.util.Iterator < java.util.Map.Entry < K , V > > entryIterator = entrySet ( ) . iterator ( ) ; return new com.google.common.collect.UnmodifiableIterator < V > ( ) { @ java.lang.Override public boolean hasNext ( ) { return entryIterator.hasNext ( ) ; } @ java.lang.Override public V next ( ) { return entryIterator.next ( ) . getValue ( ) ; } } ; }
public void removeAuthority ( android.accounts.Account account , java.lang.String authority ) { synchronized ( mAuthorities ) { removeAuthorityLocked ( account , authority , true ) ; } }
private void setUncryptProgress ( final int progress ) { mHandler.post ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { if ( ( mProgressDialog ) != null ) { mProgressDialog.setProgress ( progress ) ; } } } ) ; }
public int interceptMotionBeforeQueueingWhenScreenOff ( int policyFlags ) { int result = 0 ; final boolean isWakeMotion = ( policyFlags & ( ( android.view.WindowManagerPolicy.FLAG_WAKE ) | ( android.view.WindowManagerPolicy.FLAG_WAKE_DROPPED ) ) ) != 0 ; if ( isWakeMotion ) { if ( ( ( mKeyguardMediator ) != null ) && ( mKeyguardMediator.isShowing ( ) ) ) { mKeyguardMediator.onWakeMotionWhenKeyguardShowingTq ( ) ; } else { result |= ACTION_POKE_USER_ACTIVITY ; } } return result ; }
public void trackingDisabled_unsolicitedResultsIgnored_withToken ( ) { configureTrackingDisabled ( ) ; mPackageStatusStorage.generateCheckToken ( com.android.server.timezone.PackageTrackerTest.INITIAL_APP_PACKAGE_VERSIONS ) ; mPackageTracker.start ( ) ; mFakeIntentHelper.assertReliabilityTriggeringDisabled ( ) ; mPackageTracker.recordCheckResult ( com.android.server.timezone.PackageTrackerTest.createArbitraryCheckToken ( ) , true ) ; mFakeIntentHelper.assertReliabilityTriggeringDisabled ( ) ; checkPackageStorageStatusIsInitialOrReset ( ) ; }
public void testFiveCount_L ( ) throws java.lang.Exception { java.util.TimeZone.setDefault ( java.util.TimeZone.getTimeZone ( "GMT" ) ) ; assertEquals ( "1" , formatDate ( java.util.Locale.ENGLISH , "L" ) ) ; assertEquals ( "01" , formatDate ( java.util.Locale.ENGLISH , "LL" ) ) ; assertEquals ( "Jan" , formatDate ( java.util.Locale.ENGLISH , "LLL" ) ) ; assertEquals ( "January" , formatDate ( java.util.Locale.ENGLISH , "LLLL" ) ) ; assertEquals ( "J" , formatDate ( java.util.Locale.ENGLISH , "LLLLL" ) ) ; }
public boolean processMessage ( android.os.Message msg ) { if ( ( super . processMessage ( msg ) ) == ( HANDLED ) ) { return HANDLED ; } switch ( msg.what ) { case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_WIRED_HEADSET : sendInternalMessage ( com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_HEADSET ) ; return HANDLED ; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_BLUETOOTH : return HANDLED ; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH : sendInternalMessage ( com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BASELINE_ROUTE ) ; mWasOnSpeaker = false ; return HANDLED ; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_WIRED_HEADSET : updateSystemAudioState ( ) ; return HANDLED ; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_DOCK : return HANDLED ; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_DOCK : return HANDLED ; default : return NOT_HANDLED ; } }
public final long long_literal ( ) throws org.jf.smali.RecognitionException { long value = 0 ; org.antlr.runtime.tree.CommonTree LONG_LITERAL210 = null ; try { { LONG_LITERAL210 = ( ( org.antlr.runtime.tree.CommonTree ) ( match ( input , org.jf.smali.smaliTreeWalker.LONG_LITERAL , org.jf.smali.smaliTreeWalker.FOLLOW_LONG_LITERAL_in_long_literal3510 ) ) ) ; value = org.jf.smali.LiteralTools.parseLong ( ( LONG_LITERAL210 != null ? LONG_LITERAL210.getText ( ) : null ) ) ; } } catch ( org.jf.smali.RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; } finally { } return value ; }
public void testEmbedded ( ) throws java.lang.Exception { java.io.File project = new java.io.File ( testDir , "embedded" ) ; runTasksOn ( project , BasePlugin.GRADLE_TEST_VERSION , "clean" , ":main:assembleRelease" ) ; java.io.File mainApk = new java.io.File ( project , ( ( "main/build/" + ( com.android.builder.model.AndroidProject.FD_OUTPUTS ) ) + "/apk/main-release-unsigned.apk" ) ) ; com.android.build.gradle.ManualBuildTest.checkJar ( mainApk , java.util.Collections.< java.lang.String , java.lang.String > singletonMap ( ( ( ( ( ( ( com.android.SdkConstants.FD_RES ) + '/' ) + ( com.android.SdkConstants.FD_RES_RAW ) ) + '/' ) + ( com.android.builder.core.BuilderConstants.ANDROID_WEAR_MICRO_APK ) ) + ( com.android.SdkConstants.DOT_ANDROID_PACKAGE ) ) , null ) ) ; }
public android.webkit.WebBackForwardList saveState ( final android.os.Bundle outState ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { android.webkit.WebBackForwardList ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < android.webkit.WebBackForwardList > ( ) { @ java.lang.Override public android.webkit.WebBackForwardList call ( ) { return saveState ( outState ) ; } } ) ; return ret ; } if ( outState == null ) return null ; if ( ! ( mAwContents.saveState ( outState ) ) ) return null ; return copyBackForwardList ( ) ; }
private com.android.rs.test.Int2 mode ( com.android.rs.test.RenderScript RS , final byte [ ] inputArray ) { long [ ] hsg = histogram ( RS , inputArray ) ; int modeIdx = 0 ; for ( int i = 1 ; i < ( hsg.length ) ; ++ i ) if ( ( hsg [ i ] ) > ( hsg [ modeIdx ] ) ) modeIdx = i ; return new com.android.rs.test.Int2 ( modeIdx , ( ( int ) ( hsg [ modeIdx ] ) ) ) ; }
public void selectionChanged ( ) { synchronized ( this ) { selectedNode = model.getSelection ( ) ; } doRedraw ( ) ; }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , byte [ ] data ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy2DRangeFromUnchecked" ) ; mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , data.length , Element.DataType.SIGNED_8 ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
private void filterStdErr ( java.lang.String line ) { if ( ( ( line.indexOf ( "emulator: device" ) ) != ( - 1 ) ) || ( ( line.indexOf ( "HAX is working" ) ) != ( - 1 ) ) ) { mMonitor.log ( "%1$s" , line ) ; return ; } mMonitor.logError ( "%1$s" , line ) ; }
public void testBroadcastAssociationSuccessfulEvent ( ) { mWifiMonitor.registerHandler ( com.android.server.wifi.WifiMonitorTest.WLAN_IFACE_NAME , WifiStateMachine.CMD_ASSOCIATED_BSSID , mHandlerSpy ) ; java.lang.String bssid = com.android.server.wifi.WifiMonitorTest.BSSID ; mWifiMonitor.broadcastAssociationSuccesfulEvent ( com.android.server.wifi.WifiMonitorTest.WLAN_IFACE_NAME , bssid ) ; mLooper.dispatchAll ( ) ; org.mockito.ArgumentCaptor < android.os.Message > messageCaptor = org.mockito.ArgumentCaptor.forClass ( android.os.Message.class ) ; org.mockito.Mockito.verify ( mHandlerSpy ) . handleMessage ( messageCaptor.capture ( ) ) ; org.junit.Assert.assertEquals ( WifiStateMachine.CMD_ASSOCIATED_BSSID , messageCaptor.getValue ( ) . what ) ; org.junit.Assert.assertEquals ( bssid , ( ( java.lang.String ) ( messageCaptor.getValue ( ) . obj ) ) ) ; }
private static long getLongAttribute ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation , @ com.android.annotations.NonNull java.lang.String name , long defaultValue ) { java.lang.Object value = annotation.getValue ( name ) ; if ( value instanceof java.lang.Number ) { return ( ( java.lang.Number ) ( value ) ) . longValue ( ) ; } return defaultValue ; }
public java.util.Map < java.lang.String , com.android.builder.model.AndroidProject > executeAndReturnMultiModel ( java.lang.String ... tasks ) { org.gradle.tooling.ProjectConnection connection = getProjectConnection ( ) ; try { executeBuild ( java.util.Collections.< java.lang.String > emptyList ( ) , connection , tasks ) ; return com.android.build.gradle.integration.common.fixture.GradleTestProject.buildModel ( connection ) ; } finally { connection.close ( ) ; } }
public void testUnsupportedCallbackException06 ( ) { tests.api.javax.security.auth.myCallback c = new tests.api.javax.security.auth.myCallback ( ) ; assertNotNull ( "Callback object is null" , c ) ; javax.security.auth.callback.UnsupportedCallbackException ucE ; for ( int i = 0 ; i < ( tests.api.javax.security.auth.UnsupportedCallbackExceptionTest.msgs.length ) ; i ++ ) { ucE = new javax.security.auth.callback.UnsupportedCallbackException ( c , tests.api.javax.security.auth.UnsupportedCallbackExceptionTest.msgs [ i ] ) ; assertEquals ( "getMessage() must return: " . concat ( tests.api.javax.security.auth.UnsupportedCallbackExceptionTest.msgs [ i ] ) , ucE.getMessage ( ) , tests.api.javax.security.auth.UnsupportedCallbackExceptionTest.msgs [ i ] ) ; assertEquals ( "Incorrect callback object was returned" , c , ucE.getCallback ( ) ) ; } }
private com.android.jack.ir.ast.JPackage getPackage ( @ javax.annotation.Nonnull java.lang.String [ ] splitClassOrInterfaceName ) { com.android.jack.ir.ast.JPackage currentPackage = topLevelPackage ; int packageLength = ( splitClassOrInterfaceName.length ) - 1 ; for ( int i = 0 ; i < packageLength ; i ++ ) { currentPackage = currentPackage.getOrCreateSubPackage ( splitClassOrInterfaceName [ i ] ) ; } return currentPackage ; }
protected void visitType ( int type , int index ) { if ( dex.typeNames ( ) . get ( index ) . equals ( Type.VOID.getDescriptor ( ) ) ) { constantValue = com.android.jack.dx.rop.cst.CstType.intern ( Type.VOID ) ; } else { constantValue = getCstTypeFromTypeIndex ( dex , index ) ; } }
public void autoConnect ( ) { if ( ( getState ( ) ) != ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) { errorLog ( "autoConnect() - BT is not ON. Exiting autoConnect" ) ; return ; } if ( ( isQuietModeEnabled ( ) ) == false ) { debugLog ( "autoConnect() - Initiate auto connection on BT on..." ) ; autoConnectHeadset ( ) ; autoConnectA2dp ( ) ; autoConnectA2dpSink ( ) ; } else { debugLog ( "autoConnect() - BT is in quiet mode. Not initiating auto connections" ) ; } }
public static void finalizeAllEnqueued ( ) throws java.lang.InterruptedException { java.lang.ref.FinalizerReference.Sentinel sentinel = new java.lang.ref.FinalizerReference.Sentinel ( ) ; java.lang.ref.FinalizerReference < java.lang.Object > reference = new java.lang.ref.FinalizerReference < java.lang.Object > ( null , java.lang.ref.FinalizerReference.queue ) ; reference.zombie = sentinel ; reference.enqueueInternal ( ) ; sentinel.awaitFinalization ( ) ; }
protected void visitField ( int type , int index ) { assert ( cstIndexMap ) != null ; if ( type == ( ValueType.VALUE_FIELD.getValue ( ) ) ) { constantValue = cstIndexMap.getCstFieldRef ( index ) ; } else { assert type == ( ValueType.VALUE_ENUM.getValue ( ) ) ; com.android.jack.dx.io.FieldId fieldId = dexBuffer.fieldIds ( ) . get ( index ) ; constantValue = new com.android.jack.dx.rop.cst.CstEnumRef ( cstIndexMap.getCstString ( fieldId.getNameIndex ( ) ) , cstIndexMap.getCstType ( fieldId.getTypeIndex ( ) ) ) ; } }
public final int update ( java.nio.ByteBuffer input , java.nio.ByteBuffer output ) throws javax.crypto.ShortBufferException { if ( ( ( mode ) != ( javax.crypto.Cipher.ENCRYPT_MODE ) ) && ( ( mode ) != ( javax.crypto.Cipher.DECRYPT_MODE ) ) ) { throw new java.lang.IllegalStateException ( ) ; } if ( input == output ) { throw new java.lang.IllegalArgumentException ( "input == output" ) ; } return spiImpl.engineUpdate ( input , output ) ; }
public void testAllocSpiSpiUnavaiableExeption ( ) throws java.lang.Exception { android.net.IpSecSpiResponse spiResp = new android.net.IpSecSpiResponse ( IpSecManager.Status.SPI_UNAVAILABLE , 0 , 0 ) ; org.mockito.Mockito.when ( mMockIpSecService.reserveSecurityParameterIndex ( org.mockito.Matchers.anyInt ( ) , org.mockito.Matchers.anyString ( ) , org.mockito.Matchers.anyInt ( ) , org.mockito.Matchers.anyObject ( ) ) ) . thenReturn ( spiResp ) ; try { mIpSecManager.reserveSecurityParameterIndex ( IpSecTransform.DIRECTION_OUT , android.net.IpSecManagerTest.GOOGLE_DNS_4 ) ; org.junit.Assert.fail ( "ResourceUnavailableException was not thrown" ) ; } catch ( android.net.IpSecManager e ) { } }
public java.util.Set < java.lang.String > getCarrierVvmPackageNames ( ) { com.android.dialer.common.Assert.checkArgument ( isValid ( ) ) ; java.util.Set < java.lang.String > names = com.android.voicemail.impl.OmtpVvmCarrierConfigHelper.getCarrierVvmPackageNames ( mCarrierConfig ) ; if ( names != null ) { return names ; } return com.android.voicemail.impl.OmtpVvmCarrierConfigHelper.getCarrierVvmPackageNames ( mTelephonyConfig ) ; }
public boolean deselect ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo canvasViewInfo ) { if ( canvasViewInfo == null ) { return false ; } for ( java.util.ListIterator < com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasSelection > it = mSelections.listIterator ( ) ; it.hasNext ( ) ; ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasSelection s = it.next ( ) ; if ( canvasViewInfo == ( s.getViewInfo ( ) ) ) { it.remove ( ) ; return true ; } } return false ; }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( ( ( ( "src/test/pkg/DetachedFromWindow.java:7: Warning: Overriding method should call super.onDetachedFromWindow [MissingSuperCall]\n" + " protected void onDetachedFromWindow() {\n" ) + " ^\n" ) + "src/test/pkg/DetachedFromWindow.java:26: Warning: Overriding method should call super.onDetachedFromWindow [MissingSuperCall]\n" ) + " protected void onDetachedFromWindow() {\n" ) + " ^\n" ) + "0 errors, 2 warnings\n" ) ) , lintProject ( ( "src/test/pkg/DetachedFromWindow.java.txt=>" + "src/test/pkg/DetachedFromWindow.java" ) ) ) ; }
private void appendHeader ( boolean isLibrary ) { if ( isLibrary ) { mBuildFile.append ( "apply plugin: \'android-library\'\n" ) ; } else { mBuildFile.append ( "apply plugin: \'android\'\n" ) ; } mBuildFile.append ( "\n" ) ; }
public void saveProperties ( java.util.Properties props ) { super . saveProperties ( props ) ; mVersion.saveProperties ( props ) ; props.setProperty ( PkgProps.SYS_IMG_ABI , mAbi ) ; }
public void perform ( android.support.test.espresso.UiController uiController , android.view.View view ) { android.support.v4.widget.DrawerLayout drawer = ( ( android.support.v4.widget.DrawerLayout ) ( view ) ) ; android.support.v4.widget.DrawerLayout.DrawerListener existingListener = android.support.test.espresso.contrib.DrawerActions.getDrawerListener ( drawer ) ; if ( existingListener instanceof android.support.test.espresso.contrib.DrawerActions.IdlingDrawerListener ) { android.support.test.espresso.Espresso.unregisterIdlingResources ( ( ( android.support.test.espresso.IdlingResource ) ( existingListener ) ) ) ; drawer.setDrawerListener ( ( ( android.support.test.espresso.contrib.DrawerActions.IdlingDrawerListener ) ( existingListener ) ) . parentListener ) ; } }
public void run ( ) { final int MAX_COUNT = 1 << 21 ; char [ ] longText = new char [ MAX_COUNT ] ; for ( int n = 0 ; n < MAX_COUNT ; n ++ ) { longText [ n ] = 'm' ; } mTextView = findTextView ( R.id.textview_text ) ; mTextView.setText ( new java.lang.String ( longText ) ) ; }
public void testSetWifiEnableWithoutPermission ( ) throws java.lang.Exception { doThrow ( new java.lang.SecurityException ( ) ) . when ( mContext ) . enforceCallingOrSelfPermission ( org.mockito.Matchers.eq ( android.Manifest.permission.CHANGE_WIFI_STATE ) , org.mockito.Matchers.eq ( "WifiService" ) ) ; mWifiServiceImpl.setWifiEnabled ( com.android.server.wifi.WifiServiceImplTest.TEST_PACKAGE_NAME , true ) ; }
static boolean isPhoneInEcm ( com.android.internal.telephony.Phone phone ) { if ( ( phone != null ) && ( com.android.internal.telephony.TelephonyCapabilities.supportsEcm ( phone ) ) ) { java.lang.String ecmMode = android.os.SystemProperties.get ( TelephonyProperties.PROPERTY_INECM_MODE ) ; if ( ecmMode != null ) { return ecmMode.equals ( "true" ) ; } } return false ; }
public org.bouncycastle.math.ec.ECFieldElement sqrt ( ) { throw new java.lang.RuntimeException ( "Not implemented" ) ; }
int findOffsetIndexForTimeInSeconds ( long seconds ) { int transition = java.util.Arrays.binarySearch ( mTransitions , seconds ) ; if ( transition < 0 ) { transition = ( ~ transition ) - 1 ; if ( transition < 0 ) { return - 1 ; } } return ( mTypes [ transition ] ) & 255 ; }
public static void establishZygoteConnectionForAbi ( java.lang.String abi ) { try { android.os.Process.openZygoteSocketIfNeeded ( abi ) ; } catch ( android.os.ZygoteStartFailedEx ex ) { throw new java.lang.RuntimeException ( ( "Unable to connect to zygote for abi: " + abi ) , ex ) ; } }
public java.util.SortedSet < java.lang.String > getLanguages ( ) { java.util.SortedSet < java.lang.String > set = new java.util.TreeSet < java.lang.String > ( ) ; java.util.Collection < java.util.List < com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder > > folderList = mFolderMap.values ( ) ; for ( java.util.List < com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder > folderSubList : folderList ) { for ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFolder folder : folderSubList ) { com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config = folder.getConfiguration ( ) ; com.android.ide.eclipse.adt.internal.resources.configurations.LanguageQualifier lang = config.getLanguageQualifier ( ) ; if ( lang != null ) { set.add ( lang.getShortDisplayValue ( ) ) ; } } } return set ; }
public void fileChanged ( org.eclipse.core.resources.IProject project , com.android.ide.eclipse.adt.internal.resources.manager.ResourceFile file , int eventType ) { if ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.IncludeFinder.sRefreshing ) { return ; } if ( ( eventType & ( ( ( ( org.eclipse.core.resources.IResourceDelta.CHANGED ) | ( org.eclipse.core.resources.IResourceDelta.ADDED ) ) | ( org.eclipse.core.resources.IResourceDelta.REMOVED ) ) | ( org.eclipse.core.resources.IResourceDelta.CONTENT ) ) ) == 0 ) { return ; } com.android.ide.eclipse.adt.internal.editors.layout.gle2.IncludeFinder finder = com.android.ide.eclipse.adt.internal.editors.layout.gle2.IncludeFinder.get ( project ) ; if ( finder != null ) { if ( finder.updateFileIncludes ( file , true ) ) { finder.saveSettings ( ) ; } } }
private com.android.ims.internal.IImsMMTelFeature createMMTelFeatureInternal ( int slotId , com.android.ims.internal.IImsFeatureStatusCallback c ) { android.telephony.ims.feature.MMTelFeature f = onCreateMMTelImsFeature ( slotId ) ; if ( f != null ) { setupFeature ( f , slotId , ImsFeature.MMTEL , c ) ; return f.getBinder ( ) ; } else { return null ; } }
public void onSdkLoaded ( ) { com.android.sdklib.IAndroidTarget target = getRenderingTarget ( ) ; if ( target != null ) { mConfigComposite.onSdkLoaded ( target ) ; mConfigListener.onConfigurationChange ( ) ; } }
public void validateCertCredentialWithoutClientCertChain ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential ( ) ; cred.realm = "realm" ; cred.certCredential = new android.net.wifi.hotspot2.pps.Credential.CertificateCredential ( ) ; cred.certCredential.certType = "x509v3" ; cred.certCredential.certSha256FingerPrint = java.security.MessageDigest.getInstance ( "SHA-256" ) . digest ( FakeKeys.CLIENT_CERT.getEncoded ( ) ) ; cred.caCertificate = android.net.wifi.FakeKeys.CA_CERT0 ; cred.clientPrivateKey = android.net.wifi.FakeKeys.RSA_KEY1 ; org.junit.Assert.assertFalse ( cred.validate ( ) ) ; }
public void clearCache ( final boolean includeDiskFiles ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { clearCache ( includeDiskFiles ) ; } } ) ; return ; } mAwContents.clearCache ( includeDiskFiles ) ; }
public void testBuildConfigFieldMerge ( ) { com.android.builder.model.ProductFlavor productFlavor = mCustom.mergeOver ( mCustom2 ) ; java.util.Map < java.lang.String , com.android.builder.model.ClassField > buildConfigFields = productFlavor.getBuildConfigFields ( ) ; assertEquals ( 3 , buildConfigFields.size ( ) ) ; assertEquals ( "oneValue" , buildConfigFields.get ( "one" ) . getValue ( ) ) ; assertEquals ( "twoValue" , buildConfigFields.get ( "two" ) . getValue ( ) ) ; assertEquals ( "threeValue" , buildConfigFields.get ( "three" ) . getValue ( ) ) ; }
public void setLocalRepository ( @ org.jetbrains.annotations.Nullable final java.lang.String overridenLocalRepository ) { if ( overridenLocalRepository == null ) return ; if ( ! ( com.intellij.openapi.util.Comparing.equal ( this . overriddenLocalRepository , overridenLocalRepository ) ) ) { this . overriddenLocalRepository = overridenLocalRepository ; changed ( ) ; } }
void setAudioRoute ( java.lang.String callId , int audioRoute ) { android.telecom.Log.v ( this , "setAudioRoute: %s %s" , callId , android.telecom.CallAudioState.audioRouteToString ( audioRoute ) ) ; for ( com.android.internal.telecom.IConnectionServiceAdapter adapter : mAdapters ) { try { adapter.setAudioRoute ( callId , audioRoute , android.telecom.Log.getExternalSession ( ) ) ; } catch ( android.os.RemoteException ignored ) { } } }
public void testWrongSeparator2 ( ) throws java.lang.Exception { mScopes = null ; assertEquals ( ( "AndroidManifest.xml:14: Error: Class referenced in the manifest, test.pkg.Foo.Bar, was not found in the project or the libraries [MissingRegistered]\n" + ( ( ( ( ( " <activity\n" + " ^\n" ) + "AndroidManifest.xml:15: Warning: Use \'$\' instead of \'.\' for inner classes (or use only lowercase letters in package names) [InnerclassSeparator]\n" ) + " android:name=\".Foo.Bar\"\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "1 errors, 1 warnings\n" ) ) , lintProject ( "registration/AndroidManifestWrong2.xml=>AndroidManifest.xml" , "bytecode/.classpath=>.classpath" , "apicheck/ApiCallTest.class.data=>bin/classes/foo/bar/ApiCallTest.class" , "registration/Bar.java.txt=>src/test/pkg/Foo/Bar.java" ) ) ; }
private void printHashMap ( ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailAdapter.printHashMap" , "hashMapSize: %d, currentlyExpandedViewHolderId:%d" , newVoicemailViewHolderArrayMap.size ( ) , currentlyExpandedViewHolderId ) ; if ( ! ( newVoicemailViewHolderArrayMap.isEmpty ( ) ) ) { java.lang.String ids = "" ; for ( int id : newVoicemailViewHolderArrayMap.keySet ( ) ) { ids = ( id + ( java.lang.String.valueOf ( id ) ) ) + " " ; } com.android.dialer.common.LogUtil.i ( "NewVoicemailAdapter.printHashMap" , ( "ids are " + ids ) ) ; } }
private void rejectCallAndLog ( com.android.server.telecom.Call incomingCall ) { incomingCall.reject ( false , null ) ; mCallLogManager.logCall ( incomingCall , Calls.MISSED_TYPE , true ) ; }
private void markStackProducers ( proguard.optimize.evaluation.Clazz clazz , int consumerOffset , proguard.optimize.evaluation.Instruction consumer ) { proguard.optimize.evaluation.TracedStack tracedStack = partialEvaluator.getStackBefore ( consumerOffset ) ; int stackSize = tracedStack.size ( ) ; int popCount = consumer.stackPopCount ( clazz ) ; for ( int stackIndex = stackSize - popCount ; stackIndex < stackSize ; stackIndex ++ ) { markStackEntryProducers ( consumerOffset , stackIndex ) ; } }
void setInternetAccessState ( boolean enabled ) { com.android.server.wifi.WifiConfiguration config = getCurrentWifiConfiguration ( ) ; if ( config != null ) { config.noInternetAccess = enabled ; } }
public void testToXmlAttributeValue ( ) throws java.lang.Exception { assertEquals ( "" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.toXmlAttributeValue ( "" ) ) ; assertEquals ( "foo" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.toXmlAttributeValue ( "foo" ) ) ; assertEquals ( "foo<bar" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.toXmlAttributeValue ( "foo<bar" ) ) ; assertEquals ( "&quot;" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.toXmlAttributeValue ( "\"" ) ) ; assertEquals ( "&apos;" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.toXmlAttributeValue ( "'" ) ) ; assertEquals ( "foo&quot;b&apos;&apos;ar" , com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.toXmlAttributeValue ( "foo\"b\'\'ar" ) ) ; }
public void calculateAndReportScoreSucceeds ( ) throws java.lang.Exception { int aggressiveHandover = 0 ; mWifiInfo.setRssi ( ( - 77 ) ) ; mWifiScoreReport.calculateAndReportScore ( mWifiInfo , mNetworkAgent , aggressiveHandover , mWifiMetrics ) ; org.mockito.Mockito.verify ( mNetworkAgent ) . sendNetworkScore ( org.mockito.Mockito.anyInt ( ) ) ; org.mockito.Mockito.verify ( mWifiMetrics ) . incrementWifiScoreCount ( org.mockito.Mockito.anyInt ( ) ) ; }
public boolean process ( java.io.File outputFile , java.io.File mainFile , java.io.File [ ] libraryFiles ) { org.w3c.dom.Document mainDoc = com.android.manifmerger.XmlUtils.parseDocument ( mainFile , mLog ) ; if ( mainDoc == null ) { return false ; } boolean success = process ( mainDoc , libraryFiles ) ; if ( ! ( com.android.manifmerger.XmlUtils.printXmlFile ( mainDoc , outputFile , mLog ) ) ) { success = false ; } return success ; }
private void broadcastDefaultSmsSubIdChanged ( int subId ) { if ( com.android.internal.telephony.SubscriptionController.DBG ) logdl ( ( "[broadcastDefaultSmsSubIdChanged] subId=" + subId ) ) ; android.content.Intent intent = new android.content.Intent ( TelephonyIntents.ACTION_DEFAULT_SMS_SUBSCRIPTION_CHANGED ) ; intent.addFlags ( Intent.FLAG_RECEIVER_REPLACE_PENDING ) ; intent.putExtra ( PhoneConstants.SUBSCRIPTION_KEY , subId ) ; mContext.sendStickyBroadcastAsUser ( intent , UserHandle.ALL ) ; }
public com.android.tv.menu.ItemListRowView.ItemListAdapter.MyViewHolder onCreateViewHolder ( android.view.ViewGroup parent , int viewType ) { android.view.View view = mLayoutInflater.inflate ( getLayoutResId ( viewType ) , parent , false ) ; return new com.android.tv.menu.ItemListRowView.ItemListAdapter.MyViewHolder ( view ) ; }
public void startLockTaskModeOnCurrent ( ) throws android.os.RemoteException { enforceCallingPermission ( android.Manifest.permission.MANAGE_ACTIVITY_STACKS , "startLockTaskModeOnCurrent" ) ; long ident = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( this ) { com.android.server.am.ActivityRecord r = mStackSupervisor.topRunningActivityLocked ( ) ; if ( r != null ) { startLockTaskModeLocked ( r.task ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } }
private void onServiceBound ( com.android.internal.telecom.ICallScreeningService service ) { mService = service ; try { mService.screenCall ( new com.android.server.telecom.callfiltering.CallScreeningServiceFilter.CallScreeningAdapter ( ) , mParcelableCallUtilsConverter.toParcelableCall ( mCall , false , mPhoneAccountRegistrar ) ) ; } catch ( android.os.RemoteException e ) { com.android.server.telecom.Log.e ( this , e , "Failed to set the call screening adapter." ) ; finishCallScreening ( ) ; } }
private java.util.ArrayList < android.hardware.Camera.Size > splitSize ( java.lang.String str ) { if ( str == null ) return null ; java.util.StringTokenizer tokenizer = new java.util.StringTokenizer ( str , "," ) ; java.util.ArrayList < android.hardware.Camera.Size > sizeList = new java.util.ArrayList < android.hardware.Camera.Size > ( ) ; while ( tokenizer.hasMoreElements ( ) ) { android.hardware.Camera.Size size = strToSize ( tokenizer.nextToken ( ) ) ; if ( size != null ) sizeList.add ( size ) ; } if ( ( sizeList.size ( ) ) == 0 ) return null ; return sizeList ; }
protected void onStop ( ) { super . onStop ( ) ; com.android.mms.util.DraftCache.getInstance ( ) . removeOnDraftChangedListener ( this ) ; getListView ( ) . setChoiceMode ( ListView.CHOICE_MODE_MULTIPLE_MODAL ) ; android.database.Cursor cursor = mListAdapter.getCursor ( ) ; if ( ( cursor != null ) && ( ! ( cursor.isClosed ( ) ) ) ) { cursor.close ( ) ; } mListAdapter.changeCursor ( null ) ; }
public void test_handshake_failsWithInvalidSCT ( ) throws java.lang.Exception { org.conscrypt.OpenSSLSocketImplTest.TestConnection connection = new org.conscrypt.OpenSSLSocketImplTest.TestConnection ( new java.security.cert.X509Certificate [ ] { cert , ca } , certKey , true ) ; connection.clientHooks.ctVerificationEnabled = true ; connection.serverHooks.sctTLSExtension = org.conscrypt.TestUtils.readTestFile ( "ct-signed-timestamp-list-invalid" ) ; try { connection.doHandshake ( ) ; fail ( "SSLHandshakeException not thrown" ) ; } catch ( java.util.concurrent.ExecutionException e ) { assertEquals ( javax.net.ssl.SSLHandshakeException.class , e.getCause ( ) . getClass ( ) ) ; assertEquals ( java.security.cert.CertificateException.class , e.getCause ( ) . getCause ( ) . getClass ( ) ) ; } }
public java.lang.String getLongDescription ( ) { java.lang.String s = mLongDescription ; if ( ( s != null ) && ( ( s.length ( ) ) != 0 ) ) { return s ; } s = getDescription ( ) ; if ( ( s != null ) && ( ( s.length ( ) ) != 0 ) ) { return s ; } return getShortDescription ( ) ; }
public void setKeepUninstalledPackages ( @ android.annotation.NonNull android.content.ComponentName admin , @ android.annotation.NonNull java.util.List < java.lang.String > packageNames ) { throwIfParentInstance ( "setKeepUninstalledPackages" ) ; if ( ( mService ) != null ) { try { mService.setKeepUninstalledPackages ( admin , packageNames ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } }
protected void doRevert ( java.io.File toFile , java.io.File backupFile ) throws java.io.IOException { if ( ( ! ( toFile.exists ( ) ) ) || ( isModified ( toFile ) ) ) { com.intellij.updater.Utils.delete ( toFile ) ; com.intellij.updater.Utils.copy ( backupFile , toFile ) ; } }
public void testManifestPlaceholdersMerge ( ) { com.android.builder.model.ProductFlavor productFlavor = mCustom.mergeOver ( mCustom2 ) ; java.util.Map < java.lang.String , java.lang.String > manifestPlaceholders = productFlavor.getManifestPlaceholders ( ) ; assertEquals ( 3 , manifestPlaceholders.size ( ) ) ; assertEquals ( "oneValue" , manifestPlaceholders.get ( "one" ) ) ; assertEquals ( "twoValue" , manifestPlaceholders.get ( "two" ) ) ; assertEquals ( "threeValue" , manifestPlaceholders.get ( "three" ) ) ; }
public boolean updateNetworkAfterDisconnect ( int networkId ) { if ( mVerboseLoggingEnabled ) { android.util.Log.v ( com.android.server.wifi.WifiConfigManagerNew.TAG , ( "Update network after disconnect for " + networkId ) ) ; } android.net.wifi.WifiConfiguration config = getInternalConfiguredNetwork ( networkId ) ; if ( config == null ) { return false ; } config.lastDisconnected = mClock.getWallClockMillis ( ) ; if ( ( config.status ) == ( WifiConfiguration.Status.CURRENT ) ) { setNetworkStatus ( config , WifiConfiguration.Status.ENABLED ) ; } return true ; }
public void testInterfaceCountersUdp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_UDP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , false , 1000 , false ) ; }
public void onUserRestrictionsChanged ( int userId , android.os.Bundle newRestrictions , android.os.Bundle prevRestrictions ) { final boolean bluetoothDisallowed = newRestrictions.getBoolean ( UserManager.DISALLOW_BLUETOOTH ) ; if ( ( ( mEnable ) || ( mEnableExternal ) ) && bluetoothDisallowed ) { disable ( true ) ; } }
protected static void addSourceLevel ( @ javax.annotation.Nonnull com.android.jack.test.toolchain.SourceLevel level , @ javax.annotation.Nonnull java.util.List < java.lang.String > args ) { args.add ( "-source" ) ; switch ( level ) { case JAVA_6 : args.add ( "1.6" ) ; break ; case JAVA_7 : args.add ( "1.7" ) ; break ; case JAVA_8 : args.add ( "1.8" ) ; break ; default : throw new java.lang.AssertionError ( ( ( "Unkown level: '" + ( level.toString ( ) ) ) + "'" ) ) ; } }
public com.google.common.collect.ImmutableMultimap.Builder < K , V > putAll ( K key , java.lang.Iterable < ? extends V > values ) { java.util.Collection < V > valueList = builderMultimap.get ( com.google.common.base.Preconditions.checkNotNull ( key ) ) ; for ( V value : values ) { valueList.add ( com.google.common.base.Preconditions.checkNotNull ( value ) ) ; } return this ; }
public int getState ( ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "getState = " + ( mService.getState ( ) ) ) ) ; com.android.bluetooth.pbap.BluetoothPbapService service = getService ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM ) ; if ( service == null ) return android.bluetooth.BluetoothPbap.STATE_DISCONNECTED ; return service.getState ( ) ; }
public byte [ ] addCustomExtension ( int ext_type ) { return new byte [ 0 ] ; }
private java.util.Properties readInfo ( java.io.File info ) { if ( info.exists ( ) ) { java.util.Properties props = new java.util.Properties ( ) ; java.io.InputStream is = null ; try { is = new java.io.FileInputStream ( info ) ; props.load ( is ) ; return props ; } catch ( java.io.IOException ignore ) { } finally { if ( is != null ) { try { is.close ( ) ; } catch ( java.io.IOException ignore ) { } } } } return null ; }
public void testPinEntryNull ( ) throws java.lang.Exception { java.lang.String entry = null ; try { new org.conscrypt.PinListEntry ( entry , new org.conscrypt.TrustedCertificateStore ( ) ) ; fail ( "Accepted a basically wholly bogus entry." ) ; } catch ( java.lang.NullPointerException expected ) { } }
public void handleCreateConnectionComplete ( java.lang.String callId , android.telecom.ConnectionRequest request , android.telecom.ParcelableConnection connection ) { com.android.server.telecom.Log.startSession ( "CSW.hCCC" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { logIncoming ( "handleCreateConnectionComplete %s" , callId ) ; this . handleCreateConnectionComplete ( callId , request , connection ) ; } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; com.android.server.telecom.Log.endSession ( ) ; } }
public < T > T [ ] toArray ( T [ ] other ) { if ( ( other.length ) < ( size ) ) { other = com.google.common.collect.ObjectArrays.newArray ( other , size ) ; } else if ( ( other.length ) > ( size ) ) { other [ size ] = null ; } java.lang.System.arraycopy ( array , offset , other , 0 , size ) ; return other ; }
public void visitAnySwitchInstruction ( proguard.classfile.editor.Clazz clazz , proguard.classfile.editor.Method method , proguard.classfile.editor.CodeAttribute codeAttribute , int offset , proguard.classfile.editor.SwitchInstruction switchInstruction ) { switchInstruction.defaultOffset = newBranchOffset ( offset , switchInstruction.defaultOffset ) ; updateJumpOffsets ( offset , switchInstruction.jumpOffsets ) ; }
public void dispose ( ) throws android.telephony.mbms.MbmsException { try { mService.disposeStream ( mAppName , mSubscriptionId , mServiceInfo.getServiceId ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.telephony.mbms.StreamingService.LOG_TAG , ( "Caught remote exception calling disposeStream: " + e ) ) ; throw new android.telephony.mbms.MbmsException ( MbmsException.ERROR_UNKNOWN_REMOTE_EXCEPTION ) ; } }
public static java.lang.String getAndroidName ( int api ) { java.lang.String codeName = com.android.sdklib.SdkVersionInfo.getCodeName ( api ) ; return codeName == null ? java.lang.String.format ( "API %1$d: Android %2$s" , api , com.android.sdklib.SdkVersionInfo.getVersionString ( api ) ) : java.lang.String.format ( "API %1$d: Android %2$s (%3$s)" , api , com.android.sdklib.SdkVersionInfo.getVersionString ( api ) , codeName ) ; }
public void testSendSms ( ) { doReturn ( mServiceState ) . when ( mPhone ) . getServiceState ( ) ; mCdmaSmsDispatcher.sendSms ( mSmsTracker ) ; verify ( mSimulatedCommandsVerifier ) . sendCdmaSms ( any ( byte [ ] . class ) , any ( android.os.Message.class ) ) ; }
public void test_Inserted_Entry_Manifest_with_DigestCode ( ) throws java.io.IOException { java.lang.String modifiedJarName = "Inserted_Entry_Manifest_with_DigestCode.jar" ; tests.support.resource.Support_Resources.copyFile ( resources , null , modifiedJarName ) ; java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( new java.io.File ( resources , modifiedJarName ) , true ) ; java.util.Enumeration < java.util.jar.JarEntry > entries = jarFile.entries ( ) ; int count = 0 ; while ( entries.hasMoreElements ( ) ) { java.util.zip.ZipEntry zipEntry = entries.nextElement ( ) ; jarFile.getInputStream ( zipEntry ) ; count ++ ; } assertEquals ( 5 , count ) ; }
public java.lang.String performSanityCheck ( com.intellij.openapi.project.Project project , java.lang.String cloudProjectId ) { com.google.api.services.storage.model.Buckets buckets = null ; java.lang.String message = null ; try { com.google.api.services.storage.Storage.Buckets.List listBuckets = com.google.gct.testing.launcher.CloudAuthenticator.getStorage ( ) . buckets ( ) . list ( cloudProjectId ) ; buckets = listBuckets.execute ( ) ; } catch ( java.lang.Throwable t ) { message = t.getMessage ( ) ; } finally { if ( buckets == null ) { return "Failed to authorize to Google Cloud project, message= " + message ; } } return null ; }
public void run ( ) { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create ( mCtx ) ; pRS.setMessageHandler ( mRsMessage ) ; com.android.rs.test.ScriptC_refcount s = new com.android.rs.test.ScriptC_refcount ( pRS ) ; initializeGlobals ( pRS , s ) ; s.invoke_refcount_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
public void controlResized ( org.eclipse.swt.events.ControlEvent e ) { org.eclipse.swt.graphics.Rectangle r = scrolledComposite.getClientArea ( ) ; org.eclipse.swt.widgets.Control content = scrolledComposite.getContent ( ) ; if ( ( content != null ) && ( r != null ) ) { org.eclipse.swt.graphics.Point minSize = content.computeSize ( r.width , SWT.DEFAULT ) ; scrolledComposite.setMinSize ( minSize ) ; } }
private void notifySelectionChanged ( com.android.ddmlib.IDevice device , com.android.hierarchyviewerlib.device.Window window ) { com.android.hierarchyviewerlib.models.DeviceSelectionModel.WindowChangeListener [ ] listeners = getWindowChangeListenerList ( ) ; if ( listeners != null ) { for ( int i = 0 ; i < ( listeners.length ) ; i ++ ) { listeners [ i ] . selectionChanged ( device , window ) ; } } }
private void checkResourceContent ( @ javax.annotation.Nonnull com.android.sched.vfs.InputVFile candidateFile , @ javax.annotation.Nonnull java.io.File referenceFile ) throws java.io.IOException { java.io.BufferedReader candidateReader = null ; java.io.BufferedReader referenceReader = null ; try { candidateReader = new java.io.BufferedReader ( new java.io.InputStreamReader ( candidateFile.getInputStream ( ) ) ) ; referenceReader = new java.io.BufferedReader ( new java.io.InputStreamReader ( new java.io.FileInputStream ( referenceFile ) ) ) ; compareReadLines ( referenceReader , candidateReader ) ; } finally { if ( candidateReader != null ) { candidateReader.close ( ) ; } if ( referenceReader != null ) { referenceReader.close ( ) ; } } }
java.lang.Integer connIdByAddress ( int id , java.lang.String address ) { com.android.bluetooth.gatt.ContextMap < T > . App entry = getById ( id ) ; if ( entry == null ) return null ; java.util.Iterator < com.android.bluetooth.gatt.ContextMap < T > . Connection > i = mConnections.iterator ( ) ; while ( i.hasNext ( ) ) { com.android.bluetooth.gatt.ContextMap < T > . Connection connection = i.next ( ) ; if ( ( connection.address.equals ( address ) ) && ( ( connection.appId ) == id ) ) return connection.connId ; } return null ; }
private static void addOptionalDirection ( java.util.EnumMap < com.ibm.icu.text.RelativeDateTimeFormatter.Direction , java.lang.String > unitStrings , com.ibm.icu.text.RelativeDateTimeFormatter.Direction direction , com.ibm.icu.impl.ICUResourceBundle bundle , java.lang.String key ) { java.lang.String s = bundle.findStringWithFallback ( key ) ; if ( s != null ) { unitStrings.put ( direction , s ) ; } }
private int convertPlayStateToPlayStatus ( android.media.session.PlaybackState state ) { int playStatus = com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_ERROR ; switch ( state.getState ( ) ) { case android.media.session.PlaybackState.STATE_PLAYING : case android.media.session.PlaybackState.STATE_BUFFERING : playStatus = com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_PLAYING ; break ; case android.media.session.PlaybackState.STATE_STOPPED : case android.media.session.PlaybackState.STATE_NONE : playStatus = com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_STOPPED ; break ; case android.media.session.PlaybackState.STATE_PAUSED : playStatus = com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_PAUSED ; break ; case android.media.session.PlaybackState.STATE_FAST_FORWARDING : case android.media.session.PlaybackState.STATE_SKIPPING_TO_NEXT : case android.media.session.PlaybackState.STATE_SKIPPING_TO_QUEUE_ITEM : playStatus = com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_FWD_SEEK ; break ; case android.media.session.PlaybackState.STATE_REWINDING : case android.media.session.PlaybackState.STATE_SKIPPING_TO_PREVIOUS : playStatus = com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_REV_SEEK ; break ; case android.media.session.PlaybackState.STATE_ERROR : playStatus = com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_ERROR ; break ; } return playStatus ; }
private static void setAppState ( android.content.Context context , boolean install ) { if ( context == null ) { return ; } android.content.pm.PackageManager pm = context.getPackageManager ( ) ; if ( pm == null ) { return ; } android.content.ComponentName cName = new android.content.ComponentName ( "com.android.stk" , "com.android.stk.StkLauncherActivity" ) ; int state = ( install ) ? android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_ENABLED : android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_DISABLED ; try { pm.setComponentEnabledSetting ( cName , state , PackageManager.DONT_KILL_APP ) ; } catch ( java.lang.Exception e ) { com.android.internal.telephony.gsm.stk.StkLog.d ( "StkAppInstaller" , "Could not change STK app state" ) ; } }
public void testSubjectAltNameAndCn ( ) { assertFalse ( verifyWithServerCertificate ( "imap.g.com" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , "a.y.com" ) ) ) ; assertFalse ( verifyWithServerCertificate ( "imap.g.com" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "cn=imap.g.com" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , "a.y.com" ) ) ) ; assertTrue ( verifyWithServerCertificate ( "imap.g.com" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , "imap.g.com" ) ) ) ; }
private void disconnectAll ( ) { for ( com.android.bluetooth.hfpclient.connserv.HfpClientConnection connection : mConnections.values ( ) ) { connection.onHfpDisconnected ( ) ; } if ( ( mConference ) != null ) { mConference.destroy ( ) ; mConference = null ; } }
private void buildAssignVariableRef ( @ javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec destReg , @ javax.annotation.Nonnull com.android.jack.ir.ast.JVariableRef vRef , @ javax.annotation.Nonnull com.android.jack.dx.rop.code.SourcePosition sourcePosition ) { com.android.jack.dx.rop.code.RegisterSpec valueReg = ropReg.getRegisterSpec ( vRef ) ; com.android.jack.dx.rop.code.RegisterSpecList sources = com.android.jack.dx.rop.code.RegisterSpecList.make ( valueReg ) ; addInstruction ( new com.android.jack.dx.rop.code.PlainInsn ( com.android.jack.dx.rop.code.Rops.opMove ( valueReg.getTypeBearer ( ) ) , sourcePosition , destReg , sources ) ) ; }
public void sampleAllocation ( int count , java.lang.String desc , java.lang.Object newObj , long size ) { try { com.android.sched.util.log.Tracer tracer = com.android.sched.util.log.TracerFactory.getTracer ( ) ; if ( tracer.isTracing ( ) ) { com.android.sched.util.log.tracer.probe.HeapAllocationProbe.ThreadLocalCounting tlc = com.android.sched.util.log.tracer.probe.HeapAllocationProbe.alloc.get ( ) ; ( tlc.count ) ++ ; tlc.size += size ; tracer.registerObject ( newObj , size , count ) ; } } catch ( com.android.sched.util.config.ConfigurationError e ) { } }
public void testCreateFeatureWithNoPermissions ( ) throws android.os.RemoteException { org.mockito.Mockito.doThrow ( new java.lang.SecurityException ( ) ) . when ( mMockContext ) . enforceCallingOrSelfPermission ( org.mockito.Matchers.eq ( android.Manifest.permission.MODIFY_PHONE_STATE ) , org.mockito.Matchers.anyString ( ) ) ; try { mTestImsServiceBinder.createImsFeature ( android.telephony.ims.ImsServiceTest.TEST_SLOT_0 , ImsFeature.MMTEL , mTestCallback ) ; junit.framework.Assert.fail ( ) ; } catch ( java.lang.SecurityException e ) { } }
public void enter ( ) { log ( ( "Enter Disconnected: " + ( getCurrentMessage ( ) . what ) ) ) ; }
private void syncClirSetting ( ) { android.content.SharedPreferences sp = android.preference.PreferenceManager.getDefaultSharedPreferences ( getContext ( ) ) ; int clirSetting = sp.getInt ( ( ( CLIR_KEY ) + ( getPhoneId ( ) ) ) , ( - 1 ) ) ; if ( clirSetting >= 0 ) { mCi.setCLIR ( clirSetting , null ) ; } }
public void runCmdLine ( java.lang.String [ ] command ) throws java.io.IOException , java.lang.InterruptedException { java.lang.Process process = java.lang.Runtime.getRuntime ( ) . exec ( command ) ; if ( ( grabProcessOutput ( process ) ) != 0 ) { throw new java.lang.RuntimeException ( java.lang.String.format ( "running %s failed. see output" , command [ 0 ] ) ) ; } }
public com.google.common.base.CharMatcher precomputed ( ) { return this ; }
private static boolean matches ( java.lang.String regexp , java.lang.String str ) { java.util.regex.Pattern pattern = ( ( java.util.regex.Pattern ) ( javax.crypto.Cipher.Transform.patternCache.get ( regexp ) ) ) ; if ( pattern == null ) { pattern = java.util.regex.Pattern.compile ( regexp ) ; javax.crypto.Cipher.Transform.patternCache.putIfAbsent ( regexp , pattern ) ; } return pattern.matcher ( str.toUpperCase ( java.util.Locale.ENGLISH ) ) . matches ( ) ; }
public java.lang.String loadValue ( java.lang.String key ) { java.lang.String value = mWifiNative.getNetworkVariable ( mNetId , key ) ; if ( ! ( android.text.TextUtils.isEmpty ( value ) ) ) { if ( ! ( enterpriseConfigKeyShouldBeQuoted ( key ) ) ) { value = com.android.server.wifi.WifiSupplicantControl.removeDoubleQuotes ( value ) ; } return value ; } else { return null ; } }
private int getNextDebuggerPort ( ) { synchronized ( mDebuggerPorts ) { if ( ( mDebuggerPorts.size ( ) ) > 0 ) { int port = mDebuggerPorts.get ( 0 ) ; mDebuggerPorts.remove ( 0 ) ; if ( ( mDebuggerPorts.size ( ) ) == 0 ) { mDebuggerPorts.add ( ( port + 1 ) ) ; } return port ; } } return - 1 ; }
public void applyDeviceVolume ( int device ) { int index ; if ( isMuted ( ) ) { index = 0 ; } else if ( ( ( device & ( AudioSystem.DEVICE_OUT_ALL_A2DP ) ) != 0 ) && ( mAvrcpAbsVolSupported ) ) { index = ( ( mIndexMax ) + 5 ) / 10 ; } else { index = ( ( getIndex ( device ) ) + 5 ) / 10 ; } android.media.AudioSystem.setStreamVolumeIndex ( mStreamType , index , device ) ; }
void startCoreServices ( ) { debugLog ( "startCoreServices()" ) ; java.lang.Class [ ] supportedProfileServices = com.android.bluetooth.btservice.Config.getSupportedProfiles ( ) ; setAllProfileServiceStates ( supportedProfileServices , BluetoothAdapter.STATE_ON ) ; }
public void testMisMatchedCallStack ( ) { com.android.tools.perflib.vmtrace.CallStackReconstructor reconstructor = new com.android.tools.perflib.vmtrace.CallStackReconstructor ( ) ; reconstructor.addTraceAction ( 3 , TraceAction.METHOD_EXIT , 1 , 1 ) ; reconstructor.addTraceAction ( 2 , TraceAction.METHOD_EXIT , 2 , 2 ) ; reconstructor.addTraceAction ( 1 , TraceAction.METHOD_EXIT , 3 , 3 ) ; java.lang.String callStack = getCallStackInfo ( reconstructor.getTopLevelCallees ( ) ) ; assertEquals ( " -> 1 -> 2 -> 3" , callStack ) ; }
public static long getUidTxBytes ( int uid ) { final int callingUid = android.net.android.os.Process.myUid ( ) ; if ( ( callingUid == android.net.android.os.Process ) || ( callingUid == uid ) ) { return android.net.TrafficStats.nativeGetUidStat ( uid , android.net.TrafficStats.TYPE_TX_BYTES ) ; } else { return android.net.TrafficStats.UNSUPPORTED ; } }
private static com.android.chimpchat.core.IChimpBackend createBackendByName ( java.lang.String backendName ) { if ( "adb" . equals ( backendName ) ) { if ( ( com.android.chimpchat.ChimpChat.sAdbLocation ) == null ) { return new com.android.chimpchat.adb.AdbBackend ( ) ; } else { return new com.android.chimpchat.adb.AdbBackend ( com.android.chimpchat.ChimpChat.sAdbLocation ) ; } } else { return null ; } }
public static void w ( java.lang.Object objectPrefix , java.lang.String format , java.lang.Object ... args ) { if ( android.telecom.Log.WARN ) { android.util.Log.w ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( android.telecom.Log.getPrefixFromObject ( objectPrefix ) , format , args ) ) ; } }
public void dup2_x1 ( ) { super . dup2_x1 ( ) ; producerPop ( ) ; producerPop ( ) ; producerPop ( ) ; producerPush ( ) ; producerPush ( ) ; producerPush ( ) ; producerPush ( ) ; producerPush ( ) ; }
private void run ( @ javax.annotation.Nonnull com.android.jack.test.runtime.RuntimeTestInfo rti ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( rti ) . addProperty ( Options.ANDROID_MIN_API_LEVEL.getName ( ) , java.lang.String.valueOf ( AndroidCompatibilityChecker.N_API_LEVEL ) ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain.class ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JackApiV01.class ) . compileAndRunTest ( ) ; }
public void testConnectWithConfig ( ) { android.net.wifi.aware.ConfigRequest configRequest = new android.net.wifi.aware.ConfigRequest.Builder ( ) . setMasterPreference ( 55 ) . build ( ) ; java.lang.String callingPackage = "com.google.somePackage" ; mDut.connect ( mBinderMock , callingPackage , mCallbackMock , configRequest , false ) ; org.mockito.Mockito.verify ( mAwareStateManagerMock ) . connect ( org.mockito.Matchers.anyInt ( ) , org.mockito.Matchers.anyInt ( ) , org.mockito.Matchers.anyInt ( ) , org.mockito.Matchers.eq ( callingPackage ) , org.mockito.Matchers.eq ( mCallbackMock ) , org.mockito.Matchers.eq ( configRequest ) , org.mockito.Matchers.eq ( false ) ) ; }
private void testExplicitPositionMatchParent ( ) { doLayoutParamTest ( ( android.view.WindowManager.LayoutParams params ) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT ; params.height = WindowManager.LayoutParams.MATCH_PARENT ; params.x = 100 ; params.y = 100 ; } ) ; }
public static com.intellij.execution.testframework.ui.BaseTestsOutputConsoleView createAndAttachConsole ( @ org.jetbrains.annotations.NotNull final java.lang.String testFrameworkName , @ org.jetbrains.annotations.NotNull final com.intellij.execution.process.ProcessHandler processHandler , @ org.jetbrains.annotations.NotNull final com.intellij.execution.testframework.TestConsoleProperties consoleProperties , com.intellij.execution.runners.ExecutionEnvironment environment ) throws com.intellij.execution.ExecutionException { com.intellij.execution.testframework.ui.BaseTestsOutputConsoleView console = com.google.gct.testing.results.GoogleCloudTestResultsConnectionUtil.createConsole ( testFrameworkName , consoleProperties , environment ) ; console.attachToProcess ( processHandler ) ; return console ; }
public void annotate ( com.android.dx.util.ExceptionWithContext ex ) { int limit = ( stackPtr ) - 1 ; for ( int i = 0 ; i <= limit ; i ++ ) { java.lang.String idx = ( i == limit ) ? "top0" : com.android.dx.util.Hex.u2 ( ( limit - i ) ) ; ex.addContext ( ( ( ( "stack[" + idx ) + "]: " ) + ( com.android.dx.cf.code.ExecutionStack.stackElementString ( stack [ i ] ) ) ) ) ; } }
public void copy3DRangeFrom ( int xoff , int yoff , int zoff , int w , int h , int d , long [ ] data ) { validateIsInt64 ( ) ; copy3DRangeFromUnchecked ( xoff , yoff , zoff , w , h , d , data ) ; }
private void sendByChannel ( java.lang.String data , java.net.InetSocketAddress address ) throws java.lang.Exception { try { assertEquals ( data.length ( ) , this . channel2.send ( java.nio.ByteBuffer.wrap ( data.getBytes ( ) ) , address ) ) ; } finally { this . channel2.close ( ) ; } }
public void copyFrom ( byte [ ] d ) { mRS.validate ( ) ; if ( ( mCurrentDimZ ) > 0 ) { copy3DRangeFrom ( 0 , 0 , 0 , mCurrentDimX , mCurrentDimY , mCurrentDimZ , d ) ; } else if ( ( mCurrentDimY ) > 0 ) { copy2DRangeFrom ( 0 , 0 , mCurrentDimX , mCurrentDimY , d ) ; } else { copy1DRangeFrom ( 0 , mCurrentCount , d ) ; } }
public void addTestCase ( com.android.vts.entity.TestCaseRunEntity testCase ) { if ( ( testCase.result ) > ( resultCounts.length ) ) return ; ++ ( resultCounts [ testCase.result ] ) ; com.android.vts.util.TestRunDetails.ResultColumn column = columns [ testCase.result ] ; column.add ( testCase.testCaseName ) ; }
private static void putMtu ( java.nio.ByteBuffer ra , int mtu ) { final byte ND_OPTION_MTU = 5 ; final byte MTU_NUM_8OCTETS = 1 ; ra.put ( ND_OPTION_MTU ) . put ( MTU_NUM_8OCTETS ) . putShort ( android.net.ip.RouterAdvertisementDaemon.asShort ( 0 ) ) . putInt ( ( mtu < ( android.net.ip.RouterAdvertisementDaemon.IPV6_MIN_MTU ) ? android.net.ip.RouterAdvertisementDaemon.IPV6_MIN_MTU : mtu ) ) ; }
public void rilConnected ( int indicationType ) { }
synchronized void nAllocationData3D ( long id , int xoff , int yoff , int zoff , int mip , int w , int h , int depth , java.lang.Object d , int sizeBytes , android.renderscript.Element.DataType dt ) { validate ( ) ; rsnAllocationData3D ( mContext , id , xoff , yoff , zoff , mip , w , h , depth , d , sizeBytes , dt.mID ) ; }
static final < K , V > java.util.concurrent.ConcurrentHashMap.HashEntry < K , V > [ ] newArray ( int i ) { return new java.util.concurrent.ConcurrentHashMap.HashEntry [ i ] ; }
public java.lang.String nextPackageToClean ( java.lang.String lastPackage ) { synchronized ( mPackages ) { if ( ! ( isExternalMediaAvailable ( ) ) ) { return null ; } if ( lastPackage != null ) { mSettings.mPackagesToBeCleaned.remove ( lastPackage ) ; } return ( mSettings.mPackagesToBeCleaned.size ( ) ) > 0 ? mSettings.mPackagesToBeCleaned.get ( 0 ) : null ; } }
public void test_wrap_01 ( ) throws java.lang.Exception { prepareEngines ( ) ; doHandshake ( ) ; java.nio.ByteBuffer bbs = java.nio.ByteBuffer.allocate ( 100 ) ; java.nio.ByteBuffer bbd = java.nio.ByteBuffer.allocate ( tests.api.javax.net.ssl.SSLEngineTest.MAX_TLS_RECORD_SIZE ) ; clientEngine.engine.wrap ( new java.nio.ByteBuffer [ ] { bbs } , 0 , 1 , bbd ) ; }
protected static java.io.InputStream getXsdStream ( java.lang.String rootElement , int version ) { java.lang.String filename = java.lang.String.format ( "%1$s-%2$02d.xsd" , rootElement , version ) ; java.io.InputStream stream = null ; try { stream = com.android.sdklib.repository.RepoXsdUtil.class . getResourceAsStream ( filename ) ; } catch ( java.lang.Exception e ) { } if ( stream == null ) { filename = java.lang.String.format ( "-%1$s-%2$02d.xsd" , rootElement , version ) ; try { stream = com.android.sdklib.repository.RepoXsdUtil.class . getResourceAsStream ( filename ) ; } catch ( java.lang.Exception e ) { } } return stream ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.nio.file.Path dumpDirectory = java.nio.file.Files.createTempDirectory ( "lambdas" ) ; java.lang.System.setProperty ( LambdaClassMaker.LAMBDA_METAFACTORY_DUMPER_PROPERTY , dumpDirectory.toString ( ) ) ; if ( ( ( args.length ) == 1 ) && ( args [ 0 ] . startsWith ( "@" ) ) ) { args = java.nio.file.Files.readAllLines ( java.nio.file.Paths.get ( args [ 0 ] . substring ( 1 ) ) , java.nio.charset.StandardCharsets.ISO_8859_1 ) . toArray ( new java.lang.String [ 0 ] ) ; } com.google.devtools.common.options.OptionsParser optionsParser = com.google.devtools.common.options.OptionsParser.newOptionsParser ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; optionsParser.parseAndExitUponError ( args ) ; com.google.devtools.build.android.desugar.Desugar.Options options = optionsParser.getOptions ( com.google.devtools.build.android.desugar.Desugar.Options.class ) ; if ( options.verbose ) { java.lang.System.out.printf ( "Lambda classes will be written under %s%n" , dumpDirectory ) ; } boolean allowDefaultMethods = ( options.minSdkVersion ) >= 24 ; java.lang.ClassLoader parent ; if ( ( options.bootclasspath.isEmpty ( ) ) && ( ! ( options.allowEmptyBootclasspath ) ) ) { parent = java.lang.ClassLoader.getSystemClassLoader ( ) ; } else { parent = new com.google.devtools.build.android.desugar.Desugar.ThrowingClassLoader ( ) ; } java.lang.ClassLoader loader = com.google.devtools.build.android.desugar.Desugar.createClassLoader ( options.bootclasspath , options.inputJar , options.classpath , parent ) ; try ( java.util.zip.ZipFile in = new java.util.zip.ZipFile ( options.inputJar.toFile ( ) ) ; java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream ( new java.io.BufferedOutputStream ( java.nio.file.Files.newOutputStream ( options.outputJar ) ) ) ) { com.google.devtools.build.android.desugar.LambdaClassMaker lambdas = new com.google.devtools.build.android.desugar.LambdaClassMaker ( dumpDirectory ) ; com.google.devtools.build.android.desugar.ClassReaderFactory readerFactory = new com.google.devtools.build.android.desugar.ClassReaderFactory ( in ) ; com.google.common.collect.ImmutableSet.Builder < java.lang.String > interfaceLambdaMethodCollector = com.google.common.collect.ImmutableSet.builder ( ) ; for ( java.util.Enumeration < ? extends java.util.zip.ZipEntry > entries = in.entries ( ) ; entries.hasMoreElements ( ) ; ) { java.util.zip.ZipEntry entry = entries.nextElement ( ) ; try ( java.io.InputStream content = in.getInputStream ( entry ) ) { if ( entry.getName ( ) . endsWith ( ".class" ) ) { org.objectweb.asm.ClassReader reader = new org.objectweb.asm.ClassReader ( content ) ; org.objectweb.asm.ClassWriter writer = new org.objectweb.asm.ClassWriter ( org.objectweb.asm.ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , readerFactory ) ; } reader.accept ( new com.google.devtools.build.android.desugar.LambdaDesugaring ( visitor , loader , lambdas , interfaceLambdaMethodCollector , allowDefaultMethods ) , 0 ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , entry.getName ( ) , writer.toByteArray ( ) ) ; } else { java.util.zip.ZipEntry destEntry = new java.util.zip.ZipEntry ( entry ) ; destEntry.setCompressedSize ( ( - 1 ) ) ; out.putNextEntry ( destEntry ) ; com.google.common.io.ByteStreams.copy ( content , out ) ; out.closeEntry ( ) ; } } } com.google.common.collect.ImmutableSet < java.lang.String > interfaceLambdaMethods = interfaceLambdaMethodCollector.build ( ) ; if ( allowDefaultMethods ) { com.google.common.base.Preconditions.checkState ( interfaceLambdaMethods.isEmpty ( ) , "Desugaring with default methods enabled moved interface lambdas" ) ; } for ( java.util.Map.Entry < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > lambdaClass : lambdas.drain ( ) . entrySet ( ) ) { try ( java.io.InputStream bytecode = java.nio.file.Files.newInputStream ( dumpDirectory.resolve ( lambdaClass.getKey ( ) ) ) ) { org.objectweb.asm.ClassReader reader = new org.objectweb.asm.ClassReader ( bytecode ) ; org.objectweb.asm.ClassWriter writer = new org.objectweb.asm.ClassWriter ( org.objectweb.asm.ClassWriter.COMPUTE_MAXS ) ; org.objectweb.asm.ClassVisitor visitor = writer ; if ( ! allowDefaultMethods ) { visitor = new com.google.devtools.build.android.desugar.Java7Compatibility ( visitor , ( ( com.google.devtools.build.android.desugar.ClassReaderFactory ) ( null ) ) ) ; } com.google.devtools.build.android.desugar.LambdaClassFixer lambdaFixer = new com.google.devtools.build.android.desugar.LambdaClassFixer ( visitor , lambdaClass.getValue ( ) , readerFactory , interfaceLambdaMethods , allowDefaultMethods ) ; reader.accept ( new com.google.devtools.build.android.desugar.LambdaDesugaring ( lambdaFixer , loader , lambdas , null , allowDefaultMethods ) , 0 ) ; com.google.devtools.build.android.desugar.Desugar.writeStoredEntry ( out , ( ( lambdaFixer.getInternalName ( ) ) + ".class" ) , writer.toByteArray ( ) ) ; } } java.util.Map < java.nio.file.Path , com.google.devtools.build.android.desugar.LambdaInfo > leftBehind = lambdas.drain ( ) ; com.google.common.base.Preconditions.checkState ( leftBehind.isEmpty ( ) , "Didn't process %s" , leftBehind ) ; } }
private void cmdDumpsys ( java.io.FileDescriptor fd , java.io.PrintWriter pw , java.lang.String [ ] args ) { final android.net.ConnectivityMetricsEvent [ ] events ; synchronized ( mLock ) { events = mEventLog.toArray ( ) ; } for ( android.net.ConnectivityMetricsEvent ev : events ) { pw.println ( ev.toString ( ) ) ; } if ( ( mNetdListener ) != null ) { mNetdListener.list ( pw ) ; } }
public void test_with_adjustment_AmPm ( ) { java.time.OffsetTime test = TEST_11_30_59_500_PONE.with ( new java.time.temporal.TemporalAdjuster ( ) { @ java.lang.Override public java.time.temporal.Temporal adjustInto ( java.time.temporal.Temporal dateTime ) { return dateTime.with ( java.time.temporal.ChronoField.HOUR_OF_DAY , 23 ) ; } } ) ; org.testng.Assert.assertEquals ( test , java.time.OffsetTime.of ( 23 , 30 , 59 , 500 , tck.java.time.TCKOffsetTime.OFFSET_PONE ) ) ; }
protected void onHandleIntent ( android.content.Intent intent ) { android.util.Log.d ( com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.TAG , "Trying to establish a connection." ) ; java.lang.String outputFile = intent.getStringExtra ( com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.OUTPUT_FILE ) ; com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.dumpResult ( "testUrlConnection" , com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.testUrlConnection ( ) , outputFile ) ; com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.dumpResult ( "testUrlConnectionv6" , com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.testUrlConnectionv6 ( ) , outputFile ) ; com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.dumpResult ( "testSntp" , com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.testSntp ( ) , outputFile ) ; com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.dumpResult ( "testDns" , com.android.tests.bandwidthenforcement.BandwidthEnforcementTestService.testDns ( ) , outputFile ) ; }
private void startAlert ( ) { if ( ( mToneGenerator ) == null ) { mToneGenerator = new android.media.ToneGenerator ( android.media.AudioManager.STREAM_VOICE_CALL , com.android.services.telephony.EmergencyTonePlayer.ALERT_RELATIVE_VOLUME_PERCENT ) ; mSavedInCallVolume = mAudioManager.getStreamVolume ( AudioManager.STREAM_VOICE_CALL ) ; mAudioManager.setStreamVolume ( AudioManager.STREAM_VOICE_CALL , mAudioManager.getStreamMaxVolume ( AudioManager.STREAM_VOICE_CALL ) , 0 ) ; mToneGenerator.startTone ( ToneGenerator.TONE_CDMA_EMERGENCY_RINGBACK ) ; } else { com.android.services.telephony.Log.d ( this , "An alert is already running." ) ; } }
public boolean checkConfigOverridePermission ( int uid ) { try { int permission = mFacade.checkUidPermission ( android.Manifest.permission.OVERRIDE_WIFI_CONFIG , uid ) ; return permission == ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( com.android.server.wifi.WifiConfigManagerNew.TAG , ( "Error checking for permission " + e ) ) ; return false ; } }
public void sendSingleScanRequestWithNoResults ( ) throws java.lang.Exception { android.net.wifi.WifiScanner.ScanSettings requestSettings = createRequest ( WifiScanner.WIFI_BAND_BOTH , 0 , 0 , 20 , WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN ) ; doSuccessfulSingleScan ( requestSettings , computeSingleScanNativeSettings ( requestSettings ) , com.android.server.wifi.ScanResults.create ( 0 , new int [ 0 ] ) ) ; }
public void testLicenseIdNotFound ( ) throws java.lang.Exception { java.lang.String document = ( ( ( ( ( ( "<?xml version=\"1.0\"?>" + ( com.android.sdklib.repository.SdkRepositoryTest.OPEN_TAG ) ) + "<r:license id=\"lic1\"> some license </r:license> " ) + "<r:tool> <r:uses-license ref=\"lic2\" /> <r:revision>1</r:revision> " ) + "<r:min-platform-tools-rev>1</r:min-platform-tools-rev> " ) + "<r:archives> <r:archive os=\"any\"> <r:size>1</r:size> <r:checksum>2822ae37115ebf13412bbef91339ee0d9454525e</r:checksum> " ) + "<r:url>url</r:url> </r:archive> </r:archives> </r:tool>" ) + ( com.android.sdklib.repository.SdkRepositoryTest.CLOSE_TAG ) ; javax.xml.transform.Source source = new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( document ) ) ; javax.xml.validation.Validator validator = getValidator ( SdkRepoConstants.NS_LATEST_VERSION , null ) ; try { validator.validate ( source ) ; } catch ( org.xml.sax.SAXParseException e ) { assertRegex ( "cvc-id.1: There is no ID/IDREF binding for IDREF 'lic2'.*" , e.getMessage ( ) ) ; return ; } fail ( ) ; }
void setTask ( com.android.server.am.TaskRecord newTask , com.android.server.am.TaskRecord taskToAffiliateWith ) { if ( ( ( task ) != null ) && ( task.removeActivity ( this ) ) ) { if ( ( task ) != newTask ) { task.stack.removeTask ( task ) ; } else { android.util.Slog.d ( com.android.server.am.ActivityRecord.TAG , ( "!!! REMOVE THIS LOG !!! setTask: nearly removed stack=" + ( newTask == null ? null : newTask.stack ) ) ) ; } } task = newTask ; setTaskToAffiliateWith ( taskToAffiliateWith ) ; }
public void onStateChange ( boolean state ) { synchronized ( mLock ) { android.util.Log.i ( mTag , ( "OnStateChange:" + state ) ) ; mIsConnected = state ; if ( ! state ) { if ( ( mAccessControlEnforcer ) != null ) { mAccessControlEnforcer.reset ( ) ; } } else { try { initializeAccessControl ( ) ; } catch ( java.lang.Exception e ) { } synchronized ( mLock ) { mDefaultApplicationSelectedOnBasicChannel = true ; } } } }
private static java.lang.Number toNumber ( java.lang.String s ) { if ( s.equals ( "NaN" ) ) { return java.lang.Double.NaN ; } else if ( s.equals ( "-Inf" ) ) { return java.lang.Double.NEGATIVE_INFINITY ; } else if ( s.equals ( "Inf" ) ) { return java.lang.Double.POSITIVE_INFINITY ; } return new android.icu.math.BigDecimal ( s ) ; }
void setFragmentManager ( android.app.FragmentManager fragmentManager ) { this . fragmentManager = fragmentManager ; }
public static boolean isProfileSet ( android.content.Context context ) { android.database.Cursor c = context.getContentResolver ( ) . query ( Profile.CONTENT_VCARD_URI , new java.lang.String [ ] { android.provider.ContactsContract.Profile._ID } , null , null , null ) ; boolean isSet = ( c != null ) && ( ( c.getCount ( ) ) > 0 ) ; if ( c != null ) { c.close ( ) ; c = null ; } return isSet ; }
public void testInterceptedSIMCommandsToTelephony ( ) { android.content.Intent intent = new android.content.Intent ( ) ; intent.setAction ( "android.intent.action.stk.command" ) ; intent.putExtra ( "STK CMD" , "test" ) ; android.content.ComponentName cn = android.content.ComponentName.unflattenFromString ( "com.android.stk/com.android.stk.StkCmdReceiver" ) ; intent.setComponent ( cn ) ; try { mContext.sendBroadcast ( intent ) ; fail ( ( "Able to send broadcast which can be received by any app which has registered " + ( "broadcast for action 'android.intent.action.stk.command' since it is not " + "protected with any permission. Device is vulnerable to CVE-2015-3843." ) ) ) ; } catch ( java.lang.SecurityException e ) { } }
public final synchronized android.os.CountDownTimer start ( ) { if ( ( mMillisInFuture ) <= 0 ) { onFinish ( ) ; return this ; } mStopTimeInFuture = ( android.os.SystemClock.elapsedRealtime ( ) ) + ( mMillisInFuture ) ; mHandler.sendMessage ( mHandler.obtainMessage ( android.os.CountDownTimer.MSG ) ) ; return this ; }
public void testParseArabic ( ) throws java.lang.Exception { java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss" , new java.util.Locale ( "ar" , "EG" ) ) ; sdf.setTimeZone ( java.util.TimeZone.getTimeZone ( "America/Los_Angeles" ) ) ; java.util.Date d = sdf.parse ( "2012-08-29 10:02:45" ) ; assertEquals ( 1346259765000L , d.getTime ( ) ) ; java.lang.String formatted = sdf.format ( d ) ; assertEquals ( "٢٠١٢-٠٨-٢٩ ١٠:٠٢:٤٥" , formatted ) ; java.util.Date d2 = sdf.parse ( formatted ) ; assertEquals ( d , d2 ) ; }
java.lang.Object [ ] [ ] data_of_calendarDisplayNames ( ) { return new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { "Hijrah" , "Islamic Umm al-Qura Calendar" } , new java.lang.Object [ ] { "ISO" , "ISO" } , new java.lang.Object [ ] { "Japanese" , "Japanese Calendar" } , new java.lang.Object [ ] { "Minguo" , "Minguo Calendar" } , new java.lang.Object [ ] { "ThaiBuddhist" , "Buddhist Calendar" } } ; }
private void initLayout ( ) { findViewById ( R.id.fab ) . setOnClickListener ( this ) ; android.support.v4.view.ViewPager pager = findViewById ( R.id.pager ) ; com.android.dialer.main.impl.MainPagerAdapter pagerAdapter = new com.android.dialer.main.impl.MainPagerAdapter ( this , getSupportFragmentManager ( ) ) ; pager.setAdapter ( pagerAdapter ) ; android.support.design.widget.TabLayout tabLayout = findViewById ( R.id.tab_layout ) ; tabLayout.setupWithViewPager ( pager ) ; android.support.v7.widget.Toolbar toolbar = findViewById ( R.id.toolbar ) ; toolbar.setPopupTheme ( android.R.style.Theme_Material_Light ) ; setSupportActionBar ( toolbar ) ; }
private void continueTest ( ) { new com.android.cts.verifier.jobscheduler.ChargingConstraintTestActivity.TestDevicePluggedInConstraint ( ) . execute ( ) ; }
public boolean p2pGroupAdd ( boolean persistent ) { if ( persistent ) { return doBooleanCommand ( "P2P_GROUP_ADD persistent" ) ; } return doBooleanCommand ( "P2P_GROUP_ADD" ) ; }
protected static void waitForStart ( android.transition.cts.SimpleTransitionListener listener ) throws java.lang.InterruptedException { long endTime = ( android.os.SystemClock.uptimeMillis ( ) ) + 50 ; synchronized ( listener ) { while ( ! ( listener.started ) ) { long now = android.os.SystemClock.uptimeMillis ( ) ; long waitTime = endTime - now ; if ( waitTime <= 0 ) { throw new java.lang.InterruptedException ( ) ; } listener.wait ( waitTime ) ; } } }
public org.w3c.dom.Document getMetadataDocument ( ) { java.lang.String xml = readTemplateTextResource ( com.android.ide.eclipse.adt.internal.wizards.templates.TemplateHandler.TEMPLATE_XML ) ; if ( xml != null ) { return com.android.ide.eclipse.adt.internal.editors.layout.gle2.DomUtilities.parseDocument ( xml , true ) ; } else { return null ; } }
public void consume ( org.jetbrains.plugins.groovy.mvc.ModifiableRootModel model ) { for ( final org.jetbrains.plugins.groovy.mvc.ContentEntry entry : toRemoveContent ) { model.removeContentEntry ( entry ) ; } for ( org.jetbrains.plugins.groovy.mvc.ContentEntry entry : model.getContentEntries ( ) ) { for ( org.jetbrains.plugins.groovy.mvc.SourceFolder folder : entry.getSourceFolders ( ) ) { if ( toRemove.remove ( folder ) ) { entry.removeSourceFolder ( folder ) ; } } } }
public void unregisterOnActivityPausedListener ( android.app.Activity activity , android.app.OnActivityPausedListener listener ) { synchronized ( mOnPauseListeners ) { java.util.ArrayList < android.app.OnActivityPausedListener > list = mOnPauseListeners.get ( activity ) ; if ( list != null ) { list.remove ( listener ) ; } } }
public static com.android.dx.util.ExceptionWithContext withContext ( java.lang.Throwable ex , java.lang.String str ) { com.android.dx.util.ExceptionWithContext ewc ; if ( ex instanceof com.android.dx.util.ExceptionWithContext ) { ewc = ( ( com.android.dx.util.ExceptionWithContext ) ( ex ) ) ; } else { ewc = new com.android.dx.util.ExceptionWithContext ( ex ) ; } ewc.addContext ( str ) ; return ewc ; }
public void connectionEventStartedDoesNotCrashIfEnableFileIsMissing ( ) throws java.lang.Exception { mTraceEnableFile.delete ( ) ; mLastMileLogger.reportConnectionEvent ( BaseWifiDiagnostics.CONNECTION_EVENT_STARTED ) ; }
private void getIntValueFromCursor ( android.content.ContentValues cv , android.database.Cursor c , java.lang.String key ) { java.lang.String fromCursor = c.getString ( c.getColumnIndex ( key ) ) ; if ( ! ( android.text.TextUtils.isEmpty ( fromCursor ) ) ) { try { cv.put ( key , new java.lang.Integer ( fromCursor ) ) ; } catch ( java.lang.NumberFormatException nfe ) { } } }
public boolean replace ( K key , V oldValue , V newValue ) { if ( ( oldValue == null ) || ( newValue == null ) ) throw new java.lang.NullPointerException ( ) ; int hash = java.util.concurrent.ConcurrentHashMap.hash ( key.hashCode ( ) ) ; return segmentFor ( hash ) . replace ( key , hash , oldValue , newValue ) ; }
public void testE1 ( ) { dot.junit.opcodes.aput_short.d.T_aput_short_1 t = new dot.junit.opcodes.aput_short.d.T_aput_short_1 ( ) ; short [ ] arr = new short [ 2 ] ; try { t.run ( arr , 2 , ( ( short ) ( 10000 ) ) ) ; fail ( "expected ArrayIndexOutOfBoundsException" ) ; } catch ( java.lang.ArrayIndexOutOfBoundsException aie ) { } }
public void remove ( com.android.sdklib.internal.repository.SdkSource source ) { mSources.remove ( source ) ; }
protected void renameResource ( @ com.android.annotations.NonNull java.lang.Object [ ] testData , @ com.android.annotations.NonNull java.lang.Object resource , boolean updateReferences , @ com.android.annotations.NonNull java.lang.String newName , @ com.android.annotations.NonNull java.lang.String expected ) throws java.lang.Exception { org.eclipse.core.resources.IProject project = createProject ( testData ) ; renameResource ( project , resource , updateReferences , newName , expected ) ; }
public void stop ( ) { if ( ! ( mStarted.compareAndSet ( true , false ) ) ) { return ; } mContext.unregisterReceiver ( mBroadcastReceiver ) ; mContentResolver.unregisterContentObserver ( mContentObserver ) ; }
private int pinLocY ( int y ) { return android.webkit.WebView.pinLoc ( y , getViewHeight ( ) , computeVerticalScrollRange ( ) ) ; }
private static Breakpoint.Manager.BP BP ( java.lang.reflect.Executable m ) { return new art.Breakpoint.Manager.BP ( m ) ; }
static int extractLineNumber ( @ com.android.annotations.Nullable org.w3c.dom.Node xmlNode ) { if ( xmlNode != null ) { java.lang.Object data = xmlNode.getUserData ( com.android.manifmerger.XmlUtils.DATA_LINE_NUMBER ) ; if ( data instanceof java.lang.Integer ) { return ( ( java.lang.Integer ) ( data ) ) . intValue ( ) ; } } return 0 ; }
private synchronized void ensureInitialization ( ) { try { maybeInstantiateVerifier ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } if ( ( ( jv ) != null ) && ( ! ( jvInitialized ) ) ) { initializeVerifier ( ) ; jvInitialized = true ; } }
private static java.lang.String whereStatement ( ) { return ( ( ( ( ( ( ( ( ( ( ( ( android.provider.ContactsContract.CommonDataKinds.Phone.NUMBER ) + " IS NOT NULL" ) + " AND " ) + ( ( android.provider.ContactsContract.Data.DISPLAY_NAME_PRIMARY ) + " IS NOT NULL" ) ) + " AND " ) + ( android.provider.ContactsContract.Data.MIMETYPE ) ) + " IN (\'" ) + ( android.provider.ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE ) ) + "\', \'" ) + ( android.provider.ContactsContract.CommonDataKinds.Nickname.CONTENT_ITEM_TYPE ) ) + "\', \'" ) + ( android.provider.ContactsContract.CommonDataKinds.Organization.CONTENT_ITEM_TYPE ) ) + "\')" ; }
public com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation getAnnotation ( @ com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedMethod method , int parameterIndex , @ com.android.annotations.NonNull java.lang.String type ) { com.android.tools.lint.ExternalAnnotationRepository.MethodInfo m = findMethod ( method ) ; if ( m == null ) { return null ; } if ( ( m.parameterAnnotations ) != null ) { java.util.Collection < com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation > annotations = m.parameterAnnotations.get ( parameterIndex ) ; if ( annotations != null ) { for ( com.android.tools.lint.client.api.JavaParser.ResolvedAnnotation annotation : annotations ) { if ( type.equals ( annotation.getSignature ( ) ) ) { return annotation ; } } } } return null ; }
public void testOverlay1Content ( ) throws java.lang.Exception { java.io.File project = buildProject ( "overlay1" , BasePlugin.GRADLE_TEST_VERSION ) ; java.io.File drawableOutput = new java.io.File ( project , ( ( "build/" + ( com.android.builder.model.AndroidProject.FD_INTERMEDIATES ) ) + "/res/debug/drawable" ) ) ; com.android.build.gradle.ManualBuildTest.checkImageColor ( drawableOutput , "no_overlay.png" , com.android.build.gradle.ManualBuildTest.GREEN ) ; com.android.build.gradle.ManualBuildTest.checkImageColor ( drawableOutput , "type_overlay.png" , com.android.build.gradle.ManualBuildTest.GREEN ) ; }
public static final void enforceTetherChangePermission ( android.content.Context context ) { if ( ( context.getResources ( ) . getStringArray ( com.android.internal.R.array.config_mobile_hotspot_provision_app ) . length ) == 2 ) { context.enforceCallingOrSelfPermission ( android.net.android.Manifest.permission.TETHER_PRIVILEGED , "ConnectivityService" ) ; } else { int uid = android.os.Binder.getCallingUid ( ) ; android.provider.Settings.checkAndNoteWriteSettingsOperation ( context , uid , android.provider.Settings.getPackageNameForUid ( context , uid ) , true ) ; } }
public void testInheritCompatLibrary ( ) throws java.lang.Exception { assertEquals ( ( "" + ( ( ( ( ( ( ( ( ( "src/test/pkg/MyActivityImpl.java:8: Error: Call requires API level 11 (current min is 1): android.app.Activity#isChangingConfigurations [NewApi]\n" + " boolean isChanging = super.isChangingConfigurations();\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "src/test/pkg/MyActivityImpl.java:13: Error: Call requires API level 11 (current min is 1): android.app.Activity#isChangingConfigurations [NewApi]\n" ) + " return super.isChangingConfigurations();\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "src/test/pkg/MyActivityImpl.java:12: Error: This method is not overriding anything with the current build target, but will in API level 11 (current target is 3): test.pkg.MyActivityImpl#isChangingConfigurations [Override]\n" ) + " public boolean isChangingConfigurations() {\n" ) + " ~~~~~~~~~~~~~~~~~~~~~~~~\n" ) + "3 errors, 0 warnings\n" ) ) , lintProject ( "apicheck/classpath=>.classpath" , "apicheck/minsdk1.xml=>AndroidManifest.xml" , "project.properties1=>project.properties" , "apicheck/MyActivityImpl.java.txt=>src/test/pkg/MyActivityImpl.java" , "apicheck/MyActivityImpl.class.data=>bin/classes/test/pkg/MyActivityImpl.class" , "apicheck/android-support-v4.jar.data=>libs/android-support-v4.jar" ) ) ; }
public java.lang.String getDeviceId ( int slotId ) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo ( ) ; if ( info == null ) return null ; return info.getDeviceIdForPhone ( slotId , mContext.getOpPackageName ( ) ) ; } catch ( android.os.RemoteException ex ) { return null ; } catch ( java.lang.NullPointerException ex ) { return null ; } }
private void compileJava7Test ( @ javax.annotation.Nonnull java.lang.String name ) throws java.lang.Exception { com.android.jack.test.toolchain.IToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( ) ; toolchain.setSourceLevel ( SourceLevel.JAVA_7 ) . addToClasspath ( toolchain.getDefaultBootClasspath ( ) ) . srcToExe ( com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) , false , com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir ( ( ( "com.android.jack.java7.switches." + name ) + ".jack" ) ) ) ; }
public android.bluetooth.BluetoothDevice getClient ( ) { if ( com.android.bluetooth.pbap.BluetoothPbapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , ( "getClient" + ( mRemoteDevice ) ) ) ; if ( ! ( com.android.bluetooth.Utils.checkCaller ( ) ) ) { android.util.Log.w ( com.android.bluetooth.pbap.BluetoothPbapService.TAG , "getClient(): not allowed for non-active user" ) ; return null ; } enforceCallingOrSelfPermission ( com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; if ( ( mState ) == ( android.bluetooth.BluetoothPbap.STATE_DISCONNECTED ) ) { return null ; } return mRemoteDevice ; }
public static < V > com.google.common.util.concurrent.ListenableFuture < V > immediateFuture ( @ javax.annotation.Nullable V value ) { com.google.common.util.concurrent.SettableFuture < V > future = com.google.common.util.concurrent.SettableFuture.create ( ) ; future.set ( value ) ; return future ; }
public void testInstallManifestSdcardUnmount ( ) { boolean origState = checkMediaState ( Environment.MEDIA_MOUNTED ) ; try { assertTrue ( unmountMedia ( ) ) ; android.content.pm.PackageManagerTests.InstallParams ip = new android.content.pm.PackageManagerTests.InstallParams ( "install.apk" , R.raw.install_loc_sdcard ) ; installFromRawResource ( ip , 0 , true , false , ( - 1 ) , PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY ) ; } finally { if ( origState ) { mountMedia ( ) ; } else { unmountMedia ( ) ; } } }
public java.lang.Object [ ] getTestObjects ( ) { java.util.Locale [ ] locales = android.icu.dev.test.serializable.SerializableTest.getLocales ( ) ; android.icu.util.TimeZone pst = android.icu.util.TimeZone.getTimeZone ( "America/Los_Angeles" ) ; android.icu.util.Calendar [ ] calendars = new android.icu.util.Calendar [ locales.length ] ; for ( int i = 0 ; i < ( locales.length ) ; i += 1 ) { calendars [ i ] = android.icu.util.Calendar.getInstance ( pst , locales [ i ] ) ; } return calendars ; }
public static android.icu.util.VersionInfo getDataVersion ( ) { android.icu.util.UResourceBundle icudatares = null ; try { icudatares = android.icu.util.UResourceBundle.getBundleInstance ( ICUResourceBundle.ICU_BASE_NAME , android.icu.impl.ICUDataVersion.U_ICU_VERSION_BUNDLE , ICUResourceBundle.ICU_DATA_CLASS_LOADER ) ; icudatares = icudatares.get ( android.icu.impl.ICUDataVersion.U_ICU_DATA_KEY ) ; } catch ( java.util.MissingResourceException ex ) { return null ; } return android.icu.util.VersionInfo.getInstance ( icudatares.getString ( ) ) ; }
private ActivityManager.ProcessErrorStateInfo generateProcessError ( com.android.server.am.ProcessRecord app , int condition , java.lang.String tag , java.lang.String shortMsg , java.lang.String longMsg , byte [ ] crashData ) { android.app.ActivityManager.ProcessErrorStateInfo report = new android.app.ActivityManager.ProcessErrorStateInfo ( ) ; report.condition = condition ; report.processName = app.processName ; report.pid = app.pid ; report.uid = app.info.uid ; report.tag = tag ; report.shortMsg = shortMsg ; report.longMsg = longMsg ; report.crashData = crashData ; return report ; }
public java.util.Collection < com.android.ide.common.resources.ResourceItem > getResourceItemsOfType ( @ com.android.annotations.NonNull com.android.resources.ResourceType type ) { java.util.Map < java.lang.String , com.android.ide.common.resources.ResourceItem > map = mResourceMap.get ( type ) ; if ( map == null ) { return java.util.Collections.emptyList ( ) ; } java.util.Collection < com.android.ide.common.resources.ResourceItem > roList = mReadOnlyListMap.get ( map ) ; if ( roList == null ) { roList = java.util.Collections.unmodifiableCollection ( map.values ( ) ) ; mReadOnlyListMap.put ( map , roList ) ; } return roList ; }
public org.bouncycastle.math.ec.ECFieldElement subtract ( org.bouncycastle.math.ec.ECFieldElement b ) { java.math.BigInteger x2 = b.toBigInteger ( ) ; java.math.BigInteger x3 = x.subtract ( x2 ) ; if ( ( x3.signum ( ) ) < 0 ) { x3 = x3.add ( q ) ; } return new org.bouncycastle.math.ec.ECFieldElement.Fp ( q , r , x3 ) ; }
void cleanupDevice ( android.bluetooth.BluetoothDevice device ) { android.util.Log.w ( com.android.bluetooth.pbapclient.PbapClientService.TAG , ( "Cleanup device: " + device ) ) ; synchronized ( mPbapClientStateMachineMap ) { com.android.bluetooth.pbapclient.PbapClientStateMachine pbapClientStateMachine = mPbapClientStateMachineMap.get ( device ) ; if ( pbapClientStateMachine != null ) { mPbapClientStateMachineMap.remove ( device ) ; } } }
public void run ( ) { android.util.Log.i ( com.android.server.cts.device.batterystats.SimpleJobService.TAG , "Running job" ) ; try { java.lang.Thread.sleep ( 1000 ) ; } catch ( java.lang.InterruptedException e ) { } jobFinished ( mRunningParams , false ) ; if ( ( com.android.server.cts.device.batterystats.SimpleJobService.sLatch ) != null ) { com.android.server.cts.device.batterystats.SimpleJobService.sLatch.countDown ( ) ; } android.util.Log.i ( com.android.server.cts.device.batterystats.SimpleJobService.TAG , "Finished job." ) ; }
public void testLibsManifestMerging ( ) throws java.lang.Exception { java.io.File project = new java.io.File ( testDir , "libsTest" ) ; java.io.File fileOutput = new java.io.File ( project , ( ( "libapp/build/" + ( com.android.builder.model.AndroidProject.FD_INTERMEDIATES ) ) + "/bundles/release/AndroidManifest.xml" ) ) ; runGradleTasks ( sdkDir , ndkDir , BasePlugin.GRADLE_TEST_VERSION , project , java.util.Collections.< java.lang.String > emptyList ( ) , "clean" , "build" ) ; assertTrue ( fileOutput.exists ( ) ) ; }
public void testGetConfig1 ( ) { com.android.ide.common.resources.configuration.FolderConfiguration configForFolder = com.android.ide.common.resources.configuration.FolderConfiguration.getConfig ( new java.lang.String [ ] { "values" , "en" , "rUS" } ) ; assertNotNull ( configForFolder ) ; assertEquals ( "en" , configForFolder.getLanguageQualifier ( ) . getValue ( ) ) ; assertEquals ( "US" , configForFolder.getRegionQualifier ( ) . getValue ( ) ) ; assertNull ( configForFolder.getScreenDimensionQualifier ( ) ) ; assertNull ( configForFolder.getLayoutDirectionQualifier ( ) ) ; }
private java.lang.String getFeatures ( ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; android.content.pm.PackageManager packageManager = getContext ( ) . getPackageManager ( ) ; for ( java.lang.String feature : android.tests.getinfo.DeviceInfoInstrument.FEATURES_TO_CHECK ) { boolean hasFeature = packageManager.hasSystemFeature ( feature ) ; builder.append ( feature ) . append ( ':' ) . append ( hasFeature ) . append ( ';' ) ; } return builder.toString ( ) ; }
public static void execStandalone ( java.lang.String invokeWith , java.lang.String classPath , java.lang.String className , java.lang.String [ ] args ) { java.lang.StringBuilder command = new java.lang.StringBuilder ( invokeWith ) ; command.append ( " /system/bin/dalvikvm -classpath '" ) . append ( classPath ) ; command.append ( "' " ) . append ( className ) ; dalvik.system.Zygote.appendQuotedShellArgs ( command , args ) ; dalvik.system.Zygote.execShell ( command.toString ( ) ) ; }
public void testDeserializeUnserializableField ( ) throws java.lang.Exception { java.lang.String s = "aced0005737200376c6962636f72652e6a6176612e696f2e53657269616c697a6174696f6e54657" + ( ( ( "3742453657269616c697a61626c65436f6e7461696e657200000000000000000200014c000e756e7" + "3657269616c697a61626c657400124c6a6176612f6c616e672f4f626a6563743b7870737200316c6" ) + "962636f72652e6a6176612e696f2e53657269616c697a6174696f6e5465737424576173536572696" ) + "16c697a61626c65000000000000000002000149000169787000000000" ) ; libcore.java.io.SerializationTest.serializableContainerInitializedFlag = false ; libcore.java.io.SerializationTest.wasSerializableInitializedFlag = false ; try { libcore.util.SerializationTester.deserializeHex ( s ) ; fail ( ) ; } catch ( java.io.InvalidClassException expected ) { } assertFalse ( libcore.java.io.SerializationTest.serializableContainerInitializedFlag ) ; assertFalse ( libcore.java.io.SerializationTest.wasSerializableInitializedFlag ) ; }
public boolean removeWithId ( T item ) { int index = indexWithTypeAndId ( item ) ; return ( ( index >= 0 ) && ( index < ( com.android.tv.dvr.ui.SortedArrayAdapter.size ( ) ) ) ) && ( remove ( com.android.tv.dvr.ui.SortedArrayAdapter.get ( index ) ) ) ; }
public void onCallAudioStateChanged ( android.telecom.CallAudioState oldCallAudioState , android.telecom.CallAudioState newCallAudioState ) { if ( ! ( mInCallServices.isEmpty ( ) ) ) { com.android.server.telecom.Log.i ( this , "Calling onAudioStateChanged, audioState: %s -> %s" , oldCallAudioState , newCallAudioState ) ; for ( com.android.internal.telecom.IInCallService inCallService : mInCallServices.values ( ) ) { try { inCallService.onCallAudioStateChanged ( newCallAudioState ) ; } catch ( android.os.RemoteException ignored ) { } } } }
public void testGetResourceAsStream1 ( ) throws java.io.IOException { java.lang.Class clazz = getClass ( ) ; java.io.InputStream stream = clazz.getResourceAsStream ( "HelloWorld.txt" ) ; assertNotNull ( stream ) ; byte [ ] buffer = new byte [ 20 ] ; int length = stream.read ( buffer ) ; java.lang.String s = new java.lang.String ( buffer , 0 , length ) ; assertEquals ( "Hello, World." , s ) ; stream.close ( ) ; }
public void testIsEmpty ( ) { java.util.concurrent.CopyOnWriteArraySet empty = new java.util.concurrent.CopyOnWriteArraySet ( ) ; java.util.concurrent.CopyOnWriteArraySet full = jsr166.CopyOnWriteArraySetTest.populatedSet ( 3 ) ; assertTrue ( empty.isEmpty ( ) ) ; assertFalse ( full.isEmpty ( ) ) ; }
public android.graphics.Picture capturePicture ( ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { android.graphics.Picture ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < android.graphics.Picture > ( ) { @ java.lang.Override public android.graphics.Picture call ( ) { return capturePicture ( ) ; } } ) ; return ret ; } return mAwContents.capturePicture ( ) ; }
public java.lang.String getMainDexList ( ) { java.lang.String lineSeparator = java.lang.System.getProperty ( "line.separator" , "\n" ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( java.lang.String classDescriptor : toKeep ) { sb.append ( classDescriptor ) ; sb.append ( com.android.multidex.ClassReferenceListBuilder.CLASS_EXTENSION ) ; sb.append ( lineSeparator ) ; } return lineSeparator.toString ( ) ; }
public static boolean hasValidGenericSignature ( @ javax.annotation.Nonnull org.objectweb.asm.tree.ClassNode cn ) { if ( ( cn.signature ) != null ) { try { new com.android.jill.signature.GenericSignatureParser < java.lang.Object > ( new com.android.jill.frontend.java.AsmHelper.DummyAction ( ) ) . parseClassSignature ( cn.signature ) ; return true ; } catch ( java.lang.reflect.GenericSignatureFormatError e ) { } } return false ; }
public void onCallTerminated ( com.android.ims.ImsCall imsCall , android.telephony.ims.ImsReasonInfo reasonInfo ) { if ( com.android.internal.telephony.imsphone.ImsPhoneCallTracker.DBG ) log ( ( "mImsUssdListener onCallTerminated reasonCode=" + ( reasonInfo.getCode ( ) ) ) ) ; removeMessages ( com.android.internal.telephony.imsphone.ImsPhoneCallTracker.EVENT_CHECK_FOR_WIFI_HANDOVER ) ; if ( imsCall == ( mUssdSession ) ) { mUssdSession = null ; if ( ( mPendingUssd ) != null ) { com.android.internal.telephony.CommandException ex = new com.android.internal.telephony.CommandException ( CommandException.Error.GENERIC_FAILURE ) ; android.os.AsyncResult.forMessage ( mPendingUssd , null , ex ) ; mPendingUssd.sendToTarget ( ) ; mPendingUssd = null ; } } imsCall.close ( ) ; }
private void notifyReady ( ) throws com.android.ims.ImsException { com.android.ims.ImsManager manager ; synchronized ( mLock ) { mRetryCount = 0 ; manager = mImsManager ; } mListener.connectionReady ( manager ) ; }
private void addNightModeToBundles ( java.util.List < com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle > addConfig ) { java.util.ArrayList < com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle > list = new java.util.ArrayList < com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle > ( ) ; for ( com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle bundle : addConfig ) { int index = 0 ; for ( com.android.sdklib.resources.NightMode mode : com.android.sdklib.resources.NightMode.values ( ) ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle b = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle ( bundle ) ; b.config.setNightModeQualifier ( new com.android.ide.eclipse.adt.internal.resources.configurations.NightModeQualifier ( mode ) ) ; b.nightModeIndex = index ++ ; list.add ( b ) ; } } addConfig.clear ( ) ; addConfig.addAll ( list ) ; }
public void testMalformedI18NameBytes ( ) { for ( byte [ ] malformedBytes : com.android.server.wifi.hotspot2.anqp.I18NameTest.MALFORMED_I18_NAME_BYTES ) { try { com.android.server.wifi.hotspot2.anqp.I18Name i18Name = new com.android.server.wifi.hotspot2.anqp.I18Name ( java.nio.ByteBuffer.wrap ( malformedBytes ) . order ( java.nio.ByteOrder.LITTLE_ENDIAN ) ) ; } catch ( java.net.ProtocolException e ) { continue ; } fail ( ( "Expected exception while parsing malformed I18 Name bytes: " + malformedBytes ) ) ; } }
public void run ( ) { assertTrue ( mWebView.requestFocus ( View.FOCUS_DOWN , null ) ) ; }
public android.graphics.Bitmap getFavicon ( ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { android.graphics.Bitmap ret = runOnUiThreadBlocking ( new java.util.concurrent.Callable < android.graphics.Bitmap > ( ) { @ java.lang.Override public android.graphics.Bitmap call ( ) { return getFavicon ( ) ; } } ) ; return ret ; } return mAwContents.getFavicon ( ) ; }
private java.io.File getInArgumentPath ( java.lang.String filename ) { java.io.File file = new java.io.File ( filename ) ; if ( ! ( file.isAbsolute ( ) ) ) { java.io.File workDir = getLintWorkDir ( ) ; if ( workDir != null ) { java.io.File file2 = new java.io.File ( workDir , filename ) ; if ( file2.exists ( ) ) { try { file = file2.getCanonicalFile ( ) ; } catch ( java.io.IOException e ) { file = file2 ; } } } } return file ; }
public com.android.ide.common.rendering.api.ResourceValue getResourceValue ( com.android.resources.ResourceType type , com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration referenceConfig , boolean isFramework ) { com.android.ide.eclipse.adt.internal.resources.manager.ResourceFile match = ( ( com.android.ide.eclipse.adt.internal.resources.manager.ResourceFile ) ( referenceConfig.findMatchingConfigurable ( mFiles ) ) ) ; if ( match != null ) { return match.getValue ( type , mName ) ; } return null ; }
public void testAesCbcHmacMd5Tcp6 ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.CRYPT_KEY ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_MD5 , getAuthKey ( 128 ) , 96 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , false , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV6_LOOPBACK , crypt , auth , false , 1 , true ) ; }
public void testGetMaxExpansion ( ) { java.lang.String text = "cha" ; java.text.RuleBasedCollator rbColl = ( ( java.text.RuleBasedCollator ) ( java.text.Collator.getInstance ( new java.util.Locale ( "es" , "" , "TRADITIONAL" ) ) ) ) ; java.text.CollationElementIterator iterator = rbColl.getCollationElementIterator ( text ) ; int order = iterator.next ( ) ; while ( order != ( java.text.CollationElementIterator.NULLORDER ) ) { assertEquals ( 1 , iterator.getMaxExpansion ( order ) ) ; order = iterator.next ( ) ; } }
private void onHandshake ( byte [ ] address , int status ) { android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidService.MESSAGE_ON_HANDSHAKE ) ; msg.obj = address ; msg.arg1 = status ; mHandler.sendMessage ( msg ) ; }
private java.lang.String getLastLineupId ( ) { if ( ( mLineupId ) == null ) { mLineupId = android.preference.PreferenceManager.getDefaultSharedPreferences ( mContext ) . getString ( com.android.tv.data.epg.EpgFetcher.KEY_LAST_LINEUP_ID , null ) ; } if ( com.android.tv.data.epg.EpgFetcher.DEBUG ) android.util.Log.d ( com.android.tv.data.epg.EpgFetcher.TAG , ( "Last lineup_id " + ( mLineupId ) ) ) ; return mLineupId ; }
public android.net.IpSecTransform.Builder setSpi ( @ android.net.IpSecTransform.TransformDirection int direction , android.net.IpSecManager.SecurityParameterIndex spi ) { mConfig.setSpiResourceId ( direction , spi.getResourceId ( ) ) ; return this ; }
public void testE3 ( ) { dot.junit.opcodes.aget_short.d.T_aget_short_1 t = new dot.junit.opcodes.aget_short.d.T_aget_short_1 ( ) ; short [ ] arr = new short [ 2 ] ; try { t.run ( arr , ( - 1 ) ) ; fail ( "expected ArrayIndexOutOfBoundsException" ) ; } catch ( java.lang.ArrayIndexOutOfBoundsException aie ) { } }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JArrayRef x ) { com.android.jack.ir.ast.JExpression instance = x.getInstance ( ) ; parenPush ( x , instance ) ; accept ( instance ) ; parenPop ( x , instance ) ; print ( '[' ) ; accept ( x.getIndexExpr ( ) ) ; print ( ']' ) ; return false ; }
public sun.util.resources.OpenListResourceBundle getParent ( ) { return ( ( sun.util.resources.OpenListResourceBundle ) ( parent ) ) ; }
public boolean dumpProfiles ( java.lang.String gid , java.lang.String packageName , java.lang.String codePaths ) throws com.android.internal.os.InstallerConnection.InstallerException { throw new java.lang.IllegalStateException ( "Should not reach here" ) ; }
com.android.bluetooth.avrcp.Metadata getCurrentMetadata ( ) { return com.android.bluetooth.avrcp.Util.toMetadata ( getMetadata ( ) ) ; }
public synchronized void setCarMode ( boolean isCarMode ) { com.android.server.telecom.Log.i ( this , ( ( ( "carmodechange: " + ( mIsCarMode ) ) + " => " ) + isCarMode ) ) ; if ( isCarMode != ( mIsCarMode ) ) { mIsCarMode = isCarMode ; com.android.server.telecom.InCallController.InCallServiceConnection newConnection = getCurrentConnection ( ) ; if ( newConnection != ( mCurrentConnection ) ) { if ( mIsConnected ) { mCurrentConnection.disconnect ( ) ; newConnection.connect ( null ) ; } mCurrentConnection = newConnection ; } } }
private boolean merge ( com.android.server.pm.dex.PackageDexUsage.DexUseInfo dexUseInfo ) { boolean oldIsUsedByOtherApps = mIsUsedByOtherApps ; mIsUsedByOtherApps = ( mIsUsedByOtherApps ) || ( dexUseInfo.mIsUsedByOtherApps ) ; boolean updateIsas = mLoaderIsas.addAll ( dexUseInfo.mLoaderIsas ) ; return updateIsas || ( oldIsUsedByOtherApps != ( mIsUsedByOtherApps ) ) ; }
public java.util.Collection < java.io.File > getJars ( ) { return configuration.getFiles ( ) ; }
public void testOpenLink_NoLinkFound ( ) { try { android.support.test.espresso.Espresso.onView ( android.support.test.espresso.matcher.ViewMatchers.withId ( R.id.spanned ) ) . perform ( android.support.test.espresso.action.ViewActions.scrollTo ( ) , android.support.test.espresso.action.ViewActions.openLinkWithText ( "bacon" ) ) ; fail ( "Expected previous call to fail" ) ; } catch ( android.support.test.espresso.PerformException expected ) { android.support.test.espresso.matcher.ViewMatchers.assertThat ( expected.getCause ( ) . getMessage ( ) , org.hamcrest.Matchers.containsString ( "bacon" ) ) ; } }
public static java.security.Signature getInstance ( java.lang.String algorithm , java.security.Provider provider ) throws java.security.NoSuchAlgorithmException { if ( algorithm == null ) { throw new java.lang.NullPointerException ( "algorithm == null" ) ; } if ( provider == null ) { throw new java.lang.IllegalArgumentException ( ) ; } return java.security.Signature.getSignatureInstance ( algorithm , provider ) ; }
public void restrictedStateChanged ( int indicationType , int var2 ) { }
protected void engineUpdate ( byte [ ] input , int offset , int len ) { ensureKeystoreOperationInitialized ( ) ; byte [ ] output ; try { output = mChunkedStreamer.update ( input , offset , len ) ; } catch ( android.security.KeyStoreException e ) { throw android.security.KeyStore.getCryptoOperationException ( e ) ; } if ( ( output != null ) && ( ( output.length ) != 0 ) ) { throw new android.security.CryptoOperationException ( "Update operation unexpectedly produced output" ) ; } }
public long getInclusiveTime ( com.android.tools.perflib.vmtrace.ClockType clockType ) { return clockType == ( ClockType.THREAD ) ? com.google.common.primitives.UnsignedInts.toLong ( ( ( mExitThreadTime ) - ( mEntryThreadTime ) ) ) : com.google.common.primitives.UnsignedInts.toLong ( ( ( mExitGlobalTime ) - ( mEntryGlobalTime ) ) ) ; }
public void testParametere002 ( ) throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper ( PARAMETER002 ) . setSourceLevel ( SourceLevel.JAVA_8 ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JackApiV01.class ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.JillBasedToolchain.class ) . addIgnoredCandidateToolchain ( com.android.jack.test.toolchain.LegacyToolchain.class ) . addProperty ( ParameterMetadataAnnotationsAdder.PARAMETER_ANNOTATION.getName ( ) , "true" ) . setWithDebugInfos ( true ) . compileAndRunTest ( ) ; }
public static void checkServerTrusted ( javax.net.ssl.X509TrustManager x509tm , java.security.cert.X509Certificate [ ] chain , java.lang.String authType , java.lang.String host ) throws java.security.cert.CertificateException { x509tm.checkServerTrusted ( chain , authType ) ; }
private static void checkSelectorPresence ( com.android.manifmerger.MergingReport.Builder mergingReport , com.android.manifmerger.XmlElement element ) { org.w3c.dom.Attr selectorAttribute = element.getXml ( ) . getAttributeNodeNS ( SdkConstants.TOOLS_URI , Selector.SELECTOR_LOCAL_NAME ) ; if ( ( selectorAttribute != null ) && ( ! ( element.supportsSelector ( ) ) ) ) { java.lang.String message = java.lang.String.format ( "Unsupported tools:selector=\"%1$s\" found on node %2$s at %3$s" , selectorAttribute.getValue ( ) , element.getId ( ) , element.printPosition ( ) ) ; element.addMessage ( mergingReport , com.android.manifmerger.ERROR , message ) ; } }
public void testConnectFailureDueToNetworkSelectFailure ( ) throws java.lang.Exception { executeAndValidateInitializationSequence ( ) ; setupMocksForConnectSequence ( false ) ; org.mockito.Mockito.when ( mSupplicantStaNetworkMock.select ( ) ) . thenReturn ( false ) ; assertFalse ( mDut.connectToNetwork ( new android.net.wifi.WifiConfiguration ( ) , false ) ) ; }
boolean implementsInterface ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JInterface jinterface ) { for ( com.android.jack.ir.ast.JInterface interf : getImplements ( ) ) { if ( interf.equals ( jinterface ) ) { return true ; } else if ( interf instanceof com.android.jack.ir.ast.JDefinedInterface ) { if ( ( ( com.android.jack.ir.ast.JDefinedInterface ) ( interf ) ) . implementsInterface ( jinterface ) ) { return true ; } } } return false ; }
public void testCompileNonConflictingSourceAndImport ( ) throws java.lang.Exception { java.io.File jackOut = com.android.jack.TestTools.createTempDir ( "importtest" , "dir" ) ; com.android.jack.Options options = com.android.jack.TestTools.buildCommandLineArgs ( com.android.jack.TestTools.getJackTestsWithJackFolder ( "fibonacci" ) ) ; options.jayceOutDir = jackOut ; com.android.jack.TestTools.runCompilation ( options ) ; com.android.jack.Options importOptions = com.android.jack.TestTools.buildCommandLineArgs ( com.android.jack.TestTools.getJackTestsWithJackFolder ( "threeaddress" ) ) ; importOptions.jayceImport.add ( jackOut ) ; com.android.jack.TestTools.runCompilation ( importOptions ) ; }
private void done ( boolean success ) { if ( com.android.carrierdefaultapp.CaptivePortalLoginActivity.DBG ) com.android.carrierdefaultapp.CaptivePortalLoginActivity.logd ( java.lang.String.format ( "Result success %b for %s" , success , mUrl.toString ( ) ) ) ; if ( success ) { com.android.carrierdefaultapp.CarrierActionUtils.applyCarrierAction ( CarrierActionUtils.CARRIER_ACTION_ENABLE_RADIO , getIntent ( ) , getApplicationContext ( ) ) ; com.android.carrierdefaultapp.CarrierActionUtils.applyCarrierAction ( CarrierActionUtils.CARRIER_ACTION_ENABLE_METERED_APNS , getIntent ( ) , getApplicationContext ( ) ) ; com.android.carrierdefaultapp.CarrierActionUtils.applyCarrierAction ( CarrierActionUtils.CARRIER_ACTION_CANCEL_ALL_NOTIFICATIONS , getIntent ( ) , getApplicationContext ( ) ) ; } finishAndRemoveTask ( ) ; }
public int setProvisionedValue ( int item , int value ) throws android.os.RemoteException { return ImsConfig.OperationStatusConstants.FAILED ; }
public void testCheckReadPhoneState_noPermissions ( ) { try { com.android.internal.telephony.TelephonyPermissions.checkReadPhoneState ( mMockContext , com.android.internal.telephony.TelephonyPermissionsTest.PID , com.android.internal.telephony.TelephonyPermissionsTest.UID , com.android.internal.telephony.TelephonyPermissionsTest.PACKAGE , com.android.internal.telephony.TelephonyPermissionsTest.MSG ) ; org.junit.Assert.fail ( "Should have thrown SecurityException" ) ; } catch ( java.lang.SecurityException e ) { } }
public void testKeyStore_Aliases_Success ( ) throws java.lang.Exception { mKeyStore.load ( null , null ) ; assertAliases ( new java.lang.String [ ] { } ) ; assertTrue ( mAndroidKeyStore.generate ( ( ( Credentials.USER_PRIVATE_KEY ) + ( android.security.AndroidKeyStoreTest.TEST_ALIAS_1 ) ) ) ) ; assertAliases ( new java.lang.String [ ] { android.security.AndroidKeyStoreTest.TEST_ALIAS_1 } ) ; assertTrue ( mAndroidKeyStore.put ( ( ( Credentials.CA_CERTIFICATE ) + ( android.security.AndroidKeyStoreTest.TEST_ALIAS_2 ) ) , android.security.AndroidKeyStoreTest.FAKE_CA_1 ) ) ; assertAliases ( new java.lang.String [ ] { android.security.AndroidKeyStoreTest.TEST_ALIAS_1 , android.security.AndroidKeyStoreTest.TEST_ALIAS_2 } ) ; }
public static com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type valueOf ( int value ) { switch ( value ) { case 1 : return com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type.VOID ; case 2 : return com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type.CHAR ; case 3 : return com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type.BYTE ; case 4 : return com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type.INT ; case 5 : return com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type.FLOAT ; case 6 : return com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type.BOOL ; case 7 : return com.android.ide.eclipse.gltrace.GLProtoBuf.GLMessage.DataType.Type.ENUM ; default : return null ; } }
protected com.android.sdkuilib.internal.repository.core.PackageLoader getPackageLoader ( boolean useLocalCache ) { com.android.sdklib.internal.repository.DownloadCache dc = mUpdaterData.getDownloadCache ( ) ; assert dc instanceof com.android.sdkuilib.internal.repository.MockDownloadCache ; if ( dc instanceof com.android.sdkuilib.internal.repository.MockDownloadCache ) { ( ( com.android.sdkuilib.internal.repository.MockDownloadCache ) ( dc ) ) . overrideStrategy ( ( useLocalCache ? com.android.sdklib.internal.repository.DownloadCache.Strategy.ONLY_CACHE : null ) ) ; } return mUpdaterData.getPackageLoader ( ) ; }
public void onServiceConnected ( int profile , android.bluetooth.BluetoothProfile proxy ) { synchronized ( this ) { switch ( profile ) { case android.bluetooth.BluetoothProfile.A2DP : mA2dp = ( ( android.bluetooth.BluetoothA2dp ) ( proxy ) ) ; break ; case android.bluetooth.BluetoothProfile.HEADSET : mHeadset = ( ( android.bluetooth.BluetoothHeadset ) ( proxy ) ) ; break ; case android.bluetooth.BluetoothProfile.INPUT_DEVICE : mInput = ( ( android.bluetooth.BluetoothInputDevice ) ( proxy ) ) ; break ; case android.bluetooth.BluetoothProfile.PAN : mPan = ( ( android.bluetooth.BluetoothPan ) ( proxy ) ) ; break ; } } }
public java.lang.String getShortDescription ( ) { return java.lang.String.format ( "%1$s System Image, Android API %2$s, revision %3$s%4$s" , getAbiDisplayName ( ) , mVersion.getApiString ( ) , getRevision ( ) . toShortString ( ) , ( isObsolete ( ) ? " (Obsolete)" : "" ) ) ; }
public com.android.jack.test.toolchain.JackBasedToolchain setSourceLevel ( @ javax.annotation.Nonnull com.android.jack.test.toolchain.SourceLevel sourceLevel ) { super . setSourceLevel ( sourceLevel ) ; switch ( sourceLevel ) { case JAVA_6 : addProperty ( "jack.java.source.version" , "1.6" ) ; break ; case JAVA_7 : addProperty ( "jack.java.source.version" , "1.7" ) ; break ; default : throw new java.lang.AssertionError ( ( ( "Unkown level: '" + ( sourceLevel.toString ( ) ) ) + "'" ) ) ; } return this ; }
public void createTest ( com.android.rs.image2.Resources res ) { mScript = new com.android.rs.image2.ScriptC_wbalance ( mRS ) ; }
public boolean remove ( java.lang.Object element ) { try { @ java.lang.SuppressWarnings ( value = "unchecked" ) E e = ( ( E ) ( element ) ) ; return ( predicate.apply ( e ) ) && ( unfiltered.remove ( element ) ) ; } catch ( java.lang.NullPointerException e ) { return false ; } catch ( java.lang.ClassCastException e ) { return false ; } }
public java.net.Socket accept ( ) throws java.io.IOException { if ( ! ( sslParameters.getUseClientMode ( ) ) ) { checkEnabledCipherSuites ( ) ; } org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl socket = new org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl ( sslParameters , enabledProtocols.clone ( ) , enabledCipherSuites.clone ( ) ) ; implAccept ( socket ) ; return socket ; }
private void addDockModeToBundles ( java.util.List < com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle > addConfig ) { java.util.ArrayList < com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle > list = new java.util.ArrayList < com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle > ( ) ; for ( com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle bundle : addConfig ) { int index = 0 ; for ( com.android.resources.DockMode mode : com.android.resources.DockMode.values ( ) ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle b = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigBundle ( bundle ) ; b.config.setDockModeQualifier ( new com.android.ide.common.resources.configuration.DockModeQualifier ( mode ) ) ; b.dockModeIndex = index ++ ; list.add ( b ) ; } } addConfig.clear ( ) ; addConfig.addAll ( list ) ; }
public void testStateTransition_DisconnectedToConnecting_StackConnected ( ) { mHeadsetStateMachine.sendMessage ( HeadsetStateMachine.STACK_EVENT , new com.android.bluetooth.hfp.HeadsetStackEvent ( HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED , HeadsetHalConstants.CONNECTION_STATE_CONNECTED , mTestDevice ) ) ; verify ( mHeadsetService , timeout ( com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS ) ) . sendBroadcastAsUser ( mIntentArgument.capture ( ) , eq ( UserHandle.ALL ) , eq ( HeadsetService.BLUETOOTH_PERM ) ) ; com.android.bluetooth.hfp.HeadsetStateMachineTest.verifyConnectionStateBroadcast ( mTestDevice , BluetoothProfile.STATE_CONNECTING , BluetoothProfile.STATE_DISCONNECTED , mIntentArgument.getValue ( ) ) ; org.junit.Assert.assertThat ( mHeadsetStateMachine.getCurrentState ( ) , org.hamcrest.core.IsInstanceOf.instanceOf ( HeadsetStateMachine.Connecting.class ) ) ; }
void setUp ( ) { createChannels ( ) ; sendNotifications ( com.android.cts.verifier.notifications.AttentionManagementVerifierActivity.MODE_URI , false , false ) ; status = READY ; delay ( ) ; }
public void testCheckAccessLevel_hasReadHistoryPermission ( ) throws java.lang.Exception { setHasCarrierPrivileges ( false ) ; setIsDeviceOwner ( false ) ; setIsProfileOwner ( true ) ; setHasAppOpsPermission ( AppOpsManager.MODE_DEFAULT , false ) ; setHasReadHistoryPermission ( true ) ; assertEquals ( NetworkStatsAccess.Level.USER , com.android.server.net.NetworkStatsAccess.checkAccessLevel ( mContext , com.android.server.net.NetworkStatsAccessTest.TEST_UID , com.android.server.net.NetworkStatsAccessTest.TEST_PKG ) ) ; }
public static java.lang.String getUsernameFromUriNumber ( java.lang.String number ) { int delimiterIndex = number.indexOf ( '@' ) ; if ( delimiterIndex < 0 ) { delimiterIndex = number.indexOf ( "%40" ) ; } if ( delimiterIndex < 0 ) { android.util.Log.w ( android.telephony.PhoneNumberUtils.LOG_TAG , ( ( "getUsernameFromUriNumber: no delimiter found in SIP addr '" + number ) + "'" ) ) ; delimiterIndex = number.length ( ) ; } return number.substring ( 0 , delimiterIndex ) ; }
public boolean onPackageChanged ( java.lang.String packageName , int uid , java.lang.String [ ] components ) { onPackageModified ( packageName ) ; return true ; }
private static com.ibm.icu.text.CompactDecimalDataCache.Data loadStyle ( com.ibm.icu.impl.ICUResourceBundle r , com.ibm.icu.util.ULocale locale , java.lang.String style ) { int size = r.getSize ( ) ; com.ibm.icu.text.CompactDecimalDataCache.Data result = new com.ibm.icu.text.CompactDecimalDataCache.Data ( new long [ com.ibm.icu.text.CompactDecimalDataCache.MAX_DIGITS ] , new java.util.HashMap < java.lang.String , com.ibm.icu.text.DecimalFormat [ ] > ( ) ) ; for ( int i = 0 ; i < size ; i ++ ) { com.ibm.icu.text.CompactDecimalDataCache.populateData ( r.get ( i ) , locale , style , result ) ; } com.ibm.icu.text.CompactDecimalDataCache.fillInMissing ( result ) ; return result ; }
public void binderDied ( ) { foregroundTokenDied ( this ) ; }
public boolean isRoot ( ) { if ( ( ( ( mParent ) != null ) && ( mParent.mName.endsWith ( com.android.ide.common.layout.LayoutConstants.GESTURE_OVERLAY_VIEW ) ) ) && ( mParent.isRoot ( ) ) ) { return true ; } return ( ( ( mUiViewNode ) == null ) || ( ( mUiViewNode.getUiParent ( ) ) == null ) ) || ( ( mUiViewNode.getUiParent ( ) . getUiParent ( ) ) == null ) ; }
private void reliableWrite ( ) { mBluetoothGatt.beginReliableWrite ( ) ; sleep ( 1000 ) ; writeCharacteristic ( com.android.cts.verifier.bluetooth.BleClientService.WRITE_VALUE ) ; sleep ( 1000 ) ; if ( ! ( mBluetoothGatt.executeReliableWrite ( ) ) ) { android.util.Log.w ( com.android.cts.verifier.bluetooth.BleClientService.TAG , "reliable write failed" ) ; } sleep ( 1000 ) ; mBluetoothGatt.abortReliableWrite ( ) ; }
public com.android.ide.common.api.Margins getInsets ( java.lang.String fqcn ) { if ( com.android.ide.eclipse.adt.internal.editors.layout.gre.ViewMetadataRepository.INSETS_SUPPORTED ) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite configComposite = mEditorDelegate.getGraphicalEditor ( ) . getConfigurationComposite ( ) ; java.lang.String theme = configComposite.getTheme ( ) ; com.android.resources.Density density = configComposite.getDensity ( ) ; return com.android.ide.eclipse.adt.internal.editors.layout.gre.ViewMetadataRepository.getInsets ( fqcn , density , theme ) ; } else { return null ; } }
private void onCreateImsFeatureInternal ( int slotId , int featureType , com.android.ims.internal.IImsFeatureStatusCallback c ) { android.util.SparseArray < android.telephony.ims.feature.ImsFeature > featureMap = mFeatures.get ( slotId ) ; if ( featureMap == null ) { featureMap = new android.util.SparseArray ( ) ; mFeatures.put ( slotId , featureMap ) ; } android.telephony.ims.feature.ImsFeature f = makeImsFeature ( slotId , featureType ) ; if ( f != null ) { f.setImsFeatureStatusCallback ( c ) ; featureMap.put ( featureType , f ) ; } }
protected boolean engineVerify ( byte [ ] sigBytes ) throws java.security.SignatureException { if ( ( key ) == null ) { throw new java.security.SignatureException ( "Need RSA public key" ) ; } try { int result = org.conscrypt.NativeCrypto.EVP_VerifyFinal ( ctx , sigBytes , 0 , sigBytes.length , key.getNativeRef ( ) ) ; return result == 1 ; } catch ( java.lang.Exception ex ) { return false ; } finally { resetContext ( ) ; } }
public static < T > void assertThat ( java.lang.String reason , T actual , org.hamcrest.Matcher < T > matcher ) { if ( ! ( matcher.matches ( actual ) ) ) { org.hamcrest.Description description = new org.hamcrest.StringDescription ( ) ; description.appendText ( reason ) ; description.appendText ( "\nExpected: " ) ; description.appendDescriptionOf ( matcher ) ; description.appendText ( "\n got: " ) ; description.appendValue ( actual ) ; description.appendText ( "\n" ) ; throw new java.lang.AssertionError ( description.toString ( ) ) ; } }
private void sendConnectTimeoutMessage ( ) { if ( com.android.bluetooth.map.BluetoothMapService.DEBUG ) android.util.Log.d ( com.android.bluetooth.map.BluetoothMapService.TAG , "sendConnectTimeoutMessage()" ) ; if ( ( mSessionStatusHandler ) != null ) { android.os.Message msg = mSessionStatusHandler.obtainMessage ( com.android.bluetooth.map.BluetoothMapService.USER_TIMEOUT ) ; msg.sendToTarget ( ) ; } }
public void cannotRemoveNetworkConfigWhenWifiDisabed ( ) { boolean result ; mLooper.startAutoDispatch ( ) ; result = mWsm.syncRemoveNetwork ( mWsmAsyncChannel , 0 ) ; mLooper.stopAutoDispatch ( ) ; org.junit.Assert.assertFalse ( result ) ; verify ( mWifiConfigManager , never ( ) ) . removeNetwork ( anyInt ( ) , anyInt ( ) ) ; }
protected void tearDown ( ) throws java.lang.Exception { if ( mShouldTestTelecom ) { cleanupCalls ( ) ; if ( ! ( android.text.TextUtils.isEmpty ( mPreviousDefaultDialer ) ) ) { android.telecom.cts.TestUtils.setDefaultDialer ( getInstrumentation ( ) , mPreviousDefaultDialer ) ; } tearDownConnectionService ( TestUtils.TEST_PHONE_ACCOUNT_HANDLE ) ; assertMockInCallServiceUnbound ( ) ; } super . tearDown ( ) ; }
static java.lang.String retrieveAlphaId ( com.android.internal.telephony.cat.ComprehensionTlv ctlv ) throws com.android.internal.telephony.cat.ResultException { if ( ctlv != null ) { byte [ ] rawValue = ctlv.getRawValue ( ) ; int valueIndex = ctlv.getValueIndex ( ) ; int length = ctlv.getLength ( ) ; if ( length != 0 ) { try { return com.android.internal.telephony.IccUtils.adnStringFieldToString ( rawValue , valueIndex , length ) ; } catch ( java.lang.IndexOutOfBoundsException e ) { throw new com.android.internal.telephony.cat.ResultException ( ResultCode.CMD_DATA_NOT_UNDERSTOOD ) ; } } else { return CatService.STK_DEFAULT ; } } else { return CatService.STK_DEFAULT ; } }
private void compileJava7Test ( @ javax.annotation.Nonnull java.lang.String name ) throws java.lang.Exception { com.android.jack.test.toolchain.IToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain ( ) ; toolchain.setSourceLevel ( SourceLevel.JAVA_7 ) . srcToExe ( com.android.jack.test.toolchain.AbstractTestTools.getClasspathAsString ( toolchain.getDefaultBootClasspath ( ) ) , com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) , false , com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir ( ( ( "com.android.jack.java7.switches." + name ) + ".jack" ) ) ) ; }
public void clearFormData ( ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { clearFormData ( ) ; } } ) ; return ; } mAwContents.hideAutofillPopup ( ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { final java.lang.String action = intent.getAction ( ) ; if ( ( ( Intent.ACTION_TIME_TICK.equals ( action ) ) || ( Intent.ACTION_TIME_CHANGED.equals ( action ) ) ) || ( Intent.ACTION_TIMEZONE_CHANGED.equals ( action ) ) ) { updateClock ( ) ; } }
public void setRttMode ( int mode ) { try { android.telecom.Log.startSession ( "ICA.sRM" ) ; long token = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( mLock ) { } } finally { android.os.Binder.restoreCallingIdentity ( token ) ; } } finally { android.telecom.Log.endSession ( ) ; } }
public void testSortBySource_Reload ( ) { com.android.sdklib.internal.repository.SdkSource src1 = new com.android.sdklib.internal.repository.SdkRepoSource ( "http://example.com/url" , "repo1" ) ; m.updateStart ( ) ; assertTrue ( m.updateSourcePackages ( false , null , new java.lang.Package [ ] { new com.android.sdklib.internal.repository.MockEmptyPackage ( src1 , "type1" , 1 ) } ) ) ; assertTrue ( m.updateSourcePackages ( false , src1 , new java.lang.Package [ ] { new com.android.sdklib.internal.repository.MockEmptyPackage ( src1 , "type1" , 2 ) } ) ) ; assertTrue ( m.updateEnd ( false ) ) ; assertEquals ( ( "PkgCategorySource <source=repo1 (example.com), #items=1>\n" + "-- <INSTALLED, pkg:MockEmptyPackage \'type1\' rev=1, updated by:MockEmptyPackage \'type1\' rev=2>\n" ) , getTree ( m , false ) ) ; m.updateStart ( ) ; assertFalse ( m.updateSourcePackages ( false , null , new java.lang.Package [ ] { new com.android.sdklib.internal.repository.MockEmptyPackage ( src1 , "type1" , 1 ) } ) ) ; assertFalse ( m.updateSourcePackages ( false , src1 , new java.lang.Package [ ] { new com.android.sdklib.internal.repository.MockEmptyPackage ( src1 , "type1" , 2 ) } ) ) ; assertTrue ( m.updateEnd ( false ) ) ; assertEquals ( ( "PkgCategorySource <source=repo1 (example.com), #items=1>\n" + "-- <INSTALLED, pkg:MockEmptyPackage \'type1\' rev=1, updated by:MockEmptyPackage \'type1\' rev=2>\n" ) , getTree ( m , false ) ) ; }
private java.lang.String getMsvSuffix ( ) { try { java.lang.String msv = readLine ( com.android.settings.DeviceInfoSettings.FILENAME_MSV ) ; if ( ( java.lang.Long.parseLong ( msv , 16 ) ) == 0 ) { return " (ENGINEERING)" ; } } catch ( java.io.IOException ioe ) { } catch ( java.lang.NumberFormatException nfe ) { } return "" ; }
public java.lang.invoke.MethodHandle asSpreader ( java.lang.Class < ? > arrayType , int arrayLength ) { java.lang.invoke.MethodType postSpreadType = asSpreaderChecks ( arrayType , arrayLength ) ; throw new java.lang.UnsupportedOperationException ( "asSpreader(Class<?>, int)" ) ; }
public java.lang.String toString ( ) { return ( ( ( ( ( ( "ResourceFile{" + "mFile='" ) + ( getFile ( ) ) ) + '\'' ) + ", mQualifiers='" ) + ( mQualifiers ) ) + '\'' ) + '}' ; }
public final double getDouble ( ) { int newPosition = ( position ) + ( libcore.io.SizeOf.DOUBLE ) ; if ( newPosition > ( limit ) ) { throw new java.nio.BufferUnderflowException ( ) ; } double result = java.lang.Double.longBitsToDouble ( this . block.peekLong ( ( ( offset ) + ( position ) ) , order ) ) ; position = newPosition ; return result ; }
public java.io.File findResource ( @ com.android.annotations.NonNull java.lang.String relativePath ) { java.io.File dir = com.android.tools.lint.client.api.LintClient.getLintBinDir ( ) ; if ( dir == null ) { throw new java.lang.IllegalArgumentException ( ( ( "Lint must be invoked with the System property " + ( com.android.tools.lint.client.api.LintClient.PROP_BIN_DIR ) ) + " pointing to the ANDROID_SDK tools directory" ) ) ; } java.io.File top = dir.getParentFile ( ) ; java.io.File file = new java.io.File ( top , relativePath ) ; if ( file.exists ( ) ) { return file ; } else { return null ; } }
public void gattClientDisconnect ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "index" ) java.lang.Integer index ) throws java.lang.Exception { if ( ( mBluetoothGattList.get ( index ) ) != null ) { mBluetoothGattList.get ( index ) . disconnect ( ) ; } else { throw new java.lang.Exception ( ( "Invalid index input:" + index ) ) ; } }
public void testWithSingleUninstalledPackage ( ) { java.lang.String testPackageName = "test.package.name" ; android.webkit.WebViewProviderInfo [ ] webviewPackages = new android.webkit.WebViewProviderInfo [ ] { new android.webkit.WebViewProviderInfo ( testPackageName , "" , true , false , null ) } ; setupWithPackages ( webviewPackages , true , 1 ) ; mTestSystemImpl.setPackageInfo ( com.android.server.webkit.WebViewUpdateServiceTest.createPackageInfo ( testPackageName , true , true , false ) ) ; mWebViewUpdateServiceImpl.prepareWebViewInSystemServer ( ) ; checkPreparationPhasesForPackage ( testPackageName , 1 ) ; }
public void addActiveDownstream ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine downstream ) { if ( ( mActiveDownstreams.indexOf ( downstream ) ) == ( - 1 ) ) { mActiveDownstreams.offer ( downstream ) ; updateIPv6TetheringInterfaces ( ) ; } }
public static final void check ( java.security.cert.X509Certificate [ ] chain ) throws java.security.cert.CertificateException { for ( java.security.cert.X509Certificate cert : chain ) { org.conscrypt.ChainStrengthAnalyzer.checkCert ( cert ) ; } }
private boolean stillRunning ( ) { synchronized ( mLock ) { return mRunning ; } }
public void testDisableWifiFromSoftApModeActiveState ( ) throws java.lang.Exception { enterSoftApActiveMode ( ) ; mWifiStateMachinePrime.disableWifi ( ) ; mLooper.dispatchNext ( ) ; verify ( mSoftApManager ) . stop ( ) ; verify ( mWificond ) . tearDownInterfaces ( ) ; org.junit.Assert.assertEquals ( "WifiDisabled" , mWifiStateMachinePrime.getCurrentMode ( ) ) ; }
private void cancelAllNotifications ( ) { android.app.NotificationManager notificationManager = ( ( android.app.NotificationManager ) ( mPhone.getContext ( ) . getSystemService ( Context.NOTIFICATION_SERVICE ) ) ) ; notificationManager.cancelAll ( ) ; }
public static int retrieveFirstDayOfWeek ( java.util.Locale locale ) { sun.util.locale.provider.LocaleServiceProviderPool pool = sun.util.locale.provider.LocaleServiceProviderPool.getPool ( java.util.spi.CalendarDataProvider.class ) ; java.lang.Integer value = pool.getLocalizedObject ( sun.util.locale.provider.CalendarDataUtility.CalendarWeekParameterGetter.INSTANCE , locale , sun.util.locale.provider.CalendarDataUtility.FIRST_DAY_OF_WEEK ) ; return ( value != null ) && ( ( value >= ( java.util.Calendar.SUNDAY ) ) && ( value <= ( java.util.Calendar.SATURDAY ) ) ) ? value : java.util.Calendar.SUNDAY ; }
public void onPageFinished ( android.webkit.WebView view , java.lang.String url ) { ( mPagesLoaded ) ++ ; getProgressBar ( ) . setVisibility ( View.INVISIBLE ) ; if ( ( mPagesLoaded ) == 1 ) { setWebViewProxy ( ) ; view.loadUrl ( mUrl.toString ( ) ) ; return ; } else if ( ( mPagesLoaded ) == 2 ) { view.clearHistory ( ) ; } testForCaptivePortal ( ) ; }
private void logString ( java.lang.String value ) { logView.append ( ( ( ( ( new java.util.Date ( ) ) + " " ) + value ) + "\n" ) ) ; int scrollAmount = ( logView.getLayout ( ) . getLineTop ( logView.getLineCount ( ) ) ) - ( logView.getHeight ( ) ) ; logView.scrollTo ( 0 , scrollAmount ) ; }
public void createTerminal ( com.intellij.openapi.project.Project project , com.intellij.openapi.wm.ToolWindow toolWindow ) { org.jetbrains.plugins.terminal.LocalTerminalDirectRunner terminalRunner = org.jetbrains.plugins.terminal.OpenLocalTerminalAction.createTerminalRunner ( project ) ; if ( terminalRunner != null ) { myTerminalWidget = terminalRunner.createTerminalWidget ( ) ; } final com.intellij.ui.content.Content content = createToolWindowContentPanel ( terminalRunner , myTerminalWidget ) ; toolWindow.getContentManager ( ) . addContent ( content ) ; }
public boolean matchesNationalNumber ( java.lang.String nationalNumber , com.google.i18n.phonenumbers.Phonemetadata.PhoneNumberDesc numberDesc , boolean allowPrefixMatch ) { java.util.regex.Matcher nationalNumberPatternMatcher = regexCache.getPatternForRegex ( numberDesc.getNationalNumberPattern ( ) ) . matcher ( nationalNumber ) ; return ( nationalNumberPatternMatcher.matches ( ) ) || ( allowPrefixMatch && ( nationalNumberPatternMatcher.lookingAt ( ) ) ) ; }
private com.android.jack.dx.rop.code.RegisterSpec getRegisterSpec ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JExpression expr ) { com.android.jack.dx.rop.code.RegisterSpec regSpec ; if ( expr instanceof com.android.jack.ir.ast.JVariableRef ) { regSpec = ropReg.getRegisterSpec ( ( ( com.android.jack.ir.ast.JVariableRef ) ( expr ) ) ) ; } else { assert expr instanceof com.android.jack.ir.ast.JValueLiteral ; regSpec = ropReg.getOrCreateTmpRegister ( com.android.jack.backend.dex.rop.RopHelper.convertTypeToDxWithoutClosure ( expr.getType ( ) ) ) ; buildConstant ( regSpec , ( ( com.android.jack.ir.ast.JValueLiteral ) ( expr ) ) ) ; } return regSpec ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.lang.System.loadLibrary ( args [ 1 ] ) ; SameThread.doTest ( ) ; java.lang.System.out.println ( ) ; OtherThread.doTestOtherThreadWait ( ) ; java.lang.System.out.println ( ) ; OtherThread.doTestOtherThreadBusyLoop ( ) ; java.lang.System.out.println ( ) ; AllTraces.doTest ( ) ; java.lang.System.out.println ( "Done" ) ; }
private void readFully ( byte [ ] buffer , int offset , int length ) throws java.io.IOException { int result ; while ( length > 0 ) { result = in.read ( buffer , offset , length ) ; if ( result == ( - 1 ) ) { throw new java.io.EOFException ( ) ; } offset += result ; length -= result ; } }
public java.util.List < android.service.carrier.CarrierIdentifier > getAllowedCarriers ( int slotId ) { try { com.android.internal.telephony.ITelephony service = getITelephony ( ) ; if ( service != null ) { return service.getAllowedCarriers ( slotId ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#getAllowedCarriers" , e ) ; } catch ( java.lang.NullPointerException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#setAllowedCarriers" , e ) ; } return new java.util.ArrayList < android.service.carrier.CarrierIdentifier > ( 0 ) ; }
public com.android.calculator2.BoundedRational pow ( java.math.BigInteger exp ) { if ( ( exp.signum ( ) ) < 0 ) { return com.android.calculator2.BoundedRational.inverse ( pow ( exp.negate ( ) ) ) ; } if ( exp.equals ( java.math.BigInteger.ONE ) ) { return this ; } return reduce ( ) . rawPow ( exp ) ; }
public com.google.common.base.Optional < com.android.manifmerger.XmlDocument > merge ( com.android.manifmerger.XmlDocument lowerPriorityDocument , com.android.manifmerger.MergingReport.Builder mergingReportBuilder ) { mergingReportBuilder.getActionRecorder ( ) . recordDefaultNodeAction ( getRootNode ( ) ) ; getRootNode ( ) . mergeWithLowerPriorityNode ( lowerPriorityDocument.getRootNode ( ) , mergingReportBuilder ) ; return mergingReportBuilder.hasErrors ( ) ? com.google.common.base.Optional.< com.android.manifmerger.XmlDocument > absent ( ) : com.google.common.base.Optional.of ( reparse ( ) ) ; }
private void setCalcTypeForLocale ( com.ibm.icu.util.ULocale locale ) { java.lang.String localeCalType = com.ibm.icu.impl.CalendarUtil.getCalendarType ( locale ) ; if ( "islamic-civil" . equals ( localeCalType ) ) setType ( com.ibm.icu.util.IslamicCalendar.CalculationType.ISLAMIC_CIVIL ) ; else if ( "islamic-umalqura" . equals ( localeCalType ) ) setType ( com.ibm.icu.util.IslamicCalendar.CalculationType.ISLAMIC_UMALQURA ) ; else if ( "islamic-tbla" . equals ( localeCalType ) ) setType ( com.ibm.icu.util.IslamicCalendar.CalculationType.ISLAMIC_TBLA ) ; else if ( localeCalType.startsWith ( "islamic" ) ) setType ( com.ibm.icu.util.IslamicCalendar.CalculationType.ISLAMIC ) ; else setType ( com.ibm.icu.util.IslamicCalendar.CalculationType.ISLAMIC_CIVIL ) ; }
public void close ( ) throws com.android.sched.util.file.CannotCreateFileException , com.android.sched.util.file.WrongPermissionException , java.io.IOException { if ( ! ( closed ) ) { dumpToDir ( getRootDir ( ) , finalVFS.getRootDir ( ) ) ; finalVFS.close ( ) ; workVFS.close ( ) ; closed = true ; } }
public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( "EAP Method " ) . append ( mEAPMethodID ) . append ( '\n' ) ; for ( java.util.Set < com.android.server.wifi.hotspot2.anqp.eap.AuthParam > paramSet : mAuthParams.values ( ) ) { for ( com.android.server.wifi.hotspot2.anqp.eap.AuthParam param : paramSet ) { sb.append ( " " ) . append ( param.toString ( ) ) ; } } return sb.toString ( ) ; }
public static void main ( java.lang.String [ ] args ) { java.lang.System.loadLibrary ( "arttest" ) ; JniTest.testFindClassOnAttachedNativeThread ( ) ; JniTest.testFindFieldOnAttachedNativeThread ( ) ; JniTest.testCallStaticVoidMethodOnSubClass ( ) ; JniTest.testGetMirandaMethod ( ) ; JniTest.testZeroLengthByteBuffers ( ) ; }
public void testNotifyPrimaryForeignUse ( ) { notifyDexLoad ( mFooUser0 , mBarUser0.getBaseAndSplitDexPaths ( ) , mUser0 ) ; com.android.server.pm.dex.PackageDexUsage.PackageUseInfo pui = getPackageUseInfo ( mBarUser0 ) ; org.junit.Assert.assertTrue ( pui.isUsedByOtherApps ( ) ) ; org.junit.Assert.assertTrue ( pui.getDexUseInfoMap ( ) . isEmpty ( ) ) ; }
public lombok.ast.AstVisitor createJavaVisitor ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context ) { return new com.android.tools.lint.checks.DateFormatDetector.ConstructorVisitor ( context ) ; }
public boolean isMultipartDownload ( ) { return ( ( getSourceUri ( ) . getLastPathSegment ( ) ) != null ) && ( getSourceUri ( ) . getLastPathSegment ( ) . contains ( "*" ) ) ; }
public void trackingEnabled_reliabilityTrigger_afterRebootNoTriggerNeeded ( ) throws java.lang.Exception { configureTrackingEnabled ( ) ; configureReliabilityConfigSettingsOk ( ) ; com.android.server.timezone.PackageVersions packageVersions = configureValidApplications ( ) ; mPackageStatusStorage.forceCheckStateForTests ( PackageStatus.CHECK_COMPLETED_SUCCESS , packageVersions ) ; mPackageTracker.start ( ) ; checkIntentHelperInitializedAndReliabilityTrackingEnabled ( ) ; checkPackageStorageStatus ( PackageStatus.CHECK_COMPLETED_SUCCESS , packageVersions ) ; mFakeIntentHelper.simulateReliabilityTrigger ( ) ; mFakeIntentHelper.assertUpdateNotTriggered ( ) ; checkUpdateCheckSuccessful ( packageVersions ) ; }
public void testBasic ( ) { com.android.build.gradle.model.AndroidProjectTest.ProjectData projectData = getModelForProject ( "basic" ) ; com.android.build.gradle.model.AndroidProject model = projectData.model ; assertFalse ( "Library Project" , model.isLibrary ( ) ) ; assertEquals ( "Compile Target" , "android-15" , model.getCompileTarget ( ) ) ; assertFalse ( "Non empty bootclasspath" , model.getBootClasspath ( ) . isEmpty ( ) ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod jmethod ) { com.android.jack.ir.ast.JVariable thisVar = jmethod.getThis ( ) ; if ( thisVar != null ) { if ( ! ( thisVar.containsMarker ( com.android.jack.analysis.DefinitionMarker.class ) ) ) { thisVar.addMarkerIfAbsent ( new com.android.jack.analysis.DefinitionMarker ( thisVar ) ) ; } } return super . visit ( jmethod ) ; }
public void setOverlayImage ( final org.eclipse.swt.graphics.Image overlayImage ) { org.eclipse.swt.widgets.Display.getDefault ( ) . syncExec ( new java.lang.Runnable ( ) { public void run ( ) { synchronized ( com.android.hierarchyviewerlib.models.PixelPerfectModel.this ) { if ( ( com.android.hierarchyviewerlib.models.PixelPerfectModel.this . overlayImage ) != null ) { com.android.hierarchyviewerlib.models.PixelPerfectModel.this . overlayImage.dispose ( ) ; } com.android.hierarchyviewerlib.models.PixelPerfectModel.this . overlayImage = overlayImage ; } } } ) ; notifyOverlayChanged ( ) ; }
protected void doApply ( java.util.zip.ZipFile patchFile , java.io.File toFile ) throws java.io.IOException { com.intellij.updater.Utils.delete ( toFile ) ; }
private static void sendMulticastMessage ( java.net.InetAddress group , int port , java.lang.String msg ) throws java.io.IOException { libcore.java.nio.channels.DatagramChannelMulticastTest.sendMulticastMessage ( group , port , msg , null ) ; }
public static void main ( java.lang.String [ ] args ) { java.lang.System.loadLibrary ( "arttest" ) ; Main.testFindClassOnAttachedNativeThread ( ) ; Main.testFindFieldOnAttachedNativeThread ( ) ; Main.testReflectFieldGetFromAttachedNativeThreadNative ( ) ; Main.testCallStaticVoidMethodOnSubClass ( ) ; Main.testGetMirandaMethod ( ) ; Main.testZeroLengthByteBuffers ( ) ; Main.testByteMethod ( ) ; Main.testShortMethod ( ) ; Main.testBooleanMethod ( ) ; Main.testCharMethod ( ) ; }
public static java.io.InputStream getXsdStream ( ) { return com.android.dvlib.DeviceSchema.class . getResourceAsStream ( "devices.xsd" ) ; }
synchronized void nAllocationData1D ( int id , int off , int mip , int count , float [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData1D ( mContext , id , off , mip , count , d , sizeBytes ) ; }
protected void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; if ( parseIntent ( ) ) { finish ( ) ; return ; } createDialog ( ) ; if ( ( getResources ( ) . getBoolean ( R.bool.auto_confirm_bluetooth_activation_dialog ) ) == true ) { onClick ( null , com.android.settings.bluetooth.BUTTON_POSITIVE ) ; dismiss ( ) ; } }
public boolean startOpenGlTracing ( ) { boolean canTraceOpenGl = mClientData.hasFeature ( ClientData.FEATURE_OPENGL_TRACING ) ; if ( ! canTraceOpenGl ) { return false ; } try { com.android.ddmlib.OpenGlTraceChunkHandler.sendStartGlTracing ( this ) ; return true ; } catch ( java.io.IOException e ) { com.android.ddmlib.Log.w ( "ddms" , "Start OpenGL Tracing failed" ) ; return false ; } }
protected void replaceUpdated ( java.io.File from , java.io.File dest ) throws java.io.IOException { if ( ! ( dest.delete ( ) ) ) throw new java.io.IOException ( ( "Cannot delete file " + dest ) ) ; com.intellij.updater.Utils.copy ( from , dest ) ; }
public void addChoices ( java.util.List < java.lang.String > titles , java.util.List < java.net.URL > iconUrls , java.util.List < java.lang.String > ids ) { com.android.ide.common.api.IAttributeInfo info = first.getAttributeInfo ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , com.android.ide.common.layout.LayoutConstants.ATTR_LAYOUT_GRAVITY ) ; if ( info != null ) { assert IAttributeInfo.Format.FLAG.in ( info.getFormats ( ) ) ; for ( java.lang.String name : info.getFlagValues ( ) ) { titles.add ( prettyName ( name ) ) ; ids.add ( name ) ; } } }
public void testOneSystemOneUserOneDeleted ( ) throws java.lang.Exception { org.conscrypt.TrustedCertificateStoreTest.install ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; store.installCertificate ( org.conscrypt.TrustedCertificateStoreTest.getCa2 ( ) ) ; store.deleteCertificateEntry ( org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; assertDeleted ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; assertRootCa ( org.conscrypt.TrustedCertificateStoreTest.getCa2 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasUserCa2 ( ) ) ; assertAliases ( org.conscrypt.TrustedCertificateStoreTest.getAliasUserCa2 ( ) ) ; }
private void cmdDumpsys ( java.io.FileDescriptor fd , java.io.PrintWriter pw , java.lang.String [ ] args ) { final android.net.ConnectivityMetricsEvent [ ] events ; synchronized ( mLock ) { events = mEventLog.toArray ( ) ; } for ( android.net.ConnectivityMetricsEvent ev : events ) { pw.println ( ev.toString ( ) ) ; } if ( ( mNetdListener ) != null ) { mNetdListener.list ( pw ) ; } }
public int read ( byte [ ] b , int off , int len ) throws java.io.IOException { if ( ( closed ) && ( len > 0 ) ) { throw new java.io.IOException ( "Stream Closed" ) ; } java.lang.Object traceContext = sun.misc.IoTrace.fileReadBegin ( path ) ; int bytesRead = 0 ; try { bytesRead = libcore.io.IoBridge.read ( fd , b , off , len ) ; } finally { sun.misc.IoTrace.fileReadEnd ( traceContext , ( bytesRead == ( - 1 ) ? 0 : bytesRead ) ) ; } return bytesRead ; }
public static java.lang.String getNexusLabel ( @ com.android.annotations.NonNull com.android.sdklib.devices.Device device ) { java.lang.String name = device.getName ( ) ; com.android.sdklib.devices.Screen screen = device.getDefaultHardware ( ) . getScreen ( ) ; float length = ( ( float ) ( screen.getDiagonalLength ( ) ) ) ; length = ( java.lang.Math.round ( ( 10 * length ) ) ) / 10.0F ; return java.lang.String.format ( java.util.Locale.US , "%1$s (%3$s\", %2$s)" , name , com.android.ide.common.rendering.HardwareConfigHelper.getResolutionString ( device ) , java.lang.Float.toString ( length ) ) ; }
private boolean scanWithParams ( java.lang.String freqList , java.lang.String hiddenNetworkSSIDList ) { java.lang.StringBuilder scanCommand = new java.lang.StringBuilder ( ) ; scanCommand.append ( "SCAN TYPE=ONLY" ) ; if ( freqList != null ) { scanCommand.append ( ( " freq=" + freqList ) ) ; } if ( hiddenNetworkSSIDList != null ) { scanCommand.append ( ( " ssid " + hiddenNetworkSSIDList ) ) ; } return doBooleanCommand ( scanCommand.toString ( ) ) ; }
protected void onLayout ( boolean changed , int l , int t , int r , int b ) { super . onLayout ( changed , l , t , r , b ) ; mIsLayoutDirty = false ; if ( ( ( mChildToScrollTo ) != null ) && ( isViewDescendantOf ( mChildToScrollTo , this ) ) ) { scrollToChild ( mChildToScrollTo ) ; } mChildToScrollTo = null ; scrollTo ( mScrollX , mScrollY ) ; }
private java.lang.ref.Reference < ? extends T > reallyPollLocked ( ) { if ( ( head ) != null ) { java.lang.ref.Reference < ? extends T > r = head ; if ( ( head ) == ( tail ) ) { tail = null ; head = null ; } else { head = head.queueNext ; } r.queueNext = null ; return r ; } return null ; }
private static java.io.File getAutoProcessors ( ) throws java.lang.Exception { if ( ( com.android.jack.annotation.processor.AnnotationProcessorTests.autoProcessors ) == null ) { com.android.jack.test.toolchain.Toolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getReferenceToolchain ( ) ; java.io.File processorsDir = com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ; java.io.File processorsSrcDir = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir ( "com.android.jack.annotation.processor.sample.processors" ) ; toolchain.srcToLib ( processorsDir , false , com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR , processorsSrcDir ) ; com.android.jack.test.toolchain.AbstractTestTools.copyFileToDir ( new java.io.File ( processorsSrcDir , "javax.annotation.processing.Processor" ) , "META-INF/services/javax.annotation.processing.Processor" , processorsDir ) ; com.android.jack.annotation.processor.AnnotationProcessorTests.autoProcessors = processorsDir ; } return com.android.jack.annotation.processor.AnnotationProcessorTests.autoProcessors ; }
public void testHasCategories ( ) { android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_VIEW ) ; intent.addCategory ( "category" ) ; intent.addCategory ( "category1" ) ; intent.addCategory ( "category2" ) ; assertTrue ( android.support.test.espresso.intent.matcher.IntentMatchers.hasCategories ( intent.getCategories ( ) ) . matches ( intent ) ) ; assertTrue ( android.support.test.espresso.intent.matcher.IntentMatchers.hasCategories ( org.hamcrest.Matchers.hasItems ( "category" , "category1" , "category2" ) ) . matches ( intent ) ) ; }
public void startRanging ( android.net.wifi.RttManager [ ] params , android.net.wifi.RttManager.RttListener listener ) { if ( mTerminated ) { android.util.Log.w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , "startRanging: called on terminated session" ) ; return ; } else { android.net.wifi.nan.WifiNanManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , "startRanging: called post GC on WifiNanManager" ) ; return ; } mgr.startRanging ( mClientId , mSessionId , params , listener ) ; } }
public void test_totalMemory ( ) { assertTrue ( "totalMemory returned nonsense value" , ( ( r.totalMemory ( ) ) >= ( r.freeMemory ( ) ) ) ) ; }
public com.android.dx.io.EncodedValue readEncodedValue ( ) { int start = position ; new com.android.dx.io.EncodedValueReader ( this ) . skipValue ( ) ; int end = position ; return new com.android.dx.io.EncodedValue ( java.util.Arrays.copyOfRange ( data , start , end ) ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mNsm = ( ( android.app.usage.NetworkStatsManager ) ( getInstrumentation ( ) . getContext ( ) . getSystemService ( Context.NETWORK_STATS_SERVICE ) ) ) ; mCm = ( ( android.net.ConnectivityManager ) ( getInstrumentation ( ) . getContext ( ) . getSystemService ( Context.CONNECTIVITY_SERVICE ) ) ) ; mWriteSettingsMode = getAppOpsMode ( AppOpsManager.OPSTR_WRITE_SETTINGS ) ; setAppOpsMode ( AppOpsManager.OPSTR_WRITE_SETTINGS , "allow" ) ; mUsageStatsMode = getAppOpsMode ( AppOpsManager.OPSTR_GET_USAGE_STATS ) ; }
public void done ( org.eclipse.core.runtime.jobs.IJobChangeEvent event ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart graphicalEditor = getGraphicalEditor ( ) ; if ( graphicalEditor != null ) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutActionBar bar = graphicalEditor.getLayoutActionBar ( ) ; if ( ! ( bar.isDisposed ( ) ) ) { bar.updateErrorIndicator ( ) ; } } }
private void activate ( ) { java.io.File binDir = new java.io.File ( mVenvDir , "bin" ) ; mRunUtil.setWorkingDir ( binDir ) ; java.lang.String path = java.lang.System.getenv ( com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH ) ; mRunUtil.setEnvVariable ( com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH , ( ( binDir + ":" ) + path ) ) ; java.io.File pipFile = new java.io.File ( binDir , com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PIP ) ; pipFile.setExecutable ( true ) ; mPip = pipFile.getAbsolutePath ( ) ; }
private int deleteAttribute ( int attributesCount , proguard.classfile.editor.Attribute [ ] attributes , java.lang.String attributeName ) { int index = findAttribute ( attributesCount , attributes , attributeName ) ; if ( index < 0 ) { return attributesCount ; } java.lang.System.arraycopy ( attributes , ( index + 1 ) , attributes , index , ( ( attributesCount - index ) - 1 ) ) ; attributes [ ( -- attributesCount ) ] = null ; return attributesCount ; }
static com.android.bluetooth.a2dp.A2dpStateMachine make ( com.android.bluetooth.a2dp.A2dpService svc , android.content.Context context ) { android.util.Log.d ( com.android.bluetooth.a2dp.A2dpStateMachine.TAG , "make" ) ; com.android.bluetooth.a2dp.A2dpStateMachine a2dpSm = new com.android.bluetooth.a2dp.A2dpStateMachine ( svc , context ) ; a2dpSm.start ( ) ; return a2dpSm ; }
public void fatal ( java.lang.String id ) { severities.put ( id , Severity.FATAL ) ; }
public static java.lang.String getOutputDirectoryName ( org.gradle.nativeplatform.NativeBinarySpec binary ) { return com.google.common.base.Joiner.on ( java.io.File.separator ) . join ( AndroidProject.FD_INTERMEDIATES , "binaries" , binary.getName ( ) , binary.getBuildType ( ) . getName ( ) , binary.getFlavor ( ) . getName ( ) , "lib" , binary.getTargetPlatform ( ) . getName ( ) ) ; }
protected void readResponseHeaders ( javax.obex.HeaderSet headerset ) { android.util.Log.v ( com.android.bluetooth.pbapclient.BluetoothPbapRequestPullPhoneBook.TAG , "readResponseHeaders" ) ; com.android.bluetooth.pbapclient.ObexAppParameters oap = com.android.bluetooth.pbapclient.ObexAppParameters.fromHeaderSet ( headerset ) ; if ( oap.exists ( com.android.bluetooth.pbapclient.OAP_TAGID_NEW_MISSED_CALLS ) ) { mNewMissedCalls = oap.getByte ( com.android.bluetooth.pbapclient.OAP_TAGID_NEW_MISSED_CALLS ) ; } }
public void testPinEntryPinFailure ( ) throws java.lang.Exception { java.lang.String shortEntry = "*.google.com=true|" + ( shortPin ) ; org.conscrypt.PinListEntry e = new org.conscrypt.PinListEntry ( shortEntry , new org.conscrypt.TrustedCertificateStore ( ) ) ; assertTrue ( "Not enforcing!" , e.getEnforcing ( ) ) ; boolean retval = e.chainIsNotPinned ( longChain ) ; assertTrue ( "Accepted an incorrect pinning, this is very bad" , retval ) ; }
public static int advance ( java.util.Iterator < ? > iterator , int numberToAdvance ) { com.google.common.base.Preconditions.checkNotNull ( iterator ) ; com.google.common.base.Preconditions.checkArgument ( ( numberToAdvance >= 0 ) , "number to advance cannot be negative" ) ; int i ; for ( i = 0 ; ( i < numberToAdvance ) && ( iterator.hasNext ( ) ) ; i ++ ) { iterator.next ( ) ; } return i ; }
private void addConfigurationToTree ( int index , com.google.gct.testing.GoogleCloudTestingConfigurationImpl configuration , boolean makeSelected ) { configuration.addConfigurationChangeListener ( this ) ; final javax.swing.tree.DefaultMutableTreeNode newChild = new javax.swing.tree.DefaultMutableTreeNode ( configuration ) ; if ( configuration.isEditable ( ) ) { addChildToNode ( index , newChild , customRoot ) ; } else { addChildToNode ( index , newChild , defaultsRoot ) ; } if ( makeSelected ) { selectTreeNode ( newChild ) ; } }
public final void setConferenceableConnections ( java.lang.String callId , java.util.List < java.lang.String > conferenceableConnectionIds ) { java.util.List < android.telecom.RemoteConnection > conferenceable = new java.util.ArrayList < > ( ) ; for ( java.lang.String id : conferenceableConnectionIds ) { if ( mConnectionById.containsKey ( id ) ) { conferenceable.add ( mConnectionById.get ( id ) ) ; } } if ( hasConnection ( callId ) ) { findConnectionForAction ( callId , "setConferenceableConnections" ) . setConferenceableConnections ( conferenceable ) ; } else { findConferenceForAction ( callId , "setConferenceableConnections" ) . setConferenceableConnections ( conferenceable ) ; } }
public void testTranslucentActivityOnTopOfHome ( ) throws java.lang.Exception { executeShellCommand ( android.server.cts.AM_START_HOME_ACTIVITY_COMMAND ) ; executeShellCommand ( getAmStartCmd ( android.server.cts.ActivityManagerActivityVisiblityTests.TRANSLUCENT_ACTIVITY ) ) ; mAmWmState.computeState ( mDevice , new java.lang.String [ ] { android.server.cts.ActivityManagerActivityVisiblityTests.TRANSLUCENT_ACTIVITY } ) ; mAmWmState.assertFrontStack ( "Fullscreen stack must be the front stack." , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; mAmWmState.assertVisibility ( android.server.cts.ActivityManagerActivityVisiblityTests.TRANSLUCENT_ACTIVITY , true ) ; mAmWmState.assertHomeActivityVisible ( true ) ; }
public android.telephony.ModemActivityInfo getModemActivityInfo ( ) { try { com.android.internal.telephony.ITelephony service = getITelephony ( ) ; if ( service != null ) { return service.getModemActivityInfo ( ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#getModemActivityInfo" , e ) ; } return null ; }
protected void setUp ( ) { mFOp = new com.android.sdklib.io.MockFileOp ( ) ; mLS = new com.android.sdklib.repository.local.LocalSdk ( mFOp ) ; mRemotePkgs = com.google.common.collect.TreeMultimap.create ( ) ; mSource = new com.android.sdklib.internal.repository.IDescription ( ) { @ java.lang.Override public java.lang.String getShortDescription ( ) { return "source" ; } @ java.lang.Override public java.lang.String getLongDescription ( ) { return "mock sdk repository source" ; } } ; mLS.setLocation ( new java.io.File ( "/sdk" ) ) ; }
private void checkActivity ( com.android.tools.lint.detector.api.XmlContext context , org.w3c.dom.Element element ) { if ( ( ( getExported ( element ) ) && ( isUnprotectedByPermission ( element ) ) ) && ( ! ( isLauncher ( element ) ) ) ) { context.report ( com.android.tools.lint.checks.SecurityDetector.EXPORTED_ACTIVITY , element , context.getLocation ( element ) , "Exported activity does not require permission" , null ) ; } }
public void test_unmodifiableList_replaceAll ( ) { try { java.util.Collections.unmodifiableList ( new java.util.ArrayList < > ( ) ) . replaceAll ( ( k ) -> 1 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } try { java.util.ArrayList l = new java.util.ArrayList ( ) ; l.add ( 1 ) ; l.add ( 2 ) ; java.util.Collections.unmodifiableList ( l ) . replaceAll ( ( k ) -> 1 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
private void checkScoAudioState ( ) { if ( ( ( ( ( mBluetoothHeadset ) != null ) && ( ( mBluetoothHeadsetDevice ) != null ) ) && ( ( mScoAudioState ) == ( com.android.server.audio.AudioService.SCO_STATE_INACTIVE ) ) ) && ( ( mBluetoothHeadset.getAudioState ( mBluetoothHeadsetDevice ) ) != ( android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED ) ) ) { mScoAudioState = com.android.server.audio.AudioService.SCO_STATE_ACTIVE_EXTERNAL ; } }
public static < T > java.util.Iterator < T > concat ( java.util.Iterator < ? extends T > a , java.util.Iterator < ? extends T > b ) { com.google.common.base.Preconditions.checkNotNull ( a ) ; com.google.common.base.Preconditions.checkNotNull ( b ) ; return com.google.common.collect.Iterators.concat ( java.util.Arrays.asList ( a , b ) . iterator ( ) ) ; }
private void bondService ( ) throws java.util.concurrent.TimeoutException { android.os.IBinder binder = mServiceRule.bindService ( new android.content.Intent ( mTargetContext , com.android.bluetooth.a2dp.A2dpService.class ) ) ; mA2dpService = ( ( com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder ) ( binder ) ) . getServiceForTesting ( ) ; org.junit.Assert.assertNotNull ( mA2dpService ) ; }
public static synchronized void clearCachedDefault ( ) { com.ibm.icu.util.TimeZone.defaultZone = null ; }
public void test_getTrafficClass ( ) throws java.lang.Exception { int IPTOS_LOWCOST = 2 ; int IPTOS_RELIABILTY = 4 ; int IPTOS_THROUGHPUT = 8 ; int IPTOS_LOWDELAY = 16 ; int [ ] ports = tests.support.Support_PortManager.getNextPortsForUDP ( 2 ) ; new java.net.InetSocketAddress ( java.net.InetAddress.getLocalHost ( ) , ports [ 0 ] ) ; java.net.DatagramSocket theSocket = new java.net.DatagramSocket ( ports [ 1 ] ) ; int trafficClass = theSocket.getTrafficClass ( ) ; }
public void testCannotSetChunkedStreamingModeAfterConnect ( ) throws java.lang.Exception { server.enqueue ( new com.google.mockwebserver.MockResponse ( ) . setBody ( "A" ) ) ; server.play ( ) ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; assertEquals ( "A" , readAscii ( connection.getInputStream ( ) , java.lang.Integer.MAX_VALUE ) ) ; try { connection.setChunkedStreamingMode ( 1 ) ; fail ( ) ; } catch ( java.lang.IllegalStateException expected ) { } }
com.google.common.collect.ImmutableList < com.google.common.collect.Multiset.Entry < E > > createAsList ( ) { final com.google.common.collect.ImmutableList < java.util.Map.Entry < E , java.lang.Integer > > entryList = map.entrySet ( ) . asList ( ) ; return new com.google.common.collect.ImmutableAsList < com.google.common.collect.Multiset.Entry < E > > ( ) { @ java.lang.Override public com.google.common.collect.Multiset.Entry < E > get ( int index ) { return com.google.common.collect.RegularImmutableMultiset.entryFromMapEntry ( entryList.get ( index ) ) ; } @ java.lang.Override com.google.common.collect.ImmutableCollection < com.google.common.collect.Multiset.Entry < E > > delegateCollection ( ) { return com.google.common.collect.RegularImmutableMultiset.EntrySet.this ; } } ; }
public boolean isVideoCallingEnabled ( java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , callingPackage , "isVideoCallingEnabled" ) ) ) { return false ; } com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance ( mPhone.getContext ( ) , mPhone.getPhoneId ( ) ) ; return ( ( imsManager.isVtEnabledByPlatform ( ) ) && ( imsManager.isEnhanced4gLteModeSettingEnabledByUser ( ) ) ) && ( imsManager.isVtEnabledByUser ( ) ) ; }
public com.android.jack.load.PackageLoader getLoaderForSubPackage ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading , @ javax.annotation.Nonnull java.lang.String simpleName ) throws com.android.jack.ir.ast.JPackageLookupException { for ( com.android.sched.vfs.InputVElement sub : packageVDir.list ( ) ) { if ( ( sub.isVDir ( ) ) && ( sub.getName ( ) . equals ( simpleName ) ) ) { return new com.android.jack.jayce.JaycePackageLoader ( inputJackLibrary , ( ( com.android.sched.vfs.InputVDir ) ( sub ) ) , lookup , defaultLoadLevel ) ; } } throw new com.android.jack.ir.ast.JPackageLookupException ( simpleName , loading ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { android.util.Log.i ( com.android.server.am.ActivityManagerService.TAG , "Shutting down activity manager..." ) ; shutdown ( 10000 ) ; android.util.Log.i ( com.android.server.am.ActivityManagerService.TAG , "Shutdown complete, restarting!" ) ; java.lang.Process.killProcess ( java.lang.Process.myPid ( ) ) ; java.lang.System.exit ( 10 ) ; }
public void testRevokePropagatedOnUpgradeOldToNewModel ( ) throws java.lang.Exception { assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_22 ) , false , false ) ) ; try { runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.USES_PERMISSION_PKG , "com.android.cts.usepermission.UsePermissionTest22" , "testRevokePropagatedOnUpgradeOldToNewModel_part1" ) ; fail ( "App must be killed on a permission revoke" ) ; } catch ( java.lang.AssertionError expected ) { } assertNull ( getDevice ( ) . installPackage ( com.android.cts.migration.MigrationHelper.getTestFile ( mCtsBuild , android.appsecurity.cts.PermissionsHostTest.APK_23 ) , true , false ) ) ; runDeviceTests ( android.appsecurity.cts.PermissionsHostTest.USES_PERMISSION_PKG , "com.android.cts.usepermission.UsePermissionTest23" , "testRevokePropagatedOnUpgradeOldToNewModel_part2" ) ; }
private byte [ ] getPubkey ( byte [ ] key ) { java.util.ArrayList < byte [ ] > values = execute ( 'b' , key ) ; return ( values == null ) || ( values.isEmpty ( ) ) ? null : values.get ( 0 ) ; }
public final int getDotType ( int c ) { int props = trie.get ( c ) ; if ( ! ( android.icu.impl.UCaseProps.propsHasException ( props ) ) ) { return props & ( android.icu.impl.UCaseProps.DOT_MASK ) ; } else { return ( ( exceptions [ android.icu.impl.UCaseProps.getExceptionsOffset ( props ) ] ) > > ( android.icu.impl.UCaseProps.EXC_DOT_SHIFT ) ) & ( android.icu.impl.UCaseProps.DOT_MASK ) ; } }
private static java.io.File storeMergedConfigFile ( java.util.Map < java.lang.String , java.util.List < java.lang.String > > configMap , java.lang.String moduleName ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { java.io.File mergedConfigFile = com.android.tradefed.util.FileUtil.createTempFile ( com.android.compatibility.common.util.DynamicConfigHandler.MERGED_CONFIG_FILE , com.android.compatibility.common.util.DynamicConfigHandler.FILE_EXT ) ; java.io.OutputStream stream = new java.io.FileOutputStream ( mergedConfigFile ) ; org.xmlpull.v1.XmlSerializer serializer = org.xmlpull.v1.XmlPullParserFactory.newInstance ( ) . newSerializer ( ) ; serializer.setOutput ( stream , com.android.compatibility.common.util.DynamicConfigHandler.ENCODING ) ; serializer.setFeature ( "http://xmlpull.org/v1/doc/features.html#indent-output" , true ) ; serializer.startDocument ( com.android.compatibility.common.util.DynamicConfigHandler.ENCODING , false ) ; serializer.startTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.CONFIG_TAG ) ; for ( java.lang.String key : configMap.keySet ( ) ) { serializer.startTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.ENTRY_TAG ) ; serializer.attribute ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.KEY_ATTR , key ) ; for ( java.lang.String value : configMap.get ( key ) ) { serializer.startTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.VALUE_TAG ) ; serializer.text ( value ) ; serializer.endTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.VALUE_TAG ) ; } serializer.endTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.ENTRY_TAG ) ; } serializer.endTag ( com.android.compatibility.common.util.DynamicConfigHandler.NS , DynamicConfig.CONFIG_TAG ) ; serializer.endDocument ( ) ; return mergedConfigFile ; }
public com.android.sdklib.internal.avd.AvdManager.AvdInfo [ ] getBrokenAvds ( ) { synchronized ( mAllAvdList ) { if ( ( mBrokenAvdList ) == null ) { java.util.ArrayList < com.android.sdklib.internal.avd.AvdManager.AvdInfo > list = new java.util.ArrayList < com.android.sdklib.internal.avd.AvdManager.AvdInfo > ( ) ; for ( com.android.sdklib.internal.avd.AvdManager.AvdInfo avd : mAllAvdList ) { if ( ( avd.getStatus ( ) ) != ( com.android.sdklib.internal.avd.AvdManager.AvdInfo.AvdStatus.OK ) ) { list.add ( avd ) ; } } mBrokenAvdList = list.toArray ( new com.android.sdklib.internal.avd.AvdManager.AvdInfo [ list.size ( ) ] ) ; } return mBrokenAvdList ; } }
boolean canBeInternationallyDialled ( com.google.i18n.phonenumbers.Phonenumber.PhoneNumber number ) { com.google.i18n.phonenumbers.nano.Phonemetadata.PhoneMetadata metadata = getMetadataForRegion ( getRegionCodeForNumber ( number ) ) ; if ( metadata == null ) { return true ; } java.lang.String nationalSignificantNumber = getNationalSignificantNumber ( number ) ; return ! ( isNumberMatchingDesc ( nationalSignificantNumber , metadata.noInternationalDialling ) ) ; }
public void test_JarFile_InsertEntry_in_Manifest_Jar ( ) throws java.io.IOException { java.lang.String modifiedJarName = "Inserted_Entry_Manifest.jar" ; tests.support.resource.Support_Resources.copyFile ( resources , null , modifiedJarName ) ; java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( new java.io.File ( resources , modifiedJarName ) , true ) ; java.util.Enumeration < java.util.jar.JarEntry > entries = jarFile.entries ( ) ; int count = 0 ; while ( entries.hasMoreElements ( ) ) { java.util.zip.ZipEntry zipEntry = entries.nextElement ( ) ; jarFile.getInputStream ( zipEntry ) ; count ++ ; } assertEquals ( 5 , count ) ; }
public void setPadding ( int left , int top , int right , int bottom ) { resetResolvedPaddingInternal ( ) ; mUserPaddingStart = android.view.View.UNDEFINED_PADDING ; mUserPaddingEnd = android.view.View.UNDEFINED_PADDING ; mUserPaddingLeftInitial = left ; mUserPaddingRightInitial = right ; mLeftPaddingDefined = true ; mRightPaddingDefined = true ; internalSetPadding ( left , top , right , bottom ) ; }
public void addPackageToPreferred ( java.lang.String packageName ) { mContext.enforceCallingOrSelfPermission ( android.Manifest.permission.SET_PREFERRED_APPLICATIONS , null ) ; synchronized ( mPackages ) { android.content.pm.PackageParser.Package p = mPackages.get ( packageName ) ; if ( p == null ) { return ; } com.android.server.PackageManagerService.PackageSetting ps = ( ( com.android.server.PackageManagerService.PackageSetting ) ( p.mExtras ) ) ; if ( ps != null ) { mSettings.mPreferredPackages.remove ( ps ) ; mSettings.mPreferredPackages.add ( 0 , ps ) ; updatePreferredIndicesLP ( ) ; mSettings.writeLP ( ) ; } } }
private void updateAndSendIntent ( android.bluetooth.BluetoothDevice device , int newDeviceState , int prevDeviceState ) { if ( newDeviceState == ( android.bluetooth.BluetoothHealth.STATE_DISCONNECTED ) ) { mHealthDevices.remove ( device ) ; } else { mHealthDevices.put ( device , newDeviceState ) ; } }
public final void backgroundResourcesReleased ( android.os.IBinder token ) { final long origId = android.os.Binder.clearCallingIdentity ( ) ; try { synchronized ( this ) { com.android.server.am.ActivityStack stack = com.android.server.am.ActivityRecord.getStackLocked ( token ) ; if ( stack != null ) { stack.backgroundResourcesReleased ( token ) ; } } } finally { android.os.Binder.restoreCallingIdentity ( origId ) ; } }
public void findValidValue ( ) { java.util.List < java.lang.String > strings = com.google.common.collect.Lists.newArrayList ( "foo" , "maxSdkVersion:'14'" , "bar" ) ; com.android.build.gradle.integration.common.truth.FakeFailureStrategy failure = new com.android.build.gradle.integration.common.truth.FakeFailureStrategy ( ) ; java.io.File file = new java.io.File ( "foo" ) ; com.android.build.gradle.integration.common.truth.ApkSubject subject = new com.android.build.gradle.integration.common.truth.ApkSubject ( failure , file ) ; subject.checkMaxSdkVersion ( strings , 14 ) ; com.google.common.truth.Truth.assertThat ( failure.message ) . isNull ( ) ; }
public void testHasErrorTextShouldFail_WithNullString ( ) { try { android.support.test.espresso.matcher.ViewMatchers.hasErrorText ( ( ( org.hamcrest.Matcher < java.lang.String > ) ( null ) ) ) ; fail ( "Should of thrown NPE" ) ; } catch ( java.lang.NullPointerException e ) { } }
protected void renameResource ( @ com.android.annotations.NonNull org.eclipse.core.resources.IProject project , @ com.android.annotations.NonNull java.lang.Object resource , boolean updateReferences , @ com.android.annotations.NonNull java.lang.String newName , @ com.android.annotations.NonNull java.lang.String expected ) throws java.lang.Exception { org.eclipse.ltk.core.refactoring.participants.RenameProcessor processor = null ; if ( resource instanceof java.lang.String ) { java.lang.String url = ( ( java.lang.String ) ( resource ) ) ; assert url.startsWith ( "@" ) : resource ; com.android.utils.Pair < com.android.resources.ResourceType , java.lang.String > pair = com.android.ide.eclipse.adt.internal.editors.Hyperlinks.parseResource ( url ) ; assertNotNull ( url , pair ) ; com.android.resources.ResourceType type = pair.getFirst ( ) ; java.lang.String currentName = pair.getSecond ( ) ; com.android.ide.eclipse.adt.internal.refactorings.core.RenameResourceProcessor p ; p = new com.android.ide.eclipse.adt.internal.refactorings.core.RenameResourceProcessor ( project , type , currentName , newName ) ; p.setUpdateReferences ( updateReferences ) ; processor = p ; } else if ( resource instanceof org.eclipse.core.resources.IResource ) { org.eclipse.core.resources.IResource r = ( ( org.eclipse.core.resources.IResource ) ( resource ) ) ; com.android.ide.eclipse.adt.internal.refactorings.core.RenameResourceProcessor p ; p = new com.android.ide.eclipse.adt.internal.refactorings.core.RenameResourceProcessor ( r ) ; java.lang.String fileName = r.getName ( ) ; int dot = fileName.indexOf ( '.' ) ; java.lang.String extension = ( dot != ( - 1 ) ) ? fileName.substring ( dot ) : "" ; p.setNewResourceName ( ( newName + extension ) ) ; p.setUpdateReferences ( updateReferences ) ; processor = p ; } else if ( resource instanceof org.eclipse.jdt.core.IField ) { org.eclipse.jdt.internal.corext.refactoring.rename.RenameFieldProcessor p = new org.eclipse.jdt.internal.corext.refactoring.rename.RenameFieldProcessor ( ( ( org.eclipse.jdt.core.IField ) ( resource ) ) ) ; p.setNewElementName ( newName ) ; p.setUpdateReferences ( updateReferences ) ; processor = p ; } else { fail ( ( "Unsupported resource element in tests: " + resource ) ) ; } assertNotNull ( processor ) ; org.eclipse.ltk.core.refactoring.participants.RenameRefactoring refactoring = new org.eclipse.ltk.core.refactoring.participants.RenameRefactoring ( processor ) ; checkRefactoring ( refactoring , expected ) ; }
void startAdvertisingSet ( android.bluetooth.le.AdvertisingSetParameters parameters , android.bluetooth.le.AdvertiseData advertiseData , android.bluetooth.le.AdvertiseData scanResponse , android.bluetooth.le.PeriodicAdvertisingParameters periodicParameters , android.bluetooth.le.AdvertiseData periodicData , int timeout , android.bluetooth.le.IAdvertisingSetCallback callback ) { enforceAdminPermission ( ) ; mAdvertiseManager.startAdvertisingSet ( parameters , advertiseData , scanResponse , periodicParameters , periodicData , timeout , callback ) ; }
private final boolean isBluetoothPersistedStateOn ( ) { return ( Settings.Global.getInt ( mContentResolver , Settings.Global.BLUETOOTH_ON , com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH ) ) != ( com.android.server.BluetoothManagerService.BLUETOOTH_OFF ) ; }
public boolean disconnect ( ) { if ( android.bluetooth.BluetoothPbap.DBG ) android.bluetooth.BluetoothPbap.log ( "disconnect()" ) ; if ( ( mService ) != null ) { try { mService.disconnect ( ) ; return true ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothPbap.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothPbap.TAG , "Proxy not attached to service" ) ; if ( android.bluetooth.BluetoothPbap.DBG ) android.bluetooth.BluetoothPbap.log ( android.util.Log.getStackTraceString ( new java.lang.Throwable ( ) ) ) ; } return false ; }
public static java.io.InputStream getXsdStream ( int version ) { assert ( version >= 1 ) && ( version <= ( com.android.dvlib.DeviceSchema.NS_LATEST_VERSION ) ) ; java.lang.String rootElement = com.android.dvlib.DeviceSchema.NODE_DEVICES ; java.lang.String filename = java.lang.String.format ( "%1$s-%2$d.xsd" , rootElement , version ) ; try { return com.android.dvlib.DeviceSchema.class . getResourceAsStream ( filename ) ; } catch ( java.lang.Exception ignore ) { } return null ; }
public void onResume ( ) { if ( com.android.dialer.util.PermissionsUtil.hasPermission ( activity , android.Manifest.permission.READ_CONTACTS ) ) { contactInfoCache.start ( ) ; } contactsPreferences.refreshValue ( ContactsPreferences.DISPLAY_ORDER_KEY ) ; isSpamEnabled = com.android.dialer.spam.SpamComponent.get ( activity ) . spam ( ) . isSpamEnabled ( ) ; getDuo ( ) . registerListener ( this ) ; notifyDataSetChanged ( ) ; }
public void addFile ( java.io.File file , java.lang.String archivePath ) throws com.android.sdklib.build.ApkBuilder.ApkCreationException , com.android.sdklib.build.ApkBuilder.DuplicateFileException , com.android.sdklib.build.ApkBuilder.SealedApkException { if ( mIsSealed ) { throw new com.android.sdklib.build.ApkBuilder.SealedApkException ( "APK is already sealed" ) ; } try { doAddFile ( file , archivePath ) ; } catch ( com.android.sdklib.build.ApkBuilder.DuplicateFileException e ) { throw e ; } catch ( java.lang.Exception e ) { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException ( e , "Failed to add %s" , file ) ; } }
private com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor getRootDescriptor ( ) { if ( ( mRootDescriptor ) == null ) { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData data = mEditor.getTargetData ( ) ; if ( data != null ) { com.android.ide.eclipse.adt.internal.editors.descriptors.IDescriptorProvider descriptorProvider = data.getDescriptorProvider ( mDescriptorId ) ; if ( descriptorProvider != null ) { mRootDescriptor = new com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor ( "" , descriptorProvider.getRootElementDescriptors ( ) ) ; } } } return mRootDescriptor ; }
public void simSlotsStatusChanged ( int indicationType , java.util.ArrayList < com.android.internal.telephony.V1_2.SimSlotStatus > slotsStatus ) { mRil.processIndication ( indicationType ) ; java.util.ArrayList < com.android.internal.telephony.uicc.IccSlotStatus > iccSlotStatus = com.android.internal.telephony.RIL.convertHalSlotsStatus ( slotsStatus ) ; if ( RIL.RILJ_LOGD ) mRil.unsljLogRet ( com.android.internal.telephony.RILConstants.RIL_UNSOL_ICC_SLOT_STATUS , iccSlotStatus ) ; mRil.mIccStatusChangedRegistrants.notifyRegistrants ( new android.os.AsyncResult ( null , iccSlotStatus , null ) ) ; }
private boolean getProvisionedBool ( com.android.ims.ImsConfig config , int item ) throws com.android.ims.ImsException { return ( config.getProvisionedValue ( item ) ) == ( ImsConfig.FeatureValueConstants.ON ) ; }
public void testPreloadDensity ( ) throws java.io.IOException , org.xmlpull.v1.XmlPullParserException { final int densityDpi = mResources.getConfiguration ( ) . densityDpi ; HEAD ( 9 ) ; android.graphics.drawable.cts.cbd34 Merge ; }
private void addSignature ( @ javax.annotation.Nonnull com.android.jack.ir.ast.Annotable annotable , @ javax.annotation.Nonnull java.lang.String signature , @ javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info ) { com.android.jack.ir.ast.JAnnotationLiteral annotation = createAnnotation ( annotable , signatureAnnotationType , info ) ; com.android.jack.ir.ast.JArrayLiteral literal = buildSignatureAnnotationValue ( signature , info ) ; com.android.jack.ir.ast.JMethodId methodId = getOrCreateMethodId ( signatureAnnotationType , com.android.jack.backend.dex.annotations.ReflectAnnotationsAdder.Visitor.ELT_VALUE ) ; com.android.jack.ir.ast.JNameValuePair valuePair = new com.android.jack.ir.ast.JNameValuePair ( info , methodId , literal ) ; assert ( annotation.getNameValuePair ( methodId ) ) == null : "Type can not have more than one generic signature" ; request.append ( new com.android.jack.transformations.request.PutNameValuePair ( annotation , valuePair ) ) ; }
public android.bluetooth.BluetoothAvrcpPlayerSettings getPlayerSettings ( android.bluetooth.BluetoothDevice device ) { if ( android.bluetooth.BluetoothAvrcpController.DBG ) android.util.Log.d ( android.bluetooth.BluetoothAvrcpController.TAG , "getPlayerSettings" ) ; android.bluetooth.BluetoothAvrcpPlayerSettings settings = null ; if ( ( ( mService ) != null ) && ( isEnabled ( ) ) ) { try { settings = mService.getPlayerSettings ( device ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAvrcpController.TAG , ( "Error talking to BT service in getMetadata() " + e ) ) ; return null ; } } return settings ; }
public void run ( ) { mFilterText = "" ; com.android.hierarchyviewerlib.device.ViewNode viewNode = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindowData ( window ) ; if ( viewNode != null ) { com.android.hierarchyviewerlib.device.DeviceBridge.loadProfileData ( window , viewNode ) ; viewNode.setViewCount ( ) ; com.android.hierarchyviewerlib.models.TreeViewModel.getModel ( ) . setData ( window , viewNode ) ; } }
public void write ( java.io.File incrementalFolder ) { incrementalFolder.mkdirs ( ) ; mInputs.write ( new java.io.File ( incrementalFolder , com.android.builder.internal.incremental.ChangeManager.FN_INPUTS_DATA ) ) ; mOutputs.write ( new java.io.File ( incrementalFolder , com.android.builder.internal.incremental.ChangeManager.FN_OUTPUTS_DATA ) ) ; }
public boolean setScanMode ( @ android.bluetooth.BluetoothAdapter.ScanMode int mode , int duration ) { if ( ( getState ( ) ) != ( android.bluetooth.BluetoothAdapter.STATE_ON ) ) return false ; try { synchronized ( mManagerCallback ) { if ( ( mService ) != null ) return mService.setScanMode ( mode , duration ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } return false ; }
private int getScaledMaxXScroll ( ) { int width ; if ( ( mHeightCanMeasure ) == false ) { width = ( getViewWidth ( ) ) / 4 ; } else { android.graphics.Rect visRect = new android.graphics.Rect ( ) ; calcOurVisibleRect ( visRect ) ; width = ( visRect.width ( ) ) / 2 ; } return viewToContent ( width ) ; }
public void testPownF32_3 ( ) { android.renderscript.Allocation nAlloc = android.renderscript.Allocation.createSized ( mRS , android.renderscript.Element.I32_3 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ ( INPUTSIZE ) * 4 ] ; android.renderscript.cts.RSUtils.genRandomInts ( 10560497 , 32 , ( - 16 ) , n ) ; nAlloc.copyFrom ( n ) ; script_f32.set_n3 ( nAlloc ) ; doF32_3 ( 11191281 , 16 ) ; }
public void onMessageReceivedNotification ( int pubSubId , int requestorInstanceId , byte [ ] peerMac , byte [ ] message ) { android.os.Message msg = mSm.obtainMessage ( com.android.server.wifi.nan.WifiNanStateManager.MESSAGE_TYPE_NOTIFICATION ) ; msg.arg1 = com.android.server.wifi.nan.WifiNanStateManager.NOTIFICATION_TYPE_MESSAGE_RECEIVED ; msg.arg2 = pubSubId ; msg.obj = requestorInstanceId ; msg.getData ( ) . putByteArray ( com.android.server.wifi.nan.WifiNanStateManager.MESSAGE_BUNDLE_KEY_MAC_ADDRESS , peerMac ) ; msg.getData ( ) . putByteArray ( com.android.server.wifi.nan.WifiNanStateManager.MESSAGE_BUNDLE_KEY_MESSAGE_DATA , message ) ; mSm.sendMessage ( msg ) ; }
public boolean enableNetwork ( int netId ) { if ( com.android.server.wifi.WifiNative.DBG ) logDbg ( ( "enableNetwork nid=" + ( java.lang.Integer.toString ( netId ) ) ) ) ; return doBooleanCommand ( ( "ENABLE_NETWORK " + netId ) ) ; }
public void TestCharMonkey ( ) { int loopCount = 500 ; int seed = 1 ; if ( ( params.inclusion ) >= 9 ) { loopCount = 10000 ; } android.icu.dev.test.rbbi.RBBITestMonkey.RBBICharMonkey m = new android.icu.dev.test.rbbi.RBBITestMonkey.RBBICharMonkey ( ) ; android.icu.text.BreakIterator bi = android.icu.text.BreakIterator.getCharacterInstance ( java.util.Locale.US ) ; RunMonkey ( bi , m , "char" , seed , loopCount ) ; }
private void assertSerialNumber ( ) { assertNotNull ( "Non-telephony devices must have a Build.SERIAL number." , Build.SERIAL ) ; assertTrue ( "Hardware id must be no longer than 20 characters." , ( ( Build.SERIAL.length ( ) ) <= 20 ) ) ; assertTrue ( "Hardware id must be alphanumeric." , java.util.regex.Pattern.matches ( "[0-9A-Za-z]+" , Build.SERIAL ) ) ; }
public void removeRights ( java.lang.String path ) { if ( ( null == path ) || ( path.equals ( "" ) ) ) { throw new java.lang.IllegalArgumentException ( "Given path should be non null" ) ; } else if ( ( getState ( ) ) == ( android.drm.DrmManagerClient.STATE_UNINITIALIZED ) ) { throw new java.lang.IllegalStateException ( "Not Initialized yet" ) ; } _removeRights ( mUniqueId , path ) ; }
public void run ( ) { setHorizontalScrollbarOverlay ( overlay ) ; }
public static com.android.incallui.incall.protocol.PrimaryInfo createEmptyPrimaryInfo ( ) { return new com.android.incallui.incall.protocol.PrimaryInfo ( null , null , false , null , null , null , ContactPhotoType.DEFAULT_PLACEHOLDER , false , false , false , false , false , false , false , null , null , true , ( - 1 ) ) ; }
public void onCreate ( android.os.Bundle icicle ) { super . onCreate ( icicle ) ; if ( ( checkSelfPermission ( permission.READ_EXTERNAL_STORAGE ) ) != ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { requestPermissions ( new java.lang.String [ ] { android.Manifest.permission.READ_EXTERNAL_STORAGE } , com.android.music.MusicBrowserActivity.MY_PERMISSIONS_REQUEST_READ_EXTERNAL_STORAGE ) ; return ; } initApp ( ) ; }
protected boolean isValidSourceFile ( @ com.android.annotations.NonNull java.io.File sourceFolder , @ com.android.annotations.NonNull java.io.File file ) { if ( ! ( super . isValidSourceFile ( sourceFolder , file ) ) ) { return false ; } java.io.File resFolder = file.getParentFile ( ) ; return ( ( resFolder.getParentFile ( ) . equals ( sourceFolder ) ) && ( com.android.ide.common.packaging.PackagingUtils.checkFolderForPackaging ( resFolder.getName ( ) ) ) ) && ( ( com.android.resources.ResourceFolderType.getFolderType ( resFolder.getName ( ) ) ) != null ) ; }
public android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel ( int subId , java.lang.String AID , int p2 ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.iccOpenLogicalChannel ( subId , AID , p2 ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return null ; }
public com.android.ims.internal.IImsCallSession createCallSession ( int slotId , int featureType , int sessionId , com.android.ims.ImsCallProfile profile , com.android.ims.internal.IImsCallSessionListener listener ) throws android.os.RemoteException { synchronized ( mFeatures ) { android.telephony.ims.feature.MMTelFeature feature = resolveMMTelFeature ( slotId , featureType ) ; if ( feature != null ) { return feature.createCallSession ( sessionId , profile , listener ) ; } } return null ; }
public java.lang.String getNamespace ( com.android.ide.common.api.INode layout ) { java.lang.String namespace = com.android.SdkConstants.ANDROID_URI ; if ( ! ( layout.getFqcn ( ) . equals ( com.android.SdkConstants.FQCN_GRID_LAYOUT ) ) ) { namespace = mRulesEngine.getAppNameSpace ( ) ; } return namespace ; }
public void updateSubscriptionNickname ( int subscriptionId , java.lang.String nickname , android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled ( ) ) ) { android.telephony.euicc.EuiccManager.sendUnavailableError ( callbackIntent ) ; return ; } try { android.telephony.euicc.EuiccManager.getIEuiccController ( ) . updateSubscriptionNickname ( subscriptionId , nickname , callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
void joinPool ( java.util.concurrent.ExecutorService exec ) { try { exec.shutdown ( ) ; assertTrue ( "ExecutorService did not terminate in a timely manner" , exec.awaitTermination ( ( 2 * ( jsr166.JSR166TestCase.LONG_DELAY_MS ) ) , java.util.concurrent.TimeUnit.MILLISECONDS ) ) ; } catch ( java.lang.SecurityException ok ) { } catch ( java.lang.InterruptedException ie ) { fail ( "Unexpected InterruptedException" ) ; } }
private int deleteMessageFromSim ( java.lang.String messageIndexString ) { android.telephony.gsm.SmsManager smsManager = android.telephony.gsm.SmsManager.getDefault ( ) ; try { return smsManager.deleteMessageFromSim ( java.lang.Integer.parseInt ( messageIndexString ) ) ? 1 : 0 ; } catch ( java.lang.NumberFormatException exception ) { throw new java.lang.IllegalArgumentException ( ( "Bad SMS SIM ID: " + messageIndexString ) ) ; } finally { android.content.ContentResolver cr = getContext ( ) . getContentResolver ( ) ; cr.notifyChange ( com.android.providers.telephony.SmsProvider.SIM_URI , null ) ; } }
public void test_nullLocale ( ) { assertCalendarConfigEquals ( java.util.Calendar.getInstance ( java.util.Locale.getDefault ( ) ) , java.util.Calendar.getInstance ( ( ( java.util.Locale ) ( null ) ) ) ) ; assertCalendarConfigEquals ( java.util.Calendar.getInstance ( java.util.TimeZone.getDefault ( ) , java.util.Locale.getDefault ( ) ) , java.util.Calendar.getInstance ( java.util.TimeZone.getDefault ( ) , null ) ) ; assertCalendarConfigEquals ( new java.util.GregorianCalendar ( java.util.Locale.getDefault ( ) ) , new java.util.GregorianCalendar ( ( ( java.util.Locale ) ( null ) ) ) ) ; }
public static java.lang.String formatProgressText ( long totalBytes , long currentBytes ) { if ( totalBytes <= 0 ) { return "0%" ; } long progress = ( currentBytes * 100 ) / totalBytes ; java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( progress ) ; sb.append ( '%' ) ; return sb.toString ( ) ; }
synchronized boolean connect ( ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.TAG , "connect()" ) ; return connectNative ( ) ; }
public void currentSignalStrength ( int indicationType , com.android.internal.telephony.V1_0.SignalStrength signalStrength ) { mRil.processIndication ( indicationType ) ; }
protected boolean cleanup ( ) { if ( ( mConnectionStateChangedReceiver ) != null ) { unregisterReceiver ( mConnectionStateChangedReceiver ) ; mConnectionStateChangedReceiver = null ; } if ( ( mStateMachine ) != null ) { mStateMachine.cleanup ( ) ; mStateMachine = null ; } if ( ( mAvrcp ) != null ) { mAvrcp.cleanup ( ) ; mAvrcp = null ; } com.android.bluetooth.a2dp.A2dpService.clearA2dpService ( ) ; return true ; }
public boolean hasIccCardUsingSlotIndex ( int slotIndex ) { int [ ] subId = mSubscriptionController.getSubIdUsingSlotIndex ( slotIndex ) ; final com.android.internal.telephony.Phone phone = getPhone ( subId [ 0 ] ) ; if ( ( subId != null ) && ( phone != null ) ) { return phone.getIccCard ( ) . hasIccCard ( ) ; } else { return false ; } }
public void test_initWithSecureRandom ( ) throws java.lang.Exception { java.security.SecureRandom sr = new java.security.SecureRandom ( ) ; javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance ( ( ( org.apache.harmony.crypto.tests.javax.crypto.CipherTest.algorithm ) + "/ECB/PKCS5Padding" ) ) ; cipher.init ( javax.crypto.Cipher.ENCRYPT_MODE , org.apache.harmony.crypto.tests.javax.crypto.CipherTest.cipherKey , sr ) ; cipher = javax.crypto.Cipher.getInstance ( "DES/CBC/NoPadding" ) ; try { cipher.init ( javax.crypto.Cipher.ENCRYPT_MODE , org.apache.harmony.crypto.tests.javax.crypto.CipherTest.cipherKey , sr ) ; fail ( ) ; } catch ( java.security.InvalidKeyException expected ) { } }
public java.util.Iterator keys ( ) { return nameValuePairs.keySet ( ) . iterator ( ) ; }
public void snapshotJackFilesModificationDate ( ) { java.util.Iterator < com.android.sched.vfs.InputVFile > jayceIter = getJayceIterator ( ) ; while ( jayceIter.hasNext ( ) ) { com.android.sched.vfs.InputVFile jayceFile = jayceIter.next ( ) ; fileModificationDate.put ( jayceFile.getPathFromRoot ( ) , java.lang.Long.valueOf ( jayceFile.getLastModified ( ) ) ) ; } }
public int peek ( ) { if ( ( type ) == ( com.android.dx.io.EncodedValueReader.MUST_READ ) ) { int argAndType = ( in.readByte ( ) ) & 255 ; type = argAndType & 31 ; arg = ( argAndType & 224 ) > > 5 ; } return type ; }
public void testNonBlockingAccept ( ) throws java.lang.Exception { java.nio.channels.ServerSocketChannel ssc = java.nio.channels.ServerSocketChannel.open ( ) ; try { ssc.configureBlocking ( false ) ; ssc.bind ( null ) ; assertNull ( ssc.accept ( ) ) ; } finally { ssc.close ( ) ; } }
public void release ( ) { if ( android.support.v17.leanback.app.BackgroundManager.DEBUG ) android.util.Log.v ( android.support.v17.leanback.app.BackgroundManager.TAG , ( "release " + ( this ) ) ) ; if ( ( mLayerDrawable ) != null ) { mLayerDrawable.clearDrawable ( R.id.background_imagein , mContext ) ; mLayerDrawable.clearDrawable ( R.id.background_imageout , mContext ) ; mLayerDrawable = null ; } if ( ( mChangeRunnable ) != null ) { mHandler.removeCallbacks ( mChangeRunnable ) ; mChangeRunnable = null ; } mBackgroundDrawable = null ; }
public void testUniversal ( ) { com.android.build.gradle.internal.dsl.DensitySplitOptions options = new com.android.build.gradle.internal.dsl.DensitySplitOptions ( ) ; options.setEnable ( true ) ; java.util.Set < java.lang.String > values = options.getApplicableFilters ( ) ; org.junit.Assert.assertEquals ( OutputFile.NO_FILTER , values.iterator ( ) . next ( ) ) ; }
public void deriveValues ( java.util.Set < com.android.tools.idea.wizard.ScopedStateStore.Key > modified ) { super . deriveValues ( modified ) ; for ( com.android.tools.idea.wizard.ScopedStateStore.Key key : modified ) { if ( key == ( NewCloudModuleDynamicWizardPath.KEY_SELECTED_TEMPLATE_FILE ) ) { java.io.File templateFile = myState.get ( NewCloudModuleDynamicWizardPath.KEY_SELECTED_TEMPLATE_FILE ) ; if ( templateFile != null ) { setModuleDescriptionText ( templateFile ) ; setModuleTypeIcon ( templateFile ) ; } } } }
public com.google.common.util.concurrent.Service.State get ( long timeout , java.util.concurrent.TimeUnit unit ) throws java.lang.InterruptedException , java.util.concurrent.ExecutionException , java.util.concurrent.TimeoutException { try { return super . get ( timeout , unit ) ; } catch ( java.util.concurrent.TimeoutException e ) { throw new java.util.concurrent.TimeoutException ( this . toString ( ) ) ; } }
public boolean equals ( java.lang.Object object ) { if ( ( object == null ) || ( ( this . getClass ( ) ) != ( object.getClass ( ) ) ) ) { return false ; } proguard.evaluation.TracedStack other = ( ( proguard.evaluation.TracedStack ) ( object ) ) ; return ( super . equals ( object ) ) && ( this . producerStack.equals ( other.producerStack ) ) ; }
public void replacedJar ( @ com.android.annotations.NonNull java.io.File jar , @ com.android.annotations.NonNull com.android.ide.common.repository.GradleCoordinate dependency ) { mJarDependencies.put ( jar , dependency ) ; }
protected com.android.ide.common.internal.PngCruncher getCruncher ( ) { com.android.utils.ILogger logger = new com.android.utils.StdLogger ( StdLogger.Level.VERBOSE ) ; com.android.ide.common.process.ProcessExecutor processExecutor = new com.android.ide.common.process.DefaultProcessExecutor ( logger ) ; com.android.ide.common.process.ProcessOutputHandler processOutputHandler = new com.android.ide.common.process.LoggedProcessOutputHandler ( logger ) ; java.io.File aapt = getAapt ( ) ; return new com.android.ide.common.internal.AaptCruncher ( aapt.getAbsolutePath ( ) , processExecutor , processOutputHandler ) ; }
private static void startFifo ( ) { com.android.jack.server.Server.logger.log ( java.util.logging.Level.FINE , "Start FIFO" ) ; try { assert ( com.android.jack.server.Server.fifo ) != null ; com.android.sched.util.file.FileOrDirectory.setPermissions ( com.android.jack.server.Server.fifo , new com.android.sched.util.location.FileLocation ( com.android.jack.server.Server.fifo ) , ( ( com.android.sched.util.file.FileOrDirectory.Permission.READ ) | ( com.android.sched.util.file.FileOrDirectory.Permission.WRITE ) ) , ChangePermission.OWNER ) ; } catch ( com.android.sched.util.file.CannotSetPermissionException e ) { com.android.jack.server.Server.logger.log ( java.util.logging.Level.SEVERE , e.getMessage ( ) , e ) ; com.android.jack.server.Server.abort ( ) ; } }
private void resetCdmaRoamingModeToDefault ( ) { int cdmaRoamingMode = com.android.phone.CdmaOptions.preferredCdmaRoamingMode ; int statusCdmaRoamingMode = com.android.internal.telephony.Phone.CDMA_RM_HOME ; mButtonCdmaRoam.setValue ( java.lang.Integer.toString ( cdmaRoamingMode ) ) ; android.provider.Settings.System.putInt ( mPhone.getContext ( ) . getContentResolver ( ) , android.provider.Settings.System.CDMA_ROAMING_MODE , cdmaRoamingMode ) ; mPhone.setCdmaRoamingPreference ( statusCdmaRoamingMode , this . obtainMessage ( com.android.phone.CdmaOptions.MyHandler.MESSAGE_SET_ROAMING_PREFERENCE ) ) ; }
public void testPreconditions ( ) { assertNotNull ( mTextView ) ; assertEquals ( 1 , mTextView.size ( ) ) ; assertNotNull ( mTextView.get ( 0 ) ) ; }
public android.os.Bundle getApplicationRestrictions ( @ android.annotation.Nullable android.content.ComponentName admin , java.lang.String packageName ) { throwIfParentInstance ( "getApplicationRestrictions" ) ; if ( ( mService ) != null ) { try { return mService.getApplicationRestrictions ( admin , packageName ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } return null ; }
public static com.android.sdklib.internal.project.ProjectProperties load ( java.lang.String projectFolderOsPath , com.android.sdklib.internal.project.ProjectProperties.PropertyType type ) { java.io.File projectFolder = new java.io.File ( projectFolderOsPath ) ; if ( projectFolder.isDirectory ( ) ) { java.io.File defaultFile = new java.io.File ( projectFolder , type.mFilename ) ; if ( defaultFile.isFile ( ) ) { java.util.Map < java.lang.String , java.lang.String > map = com.android.sdklib.SdkManager.parsePropertyFile ( defaultFile , null ) ; if ( map != null ) { return new com.android.sdklib.internal.project.ProjectProperties ( projectFolderOsPath , map , type ) ; } } } return null ; }
public void testCanReadPeersMacAddressCurrentProfileAndAllPermissions ( ) throws java.lang.Exception { boolean output = false ; mThrowSecurityException = false ; mUid = com.android.server.wifi.util.WifiPermissionsUtilTest.MANAGED_PROFILE_UID ; mPermissionsList.put ( mMacAddressPermission , mUid ) ; mWifiScanAllowApps = android.app.AppOpsManager.MODE_ALLOWED ; mMockUserInfo.id = mCallingUser ; setupTestCase ( ) ; com.android.server.wifi.util.WifiPermissionsUtil codeUnderTest = new com.android.server.wifi.util.WifiPermissionsUtil ( mMockPermissionsWrapper , mMockContext , mMockWifiSettingsStore , mMockUserManager ) ; try { output = codeUnderTest.canAccessScanResults ( com.android.server.wifi.util.WifiPermissionsUtilTest.TEST_PACKAGE_NAME , mUid , mTargetVersion ) ; } catch ( java.lang.SecurityException e ) { throw e ; } org.junit.Assert.assertEquals ( output , true ) ; }
public java.lang.String toString ( ) { return ( ( ( "IccIoResult sw1:0x" + ( java.lang.Integer.toHexString ( sw1 ) ) ) + " sw2:0x" ) + ( java.lang.Integer.toHexString ( sw2 ) ) ) + ( ! ( success ( ) ) ? " Error: " + ( getErrorString ( ) ) : "" ) ; }
protected java.util.List < com.android.tools.lint.detector.api.Issue > getIssues ( ) { java.util.List < com.android.tools.lint.detector.api.Issue > issues = new java.util.ArrayList < com.android.tools.lint.detector.api.Issue > ( ) ; java.lang.Class < ? extends com.android.tools.lint.detector.api.Detector > detectorClass = getDetector ( ) . getClass ( ) ; java.util.List < com.android.tools.lint.detector.api.Issue > candidates = new com.android.tools.lint.checks.BuiltinIssueRegistry ( ) . getIssues ( ) ; for ( com.android.tools.lint.detector.api.Issue issue : candidates ) { if ( ( issue.getDetectorClass ( ) ) == detectorClass ) { issues.add ( issue ) ; } } return issues ; }
public void tearDown ( ) throws java.lang.Exception { if ( testSystemTzDataDir.exists ( ) ) { com.android.timezone.distro.FileUtils.deleteRecursive ( testInstallDir ) ; } if ( testInstallDir.exists ( ) ) { com.android.timezone.distro.FileUtils.deleteRecursive ( testInstallDir ) ; } if ( tempDir.exists ( ) ) { com.android.timezone.distro.FileUtils.deleteRecursive ( tempDir ) ; } super . tearDown ( ) ; }
public void test_nullLocale ( ) { assertCalendarConfigEquals ( java.util.Calendar.getInstance ( java.util.Locale.getDefault ( ) ) , java.util.Calendar.getInstance ( ( ( java.util.Locale ) ( null ) ) ) ) ; assertCalendarConfigEquals ( java.util.Calendar.getInstance ( java.util.TimeZone.getDefault ( ) , java.util.Locale.getDefault ( ) ) , java.util.Calendar.getInstance ( java.util.TimeZone.getDefault ( ) , null ) ) ; assertCalendarConfigEquals ( new java.util.GregorianCalendar ( java.util.Locale.getDefault ( ) ) , new java.util.GregorianCalendar ( ( ( java.util.Locale ) ( null ) ) ) ) ; }
public void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mIntent = new android.content.Intent ( this , com.android.cts.verifier.bluetooth.BleClientService.class ) ; mIntent.setAction ( BleClientService.BLE_CLIENT_ACTION_CLIENT_CONNECT ) ; startService ( mIntent ) ; }
void scheduleWritePackageRestrictionsLocked ( int userId ) { if ( ! ( com.android.server.pm.PackageManagerService.sUserManager.exists ( userId ) ) ) return ; mDirtyUsers.add ( userId ) ; if ( ! ( mHandler.hasMessages ( com.android.server.pm.PackageManagerService.WRITE_PACKAGE_RESTRICTIONS ) ) ) { mHandler.sendEmptyMessageDelayed ( com.android.server.pm.PackageManagerService.WRITE_PACKAGE_RESTRICTIONS , com.android.server.pm.PackageManagerService.WRITE_SETTINGS_DELAY ) ; } }
public void stopStreaming ( java.lang.String serviceId ) { com.android.phone.testapps.embmsmw.AppActiveStreams.StreamCallbackWithState entry = mStreamStates.get ( serviceId ) ; if ( entry != null ) { try { if ( ( entry.getState ( ) ) != ( android.telephony.mbms.StreamingService.STATE_STOPPED ) ) { entry.setState ( StreamingService.STATE_STOPPED ) ; entry.getCallback ( ) . streamStateChanged ( StreamingService.STATE_STOPPED ) ; } } catch ( android.os.RemoteException e ) { dispose ( serviceId ) ; } } }
private java.lang.String sanitizePaths ( java.lang.String str ) { if ( str != null ) { java.lang.String osPath = getSdkManager ( ) . getLocation ( ) ; str = str.replace ( osPath , "@SDK" ) ; try { osPath = getAvdManager ( ) . getBaseAvdFolder ( ) ; str = str.replace ( osPath , "@AVD" ) ; } catch ( com.android.prefs.AndroidLocation.AndroidLocationException ignore ) { } str = str.replace ( java.io.File.separatorChar , '/' ) ; } return str ; }
public void onDestroy ( ) { super . onDestroy ( ) ; if ( ( mThread ) != null ) { mThread.quit ( ) ; } try { if ( ( mHttpResponseCache ) != null ) { mHttpResponseCache.delete ( ) ; } } catch ( java.io.IOException e ) { android.util.Log.i ( com.android.statementservice.DirectStatementService.TAG , ( "HTTP(S) response cache deletion failed:" + e ) ) ; } }
public void testCustomElements ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String main = "" + ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <fantasy android:name=\"fantasyOne\" \n" ) + " no-ns-attribute=\"no-ns\" >\n" ) + " </fantasy>\n" ) + " <application android:label=\"@string/lib_name\" />\n" ) + "\n" ) + "</manifest>" ) ; java.lang.String library = "" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:acme=\"http://acme.org/schemas\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\" />\n" ) + " <fantasy android:name=\"fantasyTwo\" \n" ) + " no-ns-attribute=\"no-ns\" >\n" ) + " </fantasy>\n" ) + " <acme:another acme:name=\"anotherOne\" \n" ) + " acme:ns-attribute=\"ns-value\" >\n" ) + " <some-child acme:child-attr=\"foo\" /> \n" ) + " </acme:another>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument mainDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "main" ) , main ) ; com.android.manifmerger.XmlDocument libraryDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "library" ) , library ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( mLogger ) ; com.google.common.base.Optional < com.android.manifmerger.XmlDocument > mergedDocument = mainDocument.merge ( libraryDocument , mergingReportBuilder ) ; assertTrue ( mergedDocument.isPresent ( ) ) ; com.android.manifmerger.XmlElement rootNode = mergedDocument.get ( ) . getRootNode ( ) ; assertTrue ( rootNode.getNodeByTypeAndKey ( ManifestModel.NodeTypes.APPLICATION , null ) . isPresent ( ) ) ; com.google.common.base.Optional < com.android.manifmerger.XmlElement > activityOne = rootNode.getNodeByTypeAndKey ( ManifestModel.NodeTypes.ACTIVITY , "com.example.lib3.activityOne" ) ; assertTrue ( activityOne.isPresent ( ) ) ; boolean foundFantasyOne = false ; boolean foundFantasyTwo = false ; boolean foundAnother = false ; org.w3c.dom.NodeList childNodes = rootNode.getXml ( ) . getChildNodes ( ) ; for ( int i = 0 ; i < ( childNodes.getLength ( ) ) ; i ++ ) { org.w3c.dom.Node item = childNodes.item ( i ) ; if ( item.getNodeName ( ) . equals ( "fantasy" ) ) { java.lang.String name = ( ( org.w3c.dom.Element ) ( item ) ) . getAttributeNS ( SdkConstants.ANDROID_URI , "name" ) ; if ( name.equals ( "fantasyOne" ) ) foundFantasyOne = true ; if ( name.equals ( "fantasyTwo" ) ) foundFantasyTwo = true ; } if ( item.getNodeName ( ) . equals ( "acme:another" ) ) { foundAnother = true ; } } assertTrue ( foundAnother ) ; assertTrue ( foundFantasyOne ) ; assertTrue ( foundFantasyTwo ) ; org.w3c.dom.Element validated = com.android.manifmerger.XmlDocumentTest.validate ( mergedDocument.get ( ) . prettyPrint ( ) ) ; org.w3c.dom.Node namedItem = validated.getAttributes ( ) . getNamedItem ( "xmlns:acme" ) ; assertEquals ( namedItem.getNodeValue ( ) , "http://acme.org/schemas" ) ; }
public void writeToParcel ( android.os.Parcel out , int flags ) { out.writeParcelable ( new android.os.ParcelUuid ( mUuid ) , 0 ) ; out.writeInt ( mInstance ) ; out.writeInt ( mProperties ) ; out.writeInt ( mPermissions ) ; out.writeTypedList ( mDescriptors ) ; }
public void testDistanceRecorder_unprocessedChildThrowsException ( ) { final android.support.test.espresso.util.TreeIterables.DistanceRecordingTreeViewer < android.support.test.espresso.util.TreeIterablesTest.TestElement > distanceRecorder = new android.support.test.espresso.util.TreeIterables.DistanceRecordingTreeViewer < android.support.test.espresso.util.TreeIterablesTest.TestElement > ( android.support.test.espresso.util.TreeIterablesTest.complexTree , new android.support.test.espresso.util.TreeIterablesTest.TestElementTreeViewer ( ) ) ; try { distanceRecorder.getDistance ( android.support.test.espresso.util.TreeIterablesTest.complexTree.children.iterator ( ) . next ( ) ) ; fail ( "distance recorder hasnt processed this child yet, cannot know distance" ) ; } catch ( java.lang.RuntimeException expected ) { } }
public final void change ( T item ) { int oldIndex = indexWithTypeAndId ( item ) ; if ( oldIndex != ( - 1 ) ) { T old = ( ( T ) ( com.android.tv.dvr.ui.SortedArrayAdapter.get ( oldIndex ) ) ) ; if ( ( mComparator.compare ( old , item ) ) == 0 ) { com.android.tv.dvr.ui.SortedArrayAdapter.replace ( oldIndex , item ) ; return ; } com.android.tv.dvr.ui.SortedArrayAdapter.removeItems ( oldIndex , 1 ) ; } add ( item ) ; }
public void onClick ( android.view.View view ) { com.android.dialer.common.LogUtil.i ( "NewVoicemailMediaPlayer.speakerButtonListener" , "speaker request for voicemailUri: %s" , voicemailUri.toString ( ) ) ; }
public void moveAb ( java.lang.String apkPath , java.lang.String instructionSet , java.lang.String outputPath ) throws com.android.internal.os.InstallerConnection.InstallerException { checkLock ( ) ; try { mInstalld.moveAb ( apkPath , instructionSet , outputPath ) ; } catch ( android.os.RemoteException | android.os.ServiceSpecificException e ) { throw new com.android.internal.os.InstallerConnection.InstallerException ( e.getMessage ( ) ) ; } }
private static boolean isCustomView ( org.w3c.dom.Element element ) { java.lang.String tag = element.getTagName ( ) ; if ( tag.equals ( com.android.SdkConstants.VIEW_TAG ) ) { return true ; } return ( ( tag.indexOf ( '.' ) ) != ( - 1 ) ) && ( ! ( tag.startsWith ( com.android.SdkConstants.ANDROID_PKG_PREFIX ) ) ) ; }
public android.net.NetworkScorerAppManager.NetworkScorerAppData getScorer ( java.lang.String packageName ) { if ( android.text.TextUtils.isEmpty ( packageName ) ) { return null ; } java.util.Collection < android.net.NetworkScorerAppManager.NetworkScorerAppData > applications = getAllValidScorers ( ) ; for ( android.net.NetworkScorerAppManager.NetworkScorerAppData app : applications ) { if ( packageName.equals ( app.mPackageName ) ) { return app ; } } return null ; }
public boolean getRoamingCapabilities ( com.android.server.wifi.WifiNative.RoamingCapabilities capabilities ) { android.util.Log.d ( com.android.server.wifi.WifiNative.TAG , "getRoamingCapabilities " ) ; try { if ( ( mWifiVendorHal ) != null ) { return mWifiVendorHal.getRoamingCapabilities ( capabilities ) ; } } catch ( java.lang.UnsupportedOperationException e ) { } return false ; }
void registerDisconnected ( ) { if ( ( mLastNetworkId ) != ( android.net.wifi.WifiConfiguration.INVALID_NETWORK_ID ) ) { android.net.wifi.WifiConfiguration config = mWifiConfigManager.getWifiConfiguration ( mLastNetworkId ) ; if ( config != null ) { config.lastDisconnected = mClock.getWallClockMillis ( ) ; if ( config.ephemeral ) { mWifiConfigManager.forgetNetwork ( mLastNetworkId ) ; } } } }
public void onServiceConnected ( android.content.ComponentName componentName , android.os.IBinder service ) { com.android.server.telecom.Log.startSession ( "CSCR.oSC" ) ; try { synchronized ( mTelecomLock ) { com.android.server.telecom.Log.event ( mCall , Log.Events.SCREENING_BOUND , componentName ) ; if ( ! ( mHasFinished ) ) { onServiceBound ( ICallScreeningService.Stub.asInterface ( service ) ) ; } } } finally { com.android.server.telecom.Log.endSession ( ) ; } }
protected java.lang.String lintFiles ( java.lang.String ... relativePaths ) throws java.lang.Exception { java.util.List < java.io.File > files = new java.util.ArrayList < java.io.File > ( ) ; java.io.File targetDir = getTargetDir ( ) ; for ( java.lang.String relativePath : relativePaths ) { java.io.File file = getTestfile ( targetDir , relativePath ) ; assertNotNull ( file ) ; files.add ( file ) ; } addManifestFile ( targetDir ) ; return checkLint ( files ) ; }
private int getPid ( java.nio.file.Path proc ) throws java.io.IOException { try { return java.lang.Integer.valueOf ( new java.lang.String ( java.nio.file.Files.readAllBytes ( proc.resolve ( "stat" ) ) ) . split ( " " ) [ 0 ] ) ; } catch ( java.io.IOException e ) { return - 1 ; } }
public void update ( ) { clear ( ) ; final java.util.List < android.support.v7.media.MediaRouter.RouteInfo > routes = mRouter.getRoutes ( ) ; final int count = routes.size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { android.support.v7.media.MediaRouter.RouteInfo route = routes.get ( i ) ; if ( onFilterRoute ( route ) ) { add ( route ) ; } } sort ( android.support.v7.app.MediaRouteChooserDialog.RouteComparator.sInstance ) ; notifyDataSetChanged ( ) ; }
private boolean shouldShowCallSubject ( com.android.incallui.call.DialerCall call ) { if ( call == null ) { return false ; } boolean isIncomingOrWaiting = ( ( primary.getState ( ) ) == ( com.android.incallui.call.DialerCall.State.INCOMING ) ) || ( ( primary.getState ( ) ) == ( com.android.incallui.call.DialerCall.State.CALL_WAITING ) ) ; return ( ( isIncomingOrWaiting && ( ! ( android.text.TextUtils.isEmpty ( call.getCallSubject ( ) ) ) ) ) && ( ( call.getNumberPresentation ( ) ) == ( android.telecom.TelecomManager.PRESENTATION_ALLOWED ) ) ) && ( call.isCallSubjectSupported ( ) ) ; }
public void setVideoProvider ( java.lang.String callId , com.android.internal.telecom.IVideoProvider videoProvider , android.telecom.Logging.Session.Info sessionInfo ) { android.telecom.RemoteConnection.VideoProvider remoteVideoProvider = null ; if ( videoProvider != null ) { remoteVideoProvider = new android.telecom.RemoteConnection.VideoProvider ( videoProvider ) ; } findConnectionForAction ( callId , "setVideoProvider" ) . setVideoProvider ( remoteVideoProvider ) ; }
public final java.lang.String getClassName ( com.android.tools.perflib.heap.State state ) { com.android.tools.perflib.heap.ClassObj theClass ; if ( ( mType ) == ( RootType.SYSTEM_CLASS ) ) { theClass = state.findClass ( mId ) ; } else { com.android.tools.perflib.heap.Instance instance = state.findReference ( mId ) ; theClass = state.findClass ( instance.mClassId ) ; } if ( theClass == null ) { return "no class defined!!" ; } return theClass.mClassName ; }
private void createNewContactForRawContact ( android.database.sqlite.SQLiteDatabase db , long rawContactId ) { mSelectionArgs1 [ 0 ] = java.lang.String.valueOf ( rawContactId ) ; computeAggregateData ( db , mRawContactsQueryByRawContactId , mSelectionArgs1 , mContactInsert ) ; long contactId = mContactInsert.executeInsert ( ) ; setContactIdAndMarkAggregated ( rawContactId , contactId ) ; mDbHelper.updateContactVisible ( contactId ) ; setPresenceContactId ( rawContactId , contactId ) ; updateAggregatedPresence ( contactId ) ; }
public boolean isCallerApplicationRestrictionsManagingPackage ( ) { throwIfParentInstance ( "isCallerApplicationRestrictionsManagingPackage" ) ; if ( ( mService ) != null ) { try { return mService.isCallerApplicationRestrictionsManagingPackage ( ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } } return false ; }
public void dataCallListChanged ( int var1 , java.util.ArrayList < android.hardware.radio.V1_0.SetupDataCallResult > var2 ) { }
public void sendUssd ( java.lang.String ussdMessage ) throws com.android.ims.ImsException { logi ( ( "sendUssd :: ussdMessage=" + ussdMessage ) ) ; synchronized ( mLockObj ) { if ( ( mSession ) == null ) { loge ( "sendUssd :: " ) ; throw new com.android.ims.ImsException ( "No call session" , ImsReasonInfo.CODE_LOCAL_CALL_TERMINATED ) ; } mSession.sendUssd ( ussdMessage ) ; } }
public void test_d2i_SSL_SESSION ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.d2i_SSL_SESSION ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } assertEquals ( org.conscrypt.NativeCryptoTest.NULL , org.conscrypt.NativeCrypto.d2i_SSL_SESSION ( new byte [ 0 ] ) ) ; assertEquals ( org.conscrypt.NativeCryptoTest.NULL , org.conscrypt.NativeCrypto.d2i_SSL_SESSION ( new byte [ 1 ] ) ) ; }
java.security.Signature createSignature ( org.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId ) throws java.security.GeneralSecurityException { java.security.Signature sig ; try { sig = helper.createSignature ( org.bouncycastle.operator.jcajce.OperatorHelper.getSignatureName ( sigAlgId ) ) ; } catch ( java.security.NoSuchAlgorithmException e ) { if ( ( org.bouncycastle.operator.jcajce.OperatorHelper.oids.get ( sigAlgId.getAlgorithm ( ) ) ) != null ) { java.lang.String signatureAlgorithm = ( ( java.lang.String ) ( org.bouncycastle.operator.jcajce.OperatorHelper.oids.get ( sigAlgId.getAlgorithm ( ) ) ) ) ; sig = helper.createSignature ( signatureAlgorithm ) ; } else { throw e ; } } return sig ; }
private void getActivityEnergyInfoFromController ( ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_PRIVILEGED , "Need BLUETOOTH permission" ) ; if ( isActivityAndEnergyReportingSupported ( ) ) { readEnergyInfo ( ) ; } }
public android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser ( ) { if ( ! ( getLeAccess ( ) ) ) { return null ; } synchronized ( mLock ) { if ( ( android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser ) == null ) { android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser = new android.bluetooth.le.BluetoothLeAdvertiser ( mManagerService ) ; } } return android.bluetooth.BluetoothAdapter.sBluetoothLeAdvertiser ; }
com.android.sched.vfs.DirectFS.DirectVFile createVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.DirectFS.DirectVDir parent , @ javax.annotation.Nonnull java.lang.String name ) throws com.android.sched.util.file.CannotCreateFileException { assert ( ( permissions ) & ( com.android.sched.util.file.FileOrDirectory.Permission.WRITE ) ) != 0 ; java.io.File file = new java.io.File ( parent.getNativePath ( ) . getPath ( ) , name ) ; try { com.android.sched.util.file.AbstractStreamFile.create ( file , new com.android.sched.util.location.FileLocation ( file ) ) ; } catch ( com.android.sched.util.file.FileAlreadyExistsException e ) { } return new com.android.sched.vfs.DirectFS.DirectVFile ( this , parent , name ) ; }
boolean sendData ( android.bluetooth.BluetoothDevice device , java.lang.String report ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hid.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH_ADMIN permission" ) ; if ( com.android.bluetooth.hid.HidService.DBG ) { android.util.Log.d ( com.android.bluetooth.hid.HidService.TAG , ( "sendData: " + ( device.getAddress ( ) ) ) ) ; } int state = this . getConnectionState ( device ) ; if ( state != ( android.bluetooth.BluetoothInputDevice.STATE_CONNECTED ) ) { return false ; } return sendDataNative ( com.android.bluetooth.Utils.getByteAddress ( device ) , report ) ; }
protected final boolean closeImpl ( ) throws java.io.IOException { if ( ! ( isClosed ) ) { isClosed = true ; try { sun.nio.fs.UnixNativeDispatcher.closedir ( dp ) ; } catch ( sun.nio.fs.UnixException x ) { throw new java.io.IOException ( x.errorString ( ) ) ; } return true ; } else { return false ; } }
private static com.google.doclava.SeeTagInfo convertSeeTag ( com.google.doclava.SeeTag tag , com.google.doclava.ContainerInfo base ) { return new com.google.doclava.SeeTagInfo ( tag.name ( ) , tag.kind ( ) , tag.text ( ) , base , com.google.doclava.Converter.convertSourcePosition ( tag.position ( ) ) ) ; }
private boolean isDevicesExtra ( java.io.File item ) { java.io.File properties = new java.io.File ( item , com.android.SdkConstants.FN_SOURCE_PROP ) ; try { java.io.BufferedReader propertiesReader = new java.io.BufferedReader ( new java.io.FileReader ( properties ) ) ; try { java.lang.String line ; while ( ( line = propertiesReader.readLine ( ) ) != null ) { java.util.regex.Matcher m = com.android.sdklib.devices.DeviceManager.sPathPropertyPattern.matcher ( line ) ; if ( m.matches ( ) ) { return true ; } } } finally { propertiesReader.close ( ) ; } } catch ( java.io.IOException ignore ) { } return false ; }
public android.net.IpSecTransform.Builder setSpi ( @ android.net.IpSecTransform.TransformDirection int direction , android.net.IpSecManager.SecurityParameterIndex spi ) { if ( ( spi.getResourceId ( ) ) == ( android.net.IpSecManager.INVALID_RESOURCE_ID ) ) { throw new java.lang.IllegalArgumentException ( "Invalid SecurityParameterIndex" ) ; } mConfig.setSpiResourceId ( direction , spi.getResourceId ( ) ) ; return this ; }
public void terminate ( ) { android.net.wifi.nan.WifiNanManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.w ( android.net.wifi.nan.WifiNanDiscoveryBaseSession.TAG , "terminate: called post GC on WifiNanManager" ) ; return ; } mgr.terminateSession ( mSessionId ) ; mTerminated = true ; mMgr.clear ( ) ; mCloseGuard.close ( ) ; }
public void testMultipleProjects ( ) throws java.lang.Exception { java.io.File project = getProjectDir ( null , "bytecode/classes.jar=>libs/classes.jar" ) ; checkDriver ( "" , "The --sources, --classpath and --libraries arguments can only be used with a single project\n" , new java.lang.String [ ] { "--libraries" , new java.io.File ( project , "libs/classes.jar" ) . getPath ( ) , "--disable" , "LintError" , project.getPath ( ) , project.getPath ( ) } ) ; }
public java.net.Socket createSocket ( java.lang.String host , int port ) throws java.io.IOException { org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl s = ( ( org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl ) ( getDelegate ( ) . createSocket ( host , port ) ) ) ; s.setNpnProtocols ( mNpnProtocols ) ; s.setHandshakeTimeout ( mHandshakeTimeoutMillis ) ; s.setChannelIdPrivateKey ( mChannelIdPrivateKey ) ; if ( mSecure ) { android.net.SSLCertificateSocketFactory.verifyHostname ( s , host ) ; } return s ; }
public void writeToParcel ( android.os.Parcel dest , int flags ) { dest.writeString ( username ) ; dest.writeString ( password ) ; dest.writeInt ( eapType ) ; dest.writeString ( nonEapInnerMethod ) ; }
private java.lang.String getApkName ( java.lang.String split ) { java.lang.String apkName = "${project.archivesBaseName}-${getOutputBaseName()}_${split}" ; return apkName + ( ( getSigningConfig ( ) ) == null ? "-unsigned.apk" : "-unaligned.apk" ) ; }
private static void addToElement ( com.android.manifmerger.ManifestMerger2.SystemProperty systemProperty , com.android.manifmerger.ActionRecorder actionRecorder , java.lang.String value , com.android.manifmerger.XmlElement to ) { to.getXml ( ) . setAttribute ( systemProperty.toCamelCase ( ) , value ) ; com.android.manifmerger.XmlAttribute xmlAttribute = new com.android.manifmerger.XmlAttribute ( to , to.getXml ( ) . getAttributeNode ( systemProperty.toCamelCase ( ) ) , null ) ; actionRecorder.recordAttributeAction ( xmlAttribute , new com.android.manifmerger.Actions.AttributeRecord ( Actions.ActionType.INJECTED , new com.android.manifmerger.Actions.ActionLocation ( to.getSourceLocation ( ) , PositionImpl.UNKNOWN_POSITION ) , xmlAttribute.getId ( ) , null , null ) ) ; }
synchronized void setSelectedClient ( com.android.ddmlib.Client selectedClient ) { if ( ( com.android.ddmlib.MonitorThread.mInstance ) == null ) { return ; } if ( ( mSelectedClient ) != selectedClient ) { com.android.ddmlib.Client oldClient = mSelectedClient ; mSelectedClient = selectedClient ; if ( oldClient != null ) { oldClient.update ( Client.CHANGE_PORT ) ; } if ( ( mSelectedClient ) != null ) { mSelectedClient.update ( Client.CHANGE_PORT ) ; } } }
private ApkVerifier.Result verify ( java.lang.String apkFilenameInResources ) throws com.android.apksig.apk.ApkFormatException , java.io.IOException , java.security.NoSuchAlgorithmException { return verify ( apkFilenameInResources , null ) ; }
public void test_with_adjustment ( ) { final java.time.LocalTime sample = java.time.LocalTime.of ( 23 , 5 ) ; java.time.temporal.TemporalAdjuster adjuster = new java.time.temporal.TemporalAdjuster ( ) { @ java.lang.Override public java.time.temporal.Temporal adjustInto ( java.time.temporal.Temporal dateTime ) { return sample ; } } ; org.testng.Assert.assertEquals ( TEST_12_30_40_987654321.with ( adjuster ) , sample ) ; }
private java.lang.String decodeMessage ( android.os.Message msg ) { if ( ( msg.what ) == ( com.android.mms.transaction.TransactionService.EVENT_QUIT ) ) { return "EVENT_QUIT" ; } else if ( ( msg.what ) == ( com.android.mms.transaction.TransactionService.EVENT_CONTINUE_MMS_CONNECTIVITY ) ) { return "EVENT_CONTINUE_MMS_CONNECTIVITY" ; } else if ( ( msg.what ) == ( com.android.mms.transaction.TransactionService.EVENT_TRANSACTION_REQUEST ) ) { return "EVENT_TRANSACTION_REQUEST" ; } else if ( ( msg.what ) == ( com.android.mms.transaction.TransactionService.EVENT_HANDLE_NEXT_PENDING_TRANSACTION ) ) { return "EVENT_HANDLE_NEXT_PENDING_TRANSACTION" ; } return "unknown message.what" ; }
public void visitMethodInsn ( final int opcode , final java.lang.String owner , final java.lang.String name , final java.lang.String desc ) { switch ( opcode ) { case org.objectweb.asm.Opcodes.INVOKESPECIAL : invokespecial ( owner , name , desc ) ; break ; case org.objectweb.asm.Opcodes.INVOKEVIRTUAL : invokevirtual ( owner , name , desc ) ; break ; case org.objectweb.asm.Opcodes.INVOKESTATIC : invokestatic ( owner , name , desc ) ; break ; case org.objectweb.asm.Opcodes.INVOKEINTERFACE : invokeinterface ( owner , name , desc ) ; break ; default : throw new java.lang.IllegalArgumentException ( ) ; } }
private org.w3c.dom.Element findOuterScrollingWidget ( org.w3c.dom.Node node , boolean vertical ) { java.util.Collection < java.lang.String > applicableElements = getApplicableElements ( ) ; while ( node != null ) { if ( node instanceof org.w3c.dom.Element ) { org.w3c.dom.Element element = ( ( org.w3c.dom.Element ) ( node ) ) ; java.lang.String tagName = element.getTagName ( ) ; if ( ( applicableElements.contains ( tagName ) ) && ( vertical == ( isVerticalScroll ( element ) ) ) ) { return element ; } } node = node.getParentNode ( ) ; } return null ; }
private static void checkName ( java.lang.String name , java.lang.String displayName ) { if ( name.startsWith ( com.android.builder.BuilderConstants.INSTRUMENT_TEST ) ) { throw new java.lang.RuntimeException ( "${displayName} names cannot start with '${INSTRUMENT_TEST}'" ) ; } if ( name.startsWith ( com.android.builder.BuilderConstants.UI_TEST ) ) { throw new java.lang.RuntimeException ( "${displayName} names cannot start with '${UI_TEST}'" ) ; } if ( com.android.builder.BuilderConstants.LINT.equals ( name ) ) { throw new java.lang.RuntimeException ( "${displayName} names cannot be ${LINT}" ) ; } }
public boolean isRoot ( ) { return ( ( ( mUiViewNode ) == null ) || ( ( mUiViewNode.getUiParent ( ) ) == null ) ) || ( ( mUiViewNode.getUiParent ( ) . getUiParent ( ) ) == null ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; mDevice.registerWatcher ( com.android.devtools.systemimage.uitest.watchers.GoogleNowWelcomeViewWatcher.class . getName ( ) , new com.android.devtools.systemimage.uitest.watchers.GoogleNowWelcomeViewWatcher ( mDevice ) ) ; }
private static org.eclipse.jdt.internal.compiler.lookup.MethodBinding findSuperMethodBinding ( @ com.android.annotations.NonNull org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding ) { org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding superclass = binding.declaringClass.superclass ( ) ; while ( superclass != null ) { org.eclipse.jdt.internal.compiler.lookup.MethodBinding [ ] methods = superclass.getMethods ( binding.selector , binding.parameters.length ) ; for ( org.eclipse.jdt.internal.compiler.lookup.MethodBinding method : methods ) { if ( method.areParameterErasuresEqual ( binding ) ) { return method ; } } superclass = superclass.superclass ( ) ; } return null ; }
private com.android.sdklib.internal.repository.packages.Package.License parseLicense ( @ com.android.annotations.NonNull org.w3c.dom.Node packageNode , @ com.android.annotations.NonNull java.util.Map < java.lang.String , java.lang.String > licenses ) { org.w3c.dom.Node usesLicense = com.android.sdklib.internal.repository.packages.PackageParserUtils.findChildElement ( packageNode , SdkRepoConstants.NODE_USES_LICENSE ) ; if ( usesLicense != null ) { org.w3c.dom.Node ref = usesLicense.getAttributes ( ) . getNamedItem ( SdkRepoConstants.ATTR_REF ) ; if ( ref != null ) { java.lang.String licenseRef = ref.getNodeValue ( ) ; return new com.android.sdklib.internal.repository.packages.Package.License ( licenses.get ( licenseRef ) , licenseRef ) ; } } return null ; }
private void transformStaticValues ( com.android.dx.io.DexBuffer in , com.android.dx.merge.IndexMap indexMap ) { com.android.dx.dex.TableOfContents.Section section = in.getTableOfContents ( ) . encodedArrays ; if ( section.exists ( ) ) { com.android.dx.io.DexBuffer.Section staticValuesIn = in.open ( section.off ) ; for ( int i = 0 ; i < ( section.size ) ; i ++ ) { transformStaticValues ( staticValuesIn , indexMap ) ; } } }
private java.io.File createFileFromStr ( java.lang.String configStr , java.lang.String module ) throws java.io.IOException { java.io.File file = java.io.File.createTempFile ( module , "dynamic" ) ; java.io.FileOutputStream stream = null ; try { stream = new java.io.FileOutputStream ( file ) ; stream.write ( configStr.getBytes ( ) ) ; stream.flush ( ) ; } finally { if ( stream != null ) { stream.close ( ) ; } } return file ; }
public void enableSaveConfig ( ) { doBooleanCommand ( "SET update_config 1" ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent , android.bluetooth.BluetoothDevice device ) { int state = intent.getIntExtra ( BluetoothAdapter.EXTRA_STATE , BluetoothAdapter.ERROR ) ; mLocalAdapter.setBluetoothStateInt ( state ) ; synchronized ( mCallbacks ) { for ( com.android.settingslib.bluetooth.BluetoothCallback callback : mCallbacks ) { callback.onBluetoothStateChanged ( state ) ; } } mDeviceManager.onBluetoothStateChanged ( state ) ; }
public static void w ( java.lang.String prefix , java.lang.String format , java.lang.Object ... args ) { if ( android.telecom.Log.WARN ) { android.util.Log.w ( android.telecom.Log.TAG , android.telecom.Log.buildMessage ( prefix , format , args ) ) ; } }
public void TestPatternWhitespace ( ) { java.lang.String r = "a > ‎ b;" ; com.ibm.icu.text.Transliterator t = com.ibm.icu.text.Transliterator.createFromRules ( "test" , r , Transliterator.FORWARD ) ; expect ( t , "a" , "b" ) ; com.ibm.icu.text.UnicodeSet set = new com.ibm.icu.text.UnicodeSet ( "[a ‎]" ) ; if ( set.contains ( 8206 ) ) { errln ( "FAIL: U+200E not being ignored by UnicodeSet" ) ; } }
public void testPocBug_35644815 ( ) throws java.lang.Exception { enableAdbRoot ( getDevice ( ) ) ; }
protected boolean updateActions ( ) { boolean changed = false ; if ( updatePipAction ( ) ) { changed = true ; } if ( updateMultiAudioAction ( ) ) { changed = true ; } if ( updateDisplayModeAction ( ) ) { changed = true ; } return changed ; }
private void setCertificate ( byte [ ] cert_der ) { try { java.security.cert.X509Certificate cert = new org.apache.harmony.security.provider.cert.X509CertImpl ( cert_der ) ; mCallbackProxy.onReceivedCertificate ( new android.net.http.SslCertificate ( cert ) ) ; } catch ( java.io.IOException e ) { android.util.Log.e ( android.webkit.BrowserFrame.LOGTAG , "Can't get the certificate from WebKit, canceling" ) ; return ; } }
public void onServiceConnected ( android.content.ComponentName name , android.os.IBinder service ) { com.android.server.telecom.Log.startSession ( "ICSBC.oSC" ) ; synchronized ( mLock ) { try { com.android.server.telecom.Log.d ( this , "onServiceConnected: %s %b %b" , name , mIsBound , mIsConnected ) ; mIsBound = true ; if ( mIsConnected ) { onConnected ( service ) ; } } finally { com.android.server.telecom.Log.endSession ( ) ; } } }
public com.android.sched.vfs.VFS checkString ( @ javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context , @ javax.annotation.Nonnull final java.lang.String string ) throws com.android.sched.util.codec.ParsingException { com.android.sched.util.RunnableHooks hooks = context.getRunnableHooks ( ) ; try { return new com.android.sched.vfs.ReadWriteZipFS ( new com.android.sched.util.file.OutputZipFile ( string , hooks , existence , change ) ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.codec.ParsingException ( e.getMessage ( ) , e ) ; } }
public static < R extends java.lang.Readable & java.io.Closeable > long copy ( com.google.common.io.InputSupplier < R > from , java.lang.Appendable to ) throws java.io.IOException { boolean threw = true ; R in = from.getInput ( ) ; try { long count = com.google.common.io.CharStreams.copy ( in , to ) ; threw = false ; return count ; } finally { com.google.common.io.Closeables.close ( in , threw ) ; } }
private static void createDexFile ( ) { if ( ( com.android.dx.command.dexer.Main.outputDex ) != null ) { com.android.dx.command.dexer.Main.dexOutputArrays.add ( com.android.dx.command.dexer.Main.writeDex ( ) ) ; } com.android.dx.command.dexer.Main.outputDex = new com.android.dx.dex.file.DexFile ( com.android.dx.command.dexer.Main.args.dexOptions ) ; if ( ( com.android.dx.command.dexer.Main.args.dumpWidth ) != 0 ) { com.android.dx.command.dexer.Main.outputDex.setDumpWidth ( com.android.dx.command.dexer.Main.args.dumpWidth ) ; } }
public boolean enableNoAutoConnect ( ) { if ( ( isEnabled ( ) ) == true ) { if ( android.bluetooth.BluetoothAdapter.DBG ) android.util.Log.d ( android.bluetooth.BluetoothAdapter.TAG , "enableNoAutoConnect(): BT is already enabled..!" ) ; return true ; } try { return mManagerService.enableNoAutoConnect ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothAdapter.TAG , "" , e ) ; } return false ; }
public void test_d2i_SSL_SESSION ( ) throws java.lang.Exception { try { org.conscrypt.NativeCrypto.d2i_SSL_SESSION ( null ) ; org.junit.Assert.fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } try { org.conscrypt.NativeCrypto.d2i_SSL_SESSION ( new byte [ 0 ] ) ; org.junit.Assert.fail ( "Should throw IOException with invalid SSL_SESSION data" ) ; } catch ( java.io.IOException expected ) { } try { org.conscrypt.NativeCrypto.d2i_SSL_SESSION ( new byte [ 1 ] ) ; org.junit.Assert.fail ( "Should throw IOException with invalid SSL_SESSION data" ) ; } catch ( java.io.IOException expected ) { } }
private void testScriptSide ( android.renderscript.RenderScript pRS ) { com.android.rs.test.ScriptC_sampler s = new com.android.rs.test.ScriptC_sampler ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; initializeGlobals ( pRS , s ) ; s.invoke_sampler_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; }
public void TestGetAvailable ( ) { com.ibm.icu.util.ULocale [ ] locales = com.ibm.icu.util.ULocale.getAvailableLocales ( ) ; if ( ( locales.length ) < 10 ) { errln ( "Did not get the correct result from getAvailableLocales" ) ; } if ( ! ( locales [ ( ( locales.length ) - 1 ) ] . getName ( ) . startsWith ( "z" ) ) ) { errln ( "Did not get the expected result" ) ; } }
public void setOverScrollMode ( final int mode ) { if ( ( mAwContents ) == null ) return ; if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { setOverScrollMode ( mode ) ; } } ) ; return ; } mAwContents.setOverScrollMode ( mode ) ; }
public static com.android.jack.dx.rop.cst.CstNat createSignature ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JFieldId field ) { java.lang.String fieldName = field.getName ( ) ; java.lang.String fieldSignature = com.android.jack.backend.dex.rop.RopHelper.formatter.getName ( field.getType ( ) ) ; com.android.jack.dx.rop.cst.CstString name = new com.android.jack.dx.rop.cst.CstString ( fieldName ) ; com.android.jack.dx.rop.cst.CstString descriptor = new com.android.jack.dx.rop.cst.CstString ( fieldSignature ) ; com.android.jack.dx.rop.cst.CstNat signature = new com.android.jack.dx.rop.cst.CstNat ( name , descriptor ) ; return signature ; }
public int getFeatureStatus ( ) { synchronized ( mLock ) { if ( ( mFeatureStatusCached ) != null ) { return mFeatureStatusCached ; } } java.lang.Integer status = retrieveFeatureStatus ( ) ; synchronized ( mLock ) { if ( status == null ) { return android.telephony.ims.feature.ImsFeature.STATE_NOT_AVAILABLE ; } mFeatureStatusCached = status ; } return status ; }
private java.util.List < java.lang.String > _getAllProvidersLocked ( ) { if ( com.android.server.LocationManagerService.LOCAL_LOGV ) { android.util.Log.v ( com.android.server.LocationManagerService.TAG , "getAllProviders" ) ; } java.util.List < android.location.LocationProviderImpl > providers = android.location.LocationProviderImpl.getProviders ( ) ; java.util.ArrayList < java.lang.String > out = new java.util.ArrayList < java.lang.String > ( providers.size ( ) ) ; for ( android.location.LocationProviderImpl p : providers ) { out.add ( p.getName ( ) ) ; } return out ; }
public void addActiveDownstream ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine downstream ) { if ( ( mActiveDownstreams.indexOf ( downstream ) ) == ( - 1 ) ) { mActiveDownstreams.offer ( downstream ) ; updateIPv6TetheringInterfaces ( ) ; } }
public java.lang.String [ ] getProjectOutputs ( ) throws org.eclipse.core.runtime.CoreException { org.eclipse.core.resources.IFolder outputFolder = com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.getOutputFolder ( mProject ) ; org.eclipse.core.resources.IProject [ ] javaProjects = com.android.ide.eclipse.adt.internal.project.ProjectHelper.getReferencedProjects ( mProject ) ; org.eclipse.jdt.core.IJavaProject [ ] referencedJavaProjects = com.android.ide.eclipse.adt.internal.build.BuildHelper.getJavaProjects ( javaProjects ) ; java.lang.String [ ] projectOutputs = getProjectOutputs ( referencedJavaProjects ) ; java.lang.String [ ] outputs = new java.lang.String [ 1 + ( projectOutputs.length ) ] ; outputs [ 0 ] = outputFolder.getLocation ( ) . toOSString ( ) ; return outputs ; }
public java.util.List < ? extends com.android.tools.idea.run.CloudConfiguration > getAllCloudConfigurations ( @ org.jetbrains.annotations.NotNull org.jetbrains.android.facet.AndroidFacet facet ) { java.util.List < com.google.gct.testing.CloudPersistentConfiguration > cloudPersistentConfigurations = com.google.gct.testing.CloudCustomPersistentConfigurations.getInstance ( facet.getModule ( ) ) . getState ( ) . myCloudPersistentConfigurations ; return com.google.common.collect.Lists.newArrayList ( com.google.common.collect.Iterables.concat ( com.google.gct.testing.CloudConfigurationProviderImpl.deserializeConfigurations ( cloudPersistentConfigurations , true , facet ) , getDefaultConfigurations ( facet , com.android.tools.idea.run.CloudConfiguration.Kind.MATRIX ) , getDefaultConfigurations ( facet , com.android.tools.idea.run.CloudConfiguration.Kind.SINGLE_DEVICE ) ) ) ; }
public void notifyListeners ( final boolean init ) { if ( ( ( mWindowShell ) != null ) && ( ( mListeners.size ( ) ) > 0 ) ) { mWindowShell.getDisplay ( ) . syncExec ( new java.lang.Runnable ( ) { public void run ( ) { for ( com.android.sdkuilib.repository.UpdaterWindow.ISdkListener listener : mListeners ) { try { listener.onSdkChange ( init ) ; } catch ( java.lang.Throwable t ) { mSdkLog.error ( t , null ) ; } } } } ) ; } }
public java.lang.String getMacAddress ( ) { java.lang.String ret = doStringCommand ( "DRIVER MACADDR" ) ; if ( ! ( android.text.TextUtils.isEmpty ( ret ) ) ) { java.lang.String [ ] tokens = ret.split ( " = " ) ; if ( ( tokens.length ) == 2 ) return tokens [ 1 ] ; } return null ; }
public void onTargetChange ( ) { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData targetData = mConfigComposite.onXmlModelLoaded ( ) ; if ( targetData != null ) { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData.LayoutBridge bridge = targetData.getLayoutBridge ( ) ; setClippingSupport ( ( ( bridge.apiLevel ) >= 4 ) ) ; } mConfigListener.onConfigurationChange ( ) ; }
public void getCdmaBroadcastConfig ( android.os.Message response ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_CDMA_GET_BROADCAST_CONFIG , response ) ; send ( rr ) ; }
static void log ( java.lang.String message ) { if ( com.android.rs.test.RSTest.LOG_ENABLED ) { android.util.Log.v ( com.android.rs.test.RSTest.LOG_TAG , message ) ; } }
private void assertNoContentInstalled ( ) throws java.lang.Exception { assertNull ( installer.getInstalledBundleVersion ( ) ) ; java.io.File currentTzDataDir = installer.getCurrentTzDataDir ( ) ; assertFalse ( currentTzDataDir.exists ( ) ) ; java.io.File workingDir = installer.getWorkingDir ( ) ; assertFalse ( workingDir.exists ( ) ) ; java.io.File oldDataDir = installer.getOldTzDataDir ( ) ; assertFalse ( oldDataDir.exists ( ) ) ; }
public final int integer_literal ( ) throws org.jf.smali.RecognitionException { int value = 0 ; org.antlr.runtime.tree.CommonTree INTEGER_LITERAL209 = null ; try { { INTEGER_LITERAL209 = ( ( org.antlr.runtime.tree.CommonTree ) ( match ( input , org.jf.smali.smaliTreeWalker.INTEGER_LITERAL , org.jf.smali.smaliTreeWalker.FOLLOW_INTEGER_LITERAL_in_integer_literal3495 ) ) ) ; value = org.jf.smali.LiteralTools.parseInt ( ( INTEGER_LITERAL209 != null ? INTEGER_LITERAL209.getText ( ) : null ) ) ; } } catch ( org.jf.smali.RecognitionException re ) { reportError ( re ) ; recover ( input , re ) ; } finally { } return value ; }
public static void setBlocking ( java.io.FileDescriptor fd , boolean blocking ) throws java.io.IOException { try { int flags = Libcore.os.fcntlVoid ( fd , libcore.io.F_GETFL ) ; if ( ! blocking ) { flags |= O_NONBLOCK ; } else { flags &= ~ ( O_NONBLOCK ) ; } Libcore.os.fcntlLong ( fd , libcore.io.F_SETFL , flags ) ; } catch ( android.system.ErrnoException errnoException ) { throw errnoException.rethrowAsIOException ( ) ; } }
private java.lang.String getRClassName ( org.eclipse.core.resources.IProject project ) { org.eclipse.core.resources.IFile manifestFile = com.android.ide.eclipse.adt.internal.project.ProjectHelper.getManifest ( project ) ; if ( ( manifestFile != null ) && ( manifestFile.isSynchronized ( IResource.DEPTH_ZERO ) ) ) { com.android.sdklib.xml.AndroidManifestParser.ManifestData data = com.android.ide.eclipse.adt.internal.project.AndroidManifestHelper.parseForData ( manifestFile ) ; if ( data != null ) { java.lang.String javaPackage = data.getPackage ( ) ; return javaPackage + ".R" ; } } return null ; }
public void prepareToLeaveProcess ( ) { final int size = mItems.size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { final android.content.ClipData.Item item = mItems.get ( i ) ; if ( ( item.mIntent ) != null ) { item.mIntent.prepareToLeaveProcess ( ) ; } if ( ( ( item.mUri ) != null ) && ( android.os.StrictMode.vmFileUriExposureEnabled ( ) ) ) { item.mUri.checkFileUriExposed ( "ClipData.Item.getUri()" ) ; } } }
public void testLibsManifestMerging ( ) throws java.lang.Exception { java.io.File project = new java.io.File ( testDir , "libsTest" ) ; java.io.File fileOutput = new java.io.File ( project , ( ( "libapp/build/" + ( com.android.build.gradle.BasePlugin.FD_INTERMEDIATES ) ) + "/bundles/release/AndroidManifest.xml" ) ) ; runGradleTasks ( sdkDir , ndkDir , BasePlugin.GRADLE_MIN_VERSION , project , "clean" , "build" ) ; assertTrue ( fileOutput.exists ( ) ) ; }
public void onCreateActions ( java.util.List < android.support.v17.leanback.widget.GuidedAction > actions , android.os.Bundle savedInstanceState ) { int position = 0 ; for ( com.android.tv.dvr.SeriesRecording seriesRecording : mSeriesRecordings ) { actions.add ( new android.support.v17.leanback.widget.GuidedAction.Builder ( getActivity ( ) ) . id ( ( position ++ ) ) . title ( seriesRecording.getTitle ( ) ) . build ( ) ) ; } }
public java.lang.String getDisplayLanguage ( java.util.Locale locale ) { if ( languageCode.isEmpty ( ) ) { return "" ; } if ( languageCode.equals ( "tl" ) ) { return "Filipino" ; } java.lang.String result = libcore.icu.ICU.getDisplayLanguageNative ( toString ( ) , locale.toString ( ) ) ; if ( result == null ) { result = libcore.icu.ICU.getDisplayLanguageNative ( toString ( ) , java.util.Locale.getDefault ( ) . toString ( ) ) ; } return result ; }
static boolean isLocalTone ( com.android.ims.ImsCall imsCall ) { if ( ( ( imsCall == null ) || ( ( imsCall.getCallProfile ( ) ) == null ) ) || ( ( imsCall.getCallProfile ( ) . mMediaProfile ) == null ) ) { return false ; } com.android.ims.ImsStreamMediaProfile mediaProfile = imsCall.getCallProfile ( ) . mMediaProfile ; return ( mediaProfile.mAudioDirection ) == ( com.android.ims.ImsStreamMediaProfile.DIRECTION_INACTIVE ) ? true : false ; }
protected void registerTabs ( ) { addFailuresTab ( ) ; if ( ! ( getResults ( ) . getPackages ( ) . isEmpty ( ) ) ) { addTab ( "Packages" , new org.gradle.api.Action < org.w3c.dom.Element > ( ) { @ java.lang.Override public void execute ( org.w3c.dom.Element element ) { renderPackages ( element ) ; } } ) ; } addTab ( "Classes" , new org.gradle.api.Action < org.w3c.dom.Element > ( ) { @ java.lang.Override public void execute ( org.w3c.dom.Element element ) { renderClasses ( element ) ; } } ) ; addDeviceAndVariantTabs ( ) ; }
public static android.telecom.DisconnectCause toTelecomDisconnectCause ( int telephonyDisconnectCause , java.lang.String reason ) { android.content.Context context = com.android.phone.PhoneGlobals.getInstance ( ) ; return new android.telecom.DisconnectCause ( com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseCode ( telephonyDisconnectCause ) , com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseLabel ( context , telephonyDisconnectCause ) , com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseDescription ( context , telephonyDisconnectCause ) , com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectReason ( telephonyDisconnectCause , reason ) , com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseTone ( telephonyDisconnectCause ) ) ; }
public java.io.FileDescriptor openSocketFd ( java.lang.String host , int port , int timeoutMs ) throws android.os.RemoteException { return mService.openSocketFd ( host , port , timeoutMs ) . getFileDescriptor ( ) ; }
protected void mergeDex ( @ javax.annotation.Nonnull com.android.jack.tools.merger.JackMerger merger , com.android.sched.vfs.InputVFile inputDex ) throws com.android.jack.backend.dex.DexWritingException , com.android.jack.tools.merger.MergingOverflowException { try { merger.addDexFile ( new com.android.jack.dx.io.DexBuffer ( inputDex.openRead ( ) ) ) ; } catch ( java.io.IOException e ) { throw new com.android.jack.backend.dex.DexWritingException ( new com.android.sched.util.file.CannotReadException ( inputDex , e ) ) ; } }
public void testEncode ( ) throws java.lang.Exception { assertEncoded ( "" ) ; assertEncoded ( "Eg==" , 18 ) ; assertEncoded ( "EjQ=" , 18 , 52 ) ; assertEncoded ( "EjRW" , 18 , 52 , 86 ) ; assertEncoded ( "EjRWeA==" , 18 , 52 , 86 , 120 ) ; assertEncoded ( "EjRWeJo=" , 18 , 52 , 86 , 120 , 154 ) ; assertEncoded ( "EjRWeJq8" , 18 , 52 , 86 , 120 , 154 , 188 ) ; }
public int interceptMotionBeforeQueueingWhenScreenOff ( int policyFlags ) { int result = 0 ; final boolean isWakeMotion = ( policyFlags & ( ( android.view.WindowManagerPolicy.FLAG_WAKE ) | ( android.view.WindowManagerPolicy.FLAG_WAKE_DROPPED ) ) ) != 0 ; if ( isWakeMotion ) { result |= ACTION_WAKE_UP ; } return result ; }
protected java.util.List < com.android.tools.lint.detector.api.Issue > getIssues ( ) { java.util.List < com.android.tools.lint.detector.api.Issue > issues = new java.util.ArrayList < com.android.tools.lint.detector.api.Issue > ( ) ; java.lang.Class < ? extends com.android.tools.lint.detector.api.Detector > detectorClass = getDetectorInstance ( ) . getClass ( ) ; java.util.List < com.android.tools.lint.detector.api.Issue > candidates = new com.android.tools.lint.checks.BuiltinIssueRegistry ( ) . getIssues ( ) ; for ( com.android.tools.lint.detector.api.Issue issue : candidates ) { if ( ( issue.getDetectorClass ( ) ) == detectorClass ) { issues.add ( issue ) ; } } return issues ; }
public void copy1DRangeFromUnchecked ( int off , int count , int [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy1DRangeFromUnchecked" ) ; int dataSize = ( mType.mElement.getBytesSize ( ) ) * count ; data1DChecks ( off , count , ( ( d.length ) * 4 ) , dataSize ) ; mRS.nAllocationData1D ( getIDSafe ( ) , off , mSelectedLOD , count , d , dataSize , Element.DataType.SIGNED_32 ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
public void Test11739 ( ) { com.ibm.icu.text.NumberFormat nf = com.ibm.icu.text.NumberFormat.getCurrencyInstance ( new com.ibm.icu.util.ULocale ( "sr_BA" ) ) ; ( ( com.ibm.icu.text.DecimalFormat ) ( nf ) ) . applyPattern ( "0.0 ¤¤¤" ) ; java.text.ParsePosition ppos = new java.text.ParsePosition ( 0 ) ; com.ibm.icu.util.CurrencyAmount result = nf.parseCurrency ( "1.500 амерички долар" , ppos ) ; assertEquals ( "Should parse to 1500 USD" , new com.ibm.icu.util.CurrencyAmount ( 1500 , com.ibm.icu.util.Currency.getInstance ( "USD" ) ) , result ) ; }
private void onInputFormatChanged ( com.google.android.exoplayer.MediaFormatHolder formatHolder ) throws com.google.android.exoplayer.ExoPlaybackException { mFormat = formatHolder.format ; if ( com.android.tv.tuner.exoplayer.ac3.Ac3PassthroughTrackRenderer.DEBUG ) { android.util.Log.d ( com.android.tv.tuner.exoplayer.ac3.Ac3PassthroughTrackRenderer.TAG , ( "AudioTrack was configured to FORMAT: " + ( mFormat.toString ( ) ) ) ) ; } clearDecodeState ( ) ; com.android.tv.tuner.exoplayer.ac3.Ac3PassthroughTrackRenderer.AUDIO_TRACK.reconfigure ( mFormat.getFrameworkMediaFormatV16 ( ) ) ; }
private static java.util.List < char [ ] > getPasswords ( byte [ ] encodedPwd , java.nio.charset.Charset ... encodings ) { java.util.List < char [ ] > passwords = new java.util.ArrayList < > ( 4 ) ; for ( java.nio.charset.Charset encoding : encodings ) { try { char [ ] pwd = com.android.apksigner.PasswordRetriever.decodePassword ( encodedPwd , encoding ) ; com.android.apksigner.PasswordRetriever.addPasswords ( passwords , pwd ) ; } catch ( java.io.IOException ignored ) { } } com.android.apksigner.PasswordRetriever.addPassword ( passwords , com.android.apksigner.PasswordRetriever.castBytesToChars ( encodedPwd ) ) ; return passwords ; }
public void setComment ( java.lang.String comment ) { if ( comment == null ) { this . commentBytes = null ; return ; } byte [ ] newCommentBytes = comment.getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ; if ( ( newCommentBytes.length ) > 65535 ) { throw new java.lang.IllegalArgumentException ( ( ( "Comment too long: " + ( newCommentBytes.length ) ) + " bytes" ) ) ; } this . commentBytes = newCommentBytes ; }
public void testMultiFilterWithNoMatch ( ) { java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getOutput ( 320 , "zzz" , 1 ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getOutput ( 160 , "bar" , 2 ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getOutput ( 320 , "foo" , 3 ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "zzz" ) ; assertNull ( result ) ; }
protected java.lang.String getDebuggeeClassSignature ( ) { java.lang.String debuggeeClassName = getDebuggeeClassName ( ) ; java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; builder.append ( 'L' ) ; builder.append ( debuggeeClassName.replace ( '.' , '/' ) ) ; builder.append ( ';' ) ; return builder.toString ( ) ; }
private void responseString ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , java.lang.String str ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { java.lang.String ret = null ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { ret = str ; com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , ret ) ; } mRil.processResponseDone ( rr , responseInfo , ret ) ; } }
public void run ( ) { boolean pipSupportDisabled = false ; try { mActivity.enterPictureInPictureMode ( ) ; } catch ( java.lang.IllegalStateException e ) { pipSupportDisabled = true ; } catch ( java.lang.IllegalArgumentException e ) { pipSupportDisabled = true ; } assertTrue ( pipSupportDisabled ) ; assertFalse ( mActivity.isInPictureInPictureMode ( ) ) ; }
public static com.ibm.icu.util.UResourceBundle getBundleInstance ( java.lang.String baseName , java.util.Locale locale , java.lang.ClassLoader loader ) { if ( baseName == null ) { baseName = com.ibm.icu.impl.ICUResourceBundle.ICU_BASE_NAME ; } com.ibm.icu.util.ULocale uloc = ( locale == null ) ? com.ibm.icu.util.ULocale.getDefault ( ) : com.ibm.icu.util.ULocale.forLocale ( locale ) ; return com.ibm.icu.util.UResourceBundle.getBundleInstance ( baseName , uloc.toString ( ) , loader , false ) ; }
public char [ ] formatDouble ( double value , java.text.FieldPosition field ) { libcore.icu.NativeDecimalFormat.FieldPositionIterator fpi = libcore.icu.NativeDecimalFormat.FieldPositionIterator.forFieldPosition ( field ) ; char [ ] result = libcore.icu.NativeDecimalFormat.formatDouble ( this . address , value , fpi ) ; if ( fpi != null ) { libcore.icu.NativeDecimalFormat.FieldPositionIterator.setFieldPosition ( fpi , field ) ; } return result ; }
public void testSignalPoll ( ) throws java.lang.Exception { com.android.server.wifi.WificondControl wificondControl = org.mockito.Mockito.mock ( com.android.server.wifi.WificondControl.class ) ; org.mockito.Mockito.when ( wificondControl.signalPoll ( ) ) . thenReturn ( com.android.server.wifi.WifiNativeTest.SIGNAL_POLL_RESULT ) ; mWifiNative.setWificondControl ( wificondControl ) ; org.junit.Assert.assertEquals ( com.android.server.wifi.WifiNativeTest.SIGNAL_POLL_RESULT , mWifiNative.signalPoll ( ) ) ; org.mockito.Mockito.verify ( wificondControl ) . signalPoll ( ) ; }
public com.android.test.common.fixture.app.TestSourceFile getFile ( java.lang.String filename , final java.lang.String path ) { java.util.Collection < com.android.test.common.fixture.app.TestSourceFile > files = sourceFiles.get ( filename ) ; return com.google.common.collect.Iterables.find ( files , new com.google.common.base.Predicate < com.android.test.common.fixture.app.TestSourceFile > ( ) { @ java.lang.Override public boolean apply ( com.android.test.common.fixture.app.TestSourceFile testSourceFile ) { return path.equals ( testSourceFile.getPath ( ) ) ; } } ) ; }
public static PhotoInfo.Builder toPhotoInfoBuilder ( com.android.dialer.NumberAttributes numberAttributes ) { return com.android.dialer.glidephotomanager.PhotoInfo.builder ( ) . setName ( numberAttributes.getName ( ) ) . setPhotoUri ( numberAttributes.getPhotoUri ( ) ) . setPhotoId ( numberAttributes.getPhotoId ( ) ) . setLookupUri ( numberAttributes.getLookupUri ( ) ) . setIsBusiness ( numberAttributes.getIsBusiness ( ) ) . setIsSpam ( numberAttributes.getIsSpam ( ) ) . setIsVoicemail ( numberAttributes.getIsVoicemail ( ) ) . setIsBlocked ( numberAttributes.getIsBlocked ( ) ) ; }
public void test_readlink ( ) throws java.lang.Exception { java.lang.String xs = "" ; for ( int i = 0 ; i < ( 4096 - 1 ) ; ++ i ) xs += "x" ; java.lang.String path = ( java.lang.System.getProperty ( "java.io.tmpdir" ) ) + "/symlink" ; Libcore.os.symlink ( xs , path ) ; assertEquals ( xs , Libcore.os.readlink ( path ) ) ; }
public boolean isImsRegistered ( ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony == null ) return false ; return telephony.isImsRegistered ( ) ; } catch ( android.os.RemoteException ex ) { return false ; } catch ( java.lang.NullPointerException ex ) { return false ; } }
public org.bouncycastle.math.ec.ECFieldElement negate ( ) { java.math.BigInteger x2 ; if ( ( x.signum ( ) ) == 0 ) { x2 = x ; } else if ( org.bouncycastle.math.ec.ONE.equals ( r ) ) { x2 = q.xor ( x ) ; } else { x2 = q.subtract ( x ) ; } return new org.bouncycastle.math.ec.ECFieldElement.Fp ( q , r , x2 ) ; }
public int selectAnimationLw ( android.view.WindowManagerPolicy.WindowState win , int transit ) { if ( com.android.internal.policy.impl.PhoneWindowManager.PRINT_ANIM ) android.util.Log.i ( com.android.internal.policy.impl.PhoneWindowManager.TAG , ( ( ( "selectAnimation in " + win ) + ": transit=" ) + transit ) ) ; if ( transit == ( TRANSIT_PREVIEW_DONE ) ) { if ( win.hasAppShownWindows ( ) ) { if ( com.android.internal.policy.impl.PhoneWindowManager.PRINT_ANIM ) android.util.Log.i ( com.android.internal.policy.impl.PhoneWindowManager.TAG , "**** STARTING EXIT" ) ; return com.android.internal.R.anim.app_starting_exit ; } } return 0 ; }
public int hashCode ( ) { return ( mName ) != null ? mName.hashCode ( ) : 0 ; }
private void stopRfcomm ( ) { android.util.Log.d ( android.bluetooth.client.pbap.BluetoothPbapSession.TAG , "stopRfcomm" ) ; if ( ( mConnectThread ) != null ) { try { mConnectThread.join ( ) ; } catch ( java.lang.InterruptedException e ) { } mConnectThread = null ; } if ( ( mTransport ) != null ) { try { mTransport.close ( ) ; } catch ( java.io.IOException e ) { } mTransport = null ; } }
private android.net.NetworkRequest makeSubSpecificDefaultRequest ( com.android.internal.telephony.mocks.ConnectivityServiceMock cs , int subId ) { android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities ( ) . addCapability ( NetworkCapabilities.NET_CAPABILITY_INTERNET ) . addCapability ( NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED ) . addTransportType ( NetworkCapabilities.TRANSPORT_CELLULAR ) ; netCap.setNetworkSpecifier ( java.lang.Integer.toString ( subId ) ) ; return cs.requestNetwork ( netCap , null , 0 , new android.os.Binder ( ) , ( - 1 ) ) ; }
public void onActivityDestroyed ( android.app.Activity activity ) { if ( BuildConfig.IS_DEBUG ) { assert ( ( java.lang.reflect.Proxy.isProxyClass ( activity.getWindow ( ) . getCallback ( ) . getClass ( ) ) ) || ( activity.getWindow ( ) . getCallback ( ) . getClass ( ) . getName ( ) . equals ( org.chromium.base.BaseChromiumApplication.TOOLBAR_CALLBACK_WRAPPER_CLASS ) ) ) || ( activity.getWindow ( ) . getCallback ( ) . getClass ( ) . getName ( ) . equals ( org.chromium.base.BaseChromiumApplication.TOOLBAR_CALLBACK_INTERNAL_WRAPPER_CLASS ) ) ; } }
private static byte [ ] [ ] getArgsForKeyType ( int keyType , java.security.spec.AlgorithmParameterSpec spec ) { switch ( keyType ) { case com.android.org.conscrypt.NativeCrypto.EVP_PKEY_RSA : if ( spec instanceof java.security.spec.RSAKeyGenParameterSpec ) { java.security.spec.RSAKeyGenParameterSpec rsaSpec = ( ( java.security.spec.RSAKeyGenParameterSpec ) ( spec ) ) ; return new byte [ ] [ ] { rsaSpec.getPublicExponent ( ) . toByteArray ( ) } ; } break ; } return null ; }
private V getValue ( ) throws java.util.concurrent.CancellationException , java.util.concurrent.ExecutionException { int state = getState ( ) ; switch ( state ) { case com.google.common.util.concurrent.AbstractFuture.Sync.COMPLETED : if ( ( exception ) != null ) { throw new java.util.concurrent.ExecutionException ( exception ) ; } else { return value ; } case com.google.common.util.concurrent.AbstractFuture.Sync.CANCELLED : throw new java.util.concurrent.CancellationException ( "Task was cancelled." ) ; default : throw new java.lang.IllegalStateException ( ( "Error, synchronizer in invalid state: " + state ) ) ; } }
public static com.android.util.Pair < com.android.resources.ResourceType , java.lang.String > parseResource ( java.lang.String url ) { if ( ! ( url.startsWith ( "@" ) ) ) { return null ; } int typeEnd = url.indexOf ( '/' , 1 ) ; if ( typeEnd == ( - 1 ) ) { return null ; } int nameBegin = typeEnd + 1 ; int typeBegin = ( url.startsWith ( "@+" ) ) ? 2 : 1 ; int colon = url.lastIndexOf ( ':' , typeEnd ) ; if ( colon != ( - 1 ) ) { typeBegin = colon + 1 ; } java.lang.String typeName = url.substring ( typeBegin , typeEnd ) ; com.android.resources.ResourceType type = com.android.resources.ResourceType.getEnum ( typeName ) ; if ( type == null ) { return null ; } java.lang.String name = url.substring ( nameBegin ) ; return com.android.util.Pair.of ( type , name ) ; }
public static void computeClamp ( android.renderscript.cts.TestClamp.ArgumentsUcharUcharUcharUchar args ) { args.ulf = 0 ; args.ulfRelaxed = 0 ; args.out = ( ( byte ) ( java.lang.StrictMath.min ( ( ( args.inMaxValue ) & 255 ) , java.lang.StrictMath.max ( ( ( args.inValue ) & 255 ) , ( ( args.inMinValue ) & 255 ) ) ) ) ) ; }
public static com.android.jack.dx.rop.code.SourcePosition getSourcePosition ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JNode stmt ) { if ( ( stmt.getSourceInfo ( ) ) == ( com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN ) ) { return com.android.jack.dx.rop.code.SourcePosition.NO_INFO ; } return new com.android.jack.dx.rop.code.SourcePosition ( new com.android.jack.dx.rop.cst.CstString ( stmt.getSourceInfo ( ) . getFileName ( ) ) , ( - 1 ) , stmt.getSourceInfo ( ) . getStartLine ( ) ) ; }
public java.lang.String getVisualVoicemailPackageName ( java.lang.String callingPackage , int subId ) { mAppOps.checkPackage ( android.os.Binder.getCallingUid ( ) , callingPackage ) ; if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , subId , callingPackage , "getVisualVoicemailPackageName" ) ) ) { return null ; } return com.android.phone.vvm.RemoteVvmTaskManager.getRemotePackage ( mPhone.getContext ( ) , subId ) . getPackageName ( ) ; }
private void addAttr ( java.lang.String propertyName , com.android.ide.common.api.INode childNode , java.util.List < java.lang.String > infos ) { java.lang.String a = childNode.getStringAttr ( com.android.ide.common.layout.LayoutConstants.ANDROID_URI , ( "layout_" + propertyName ) ) ; if ( ( a != null ) && ( ( a.length ( ) ) > 0 ) ) { java.lang.String s = ( propertyName + ": " ) + a ; infos.add ( s ) ; } }
protected static void printUsage ( @ javax.annotation.Nonnull java.io.PrintStream printStream ) { java.io.InputStream is = com.android.jack.Main.class . getResourceAsStream ( "/help.txt" ) ; if ( is == null ) { throw new java.lang.AssertionError ( ) ; } com.android.sched.util.stream.CharacterStreamSucker css = new com.android.sched.util.stream.CharacterStreamSucker ( is , printStream ) ; try { css.suck ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.AssertionError ( e ) ; } finally { try { is.close ( ) ; } catch ( java.io.IOException e ) { } } }
private static boolean readTruncatedHMacExtension ( byte [ ] extensionData ) throws java.io.IOException { if ( extensionData == null ) { throw new java.lang.IllegalArgumentException ( "'extensionData' cannot be null" ) ; } if ( ( extensionData.length ) != 0 ) { throw new org.bouncycastle.crypto.tls.TlsFatalAlert ( AlertDescription.illegal_parameter ) ; } return true ; }
private static void printBitmap ( com.android.ahat.Doc doc , com.android.tools.perflib.heap.Instance inst ) { com.android.tools.perflib.heap.Instance bitmap = com.android.ahat.InstanceUtils.getAssociatedBitmapInstance ( inst ) ; if ( bitmap != null ) { doc.section ( "Bitmap Image" ) ; doc.println ( com.android.ahat.DocString.image ( com.android.ahat.DocString.uri ( "bitmap?id=%d" , bitmap.getId ( ) ) , "bitmap image" ) ) ; } }
public void setModel ( @ org.jetbrains.annotations.NotNull javax.swing.table.TableModel model ) { super . setModel ( model ) ; if ( ( ! ( myColumnsSizeInitialized ) ) && ( ( model.getRowCount ( ) ) > 0 ) ) { myColumnsSizeInitialized = true ; setColumnPreferredSize ( ) ; setAutoCreateColumnsFromModel ( false ) ; getColumnModel ( ) . getColumn ( GraphTableModel.ROOT_COLUMN ) . setHeaderRenderer ( new com.intellij.vcs.log.ui.frame.VcsLogGraphTable.RootHeaderRenderer ( ) ) ; } }
public static void terminate ( ) { if ( ( ( com.android.ddmlib.AndroidDebugBridge.sThis ) != null ) && ( ( com.android.ddmlib.AndroidDebugBridge.sThis.mDeviceMonitor ) != null ) ) { com.android.ddmlib.AndroidDebugBridge.sThis.mDeviceMonitor.stop ( ) ; com.android.ddmlib.AndroidDebugBridge.sThis.mDeviceMonitor = null ; } com.android.ddmlib.MonitorThread monitorThread = com.android.ddmlib.MonitorThread.getInstance ( ) ; if ( monitorThread != null ) { monitorThread.quit ( ) ; } }
private static com.android.ide.common.layout.Pair < com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode , java.lang.Integer > getFirstPosition ( com.android.ide.eclipse.adt.internal.editors.uimodel.UiElementNode parent ) { if ( ( parent != null ) && ( parent instanceof com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode ) ) { return com.android.ide.common.layout.Pair.of ( ( ( com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode ) ( parent ) ) , 0 ) ; } return null ; }
public com.android.sched.vfs.OutputVFile createOutputVFile ( @ javax.annotation.Nonnull com.android.sched.vfs.VPath path ) throws com.android.sched.util.file.CannotCreateFileException { java.io.File file = new java.io.File ( dir , path.getPathAsString ( getSeparator ( ) ) ) ; if ( ( ! ( file.getParentFile ( ) . mkdirs ( ) ) ) && ( ! ( file.getParentFile ( ) . isDirectory ( ) ) ) ) { throw new com.android.sched.util.file.CannotCreateFileException ( new com.android.sched.util.location.DirectoryLocation ( file.getParentFile ( ) ) ) ; } return new com.android.sched.vfs.direct.DirectFile ( file ) ; }
public void startAdvertisingSet ( android.bluetooth.le.AdvertisingSetParameters parameters , android.bluetooth.le.AdvertiseData advertiseData , android.bluetooth.le.AdvertiseData scanResponse , android.bluetooth.le.PeriodicAdvertisingParameters periodicParameters , android.bluetooth.le.AdvertiseData periodicData , android.bluetooth.le.IAdvertisingSetCallback callback ) { com.android.bluetooth.gatt.GattService service = getService ( ) ; if ( service == null ) return ; service.startAdvertisingSet ( parameters , advertiseData , scanResponse , periodicParameters , periodicData , callback ) ; }
public void run ( ) { mNM.notify ( 1 , notificationWithNumbers ( 4444 ) ) ; }
public void testAttributeRemoval ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String higherPriority = "" + ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\"\n" ) + " tools:remove=\"theme\"/>\n" ) + "\n" ) + "</manifest>" ) ; java.lang.String lowerPriority = "" + ( ( ( ( ( ( ( ( "<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" ) + " xmlns:tools=\"http://schemas.android.com/tools\"\n" ) + " package=\"com.example.lib3\">\n" ) + "\n" ) + " <activity android:name=\"activityOne\" \n" ) + " android:theme=\"@oldtheme\"/>\n" ) + "\n" ) + "</manifest>" ) ; com.android.manifmerger.XmlDocument refDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "higherPriority" ) , higherPriority ) ; com.android.manifmerger.XmlDocument otherDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString ( new com.android.manifmerger.TestUtils.TestSourceLocation ( getClass ( ) , "lowerPriority" ) , lowerPriority ) ; com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder ( new com.android.utils.StdLogger ( StdLogger.Level.VERBOSE ) ) ; com.google.common.base.Optional < com.android.manifmerger.XmlDocument > result = refDocument.merge ( otherDocument , mergingReportBuilder ) ; assertTrue ( result.isPresent ( ) ) ; com.android.manifmerger.XmlDocument resultDocument = result.get ( ) ; com.google.common.base.Optional < com.android.manifmerger.XmlElement > activityOne = resultDocument.getRootNode ( ) . getNodeByTypeAndKey ( ManifestModel.NodeTypes.ACTIVITY , "com.example.lib3.activityOne" ) ; assertTrue ( activityOne.isPresent ( ) ) ; java.util.List < com.android.manifmerger.XmlAttribute > attributes = activityOne.get ( ) . getAttributes ( ) ; assertEquals ( 2 , attributes.size ( ) ) ; assertTrue ( activityOne.get ( ) . getAttribute ( com.android.manifmerger.XmlNode.fromXmlName ( "android:name" ) ) . isPresent ( ) ) ; assertTrue ( activityOne.get ( ) . getAttribute ( com.android.manifmerger.XmlNode.fromNSName ( SdkConstants.TOOLS_URI , "tools" , "remove" ) ) . isPresent ( ) ) ; com.android.manifmerger.Actions actions = mergingReportBuilder.getActionRecorder ( ) . build ( ) ; java.util.List < com.android.manifmerger.Actions.AttributeRecord > attributeRecords = actions.getAttributeRecords ( activityOne.get ( ) . getId ( ) , com.android.manifmerger.XmlNode.fromXmlName ( "android:theme" ) ) ; assertNotNull ( attributeRecords ) ; assertEquals ( 1 , attributeRecords.size ( ) ) ; com.android.manifmerger.Actions.AttributeRecord attributeRecord = attributeRecords.get ( 0 ) ; assertEquals ( Actions.ActionType.REJECTED , attributeRecord.getActionType ( ) ) ; assertEquals ( AttributeOperationType.REMOVE , attributeRecord.getOperationType ( ) ) ; assertEquals ( 7 , attributeRecord.getActionLocation ( ) . getPosition ( ) . getLine ( ) ) ; }
private void contentSizeChanged ( boolean updateLayout ) { if ( ( ( mContentWidth ) | ( mContentHeight ) ) == 0 ) { return ; } if ( mHeightCanMeasure ) { if ( ( ( getMeasuredHeight ( ) ) != ( contentToView ( mContentHeight ) ) ) && updateLayout ) { requestLayout ( ) ; } } else if ( mWidthCanMeasure ) { if ( ( ( getMeasuredWidth ( ) ) != ( contentToView ( mContentWidth ) ) ) && updateLayout ) { requestLayout ( ) ; } } else { sendViewSizeZoom ( ) ; } }
private com.android.ims.ImsReasonInfo toImsReasonInfoProto ( com.android.ims.ImsReasonInfo reasonInfo ) { com.android.internal.telephony.nano.TelephonyProto.ImsReasonInfo ri = new com.android.internal.telephony.nano.TelephonyProto.ImsReasonInfo ( ) ; if ( reasonInfo != null ) { ri.reasonCode = reasonInfo.getCode ( ) ; ri.extraCode = reasonInfo.getExtraCode ( ) ; java.lang.String extraMessage = reasonInfo.getExtraMessage ( ) ; if ( extraMessage != null ) { ri.extraMessage = extraMessage ; } } return ri ; }
public java.util.List < com.android.tv.dvr.ScheduledRecording > getScheduledRecordings ( android.util.Range < java.lang.Long > period , @ com.android.tv.dvr.ScheduledRecording.RecordingState int state ) { java.util.List < com.android.tv.dvr.ScheduledRecording > result = new java.util.ArrayList < > ( ) ; for ( com.android.tv.dvr.ScheduledRecording r : mScheduledRecordings.values ( ) ) { if ( ( r.isOverLapping ( period ) ) && ( ( r.getState ( ) ) == state ) ) { result.add ( r ) ; } } return result ; }
private static com.google.common.collect.ImmutableList < com.android.build.gradle.api.GroupableProductFlavor > filterNullFromArray ( com.android.build.gradle.api.GroupableProductFlavor [ ] flavors ) { com.google.common.collect.ImmutableList.Builder < com.android.build.gradle.api.GroupableProductFlavor > builder = com.google.common.collect.ImmutableList.builder ( ) ; for ( com.android.build.gradle.api.GroupableProductFlavor flavor : flavors ) { if ( flavor != null ) { builder.add ( flavor ) ; } } return builder.build ( ) ; }
public com.google.protobuf.micro.ByteStringMicro readBytes ( ) throws java.io.IOException { final int size = readRawVarint32 ( ) ; if ( ( size <= ( ( bufferSize ) - ( bufferPos ) ) ) && ( size > 0 ) ) { final com.google.protobuf.micro.ByteStringMicro result = com.google.protobuf.micro.ByteStringMicro.copyFrom ( buffer , bufferPos , size ) ; bufferPos += size ; return result ; } else { return com.google.protobuf.micro.ByteStringMicro.copyFrom ( readRawBytes ( size ) ) ; } }
public int purge ( ) { lock.lock ( ) ; java.util.List < java.util.Timer.ScheduledTask > tasksToRemove ; try { if ( isCancelled.get ( ) ) { return 0 ; } tasksToRemove = new java.util.LinkedList < java.util.Timer.ScheduledTask > ( ) ; for ( java.util.Timer.ScheduledTask scheduledTask : scheduledTasksPriorityQueue ) { if ( scheduledTask.timerTask.isCancelled ( ) ) { tasksToRemove.add ( scheduledTask ) ; } } scheduledTasksPriorityQueue.removeAll ( tasksToRemove ) ; } finally { lock.unlock ( ) ; } return tasksToRemove.size ( ) ; }
private void doClean ( org.eclipse.core.resources.IProject project , org.eclipse.core.runtime.IProgressMonitor monitor ) throws org.eclipse.core.runtime.CoreException { com.android.ide.eclipse.adt.AdtPlugin.printBuildToConsole ( BuildVerbosity.VERBOSE , project , Messages.Removing_Generated_Classes ) ; if ( ( mGenFolder ) != null ) { removeDerivedResources ( mGenFolder , monitor ) ; } removeMarkersFromProject ( project , AndroidConstants.MARKER_AAPT_COMPILE ) ; removeMarkersFromProject ( project , AndroidConstants.MARKER_XML ) ; removeMarkersFromProject ( project , AndroidConstants.MARKER_AIDL ) ; removeMarkersFromProject ( project , AndroidConstants.MARKER_ANDROID ) ; }
public byte [ ] getEncoded ( ) { try { org.bouncycastle.asn1.pkcs.PrivateKeyInfo info = new org.bouncycastle.asn1.pkcs.PrivateKeyInfo ( new org.bouncycastle.asn1.x509.AlgorithmIdentifier ( org.bouncycastle.asn1.x9.X9ObjectIdentifiers.id_dsa , new org.bouncycastle.asn1.x509.DSAParameter ( dsaSpec.getP ( ) , dsaSpec.getQ ( ) , dsaSpec.getG ( ) ) ) , new org.bouncycastle.asn1.DERInteger ( getX ( ) ) ) ; return info.getEncoded ( ASN1Encoding.DER ) ; } catch ( java.io.IOException e ) { return null ; } }
public boolean isBinderAlive ( ) { return miConfig.asBinder ( ) . isBinderAlive ( ) ; }
public void testSubList1_IndexOutOfBoundsException ( ) { try { java.util.concurrent.CopyOnWriteArrayList c = new java.util.concurrent.CopyOnWriteArrayList ( ) ; c.subList ( ( - 1 ) , 100 ) ; shouldThrow ( ) ; } catch ( java.lang.IndexOutOfBoundsException success ) { } }
boolean getIdleTime ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.hid.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH_ADMIN permission" ) ; int state = this . getConnectionState ( device ) ; if ( state != ( android.bluetooth.BluetoothInputDevice.STATE_CONNECTED ) ) { return false ; } android.os.Message msg = mHandler.obtainMessage ( com.android.bluetooth.hid.HidService.MESSAGE_GET_IDLE_TIME , device ) ; mHandler.sendMessage ( msg ) ; return true ; }
public void testGetHttpMethod_NameWithoutRestPrefix ( ) { initializePsiClass ( "\"\"" , "\"\"" ) ; initializePsiMethod ( "foo" , "\"\"" , "\"\"" ) ; org.mockito.MockitoAnnotations.initMocks ( this ) ; com.google.gct.intellij.endpoints.validation.RestSignatureInspection inspection = new com.google.gct.intellij.endpoints.validation.RestSignatureInspection ( ) ; java.lang.String httpMethod = inspection.getHttpMethod ( mockPsiMethod ) ; junit.framework.Assert.assertEquals ( "POST" , httpMethod ) ; }
private boolean deleteContentOf ( java.io.File folder ) throws java.lang.SecurityException { for ( java.io.File f : folder.listFiles ( ) ) { if ( f.isDirectory ( ) ) { if ( ( deleteContentOf ( f ) ) == false ) { return false ; } } if ( ( f.delete ( ) ) == false ) { return false ; } } return true ; }
public void testAesCbcHmacSha512Tcp4UdpEncap ( ) throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.CRYPT_AES_CBC , android.net.cts.IpSecManagerTest.getKey ( 256 ) ) ; android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm ( android.net.IpSecAlgorithm.AUTH_HMAC_SHA512 , android.net.cts.IpSecManagerTest.getKey ( 512 ) , 256 ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , false ) ; checkTransform ( android.system.OsConstants.IPPROTO_TCP , android.net.cts.IpSecManagerTest.IPV4_LOOPBACK , crypt , auth , null , true , 1 , true ) ; }
public static java.awt.image.BufferedImage getStencilImage ( java.lang.String relativePath ) throws java.io.IOException { java.io.InputStream is = com.android.assetstudiolib.GraphicGenerator.class . getResourceAsStream ( relativePath ) ; if ( is == null ) { return null ; } try { return javax.imageio.ImageIO.read ( is ) ; } finally { com.google.common.io.Closeables.closeQuietly ( is ) ; } }
public void canUnrequestTethering ( ) throws java.lang.Exception { initTetheredStateMachine ( ConnectivityManager.TETHERING_BLUETOOTH , null ) ; dispatchCommand ( TetherInterfaceStateMachine.CMD_TETHER_UNREQUESTED ) ; org.mockito.InOrder inOrder = org.mockito.Mockito.inOrder ( mNMService , mStatsService , mTetherHelper ) ; inOrder.verify ( mNMService ) . untetherInterface ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME ) ; inOrder.verify ( mTetherHelper ) . notifyInterfaceStateChange ( com.android.server.connectivity.tethering.TetherInterfaceStateMachineTest.IFACE_NAME , mTestedSm , com.android.server.connectivity.tethering.IControlsTethering.STATE_AVAILABLE , android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR ) ; org.mockito.Mockito.verifyNoMoreInteractions ( mNMService , mStatsService , mTetherHelper ) ; }
public void validateUpdateParameterWithInvalidtrustRootCertSha256Fingerprint ( ) throws java.lang.Exception { android.net.wifi.hotspot2.pps.UpdateParameter updateParam = android.net.wifi.hotspot2.pps.UpdateParameterTest.createUpdateParameter ( ) ; updateParam.trustRootCertSha256Fingerprint = new byte [ ( android.net.wifi.hotspot2.pps.UpdateParameterTest.CERTIFICATE_SHA256_BYTES ) + 1 ] ; org.junit.Assert.assertFalse ( updateParam.validate ( ) ) ; updateParam.trustRootCertSha256Fingerprint = new byte [ ( android.net.wifi.hotspot2.pps.UpdateParameterTest.CERTIFICATE_SHA256_BYTES ) - 1 ] ; org.junit.Assert.assertFalse ( updateParam.validate ( ) ) ; }
static void addFileType ( java.lang.String extension , int fileType , java.lang.String mimeType , int mtpFormatCode ) { android.media.MediaFile.addFileType ( extension , fileType , mimeType ) ; android.media.MediaFile.sFileTypeToFormatMap.put ( extension , java.lang.Integer.valueOf ( mtpFormatCode ) ) ; android.media.MediaFile.sMimeTypeToFormatMap.put ( mimeType , java.lang.Integer.valueOf ( mtpFormatCode ) ) ; android.media.MediaFile.sFormatToMimeTypeMap.put ( mtpFormatCode , mimeType ) ; }
private void verifyTimeServiceTimeWasSet ( long expectedTimeMillis ) { org.mockito.ArgumentCaptor < java.lang.Long > timeServiceTimeCaptor = org.mockito.ArgumentCaptor.forClass ( java.lang.Long.TYPE ) ; org.mockito.Mockito.verify ( mTimeServiceHelper , org.mockito.Mockito.times ( 1 ) ) . setDeviceTime ( timeServiceTimeCaptor.capture ( ) ) ; org.junit.Assert.assertEquals ( expectedTimeMillis , ( ( long ) ( timeServiceTimeCaptor.getValue ( ) ) ) ) ; }
public void testAbiOnlyWithMultiMatch2 ( ) { com.android.build.SplitOutput match ; java.util.List < com.android.build.SplitOutput > list = com.google.common.collect.Lists.newArrayList ( ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getUniversalOutput ( 1 ) ) ; list.add ( com.android.ide.common.build.SplitOutputMatcherTest.getAbiOutput ( "foo" , 2 ) ) ; list.add ( ( match = com.android.ide.common.build.SplitOutputMatcherTest.getAbiOutput ( "bar" , 3 ) ) ) ; com.android.build.SplitOutput result = com.android.ide.common.build.SplitOutputMatcherTest.computeBestOutput ( list , 160 , "foo" , "bar" ) ; assertEquals ( match , result ) ; }
public void setPreferredVoicePrivacy ( boolean enable , android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_CDMA_SET_PREFERRED_VOICE_PRIVACY_MODE , result ) ; rr.mParcel.writeInt ( 1 ) ; rr.mParcel.writeInt ( ( enable ? 1 : 0 ) ) ; send ( rr ) ; }
public static android.app.PendingIntent getPendingIntent ( android.content.Context context , java.lang.String text ) { android.content.Intent toastIntent = new android.content.Intent ( context , com.android.example.notificationshowcase.ToastService.class ) ; toastIntent.addFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; toastIntent.setAction ( ( ( ( com.android.example.notificationshowcase.ToastService.ACTION_TOAST ) + ":" ) + text ) ) ; toastIntent.putExtra ( "text" , text ) ; android.app.PendingIntent pi = android.app.PendingIntent.getService ( context , 58 , toastIntent , PendingIntent.FLAG_UPDATE_CURRENT ) ; return pi ; }
private void recordTosAcceptance ( ) { if ( isVvm3 ( ) ) { preferences.edit ( ) . putInt ( com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.PREF_VVM3_TOS_VERSION_ACCEPTED_KEY , com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.CURRENT_VVM3_TOS_VERSION ) . apply ( ) ; } else { preferences.edit ( ) . putInt ( com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.PREF_DIALER_TOS_VERSION_ACCEPTED_KEY , com.android.dialer.app.voicemail.error.VoicemailTosMessageCreator.CURRENT_DIALER_TOS_VERSION ) . apply ( ) ; } com.android.voicemail.VoicemailComponent.get ( context ) . getVoicemailClient ( ) . onTosAccepted ( context ) ; }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [ ] buffer = new byte [ 1 ] ; org.conscrypt.NativeCrypto.SSL_read ( s , fd , callback , buffer , 0 , 1 , 0 ) ; assertEquals ( 42 , buffer [ 0 ] ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public void getPreferredVoicePrivacy ( android.os.Message result ) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain ( com.android.internal.telephony.RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE , result ) ; send ( rr ) ; }
public void testConstants ( ) { android.test.MoreAsserts.assertNotEqual ( 0 , android.system.OsConstants.RT_SCOPE_HOST ) ; android.test.MoreAsserts.assertNotEqual ( 0 , android.system.OsConstants.RT_SCOPE_LINK ) ; android.test.MoreAsserts.assertNotEqual ( 0 , android.system.OsConstants.RT_SCOPE_SITE ) ; android.test.MoreAsserts.assertNotEqual ( 0 , android.system.OsConstants.IFA_F_DEPRECATED ) ; android.test.MoreAsserts.assertNotEqual ( 0 , android.system.OsConstants.IFA_F_PERMANENT ) ; android.test.MoreAsserts.assertNotEqual ( 0 , android.system.OsConstants.IFA_F_TENTATIVE ) ; }
public void testReadAfterWrite ( ) throws java.lang.Exception { com.android.server.wifi.WifiConfigStoreData writeData = createSingleOpenNetworkStoreData ( ) ; mWifiConfigStore.switchUserStoreAndRead ( mUserStore ) ; mWifiConfigStore.write ( true , writeData ) ; com.android.server.wifi.WifiConfigStoreData readData = mWifiConfigStore.read ( ) ; com.android.server.wifi.WifiConfigStoreDataTest.assertConfigStoreDataEqual ( writeData , readData ) ; }
private com.android.build.gradle.ndk.NdkPlugin getNdkPlugin ( ) { org.gradle.api.Project targetProject = ( targetProjectName.isEmpty ( ) ) ? currentProject : currentProject.getRootProject ( ) . project ( targetProjectName ) ; com.android.build.gradle.ndk.NdkPlugin plugin = targetProject.getPlugins ( ) . findPlugin ( com.android.build.gradle.ndk.NdkPlugin.class ) ; if ( plugin == null ) { throw new org.gradle.api.InvalidUserDataException ( ( ( ( ( ( ( ( ( "Unable to find NdkPlugin in project '" + ( targetProjectName ) ) + "'. You may " ) + "need define your compile dependencies such that " ) + targetProject ) + " is " ) + "configured before " ) + ( currentProject ) ) + "." ) ) ; } return plugin ; }
public com.android.sdklib.repository.local.LocalPkgInfo getPkgInfo ( int filter , com.android.sdklib.repository.FullRevision revision ) { assert filter == ( com.android.sdklib.repository.local.LocalSdk.PKG_BUILD_TOOLS ) ; for ( com.android.sdklib.repository.local.LocalPkgInfo pkg : getPkgsInfos ( filter ) ) { if ( pkg instanceof com.android.sdklib.repository.local.LocalFullRevisionPkgInfo ) { com.android.sdklib.repository.local.LocalFullRevisionPkgInfo p = ( ( com.android.sdklib.repository.local.LocalFullRevisionPkgInfo ) ( pkg ) ) ; if ( p.getFullRevision ( ) . equals ( revision ) ) { return p ; } } } return null ; }
private libcore.tzdata.update2.BundleVersion readBundleVersion ( java.io.File unpackedContentDir ) throws java.io.IOException { android.util.Slog.i ( logTag , "Reading bundle format version" ) ; java.io.File bundleVersionFile = new java.io.File ( unpackedContentDir , TimeZoneBundle.BUNDLE_VERSION_FILE_NAME ) ; byte [ ] versionBytes = libcore.tzdata.update2.FileUtils.readBytes ( bundleVersionFile , BundleVersion.BUNDLE_VERSION_FILE_LENGTH ) ; try { return libcore.tzdata.update2.BundleVersion.extractFromBytes ( versionBytes ) ; } catch ( libcore.tzdata.update2.BundleException e ) { android.util.Slog.i ( logTag , ( ( ( "Invalid bundle version bytes: " + ( java.util.Arrays.toString ( versionBytes ) ) ) + ": " ) + ( e.getMessage ( ) ) ) ) ; return null ; } }
public void setRoundingMode ( java.math.RoundingMode roundingMode ) { if ( roundingMode == null ) { throw new java.lang.NullPointerException ( "roundingMode == null" ) ; } this . roundingMode = roundingMode ; if ( roundingMode != ( java.math.RoundingMode.UNNECESSARY ) ) { double roundingIncrement = 1.0 / ( java.lang.Math.pow ( 10 , java.lang.Math.max ( 0 , getMaximumFractionDigits ( ) ) ) ) ; ndf.setRoundingMode ( roundingMode , roundingIncrement ) ; } }
public void test_with_longTemporalField_secondOfDay ( ) { for ( long i : testPoints ( ( ( 24 * 60 ) * 60 ) ) ) { java.time.LocalTime test = TEST_12_30_40_987654321.with ( java.time.temporal.ChronoField.SECOND_OF_DAY , i ) ; org.testng.Assert.assertEquals ( test.get ( java.time.temporal.ChronoField.SECOND_OF_DAY ) , i ) ; org.testng.Assert.assertEquals ( test.get ( java.time.temporal.ChronoField.NANO_OF_SECOND ) , TEST_12_30_40_987654321.get ( java.time.temporal.ChronoField.NANO_OF_SECOND ) ) ; } }
public void testOneSystemOneUserOneDeletedSameSubject ( ) throws java.lang.Exception { org.conscrypt.TrustedCertificateStoreTest.install ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; store.installCertificate ( org.conscrypt.TrustedCertificateStoreTest.getCa3WithCa1Subject ( ) ) ; store.deleteCertificateEntry ( org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; assertDeleted ( org.conscrypt.TrustedCertificateStoreTest.getCa1 ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasSystemCa1 ( ) ) ; assertRootCa ( org.conscrypt.TrustedCertificateStoreTest.getCa3WithCa1Subject ( ) , org.conscrypt.TrustedCertificateStoreTest.getAliasUserCa3 ( ) ) ; assertAliases ( org.conscrypt.TrustedCertificateStoreTest.getAliasUserCa3 ( ) ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { try { java.lang.Class < ? > a = java.lang.Class.forName ( "A" ) ; } catch ( java.lang.VerifyError e ) { java.lang.System.out.println ( "passed A" ) ; } try { java.lang.Class < ? > a = java.lang.Class.forName ( "B" ) ; } catch ( java.lang.VerifyError e ) { java.lang.System.out.println ( "passed B" ) ; } }
private void stopForegroundCompat ( ) { if ( ( mStopForeground ) != null ) { mStopForegroundArgs [ 0 ] = java.lang.Boolean.TRUE ; try { mStopForeground.invoke ( this , mStopForegroundArgs ) ; } catch ( java.lang.Exception e ) { com.googlecode.android_scripting.Log.e ( e ) ; } return ; } mNotificationManager.cancel ( mNotificationId ) ; setForeground ( false ) ; }
public void onClick ( android.view.View v ) { shutterStartTime = java.lang.System.currentTimeMillis ( ) ; mCamera.takePicture ( new android.hardware.Camera.ShutterCallback ( ) { @ java.lang.Override public void onShutter ( ) { long dT = ( java.lang.System.currentTimeMillis ( ) ) - ( shutterStartTime ) ; android.util.Log.d ( "CTS" , ( "Shutter Lag: " + dT ) ) ; } } , null , this ) ; }
public void TestCurrent ( ) { com.ibm.icu.text.RuleBasedBreakIterator rbbi = new com.ibm.icu.text.RuleBasedBreakIterator ( "" ) ; rbbi.setText ( ( ( java.text.CharacterIterator ) ( null ) ) ) ; if ( ( rbbi.current ( ) ) != ( com.ibm.icu.text.BreakIterator.DONE ) ) { errln ( ( "RuleBasedBreakIterator.current() was suppose to return " + "BreakIterator.DONE when the object has a fText of null." ) ) ; } rbbi.setText ( "dummy" ) ; if ( ( rbbi.current ( ) ) != 0 ) { errln ( ( "RuleBasedBreakIterator.current() was suppose to return " + "0 when the object has a fText of dummy." ) ) ; } }
private void initialization ( java.lang.Class < K > type ) { keyType = type ; keys = java.lang.Enum.getSharedConstants ( java.lang.Enum , keyType ) ; enumSize = keys.length ; values = new java.lang.Object [ enumSize ] ; hasMapping = new boolean [ enumSize ] ; }
private void writeObject ( java.io.ObjectOutputStream stream ) throws java.io.IOException { if ( key.isEngineBased ( ) ) { throw new java.io.NotSerializableException ( "engine-based keys can not be serialized" ) ; } stream.defaultWriteObject ( ) ; stream.writeObject ( getParams ( ) ) ; final java.security.spec.ECPoint pubKey = getPublicKey ( ) ; stream.writeObject ( pubKey.getAffineX ( ) ) ; stream.writeObject ( pubKey.getAffineY ( ) ) ; }
private static java.util.Vector < org.apache.harmony.tests.java.text.FieldContainer > getNegativeCurrencyVectorTR ( ) { java.util.Vector < org.apache.harmony.tests.java.text.FieldContainer > v = new java.util.Vector < org.apache.harmony.tests.java.text.FieldContainer > ( ) ; v.add ( new org.apache.harmony.tests.java.text.FieldContainer ( 1 , 4 , java.text.NumberFormat.Field.INTEGER ) ) ; v.add ( new org.apache.harmony.tests.java.text.FieldContainer ( 4 , 5 , java.text.NumberFormat.Field.DECIMAL_SEPARATOR ) ) ; v.add ( new org.apache.harmony.tests.java.text.FieldContainer ( 5 , 7 , java.text.NumberFormat.Field.FRACTION ) ) ; v.add ( new org.apache.harmony.tests.java.text.FieldContainer ( 8 , 10 , java.text.NumberFormat.Field.CURRENCY ) ) ; return v ; }
public E poll ( long timeout , java.util.concurrent.TimeUnit unit ) throws java.lang.InterruptedException { long nanos = unit.toNanos ( timeout ) ; final java.util.concurrent.locks.ReentrantLock lock = this . lock ; lock.lockInterruptibly ( ) ; try { while ( ( count ) == 0 ) { if ( nanos <= 0 ) return null ; nanos = notEmpty.awaitNanos ( nanos ) ; } return extract ( ) ; } finally { lock.unlock ( ) ; } }
public boolean setLine1NumberForDisplayForSubscriber ( int subId , java.lang.String alphaTag , java.lang.String number ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.setLine1NumberForDisplayForSubscriber ( subId , alphaTag , number ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return false ; }
private void processThisCallLocalArgs ( org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding binding , com.android.jack.ir.ast.JMethodCall call ) throws com.android.jack.ir.ast.JTypeLookupException { if ( ( binding.syntheticOuterLocalVariables ( ) ) != null ) { for ( org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding arg : binding.syntheticOuterLocalVariables ( ) ) { com.android.jack.ir.ast.JParameter param = ( ( com.android.jack.ir.ast.JParameter ) ( curMethod.getJVariable ( arg ) ) ) ; assert param != null ; call.addArg ( new com.android.jack.ir.ast.JParameterRef ( call.getSourceInfo ( ) , param ) ) ; } } }
public void testCompare0 ( ) throws java.lang.Exception { android.text.format.Time a = new android.text.format.Time ( android.text.format.Time.TIMEZONE_UTC ) ; android.text.format.Time b = new android.text.format.Time ( "America/Los_Angeles" ) ; assertTrue ( ( ( android.text.format.Time.compare ( a , b ) ) < 0 ) ) ; assertTrue ( ( ( android.text.format.Time.compare ( b , a ) ) > 0 ) ) ; assertTrue ( ( ( android.text.format.Time.compare ( b , b ) ) == 0 ) ) ; assertTrue ( ( ( android.text.format.Time.compare ( a , a ) ) == 0 ) ) ; }
public java.net.Socket createSocket ( java.net.InetAddress addr , int port , java.net.InetAddress localAddr , int localPort ) throws java.io.IOException { com.android.org.conscrypt.OpenSSLSocketImpl s = ( ( com.android.org.conscrypt.OpenSSLSocketImpl ) ( getDelegate ( ) . createSocket ( addr , port , localAddr , localPort ) ) ) ; s.setNpnProtocols ( mNpnProtocols ) ; s.setHandshakeTimeout ( mHandshakeTimeoutMillis ) ; s.setChannelIdPrivateKey ( mChannelIdPrivateKey ) ; return s ; }
public void run ( ) { synchronized ( this ) { ( wasRun ) ++ ; } if ( incrementCount ) ( timerCounter ) ++ ; if ( ( ( terminateCount ) == ( timerCounter ) ) && ( ( timer ) != null ) ) timer.cancel ( ) ; if ( sleepInRun ) { try { java.lang.Thread.sleep ( 200 ) ; } catch ( java.lang.InterruptedException e ) { } } synchronized ( sync ) { sync.notify ( ) ; } }
public boolean updateSourcePackages ( com.android.sdklib.internal.repository.SdkSource source , java.lang.Package [ ] newPackages ) { if ( ( newPackages.length ) > 0 ) { mVisitedSources.add ( source ) ; } if ( source == null ) { return processLocals ( this , newPackages ) ; } else { return processSource ( this , source , newPackages ) ; } }
public void execute ( com.android.build.gradle.managed.SigningConfig signingConfig ) { try { signingConfig.setName ( com.android.builder.core.BuilderConstants.DEBUG ) ; signingConfig.setStoreFile ( com.android.ide.common.signing.KeystoreHelper.defaultDebugKeystoreLocation ( ) ) ; signingConfig.setStorePassword ( DefaultSigningConfig.DEFAULT_PASSWORD ) ; signingConfig.setKeyAlias ( DefaultSigningConfig.DEFAULT_ALIAS ) ; signingConfig.setKeyPassword ( DefaultSigningConfig.DEFAULT_PASSWORD ) ; signingConfig.setStoreType ( java.security.KeyStore.getDefaultType ( ) ) ; } catch ( com.android.prefs.AndroidLocation e ) { throw new java.lang.RuntimeException ( e ) ; } }
public < U > java.lang.Class < ? extends U > asSubclass ( java.lang.Class < U > clazz ) { if ( clazz.isAssignableFrom ( this ) ) { return ( ( java.lang.Class < ? extends U > ) ( this ) ) ; } java.lang.String actualClassName = this . getName ( ) ; java.lang.String desiredClassName = clazz.getName ( ) ; throw new java.lang.ClassCastException ( ( ( actualClassName + " cannot be cast to " ) + desiredClassName ) ) ; }
synchronized void nAllocationData2D ( int id , int xoff , int yoff , int mip , int face , int w , int h , byte [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes ) ; }
public void testCheckAccessLevel_hasCarrierPrivileges ( ) throws java.lang.Exception { setHasCarrierPrivileges ( true ) ; setIsDeviceOwner ( false ) ; setIsProfileOwner ( false ) ; setHasAppOpsPermission ( AppOpsManager.MODE_DEFAULT , false ) ; setHasReadHistoryPermission ( false ) ; assertEquals ( NetworkStatsAccess.Level.DEVICE , com.android.server.net.NetworkStatsAccess.checkAccessLevel ( mContext , com.android.server.net.NetworkStatsAccessTest.TEST_UID , com.android.server.net.NetworkStatsAccessTest.TEST_PKG ) ) ; }
public void addFrom ( java.lang.String name , java.lang.String address ) { if ( ( this . mFrom ) == null ) this . mFrom = new java.util.ArrayList < android.text.util.Rfc822Token > ( 1 ) ; this . mFrom.add ( new android.text.util.Rfc822Token ( name , address , null ) ) ; }
public void run ( ) { try { mLooper = android.os.Looper.myLooper ( ) ; android.os.Looper.prepare ( ) ; mHandler = new android.media.cts.EncodeVirtualDisplayWithCompositionTest.GlCompositor.CompositionHandler ( ) ; initGl ( ) ; mStartCompletionSemaphore.release ( ) ; android.os.Looper.loop ( ) ; } catch ( android.media.cts.EncodeVirtualDisplayWithCompositionTest.GlException e ) { e.printStackTrace ( ) ; fail ( "got gl exception" ) ; } finally { cleanupGl ( ) ; mHandler = null ; mLooper = null ; } }
public void test_getJarFileURL ( ) throws java.lang.Exception { java.net.URL fileURL = new java.net.URL ( tests.api.java.net.JarURLConnectionTest.BASE ) ; java.net.URL u = new java.net.URL ( ( ( "jar:" + ( tests.api.java.net.JarURLConnectionTest.BASE ) ) + "!/plus.bmp" ) ) ; juc = ( ( java.net.JarURLConnection ) ( u.openConnection ( ) ) ) ; assertEquals ( "Returned incorrect file URL" , fileURL , juc.getJarFileURL ( ) ) ; java.net.URL url = new java.net.URL ( "jar:file:///bar.jar!/foo.jar!/Bugs/HelloWorld.class" ) ; assertEquals ( "file:/bar.jar" , ( ( java.net.JarURLConnection ) ( url.openConnection ( ) ) ) . getJarFileURL ( ) . toString ( ) ) ; }
private synchronized void connectionStateChanged ( android.bluetooth.BluetoothDevice device , int fromState , int toState ) { if ( ( device == null ) || ( fromState == toState ) ) { return ; } if ( toState == ( android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ) ) { int bondState = mAdapterService.getBondState ( device ) ; if ( bondState == ( android.bluetooth.BluetoothDevice.BOND_NONE ) ) { removeStateMachine ( device ) ; } } }
private static org.gradle.api.Project getProject ( java.io.File outputFile , java.util.Set < org.gradle.api.Project > gradleProjects ) { org.gradle.api.Project projectMatch = null ; for ( org.gradle.api.Project project : gradleProjects ) { java.io.File buildDir = project.getBuildDir ( ) ; if ( com.android.build.gradle.internal.model.DependenciesImpl.contains ( buildDir , outputFile ) ) { projectMatch = project ; break ; } } return projectMatch ; }
public boolean contains ( java.lang.String key ) { try { return ( mBinder.exist ( key , ( - 1 ) ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
void ensureZoomed ( ) { if ( ( mZoomFitNextImage ) && ( ( getClientArea ( ) . height ) > 0 ) ) { mZoomFitNextImage = false ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutActionBar actionBar = mEditorDelegate.getGraphicalEditor ( ) . getLayoutActionBar ( ) ; if ( actionBar.isZoomingAllowed ( ) ) { setFitScale ( true , true ) ; } } }
protected void raiseAlert ( short alertLevel , short alertDescription , java.lang.String message , java.lang.Exception cause ) throws java.io.IOException { getPeer ( ) . notifyAlertRaised ( alertLevel , alertDescription , message , cause ) ; byte [ ] error = new byte [ 2 ] ; error [ 0 ] = ( ( byte ) ( alertLevel ) ) ; error [ 1 ] = ( ( byte ) ( alertDescription ) ) ; safeWriteRecord ( ContentType.alert , error , 0 , 2 ) ; }
public void testHeadsetSendDTMFNull ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mMockCallsManager.getForegroundCall ( ) ) . thenReturn ( null ) ; boolean sentDtmf = mBluetoothPhoneService.mBinder.sendDtmf ( com.android.server.telecom.tests.BluetoothPhoneServiceTest.TEST_DTMF_TONE ) ; org.mockito.Mockito.verify ( mMockCallsManager , org.mockito.Mockito.never ( ) ) . playDtmfTone ( org.mockito.Matchers.any ( com.android.server.telecom.Call.class ) , org.mockito.Matchers.anyChar ( ) ) ; org.mockito.Mockito.verify ( mMockCallsManager , org.mockito.Mockito.never ( ) ) . stopDtmfTone ( org.mockito.Matchers.any ( com.android.server.telecom.Call.class ) ) ; assertEquals ( sentDtmf , false ) ; }
public void testReplacedAlias ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger ( ) ; com.google.common.collect.ListMultimap < java.lang.String , com.android.ide.common.res2.ResourceItem > mergedMap = merger.getDataMap ( ) ; java.util.List < com.android.ide.common.res2.ResourceItem > values = mergedMap.get ( "layout/alias_replaced_by_file" ) ; assertEquals ( 2 , values.size ( ) ) ; com.android.ide.common.res2.ResourceItem layout = values.get ( 1 ) ; assertNull ( layout.getValue ( ) ) ; }
public boolean processMessage ( android.os.Message message ) { if ( android.net.wifi.WifiStateMachine.DBG ) log ( ( ( ( getName ( ) ) + ( message.toString ( ) ) ) + "\n" ) ) ; switch ( message.what ) { case android.net.wifi.WifiStateMachine.CMD_SET_SCAN_MODE : if ( ( message.arg1 ) == ( android.net.wifi.WifiStateMachine.SCAN_ONLY_MODE ) ) { deferMessage ( message ) ; } break ; case WifiMonitor.SUPPLICANT_STATE_CHANGE_EVENT : deferMessage ( message ) ; handleNetworkDisconnect ( ) ; transitionTo ( mDisconnectedState ) ; break ; default : return NOT_HANDLED ; } android.util.EventLog.writeEvent ( android.net.wifi.WifiStateMachine.EVENTLOG_WIFI_EVENT_HANDLED , message.what ) ; return HANDLED ; }
public void cleanup ( ) { mNumTextureUpdated.set ( 0 ) ; mVerticesData.clear ( ) ; if ( ( mTextureId ) != 0 ) { int [ ] textures = new int [ ] { mTextureId } ; android.opengl.GLES20.glDeleteTextures ( 1 , textures , 0 ) ; } android.opengl.GLES20.glFinish ( ) ; if ( ( mSurface ) != null ) { mSurface.release ( ) ; mSurface = null ; } if ( ( mSurfaceTexture ) != null ) { mSurfaceTexture.release ( ) ; mSurfaceTexture = null ; } }
public static java.io.File createTempDir ( ) throws com.android.sched.util.file.CannotCreateFileException , com.android.sched.util.file.CannotSetPermissionException , com.android.sched.util.file.WrongPermissionException , java.io.IOException { try { final java.io.File tmpDir = com.android.sched.util.file.Files.createTempDir ( com.android.jack.test.toolchain.AbstractTestTools.TMP_PREFIX ) ; java.lang.Runtime.getRuntime ( ) . addShutdownHook ( new java.lang.Thread ( ) { @ java.lang.Override public void run ( ) { try { com.android.jack.test.toolchain.AbstractTestTools.deleteTempDir ( tmpDir ) ; } catch ( java.io.IOException e ) { java.lang.System.err.println ( e.getMessage ( ) ) ; } } } ) ; return tmpDir ; } catch ( java.lang.IllegalStateException e ) { throw new java.io.IOException ( e ) ; } }
private void handleRadioAvailable ( ) { mCi.getBasebandVersion ( obtainMessage ( com.android.internal.telephony.EVENT_GET_BASEBAND_VERSION_DONE ) ) ; if ( isPhoneTypeGsm ( ) ) { mCi.getIMEI ( obtainMessage ( com.android.internal.telephony.EVENT_GET_IMEI_DONE ) ) ; mCi.getIMEISV ( obtainMessage ( com.android.internal.telephony.EVENT_GET_IMEISV_DONE ) ) ; } else { mCi.getDeviceIdentity ( obtainMessage ( com.android.internal.telephony.EVENT_GET_DEVICE_IDENTITY_DONE ) ) ; } mCi.getRadioCapability ( obtainMessage ( com.android.internal.telephony.EVENT_GET_RADIO_CAPABILITY ) ) ; startLceAfterRadioIsAvailable ( ) ; }
public static org.eclipse.swt.graphics.Image getImage ( java.lang.String path ) { org.eclipse.swt.graphics.Image image = org.eclipse.wb.internal.core.DesignerPlugin.sImageCache.get ( path ) ; if ( image == null ) { org.eclipse.jface.resource.ImageDescriptor descriptor = org.eclipse.wb.internal.core.DesignerPlugin.getImageDescriptor ( path ) ; if ( descriptor != null ) { return descriptor.createImage ( ) ; } org.eclipse.wb.internal.core.DesignerPlugin.sImageCache.put ( path , image ) ; } return image ; }
public static int waitpid ( int pid , android.util.MutableInt status , int options ) throws android.system.ErrnoException { android.util.MutableInt internalStatus = new android.util.MutableInt ( status.value ) ; try { return Libcore.os.waitpid ( pid , internalStatus , options ) ; } finally { status.value = internalStatus.value ; } }
public void testGetAllPhoneAccounts ( ) throws android.os.RemoteException { java.util.List < android.telecom.PhoneAccount > phoneAccountList = new java.util.ArrayList < android.telecom.PhoneAccount > ( ) { { add ( makePhoneAccount ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 ) . build ( ) ) ; add ( makePhoneAccount ( com.android.server.telecom.tests.TelecomServiceImplTest.SIP_PA_HANDLE_17 ) . build ( ) ) ; } } ; org.mockito.Mockito.when ( mFakePhoneAccountRegistrar.getAllPhoneAccounts ( org.mockito.Matchers.any ( android.os.UserHandle.class ) ) ) . thenReturn ( phoneAccountList ) ; assertEquals ( 2 , mTSIBinder.getAllPhoneAccounts ( ) . size ( ) ) ; }
public void sendDtmf ( char c ) { if ( ! ( android.telephony.PhoneNumberUtils.is12Key ( c ) ) ) { android.telephony.Rlog.e ( com.android.internal.telephony.imsphone.ImsPhone.LOG_TAG , ( ( "sendDtmf called with invalid character '" + c ) + "'" ) ) ; } else { if ( ( mCT.getState ( ) ) == ( PhoneConstants.State.OFFHOOK ) ) { mCT.sendDtmf ( c , null ) ; } } }
public void enter ( ) { super . enter ( ) ; mWasOnSpeaker = true ; setSpeakerphoneOn ( true ) ; setBluetoothOff ( ) ; android.telecom.CallAudioState newState = new android.telecom.CallAudioState ( mIsMuted , com.android.server.telecom.CallAudioRouteStateMachine.ROUTE_SPEAKER , mAvailableRoutes , null , mBluetoothRouteManager.getConnectedDevices ( ) ) ; setSystemAudioState ( newState ) ; updateInternalCallAudioState ( ) ; }
public void testDeadlockOnOutgoingCall ( ) throws java.lang.Exception { for ( int i = 0 ; i < 100 ; i ++ ) { com.android.server.telecom.tests.BasicCallTests test = new com.android.server.telecom.tests.BasicCallTests ( ) ; test.setContext ( getContext ( ) ) ; test.setTestContext ( getTestContext ( ) ) ; test.setName ( getName ( ) ) ; test.setUp ( ) ; test.do_testDeadlockOnOutgoingCall ( ) ; test.tearDown ( ) ; } }
private java.util.zip.ZipFile processZip ( @ javax.annotation.Nonnull java.io.File file ) throws com.android.sched.util.file.ZipException { try { return new java.util.zip.ZipFile ( file ) ; } catch ( java.util.zip.ZipException e ) { throw new com.android.sched.util.file.ZipException ( getLocation ( ) , e ) ; } catch ( java.io.IOException e ) { throw new com.android.sched.util.ConcurrentIOException ( e ) ; } }
public static void verifyGolden ( junit.framework.TestCase test , java.lang.Object [ ] objects , org.apache.harmony.testframework.serialization.SerializationTest.SerializableAssert comparator ) throws java.lang.Exception { assertFalse ( "Empty array" , ( ( objects.length ) == 0 ) ) ; for ( int i = 0 ; i < ( objects.length ) ; i ++ ) { java.io.Serializable deserialized = org.apache.harmony.testframework.serialization.SerializationTest.getObject ( test , ( ( ".golden." + i ) + ".ser" ) ) ; comparator.assertDeserialized ( ( ( java.io.Serializable ) ( objects [ i ] ) ) , deserialized ) ; } }
public final java.nio.charset.CoderResult flush ( java.nio.ByteBuffer out ) { if ( ( ( state ) != ( java.nio.charset.CharsetEncoder.FLUSHED ) ) && ( ( state ) != ( java.nio.charset.CharsetEncoder.END_OF_INPUT ) ) ) { throw illegalStateException ( ) ; } java.nio.charset.CoderResult result = implFlush ( out ) ; if ( result == ( java.nio.charset.CoderResult.UNDERFLOW ) ) { state = java.nio.charset.CharsetEncoder.FLUSHED ; } return result ; }
public static void writeUint32 ( long i , java.io.OutputStream output ) throws java.io.IOException { output.write ( ( ( int ) ( i > > 24 ) ) ) ; output.write ( ( ( int ) ( i > > 16 ) ) ) ; output.write ( ( ( int ) ( i > > 8 ) ) ) ; output.write ( ( ( int ) ( i ) ) ) ; }
public void onReceive ( android.content.Context context , android.content.Intent intent ) { java.lang.String [ ] pkgs = intent.getStringArrayExtra ( Intent.EXTRA_PACKAGES ) ; if ( pkgs != null ) { for ( java.lang.String pkg : pkgs ) { synchronized ( this ) { if ( forceStopPackageLocked ( pkg , ( - 1 ) , false , false , false ) ) { setResultCode ( Activity.RESULT_OK ) ; return ; } } } } }
private void testScriptSide ( android.renderscript.RenderScript pRS ) { com.android.rs.unittest.ScriptC_element s = new com.android.rs.unittest.ScriptC_element ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; initializeGlobals ( pRS , s ) ; s.invoke_element_test ( ) ; pRS.finish ( ) ; s.get_complexStruct ( ) . getAllocation ( ) . destroy ( ) ; s.get_complexStruct ( ) . getElement ( ) . destroy ( ) ; s.destroy ( ) ; }
private void addRemoteAddOn ( com.android.sdklib.AndroidVersion version , com.android.sdklib.repository.MajorRevision revision , com.android.sdklib.repository.descriptors.IdDisplay vendor , com.android.sdklib.repository.descriptors.IdDisplay name ) { com.android.sdklib.repository.descriptors.IPkgDesc d = PkgDesc.Builder.newAddon ( version , revision , vendor , name ) . create ( ) ; com.android.sdklib.repository.remote.RemotePkgInfo r = new com.android.sdklib.repository.remote.RemotePkgInfo ( d , mSource ) ; mRemotePkgs.put ( d.getType ( ) , r ) ; }
public static java.util.UUID nameUUIDFromBytes ( byte [ ] name ) { java.security.MessageDigest md ; try { md = java.security.MessageDigest.getInstance ( "MD5" ) ; } catch ( java.security.NoSuchAlgorithmException nsae ) { throw new java.lang.InternalError ( "MD5 not supported" ) ; } byte [ ] md5Bytes = md.digest ( name ) ; md5Bytes [ 6 ] &= 15 ; md5Bytes [ 6 ] |= 48 ; md5Bytes [ 8 ] &= 63 ; md5Bytes [ 8 ] |= 128 ; return new java.util.UUID ( md5Bytes ) ; }
public void test_getFile ( ) throws java.lang.Exception { u = new java.net.URL ( "http" , "www.yahoo.com:8080" , 1233 , "test/!@$%^&*/test.html#foo" ) ; assertEquals ( "returns a wrong file" , "test/!@$%^&*/test.html" , u.getFile ( ) ) ; u = new java.net.URL ( "http" , "www.yahoo.com:8080" , 1233 , "" ) ; assertTrue ( "returns a wrong file" , u.getFile ( ) . equals ( "" ) ) ; }
private static long getServerId ( java.io.File serverJar ) throws com.android.jack.launcher.ServerLauncher.NotAServerJarFileName { java.util.regex.Matcher matcher = com.android.jack.launcher.ServerLauncher.SERVER_JAR_PATTERN.matcher ( serverJar.getName ( ) ) ; if ( ! ( matcher.matches ( ) ) ) { throw new com.android.jack.launcher.ServerLauncher.NotAServerJarFileName ( ) ; } return java.lang.Long.parseLong ( matcher.group ( 1 ) ) ; }
public com.android.se.Channel openLogicalChannelWithoutChannelAccess ( byte [ ] aid ) throws java.io.IOException { try { return openLogicalChannel ( null , aid , ( ( byte ) ( 0 ) ) , null , null , 0 ) ; } catch ( android.os.ServiceSpecificException e ) { if ( ( e.errorCode ) == ( android.se.omapi.SEService.IO_ERROR ) ) { throw new java.io.IOException ( e.getMessage ( ) ) ; } throw e ; } catch ( android.os.RemoteException e ) { throw new java.io.IOException ( e.getMessage ( ) ) ; } }
void stopScan ( com.android.bluetooth.gatt.ScanClient client ) { enforceAdminPermission ( ) ; int scanQueueSize = ( mScanManager.getBatchScanQueue ( ) . size ( ) ) + ( mScanManager.getRegularScanQueue ( ) . size ( ) ) ; if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( "stopScan() - queue size =" + scanQueueSize ) ) ; com.android.bluetooth.gatt.AppScanStats app = null ; app = mScannerMap.getAppScanStatsById ( client.scannerId ) ; if ( app != null ) app.recordScanStop ( ) ; mScanManager.stopScan ( client ) ; }
private static void draw ( int nCanvas , int nPaint , boolean compositeOnly , boolean forceSrcMode , com.android.layoutlib.bridge.impl.GcSnapshot.Drawable drawable ) { android.graphics.Canvas_Delegate canvasDelegate = android.graphics.Canvas_Delegate.sManager.getDelegate ( nCanvas ) ; if ( canvasDelegate == null ) { return ; } android.graphics.Paint_Delegate paintDelegate = android.graphics.Paint_Delegate.getDelegate ( nPaint ) ; canvasDelegate.getSnapshot ( ) . draw ( drawable , paintDelegate , compositeOnly , forceSrcMode ) ; }
public void TestTypes ( ) { java.lang.String [ ] locs = new java.lang.String [ ] { "en_US_VALLEYGIRL" , "en_US_VALLEYGIRL@collation=phonebook;calendar=japanese" , "en_US_VALLEYGIRL@collation=phonebook;calendar=gregorian" , "ja_JP@calendar=japanese" , "th_TH@calendar=buddhist" , "th-TH-u-ca-gregory" , "ja_JP_TRADITIONAL" , "th_TH_TRADITIONAL" , "th_TH_TRADITIONAL@calendar=gregorian" , "en_US" , "th_TH" , "th" , "en_TH" , "th_TH@calendar=iso8601" } ; java.lang.String [ ] types = new java.lang.String [ ] { "gregorian" , "japanese" , "gregorian" , "japanese" , "buddhist" , "gregorian" , "japanese" , "buddhist" , "gregorian" , "gregorian" , "buddhist" , "buddhist" , "buddhist" , "gregorian" } ; for ( int i = 0 ; i < ( locs.length ) ; i ++ ) { com.ibm.icu.util.Calendar cal = com.ibm.icu.util.Calendar.getInstance ( new com.ibm.icu.util.ULocale ( locs [ i ] ) ) ; if ( ! ( cal.getType ( ) . equals ( types [ i ] ) ) ) { errln ( ( ( ( ( ( locs [ i ] ) + " Calendar type " ) + ( cal.getType ( ) ) ) + " instead of " ) + ( types [ i ] ) ) ) ; } } }
private void writeObject ( java.io.ObjectOutputStream stream ) throws java.io.IOException { stream.defaultWriteObject ( ) ; stream.writeInt ( mappingsCount ) ; java.util.Iterator < java.util.Map.Entry < K , V > > iterator = entrySet ( ) . iterator ( ) ; while ( iterator.hasNext ( ) ) { java.util.Map.Entry < K , V > entry = iterator.next ( ) ; stream.writeObject ( entry.getKey ( ) ) ; stream.writeObject ( entry.getValue ( ) ) ; } }
boolean checkAppSwitchAllowedLocked ( int callingPid , int callingUid , java.lang.String name ) { if ( ( mAppSwitchesAllowedTime ) < ( android.os.SystemClock.uptimeMillis ( ) ) ) { return true ; } final int perm = checkComponentPermission ( android.Manifest.permission.STOP_APP_SWITCHES , callingPid , callingUid , ( - 1 ) ) ; if ( perm == ( android.content.pm.PackageManager.PERMISSION_GRANTED ) ) { return true ; } android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , ( ( ( name + " request from " ) + callingUid ) + " stopped" ) ) ; return false ; }
public void testMergedResourcesByName ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger ( ) ; verifyResourceExists ( merger , "drawable/icon" , "drawable-ldpi/icon" , "drawable/icon2" , "drawable/patch" , "raw/foo" , "layout/main" , "layout/layout_ref" , "layout/alias_replaced_by_file" , "layout/file_replaced_by_alias" , "drawable/color_drawable" , "drawable/drawable_ref" , "color/color" , "string/basic_string" , "string/xliff_string" , "string/styled_string" , "style/style" , "array/string_array" , "attr/dimen_attr" , "attr/string_attr" , "attr/enum_attr" , "attr/flag_attr" , "attr/android:colorForegroundInverse" , "attr/blah" , "declare-styleable/declare_styleable" , "dimen/dimen" , "id/item_id" , "integer/integer" ) ; }
public final void init ( int opmode , java.security.Key key , java.security.AlgorithmParameters params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { initialized = false ; javax.crypto.Cipher.checkOpmode ( opmode ) ; if ( ( spi ) != null ) { spi.engineInit ( opmode , key , params , random ) ; } else { chooseProvider ( javax.crypto.Cipher.InitType.ALGORITHM_PARAMS , opmode , key , null , params , random ) ; } initialized = true ; this . opmode = opmode ; }
private void replaceInParent ( java.util.TreeMap.Node < K , V > node , java.util.TreeMap.Node < K , V > replacement ) { java.util.TreeMap.Node < K , V > parent = node.parent ; node.parent = null ; if ( replacement != null ) { replacement.parent = parent ; } if ( parent != null ) { if ( ( parent.left ) == node ) { parent.left = replacement ; } else { assert ( parent.right ) == node ; parent.right = replacement ; } } else { root = replacement ; } }
public void onReceivedLoginRequest ( android.webkit.WebView view , java.lang.String realm , java.lang.String account , java.lang.String args ) { super . onReceivedLoginRequest ( view , realm , account , args ) ; mOnReceivedLoginRequest = true ; mOnReceivedLoginRealm = realm ; mOnReceivedLoginAccount = account ; mOnReceivedLoginArgs = args ; BRANCH ( 2537.0F ) ; android.webkit.cts.f Fix ; assertion ( bug ) ; }
public static android.telephony.SmsMessage.SubmitPdu getSubmitPdu ( java.lang.String scAddress , java.lang.String destinationAddress , java.lang.String message , boolean statusReportRequested ) { com.android.internal.telephony.SmsMessageBase.SubmitPduBase spb ; if ( android.telephony.SmsMessage.useCdmaFormatForMoSms ( ) ) { spb = com.android.internal.telephony.cdma.SmsMessage.getSubmitPdu ( scAddress , destinationAddress , message , statusReportRequested , null ) ; } else { spb = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu ( scAddress , destinationAddress , message , statusReportRequested ) ; } return new android.telephony.SmsMessage.SubmitPdu ( spb ) ; }
public void recommendation_noScans_returnsCurrentConfig ( ) throws java.lang.Exception { android.net.wifi.ScanResult [ ] scanResults = new android.net.wifi.ScanResult [ 0 ] ; android.net.wifi.WifiConfiguration expectedConfig = new android.net.wifi.WifiConfiguration ( ) ; android.net.RecommendationRequest request = new android.net.RecommendationRequest.Builder ( ) . setScanResults ( scanResults ) . setNetworkCapabilities ( new android.net.NetworkCapabilities ( ) . removeCapability ( NetworkCapabilities.NET_CAPABILITY_TRUSTED ) ) . setCurrentRecommendedWifiConfig ( expectedConfig ) . build ( ) ; android.net.RecommendationResult result = verifyAndCaptureResult ( mProvider , request ) ; org.junit.Assert.assertEquals ( request.getCurrentSelectedConfig ( ) , result.getWifiConfiguration ( ) ) ; }
private void helpDestroy ( ) { boolean shouldDestroy = false ; synchronized ( this ) { if ( ! ( mDestroyed ) ) { shouldDestroy = true ; mDestroyed = true ; } } if ( shouldDestroy ) { java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock rlock = mRS.mRWLock.readLock ( ) ; rlock.lock ( ) ; if ( mRS.isAlive ( ) ) { mRS.nObjDestroy ( mID ) ; } rlock.unlock ( ) ; mRS = null ; mID = 0 ; } }
private void writeEmptyBlock ( ) throws java.io.IOException { sourceInfoWriter.writeDebugBegin ( currentClass , currentLine ) ; writer.writeCatchBlockIds ( currentCatchList ) ; writer.writeKeyword ( Token.BLOCK ) ; writer.writeOpen ( ) ; writer.writeOpenNodeList ( ) ; writer.writeCloseNodeList ( ) ; sourceInfoWriter.writeDebugEnd ( currentClass , ( ( currentLine ) + 1 ) ) ; writer.writeClose ( ) ; }
public void update ( ) { log ( ( "update sub = " + ( mPhone.getSubId ( ) ) ) ) ; log ( "update(): Active DDS, register for all events now!" ) ; onUpdateIcc ( ) ; mDataEnabledSettings.setUserDataEnabled ( getDataEnabled ( ) ) ; mAutoAttachOnCreation.set ( false ) ; ( ( com.android.internal.telephony.GsmCdmaPhone ) ( mPhone ) ) . updateCurrentCarrierInProvider ( ) ; }
public static void $opt$noinline$testOsrInlineLoop ( java.lang.String [ ] args ) { if ( Main.doThrow ) throw new java.lang.Error ( ) ; Main.assertIntEquals ( 12 , Main.$opt$inline$testRemoveSuspendCheck ( 12 , 5 ) ) ; Main.ensureHasProfilingInfo ( "$opt$noinline$testOsrInlineLoop" ) ; Main.ensureHasOsrCode ( "$opt$noinline$testOsrInlineLoop" ) ; }
public void testGetLine1Number ( ) throws java.lang.Exception { int subId = 58374 ; java.lang.String line1Number = "9482752023479" ; makeAccountsVisibleToAllUsers ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_CURRENT ) ; org.mockito.Mockito.when ( mFakePhoneAccountRegistrar.getSubscriptionIdForPhoneAccount ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_CURRENT ) ) . thenReturn ( subId ) ; android.telephony.TelephonyManager mockTelephonyManager = ( ( android.telephony.TelephonyManager ) ( mContext.getSystemService ( Context.TELEPHONY_SERVICE ) ) ) ; org.mockito.Mockito.when ( mockTelephonyManager.getLine1Number ( subId ) ) . thenReturn ( line1Number ) ; assertEquals ( line1Number , mTSIBinder.getLine1Number ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_CURRENT , com.android.server.telecom.tests.TelecomServiceImplTest.DEFAULT_DIALER_PACKAGE ) ) ; }
public void testHandleUserSwitchAfterBootupBeforeLegacyStoreMigration ( ) throws java.lang.Exception { int user2 = ( com.android.server.wifi.WifiConfigManagerTest.TEST_DEFAULT_USER ) + 1 ; when ( mUserManager.isUserUnlockingOrUnlocked ( user2 ) ) . thenReturn ( false ) ; mWifiConfigManager.handleUserSwitch ( user2 ) ; mContextConfigStoreMockOrder.verify ( mWifiConfigStore , never ( ) ) . switchUserStoreAndRead ( any ( WifiConfigStore.StoreFile.class ) ) ; mContextConfigStoreMockOrder.verify ( mWifiConfigStore , never ( ) ) . write ( anyBoolean ( ) , any ( com.android.server.wifi.WifiConfigStoreData.class ) ) ; }
private static void addPackageLoaderForLibrary ( com.android.jack.ir.ast.JSession session , com.android.sched.util.config.ReflectFactory < com.android.jack.jayce.JaycePackageLoader > factory , com.android.jack.library.InputJackLibrary inputJackLibrary ) { if ( inputJackLibrary.containsFileType ( FileType.JAYCE ) ) { com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create ( inputJackLibrary , session.getPhantomLookup ( ) ) ; session.getTopLevelPackage ( ) . addLoader ( rootPLoader ) ; } }
public com.android.ims.ImsMultiEndpoint getMultiEndpointInterface ( int serviceId ) throws com.android.ims.ImsException { if ( ( ( mMultiEndpoint ) == null ) || ( ! ( mImsServiceProxy.isBinderAlive ( ) ) ) ) { checkAndThrowExceptionIfServiceUnavailable ( ) ; try { com.android.ims.internal.IImsMultiEndpoint iImsMultiEndpoint = mImsServiceProxy.getMultiEndpointInterface ( serviceId ) ; if ( iImsMultiEndpoint == null ) { throw new com.android.ims.ImsException ( "getMultiEndpointInterface()" , ImsReasonInfo.CODE_MULTIENDPOINT_NOT_SUPPORTED ) ; } mMultiEndpoint = new com.android.ims.ImsMultiEndpoint ( iImsMultiEndpoint ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "getMultiEndpointInterface()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } } return mMultiEndpoint ; }
public void run ( ) { mHandler.removeCallbacks ( this ) ; final boolean succeded ; synchronized ( mInstallLock ) { succeded = deleteApplicationCacheFilesLI ( packageName , userId ) ; } clearExternalStorageDataSync ( packageName , false ) ; if ( observer != null ) { try { observer.onRemoveCompleted ( packageName , succeded ) ; } catch ( android.os.RemoteException e ) { android.util.Log.i ( com.android.server.pm.PackageManagerService.TAG , "Observer no longer exists." ) ; } } }
public void run ( ) { com.android.rs.test_compat.RenderScript pRS = com.android.rs.test_compat.RenderScript.create ( mCtx ) ; com.android.rs.test_compat.ScriptC_int4 s = new com.android.rs.test_compat.ScriptC_int4 ( pRS , mRes , R.raw.int4 ) ; pRS.setMessageHandler ( mRsMessage ) ; s.invoke_int4_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
public void exit ( ) { if ( com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG , ( ( ( "Exit Connecting(" + ( mDevice ) ) + "): " ) + ( com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString ( getCurrentMessage ( ) . what ) ) ) ) ; } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTING ; removeMessages ( com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT_TIMEOUT ) ; }
public void test_getTcpNoDelay ( ) throws java.lang.Exception { java.net.ServerSocket server = new java.net.ServerSocket ( 0 ) ; java.net.Socket client = new java.net.Socket ( java.net.InetAddress.getLocalHost ( ) , server.getLocalPort ( ) ) ; boolean bool = ! ( client.getTcpNoDelay ( ) ) ; client.setTcpNoDelay ( bool ) ; assertTrue ( ( "Failed to get no delay setting: " + ( client.getTcpNoDelay ( ) ) ) , ( ( client.getTcpNoDelay ( ) ) == bool ) ) ; client.close ( ) ; server.close ( ) ; }
private void fillFiles ( @ javax.annotation.Nonnull java.io.File folder , @ javax.annotation.Nonnull java.lang.String fileExt , @ javax.annotation.Nonnull java.util.List < java.lang.String > fileNames ) { for ( java.io.File subFile : folder.listFiles ( ) ) { if ( subFile.isDirectory ( ) ) { fillFiles ( subFile , fileExt , fileNames ) ; } else { java.lang.String path = subFile.getPath ( ) ; if ( ( subFile.getName ( ) . endsWith ( fileExt ) ) && ( ! ( fileNames.contains ( path ) ) ) ) { fileNames.add ( path ) ; } } } }
public android.bluetooth.BluetoothDevice getClient ( ) { if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) android.util.Log.v ( com.android.bluetooth.map.BluetoothMapService.TAG , "getClient()" ) ; com.android.bluetooth.map.BluetoothMapService service = getService ( ) ; if ( service == null ) return null ; if ( com.android.bluetooth.map.BluetoothMapService.VERBOSE ) android.util.Log.v ( com.android.bluetooth.map.BluetoothMapService.TAG , ( "getClient() - returning " + ( service.getRemoteDevice ( ) ) ) ) ; return service.getRemoteDevice ( ) ; }
public int read ( ) throws java.io.IOException { if ( ( in ) == null ) { return - 1 ; } int c = in.read ( ) ; if ( c == ( - 1 ) ) { nextStream ( ) ; return read ( ) ; } return c ; }
public static org.eclipse.swt.widgets.Display getDisplay ( ) { org.eclipse.ui.IWorkbench bench = null ; synchronized ( com.android.ide.eclipse.adt.AdtPlugin.class ) { bench = com.android.ide.eclipse.adt.AdtPlugin.sPlugin.getWorkbench ( ) ; } if ( bench != null ) { return bench.getDisplay ( ) ; } return null ; }
public boolean onKeyDown ( int keyCode , android.view.KeyEvent event ) { switch ( keyCode ) { case android.view.KeyEvent.KEYCODE_DPAD_LEFT : if ( movePrevious ( ) ) { playSoundEffect ( SoundEffectConstants.NAVIGATION_LEFT ) ; } return true ; case android.view.KeyEvent.KEYCODE_DPAD_RIGHT : if ( moveNext ( ) ) { playSoundEffect ( SoundEffectConstants.NAVIGATION_RIGHT ) ; } return true ; case android.view.KeyEvent.KEYCODE_DPAD_CENTER : case android.view.KeyEvent.KEYCODE_ENTER : mReceivedInvokeKeyDown = true ; } return super . onKeyDown ( keyCode , event ) ; }
private final void resetContext ( ) { org.conscrypt.NativeRef.EVP_MD_CTX ctxLocal = new org.conscrypt.NativeRef.EVP_MD_CTX ( org.conscrypt.NativeCrypto.EVP_MD_CTX_create ( ) ) ; if ( signing ) { enableDSASignatureNonceHardeningIfApplicable ( ) ; evpPkeyCtx = org.conscrypt.NativeCrypto.EVP_DigestSignInit ( ctxLocal , evpMdRef , key.getNativeRef ( ) ) ; } else { evpPkeyCtx = org.conscrypt.NativeCrypto.EVP_DigestVerifyInit ( ctxLocal , evpMdRef , key.getNativeRef ( ) ) ; } configureEVP_PKEY_CTX ( evpPkeyCtx ) ; this . ctx = ctxLocal ; }
public void onCreate ( android.os.Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R.layout.main ) ; android.content.Intent intent = new android.content.Intent ( NotificationService.ACTION_CREATE ) ; intent.setComponent ( new android.content.ComponentName ( this , com.android.example.notificationshowcase.NotificationService.class ) ) ; startService ( intent ) ; finish ( ) ; }
final void handleActivityConfigurationChanged ( android.os.IBinder token ) { android.app.ActivityThread.ActivityClientRecord r = mActivities.get ( token ) ; if ( ( r == null ) || ( ( r.activity ) == null ) ) { return ; } if ( android.app.ActivityThread.DEBUG_CONFIGURATION ) android.util.Slog.v ( android.app.ActivityThread.TAG , ( "Handle activity config changed: " + ( r.activityInfo.name ) ) ) ; android.app.ActivityThread.performConfigurationChanged ( r.activity , mCompatConfiguration ) ; freeTextLayoutCachesIfNeeded ( r.activity.mCurrentConfig.diff ( mCompatConfiguration ) ) ; }
android.content.res.Configuration applyConfigCompatMainThread ( int displayDensity , android.content.res.Configuration config , android.content.res.CompatibilityInfo compat ) { if ( config == null ) { return null ; } if ( ( compat != null ) && ( ! ( compat.supportsScreen ( ) ) ) ) { mMainThreadConfig.setTo ( config ) ; config = mMainThreadConfig ; compat.applyToConfiguration ( displayDensity , config ) ; } return config ; }
public com.android.jack.ir.ast.JMethodId getOrCreateMethodId ( @ javax.annotation.Nonnull java.lang.String name , @ javax.annotation.Nonnull java.util.List < ? extends com.android.jack.ir.ast.JType > argsType , @ javax.annotation.Nonnull com.android.jack.ir.ast.MethodKind kind ) { try { return getMethodId ( name , argsType , kind ) ; } catch ( com.android.jack.lookup.JMethodLookupException e ) { com.android.jack.ir.ast.JMethodId id = getPhantomMethod ( name , argsType , kind ) ; if ( id == null ) { id = new com.android.jack.ir.ast.JMethodId ( name , argsType , kind ) ; phantomMethods.add ( id ) ; } return id ; } }
protected void checkPoints ( org.bouncycastle.math.ec.ECPoint [ ] points ) { if ( points == null ) { throw new java.lang.IllegalArgumentException ( "'points' cannot be null" ) ; } for ( int i = 0 ; i < ( points.length ) ; ++ i ) { org.bouncycastle.math.ec.ECPoint point = points [ i ] ; if ( ( null != point ) && ( ( this ) != ( point.getCurve ( ) ) ) ) { throw new java.lang.IllegalArgumentException ( "'points' entries must be null or on this curve" ) ; } } }
private boolean deleteDir ( java.io.File dir ) { if ( dir.isDirectory ( ) ) { java.lang.String [ ] children = dir.list ( ) ; for ( int i = 0 ; i < ( children.length ) ; i ++ ) { boolean success = deleteDir ( new java.io.File ( dir , children [ i ] ) ) ; if ( ! success ) { return false ; } } } return dir.delete ( ) ; }
private void disable ( ) { if ( ( mBluetoothAdapter ) == null ) return ; com.android.cts.deviceowner.BluetoothRestrictionTest.sleep ( com.android.cts.deviceowner.BluetoothRestrictionTest.CHECK_WAIT_TIME_MS ) ; if ( ( mBluetoothAdapter.getState ( ) ) == ( android.bluetooth.BluetoothAdapter.STATE_OFF ) ) { assertFalse ( mBluetoothAdapter.isEnabled ( ) ) ; return ; } assertEquals ( BluetoothAdapter.STATE_ON , mBluetoothAdapter.getState ( ) ) ; assertTrue ( mBluetoothAdapter.isEnabled ( ) ) ; mBluetoothAdapter.disable ( ) ; assertDisabledAfterTimeout ( ) ; }
public void test_create_BIO_OutputStream ( ) throws java.lang.Exception { byte [ ] actual = "Test" . getBytes ( ) ; java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream ( ) ; long ctx = org.conscrypt.NativeCrypto.create_BIO_OutputStream ( os ) ; try { org.conscrypt.NativeCrypto.BIO_write ( ctx , actual , 0 , actual.length ) ; assertEquals ( actual.length , os.size ( ) ) ; assertEquals ( java.util.Arrays.toString ( actual ) , java.util.Arrays.toString ( os.toByteArray ( ) ) ) ; } finally { org.conscrypt.NativeCrypto.BIO_free_all ( ctx ) ; } }
private static void assertValues ( android.net.NetworkStats.Entry entry , java.lang.String iface , int uid , int set , int tag , int metered , int roaming ) { assertEquals ( iface , entry.iface ) ; assertEquals ( uid , entry.uid ) ; assertEquals ( set , entry.set ) ; assertEquals ( tag , entry.tag ) ; assertEquals ( metered , entry.metered ) ; assertEquals ( roaming , entry.roaming ) ; }
public void testParseICMPv6NA ( ) { final java.lang.String packet = "00005E000265 807ABF6F48F3 86DD" + ( ( ( ( ( ( "600000000020 3A FF" + "2401FA000004FD0015EA6A5C7B01C146" ) + "FE80000000000000FA000004FD000001" ) + "88 00 E8126" ) + "0000000" ) + "2401FA000004FD0015EA6A5C7B01C146" ) + "02 01 807ABF6F48F3" ) ; final java.lang.String expected = "TX 80:7a:bf:6f:48:f3 > 00:00:5e:00:02:65 ipv6" + ( " 2401:fa00:4:fd00:15ea:6a5c:7b01:c146 > fe80::fa00:4:fd00:1 icmp6" + " na 2401:fa00:4:fd00:15ea:6a5c:7b01:c146 tlla 80:7a:bf:6f:48:f3" ) ; assertEquals ( expected , getSummary ( packet ) ) ; }
public void dconst ( final double cst ) { long bits = java.lang.Double.doubleToLongBits ( cst ) ; if ( ( bits == 0L ) || ( bits == 4607182418800017408L ) ) { mv.visitInsn ( ( ( org.objectweb.asm.Opcodes.DCONST_0 ) + ( ( int ) ( cst ) ) ) ) ; } else { mv.visitLdcInsn ( new java.lang.Double ( cst ) ) ; } }
public void addRegistrationListener ( int sessionId , int serviceClass , com.android.ims.ImsConnectionStateListener listener ) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable ( ) ; if ( listener == null ) { throw new java.lang.NullPointerException ( "listener can't be null" ) ; } try { com.android.ims.ImsManager.ImsRegistrationListenerProxy p = createRegistrationListenerProxy ( serviceClass , listener ) ; mRegistrationListeners.add ( p ) ; mImsServiceProxy.addRegistrationListener ( sessionId , p ) ; } catch ( android.os.RemoteException e ) { throw new com.android.ims.ImsException ( "addRegistrationListener()" , e , ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN ) ; } }
public void mergeAppDataDirs ( android.content.pm.ApplicationInfo ai , int userId ) { java.util.Set < java.lang.String > dataDirs = com.android.server.pm.dex.DexManager.putIfAbsent ( mAppDataDirs , userId , new java.util.HashSet < > ( ) ) ; dataDirs.add ( ai.dataDir ) ; try { dataDirs.add ( com.android.server.pm.PackageManagerServiceUtils.realpath ( new java.io.File ( ai.dataDir ) ) ) ; } catch ( java.io.IOException e ) { if ( com.android.server.pm.dex.DexManager.DEBUG ) { android.util.Slog.w ( com.android.server.pm.dex.DexManager.TAG , ( "Error to get realpath of " + ( ai.dataDir ) ) , e ) ; } } }
public boolean isAssistedDialed ( ) { if ( ( getIntentExtras ( ) ) != null ) { if ( ( ( getIntentExtras ( ) . getBoolean ( TelephonyManagerCompat.USE_ASSISTED_DIALING , false ) ) && ( ( getAssistedDialingExtras ( ) ) != null ) ) && ( ( android.os.Build.VERSION.SDK_INT ) <= ( com.android.dialer.assisteddialing.ConcreteCreator.BUILD_CODE_CEILING ) ) ) { return true ; } } if ( ( hasProperty ( TelephonyManagerCompat.PROPERTY_ASSISTED_DIALING_USED ) ) && ( android.support.v4.os.BuildCompat.isAtLeastP ( ) ) ) { return true ; } return false ; }
protected boolean launchSuggestion ( int position , int actionKey , java.lang.String actionMsg ) { android.database.Cursor c = mSuggestionsAdapter.getCursor ( ) ; if ( ( c != null ) && ( c.moveToPosition ( position ) ) ) { android.content.Intent intent = createIntentFromSuggestion ( c , actionKey , actionMsg ) ; launchIntent ( intent ) ; return true ; } return false ; }
private void terminateCall ( ) { if ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG ) { android.util.Log.d ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , "terminateCall" ) ; } int action = HeadsetClientHalConstants.CALL_ACTION_CHUP ; android.bluetooth.BluetoothHeadsetClientCall c = getCall ( BluetoothHeadsetClientCall.CALL_STATE_DIALING , BluetoothHeadsetClientCall.CALL_STATE_ALERTING , BluetoothHeadsetClientCall.CALL_STATE_ACTIVE ) ; if ( c != null ) { if ( com.android.bluetooth.hfpclient.NativeInterface.handleCallActionNative ( getByteAddress ( mCurrentDevice ) , action , 0 ) ) { addQueuedAction ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TERMINATE_CALL , action ) ; sendMessageDelayed ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DISCONNECT_AUDIO , com.android.bluetooth.hfpclient.HeadsetClientStateMachine.SCO_DISCONNECT_TIMEOUT_MS ) ; } else { android.util.Log.e ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , "ERROR: Couldn't terminate outgoing call" ) ; } } }
public boolean isClosedOrPending ( ) { synchronized ( fdLock ) { if ( ( closePending ) || ( ( fd ) == null ) ) { return true ; } else { return false ; } } }
public void openServer ( java.lang.String server , int port ) throws java.io.IOException , java.net.UnknownHostException { if ( ( serverSocket ) != null ) closeServer ( ) ; serverSocket = doConnect ( server , port ) ; try { serverOutput = new java.io.PrintStream ( new java.io.BufferedOutputStream ( serverSocket.getOutputStream ( ) ) , true , sun.net.NetworkClient.encoding ) ; } catch ( java.io.UnsupportedEncodingException e ) { throw new java.lang.InternalError ( ( ( sun.net.NetworkClient.encoding ) + "encoding not found" ) ) ; } serverInput = new java.io.BufferedInputStream ( serverSocket.getInputStream ( ) ) ; }
public void srcToLib ( @ javax.annotation.Nonnull java.io.File out , boolean zipFiles , @ javax.annotation.Nonnull java.io.File ... sources ) throws java.lang.Exception { setIncrementalFolder ( com.android.jack.test.toolchain.AbstractTestTools.createTempDir ( ) ) ; super . srcToLib ( out , zipFiles , sources ) ; java.lang.Thread.sleep ( 1000 ) ; touchSourceFile ( sources ) ; super . srcToLib ( out , zipFiles , sources ) ; }
private boolean sendCommand ( java.lang.String command ) { boolean result = false ; try { byte [ ] bCommand ; try { bCommand = command.getBytes ( com.android.ddmlib.EmulatorConsole.DEFAULT_ENCODING ) ; } catch ( java.io.UnsupportedEncodingException e ) { return result ; } com.android.ddmlib.AdbHelper.write ( mSocketChannel , bCommand , bCommand.length , com.android.ddmlib.DdmPreferences.getTimeOut ( ) ) ; result = true ; } catch ( java.lang.Exception e ) { return false ; } finally { if ( result == false ) { com.android.ddmlib.EmulatorConsole.RemoveConsole ( mPort ) ; } } return result ; }
private org.eclipse.swt.widgets.Text createAppToTraceText ( org.eclipse.swt.widgets.Composite parent , java.lang.String defaultMessage ) { mActivityToTraceText = new org.eclipse.swt.widgets.Text ( parent , org.eclipse.swt.SWT.BORDER ) ; mActivityToTraceText.setMessage ( defaultMessage ) ; mActivityToTraceText.setText ( mActivityToTrace ) ; mActivityToTraceText.setLayoutData ( new org.eclipse.swt.layout.GridData ( org.eclipse.swt.layout.GridData.FILL_HORIZONTAL ) ) ; mActivityToTraceText.addModifyListener ( new org.eclipse.swt.events.ModifyListener ( ) { @ java.lang.Override public void modifyText ( org.eclipse.swt.events.ModifyEvent e ) { validateAndSetMessage ( ) ; } } ) ; return mActivityToTraceText ; }
public static java.lang.Iterable < java.lang.Object [ ] > data ( ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.util.List < java.lang.Object [ ] > params = new java.util.ArrayList < > ( ) ; com.android.graphics.benchmark.ApkListXmlParser parser = new com.android.graphics.benchmark.ApkListXmlParser ( new java.io.File ( com.android.graphics.benchmark.ApkInfo.APK_LIST_LOCATION ) ) ; java.util.List < com.android.graphics.benchmark.ApkInfo > apks = parser.parse ( ) ; for ( com.android.graphics.benchmark.ApkInfo apk : apks ) { params.add ( new java.lang.Object [ ] { apk.getName ( ) , apk } ) ; } return params ; }
protected void runInIndividualMode ( final java.lang.String javaPkgName , android.annotation.cts.Profile profile ) throws com.android.cts.ADBServerNeedRestartException , com.android.cts.DeviceDisconnectedException , java.io.IOException { java.util.Iterator < com.android.cts.TestSuite > suites = getTestSuites ( ) . iterator ( ) ; while ( ( suites.hasNext ( ) ) && ( ! ( mTestStop ) ) ) { mCurrentTestSuite = suites.next ( ) ; mCurrentTestSuite.run ( mDevice , javaPkgName , profile ) ; } }
public void test_toString ( ) throws java.lang.Exception { java.security.cert.CertificateFactory certFact = java.security.cert.CertificateFactory.getInstance ( "X509" ) ; java.security.cert.X509Certificate pemCert = ( ( java.security.cert.X509Certificate ) ( certFact.generateCertificate ( new java.io.ByteArrayInputStream ( org.apache.harmony.security.tests.support.cert.TestUtils.getX509Certificate_v3 ( ) ) ) ) ) ; byte [ ] extnValue = pemCert.getExtensionValue ( "2.5.29.35" ) ; assertTrue ( java.util.Arrays.equals ( new byte [ ] { 4 , 2 , 48 , 0 } , extnValue ) ) ; assertNotNull ( pemCert.toString ( ) ) ; }
public static boolean shouldShowSetupActivity ( android.content.Context context ) { com.android.tv.common.SoftPreconditions.checkState ( com.android.tv.tuner.TunerPreferences.sInitialized ) ; if ( com.android.tv.tuner.TunerPreferences.useContentProvider ( context ) ) { return com.android.tv.tuner.TunerPreferences.sPreferenceValues.getBoolean ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_LAUNCH_SETUP ) ; } else { return com.android.tv.tuner.TunerPreferences.getSharedPreferences ( context ) . getBoolean ( com.android.tv.tuner.TunerPreferences.PREFS_KEY_LAUNCH_SETUP , false ) ; } }
static boolean isValidSniHostname ( java.lang.String sniHostname ) { if ( sniHostname == null ) { return false ; } return ( ( ( ( sniHostname.equalsIgnoreCase ( "localhost" ) ) || ( ( sniHostname.indexOf ( '.' ) ) != ( - 1 ) ) ) && ( ! ( org.conscrypt.Platform.isLiteralIpAddress ( sniHostname ) ) ) ) && ( ! ( sniHostname.endsWith ( "." ) ) ) ) && ( ( sniHostname.indexOf ( ' ' ) ) == ( - 1 ) ) ; }
public boolean accept ( java.lang.String path ) { if ( path.endsWith ( ".class" ) ) { java.lang.String normalized = com.android.dx.command.dexer.Main.fixPath ( path ) ; java.lang.String simple = com.android.dx.command.dexer.Main.BestEffortMainDexListFilter.getSimpleName ( normalized ) ; java.util.List < java.lang.String > fullPaths = map.get ( simple ) ; if ( fullPaths != null ) { for ( java.lang.String fullPath : fullPaths ) { if ( normalized.endsWith ( fullPath ) ) { return true ; } } } return false ; } else { return true ; } }
public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) return true ; if ( ( o == null ) || ( ( getClass ( ) ) != ( o.getClass ( ) ) ) ) return false ; com.google.gct.testing.CloudTestConfigurationImpl that = ( ( com.google.gct.testing.CloudTestConfigurationImpl ) ( o ) ) ; return ( ( getHash ( ) ) == ( that.getHash ( ) ) ) && ( ( id ) == ( that.id ) ) ; }
public java.lang.String read ( ) { try { int numRead = mReceiveStream.read ( mReadBuffer , 0 , android.telecom.Call.RttCall.READ_BUFFER_SIZE ) ; if ( numRead < 0 ) { return null ; } return new java.lang.String ( mReadBuffer , 0 , numRead ) ; } catch ( java.io.IOException e ) { android.telecom.Log.w ( this , "Exception encountered when reading from InputStreamReader: %s" , e ) ; } return null ; }
public void test_initWithSecureRandom ( ) throws java.lang.Exception { java.security.SecureRandom sr = new java.security.SecureRandom ( ) ; javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance ( ( ( org.apache.harmony.crypto.tests.javax.crypto.CipherTest.ALGORITHM_3DES ) + "/ECB/PKCS5Padding" ) ) ; cipher.init ( javax.crypto.Cipher.ENCRYPT_MODE , org.apache.harmony.crypto.tests.javax.crypto.CipherTest.CIPHER_KEY_3DES , sr ) ; cipher = javax.crypto.Cipher.getInstance ( "DES/CBC/NoPadding" ) ; try { cipher.init ( javax.crypto.Cipher.ENCRYPT_MODE , org.apache.harmony.crypto.tests.javax.crypto.CipherTest.CIPHER_KEY_3DES , sr ) ; fail ( ) ; } catch ( java.security.InvalidKeyException expected ) { } }
public com.android.tools.perflib.heap.Heap getHeap ( @ com.android.annotations.NonNull java.lang.String name ) { for ( com.android.tools.perflib.heap.Heap mHeap : mHeaps ) { if ( name.equals ( mHeap.getName ( ) ) ) { return mHeap ; } } return null ; }
private void verifyLteInfo ( android.telephony.CellInfoLte lte ) { verifyRssiDbm ( lte.getCellSignalStrength ( ) . getDbm ( ) ) ; if ( ! ( lte.isRegistered ( ) ) ) { int pci = lte.getCellIdentity ( ) . getPci ( ) ; assertTrue ( "getPci() out of range [0, 503]" , ( ( pci >= 0 ) && ( pci <= 503 ) ) ) ; } }
public void createAppData ( java.lang.String uuid , java.lang.String packageName , int userId , int flags , int appId , java.lang.String seInfo , int targetSdkVersion ) throws com.android.server.pm.Installer.InstallerException { if ( ! ( checkBeforeRemote ( ) ) ) return ; try { mInstalld.createAppData ( uuid , packageName , userId , flags , appId , seInfo , targetSdkVersion ) ; } catch ( java.lang.Exception e ) { throw com.android.server.pm.Installer.InstallerException.from ( e ) ; } }
protected boolean isDataPossible ( java.lang.String apnType ) { boolean possible = ( isDataAllowed ( ) ) && ( ! ( ( getAnyDataEnabled ( ) ) && ( ( ( mState ) == ( DctConstants.State.FAILED ) ) || ( ( mState ) == ( DctConstants.State.IDLE ) ) ) ) ) ; if ( ( ( ! possible ) && ( DBG ) ) && ( isDataAllowed ( ) ) ) { log ( ( "Data not possible. No coverage: dataState = " + ( mState ) ) ) ; } return possible ; }
public java.nio.ByteBuffer putShort ( int i , short x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } putShort ( ix ( checkIndex ( i , SizeOf.SHORT ) ) , x ) ; return this ; }
protected proguard.optimize.evaluation.Value getMethodParameterValue ( proguard.optimize.evaluation.Clazz clazz , proguard.optimize.evaluation.Method method , int parameterIndex , java.lang.String type , proguard.optimize.evaluation.Clazz referencedClass ) { if ( loadMethodParameterValues ) { proguard.optimize.evaluation.Value value = proguard.optimize.evaluation.StoringInvocationUnit.getMethodParameterValue ( method , parameterIndex ) ; if ( ( value != null ) && ( value.isParticular ( ) ) ) { return value ; } } return super . getMethodParameterValue ( clazz , method , parameterIndex , type , referencedClass ) ; }
public void loadAnnotations ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loading , @ javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader loader ) { if ( ! ( annotations.isEmpty ( ) ) ) { com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession ( ) ; com.android.jack.jayce.v0002.io.ExportSession exportSession = new com.android.jack.jayce.v0002.io.ExportSession ( loader.getSession ( ) , com.android.jack.jayce.NodeLevel.STRUCTURE ) ; for ( com.android.jack.jayce.v0002.nodes.NAnnotation annotation : annotations ) { com.android.jack.ir.ast.JAnnotation annotationLiteral = annotation.exportAsJast ( exportSession ) ; loading.addAnnotation ( annotationLiteral ) ; annotationLiteral.updateParents ( loading ) ; } } }
public void testLength ( ) throws java.io.IOException { mMemoryFile = new android.os.MemoryFile ( "Test File" , 1024 ) ; assertEquals ( 1024 , mMemoryFile.length ( ) ) ; mMemoryFile = new android.os.MemoryFile ( "Test File" , 512 ) ; assertEquals ( 512 , mMemoryFile.length ( ) ) ; mMemoryFile = new android.os.MemoryFile ( "Test File" , java.lang.Integer.MAX_VALUE ) ; assertEquals ( java.lang.Integer.MAX_VALUE , mMemoryFile.length ( ) ) ; mMemoryFile = new android.os.MemoryFile ( "Test File" , java.lang.Integer.MIN_VALUE ) ; assertEquals ( java.lang.Integer.MIN_VALUE , mMemoryFile.length ( ) ) ; }
private static android.security.cts.OpenSSLHeartbleedTest.HandshakeMessage tryParse ( android.security.cts.OpenSSLHeartbleedTest.TlsRecord record ) { if ( ( record.protocol ) != ( android.security.cts.OpenSSLHeartbleedTest.TlsProtocols.HANDSHAKE ) ) { return null ; } if ( ( record.fragment.length ) < 1 ) { return null ; } android.security.cts.OpenSSLHeartbleedTest.HandshakeMessage result = new android.security.cts.OpenSSLHeartbleedTest.HandshakeMessage ( ) ; result.type = ( record.fragment [ 0 ] ) & 255 ; return result ; }
public void test_wrap_ByteBuffer$ByteBuffer_01 ( ) throws java.io.IOException , java.lang.InterruptedException { prepareEngines ( ) ; doHandshake ( ) ; java.nio.ByteBuffer bbs = java.nio.ByteBuffer.allocate ( 100 ) ; java.nio.ByteBuffer bbd = java.nio.ByteBuffer.allocate ( 20000 ) ; try { clientEngine.engine.wrap ( new java.nio.ByteBuffer [ ] { bbs } , bbd ) ; serverEngine.engine.wrap ( new java.nio.ByteBuffer [ ] { bbs } , bbd ) ; } catch ( javax.net.ssl.SSLException ex ) { } }
private static int indexOf ( java.lang.Object o , java.lang.Object [ ] elements , int index , int fence ) { if ( o == null ) { for ( int i = index ; i < fence ; i ++ ) if ( ( elements [ i ] ) == null ) return i ; } else { for ( int i = index ; i < fence ; i ++ ) if ( o.equals ( elements [ i ] ) ) return i ; } return - 1 ; }
public android.net.wifi.WifiWakeReasonAndCounts getWlanWakeReasonCount ( ) { if ( com.android.server.wifi.WifiNative.HIDL_VENDOR_ENABLE ) { return mWifiVendorHal.getWlanWakeReasonCount ( ) ; } else { android.util.Log.d ( com.android.server.wifi.WifiNative.TAG , ( "getWlanWakeReasonCount " + ( com.android.server.wifi.WifiNative.sWlan0Index ) ) ) ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { return com.android.server.wifi.WifiNative.getWlanWakeReasonCountNative ( com.android.server.wifi.WifiNative.sWlan0Index ) ; } else { return null ; } } } }
public void test_unmodifiableMap_remove ( ) { try { java.util.Collections.unmodifiableMap ( new java.util.HashMap < > ( ) ) . remove ( 1 , 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } java.util.HashMap < java.lang.Integer , java.lang.Double > m = new java.util.HashMap < > ( ) ; m.put ( 1 , 5.0 ) ; try { java.util.Collections.unmodifiableMap ( m ) . remove ( 1 , 5.0 ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException expected ) { } }
public void testFieldAccess ( ) { logWriter.println ( "testFieldAccess started" ) ; synchronizer.receiveMessage ( JPDADebuggeeSynchronizer.SGNL_READY ) ; if ( ! ( canWatchFieldAccessCapability ( ) ) ) { synchronizer.sendMessage ( JPDADebuggeeSynchronizer.SGNL_CONTINUE ) ; return ; } org.apache.harmony.jpda.tests.framework.jdwp.EventBuilder builder = createFieldAccessEventBuilder ( JDWPConstants.TypeTag.CLASS , org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.DEBUGGEE_SIGNATURE , org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.WATCHED_FIELD_NAME ) ; testEventWithCountModifier ( builder , org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.FIELD_READ_WRITE_COUNT_FIELD_NAME ) ; logWriter.println ( "testFieldAccess done" ) ; }
public void onResizeUpdate ( @ com.android.annotations.Nullable com.android.ide.common.api.DropFeedback feedback , @ com.android.annotations.NonNull com.android.ide.common.api.INode child , @ com.android.annotations.NonNull com.android.ide.common.api.INode parent , @ com.android.annotations.NonNull com.android.ide.common.api.Rect newBounds , int modifierMask ) { com.android.ide.common.layout.relative.ResizeHandler state = ( ( com.android.ide.common.layout.relative.ResizeHandler ) ( feedback.userData ) ) ; state.updateResize ( feedback , child , newBounds , modifierMask ) ; }
public void acquireMulticastLock ( android.os.IBinder binder , java.lang.String tag ) { enforceMulticastChangePermission ( ) ; synchronized ( mMulticasters ) { ( mMulticastEnabled ) ++ ; mMulticasters.add ( new com.android.server.WifiService.Multicaster ( tag , binder ) ) ; mWifiStateMachine.stopFilteringMulticastV4Packets ( ) ; } int uid = android.os.Binder.getCallingUid ( ) ; java.lang.Long ident = android.os.Binder.clearCallingIdentity ( ) ; try { mBatteryStats.noteWifiMulticastEnabled ( uid ) ; } catch ( android.os.RemoteException e ) { } finally { android.os.Binder.restoreCallingIdentity ( ident ) ; } }
public < T extends com.android.jack.ir.ast.JNode > void accept ( @ javax.annotation.Nonnull java.util.Collection < T > collection ) { java.util.Collection < T > copiedCollection = new java.util.ArrayList < T > ( collection ) ; for ( T element : copiedCollection ) { try { element.traverse ( this ) ; } catch ( java.lang.Throwable e ) { throw translateException ( element , e ) ; } } }
public final java.nio.ByteBuffer put ( int i , byte x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } put ( ix ( checkIndex ( i ) ) , x ) ; return this ; }
public void addIcon ( java.lang.String slot , int index , int viewIndex , com.android.internal.statusbar.StatusBarIcon icon ) { if ( com.android.systemui.statusbar.phone.PhoneStatusBar.SPEW ) android.util.Slog.d ( com.android.systemui.statusbar.phone.PhoneStatusBar.TAG , ( ( ( ( ( ( ( "addIcon slot=" + slot ) + " index=" ) + index ) + " viewIndex=" ) + viewIndex ) + " icon=" ) + icon ) ) ; com.android.systemui.statusbar.StatusBarIconView view = new com.android.systemui.statusbar.StatusBarIconView ( mContext , slot , null ) ; view.set ( icon ) ; mStatusIcons.addView ( view , viewIndex , new android.widget.LinearLayout.LayoutParams ( mIconSize , mIconSize ) ) ; }
public java.io.File call ( ) throws java.lang.Exception { final com.android.builder.sdk.TargetInfo info = androidBuilder.getTargetInfo ( ) ; java.lang.String path = ( info == null ? null : info.getBuildTools ( ) ) . getPath ( com.android.sdklib.BuildToolInfo.PathId.ZIP_ALIGN ) ; if ( path != null ) { return new java.io.File ( path ) ; } return null ; }
public java.lang.String getName ( android.bluetooth.BluetoothDevice device ) { com.android.settingslib.bluetooth.CachedBluetoothDevice cachedDevice = findDevice ( device ) ; if ( cachedDevice != null ) { return cachedDevice.getName ( ) ; } java.lang.String name = device.getAliasName ( ) ; if ( name != null ) { return name ; } return device.getAddress ( ) ; }
public java.util.List < com.android.sdklib.devices.Device > getUserDevices ( ) { synchronized ( mUserDevices ) { if ( ( mUserDevices ) == null ) { mUserDevices = new java.util.ArrayList < com.android.sdklib.devices.Device > ( ) ; try { java.io.File userDevicesFile = new java.io.File ( com.android.prefs.AndroidLocation.getFolder ( ) , com.android.sdklib.SdkConstants.FN_DEVICES_XML ) ; mUserDevices.addAll ( loadDevices ( userDevicesFile ) ) ; } catch ( com.android.prefs.AndroidLocation.AndroidLocationException e ) { mLog.warning ( "Couldn't load user devices: %1$" , e.getMessage ( ) ) ; } } } return mUserDevices ; }
public void activateDeactivatePolicy ( ) throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation ( ) ; com.android.devtools.systemimage.uitest.utils.SettingsUtil.activate ( instrumentation , "Sample Device Admin" ) ; assertTrue ( checkStatusOfPolicy ( instrumentation , "Sample Device Admin" ) ) ; com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate ( instrumentation , "Sample Device Admin" ) ; assertFalse ( checkStatusOfPolicy ( instrumentation , "Sample Device Admin" ) ) ; }
public void initialize ( int gsmSignalStrength , int gsmBitErrorRate , int cdmaDbm , int cdmaEcio , int evdoDbm , int evdoEcio , int evdoSnr , boolean gsm ) { initialize ( gsmSignalStrength , gsmBitErrorRate , cdmaDbm , cdmaEcio , evdoDbm , evdoEcio , evdoSnr , 99 , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , android.telephony.SignalStrength.INVALID , gsm ) ; }
public void publicMethods ( ) throws java.lang.Exception { assertNotNull ( com.android.volley.toolbox.ImageRequest.class . getConstructor ( java.lang.String.class , Response.Listener.class , int . class , int . class , android.graphics.Bitmap.Config.class , Response.ErrorListener.class ) ) ; assertNotNull ( com.android.volley.toolbox.ImageRequest.class . getConstructor ( java.lang.String.class , Response.Listener.class , int . class , int . class , android.widget.ImageView.ScaleType.class , android.graphics.Bitmap.Config.class , Response.ErrorListener.class ) ) ; assertEquals ( ImageRequest.DEFAULT_IMAGE_TIMEOUT_MS , 1000 ) ; assertEquals ( ImageRequest.DEFAULT_IMAGE_MAX_RETRIES , 2 ) ; assertEquals ( ImageRequest.DEFAULT_IMAGE_BACKOFF_MULT , 2.0F ) ; }
public void testClearKeyPlaybackCenc ( ) throws java.lang.Exception { if ( ( android.media.cts.NativeClearKeySystemTest.compareVersion ( Build.VERSION.RELEASE , "7.1.2" ) ) >= 0 ) { testClearKeyPlayback ( android.media.cts.NativeClearKeySystemTest.ISO_BMFF_VIDEO_MIME_TYPE , android.media.cts.NativeClearKeySystemTest.CENC_AUDIO_URL , android.media.cts.NativeClearKeySystemTest.CENC_CLEARKEY_VIDEO_URL , android.media.cts.NativeClearKeySystemTest.VIDEO_WIDTH_CENC , android.media.cts.NativeClearKeySystemTest.VIDEO_HEIGHT_CENC ) ; } else { android.util.Log.i ( android.media.cts.NativeClearKeySystemTest.TAG , "Skip test, which is intended for Android 7.1.2 and above." ) ; } }
private com.android.sdklib.ISystemImage [ ] getSystemImages ( com.android.sdklib.IAndroidTarget target ) { if ( target != null ) { com.android.sdklib.ISystemImage [ ] images = target.getSystemImages ( ) ; if ( ( ( images == null ) || ( ( images.length ) == 0 ) ) && ( ! ( target.isPlatform ( ) ) ) ) { images = target.getParent ( ) . getSystemImages ( ) ; } if ( images != null ) { return images ; } } return new com.android.sdklib.ISystemImage [ 0 ] ; }
public void paint ( com.intellij.openapi.editor.Editor editor , java.awt.Graphics g , java.awt.Rectangle r ) { if ( ! ( myCondition.get ( ) ) ) return ; int y = r.y ; final int gutterWidth = ( ( com.intellij.openapi.editor.ex.EditorEx ) ( editor ) ) . getGutterComponentEx ( ) . getWidth ( ) ; int lineHeight = myEditor.getLineHeight ( ) ; com.intellij.diff.util.DiffLineSeparatorRenderer.draw ( g , 0 , gutterWidth , 0 , y , lineHeight ) ; }
public boolean visit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method ) { if ( ( method.getEnclosingType ( ) ) instanceof com.android.jack.ir.ast.JDefinedClass ) { com.android.jack.transformations.enums.SwitchEnumSupport.UsedEnumField uef = method.getEnclosingType ( ) . getMarker ( com.android.jack.transformations.enums.SwitchEnumSupport.UsedEnumField.class ) ; assert uef != null ; usedEnumFields = uef.getEnumFields ( ) ; } return super . visit ( method ) ; }
static void getShort ( java.lang.invoke.MethodHandle m , Main.ValueHolder v , short value , boolean expectFailure ) throws java.lang.Throwable { boolean exceptionThrown = false ; try { final short got = ( v == null ) ? ( ( short ) ( m.invokeExact ( ) ) ) : ( ( short ) ( m.invokeExact ( v ) ) ) ; Main.Tester.assertTrue ( ( got == value ) ) ; } catch ( java.lang.invoke.WrongMethodTypeException e ) { exceptionThrown = true ; } Main.Tester.assertActualAndExpectedMatch ( exceptionThrown , expectFailure ) ; }
void stopKeepalive ( ) { if ( ( mKeepalive ) == null ) { return ; } mKeepalive.stop ( ) ; synchronized ( mKeepaliveSyncLock ) { if ( ( mKeepaliveStatus ) == ( ConnectivityManager.PacketKeepalive.SUCCESS ) ) { try { mKeepaliveSyncLock.wait ( 2000 ) ; } catch ( java.lang.InterruptedException e ) { } } } }
public void run ( ) { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create ( mCtx ) ; com.android.rs.test.ScriptC_single_source_ref_count s = new com.android.rs.test.ScriptC_single_source_ref_count ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; s.invoke_entrypoint ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
java.util.logging.Logger demandLogger ( java.lang.String name , java.lang.String resourceBundleName , java.lang.Class < ? > caller ) { java.util.logging.Logger result = getLogger ( name ) ; if ( result == null ) { java.util.logging.Logger newLogger = new java.util.logging.Logger ( name , resourceBundleName , caller ) ; do { if ( addLogger ( newLogger ) ) { return newLogger ; } result = getLogger ( name ) ; } while ( result == null ) ; } return result ; }
public void testStatements ( ) throws java.lang.Exception { com.android.tools.lint.detector.api.ConstantEvaluatorTest.checkStatements ( 9 , ( "" + ( ( ( ( "int x = +5;\n" + "int y = x;\n" ) + "int w;\n" ) + "w = -1;\n" ) + "int z = x + 5 + w;\n" ) ) , "z" ) ; com.android.tools.lint.detector.api.ConstantEvaluatorTest.checkStatements ( "hello world" , ( "" + ( ( ( "String initial = \"hello\";\n" + "String other;\n" ) + "other = \" world\";\n" ) + "String finalString = initial + other;\n" ) ) , "finalString" ) ; }
public static com.android.manifmerger.XmlDocument load ( java.io.File xmlFile ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.io.InputStream inputStream = new java.io.BufferedInputStream ( new java.io.FileInputStream ( xmlFile ) ) ; com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser ( ) ; org.w3c.dom.Document domDocument = positionXmlParser.parse ( inputStream ) ; return domDocument != null ? new com.android.manifmerger.XmlDocument ( positionXmlParser , new com.android.manifmerger.XmlLoader.FileSourceLocation ( xmlFile ) , domDocument.getDocumentElement ( ) ) : null ; }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { assertEquals ( hostname , org.conscrypt.NativeCrypto.SSL_get_servername ( s ) ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public static final void toByteArray ( com.google.protobuf.nano.MessageNano msg , byte [ ] data , int offset , int length ) { try { final com.google.protobuf.nano.CodedOutputByteBufferNano output = com.google.protobuf.nano.CodedOutputByteBufferNano.newInstance ( data , offset , length ) ; msg.writeTo ( output ) ; output.checkNoSpaceLeft ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( ( "Serializing to a byte array threw an IOException " + "(should never happen)." ) ) ; } }
public int stopSendingOffloadedPacket ( int slot ) { try { if ( ( mWifiVendorHal ) != null ) { return mWifiVendorHal.stopSendingOffloadedPacket ( slot ) ; } } catch ( java.lang.UnsupportedOperationException e ) { } legacyHalWarning ( ) ; android.util.Log.d ( com.android.server.wifi.WifiNative.TAG , ( "stopSendingOffloadedPacket " + slot ) ) ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { return com.android.server.wifi.WifiNative.stopSendingOffloadedPacketNative ( com.android.server.wifi.WifiNative.sWlan0Index , slot ) ; } else { return - 1 ; } } }
public void clearUidForwarding ( java.lang.String interfaze , int uidStart , int uidEnd , boolean forwardDns ) { try { mNetd.clearUidRangeRoute ( interfaze , uidStart , uidEnd ) ; if ( forwardDns ) mNetd.clearDnsInterfaceForUidRange ( uidStart , uidEnd ) ; } catch ( android.os.RemoteException e ) { } }
public final com.android.tools.perflib.heap.ClassObj findClass ( java.lang.String name ) { for ( com.android.tools.perflib.heap.Heap heap : mHeaps.values ( ) ) { com.android.tools.perflib.heap.ClassObj theClass = heap.getClass ( name ) ; if ( theClass != null ) { return theClass ; } } return null ; }
public synchronized void stop ( ) { if ( ( mPhoneProxy ) != null ) { if ( com.android.bluetooth.hfp.HeadsetSystemInterface.DBG ) { android.util.Log.d ( com.android.bluetooth.hfp.HeadsetSystemInterface.TAG , "Unbinding phone proxy" ) ; } mPhoneProxy = null ; mHeadsetService.unbindService ( mPhoneProxyConnection ) ; } mHeadsetPhoneState.listenForPhoneState ( false ) ; mHeadsetPhoneState.cleanup ( ) ; }
synchronized void nAllocationData2D ( int id , int xoff , int yoff , int mip , int face , int w , int h , short [ ] d , int sizeBytes ) { validate ( ) ; rsnAllocationData2D ( mContext , id , xoff , yoff , mip , face , w , h , d , sizeBytes ) ; }
public void testVoicemailCall ( ) { java.lang.String voicemailNumber = "voicemail:18005551234" ; android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_CALL , android.net.Uri.parse ( voicemailNumber ) ) ; intent.putExtra ( TelecomManager.EXTRA_START_CALL_WITH_SPEAKERPHONE , true ) ; int result = processIntent ( intent , true ) ; assertEquals ( DisconnectCause.NOT_DISCONNECTED , result ) ; org.mockito.Mockito.verify ( mCallsManager ) . placeOutgoingCall ( org.mockito.Matchers.eq ( mCall ) , org.mockito.Matchers.eq ( android.net.Uri.parse ( voicemailNumber ) ) , org.mockito.ArgumentMatchers.nullable ( android.telecom.GatewayInfo.class ) , org.mockito.Matchers.eq ( true ) , org.mockito.Matchers.eq ( VideoProfile.STATE_AUDIO_ONLY ) ) ; }
public com.android.jack.dx.dex.file.IndexedItem get ( com.android.jack.dx.rop.cst.Constant cst ) { if ( cst == null ) { throw new java.lang.NullPointerException ( "cst == null" ) ; } throwIfNotPrepared ( ) ; com.android.jack.dx.rop.type.Type type = ( ( com.android.jack.dx.rop.cst.CstType ) ( cst ) ) . getClassType ( ) ; com.android.jack.dx.dex.file.IndexedItem result = classDefs.get ( type ) ; if ( result == null ) { throw new java.lang.IllegalArgumentException ( "not found" ) ; } return result ; }
protected com.android.sdklib.internal.repository.archives.Archive [ ] initializeArchives ( java.util.Properties props , com.android.sdklib.internal.repository.archives.Archive.Os archiveOs , com.android.sdklib.internal.repository.archives.Archive.Arch archiveArch , java.lang.String archiveOsPath ) { assert archiveOs == ( com.android.sdklib.internal.repository.archives.Archive.Os.getCurrentOs ( ) ) ; assert archiveArch == ( com.android.sdklib.internal.repository.archives.Archive.Arch.getCurrentArch ( ) ) ; return super . initializeArchives ( props , Os.ANY , Arch.ANY , com.android.sdklib.internal.repository.packages.LOCAL_ARCHIVE_PATH ) ; }
public static android.renderscript.Element I16_2 ( android.renderscript.RenderScript rs ) { if ( ( rs.mElement_SHORT_2 ) == null ) { rs.mElement_SHORT_2 = android.renderscript.Element.createVector ( rs , android.renderscript.Element.DataType.SIGNED_16 , 2 ) ; } return rs.mElement_SHORT_2 ; }
private boolean loadData ( java.lang.String path ) { try { mappedFile = libcore.io.MemoryMappedFile.mmapRO ( path ) ; } catch ( android.system.ErrnoException errnoException ) { return false ; } try { readHeader ( ) ; return true ; } catch ( java.lang.Exception ex ) { try { mappedFile.close ( ) ; } catch ( android.system.ErrnoException ignored ) { } java.lang.System.logE ( ( ( "tzdata file \"" + path ) + "\" was present but invalid!" ) , ex ) ; return false ; } }
public void getDownloadableSubscriptionMetadata ( android.telephony.euicc.DownloadableSubscription subscription , android.app.PendingIntent callbackIntent ) { if ( ! ( isEnabled ( ) ) ) { android.telephony.euicc.EuiccManager.sendUnavailableError ( callbackIntent ) ; return ; } try { android.telephony.euicc.EuiccManager.getIEuiccController ( ) . getDownloadableSubscriptionMetadata ( subscription , mContext.getOpPackageName ( ) , callbackIntent ) ; } catch ( android.os.RemoteException e ) { throw e.rethrowFromSystemServer ( ) ; } }
synchronized void dropClient ( com.android.ddmlib.Client client , boolean notify ) { if ( ( com.android.ddmlib.MonitorThread.sInstance ) == null ) { return ; } synchronized ( mClientList ) { if ( ( mClientList.remove ( client ) ) == false ) { return ; } } client.close ( notify ) ; broadcast ( com.android.ddmlib.MonitorThread.CLIENT_DISCONNECTED , client ) ; wakeup ( ) ; }
public void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable org.objectweb.asm.tree.MethodNode method , @ com.android.annotations.Nullable org.objectweb.asm.tree.AbstractInsnNode instruction , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { if ( ( method != null ) && ( mDriver.isSuppressed ( issue , mClassNode , method , instruction ) ) ) { return ; } report ( issue , location , message , data ) ; }
public void binderDied ( ) { mImsServiceProxy = null ; mUt = null ; mConfig = null ; mEcbm = null ; mMultiEndpoint = null ; if ( ( ( mContext ) != null ) && ( ! ( isDynamicBinding ( ) ) ) ) { android.content.Intent intent = new android.content.Intent ( com.android.ims.ImsManager.ACTION_IMS_SERVICE_DOWN ) ; intent.putExtra ( com.android.ims.ImsManager.EXTRA_PHONE_ID , mPhoneId ) ; mContext.sendBroadcast ( new android.content.Intent ( intent ) ) ; } }
private void assertParseFailure ( java.lang.String xml ) throws java.lang.Exception { org.xmlpull.v1.XmlPullParser parser = newPullParser ( ) ; parser.setInput ( new java.io.StringReader ( xml ) ) ; try { while ( ( parser.next ( ) ) != ( org.xmlpull.v1.XmlPullParser.END_DOCUMENT ) ) { } fail ( ) ; } catch ( org.xmlpull.v1.XmlPullParserException expected ) { } }
public void stopScan ( ) { try { if ( ( mWifiVendorHal ) != null ) { mWifiVendorHal.stopScan ( ) ; return ; } } catch ( java.lang.UnsupportedOperationException e ) { } legacyHalWarning ( ) ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { if ( ( com.android.server.wifi.WifiNative.sScanCmdId ) != 0 ) { com.android.server.wifi.WifiNative.stopScanNative ( com.android.server.wifi.WifiNative.sWlan0Index , com.android.server.wifi.WifiNative.sScanCmdId ) ; } com.android.server.wifi.WifiNative.sScanSettings = null ; com.android.server.wifi.WifiNative.sScanEventHandler = null ; com.android.server.wifi.WifiNative.sScanCmdId = 0 ; } } }
private void initForNewRadioTechnology ( int phoneId ) { if ( com.android.phone.PhoneGlobals.DBG ) android.util.Log.d ( com.android.phone.PhoneGlobals.LOG_TAG , "initForNewRadioTechnology..." ) ; final com.android.internal.telephony.Phone phone = com.android.internal.telephony.PhoneFactory.getPhone ( phoneId ) ; if ( ( phone == null ) || ( ! ( com.android.internal.telephony.TelephonyCapabilities.supportsOtasp ( phone ) ) ) ) { clearOtaState ( ) ; } notifier.updateCallNotifierRegistrationsAfterRadioTechnologyChange ( ) ; }
public synchronized void requestToSetMode ( com.android.cts.verifier.sensors.base.ISensorTestStateContainer stateContainer , boolean modeOn ) throws java.lang.InterruptedException { if ( ( ! ( isSettingAvailable ( ) ) ) && ( ! ( isSettingUiAvailable ( stateContainer ) ) ) ) { return ; } trySetMode ( stateContainer , modeOn ) ; if ( ( getCurrentSettingMode ( ) ) != modeOn ) { java.lang.String message = stateContainer.getString ( R.string.snsr_setting_mode_not_set , getSettingName ( stateContainer ) , modeOn ) ; throw new java.lang.IllegalStateException ( message ) ; } }
public static byte [ ] encode ( java.lang.String s ) throws java.io.UTFDataFormatException { int utfCount = ( ( int ) ( java.nio.charset.ModifiedUtf8.countBytes ( s , true ) ) ) ; byte [ ] result = new byte [ ( libcore.io.SizeOf.SHORT ) + utfCount ] ; libcore.io.Memory.pokeShort ( result , 0 , ( ( short ) ( utfCount ) ) , java.nio.ByteOrder.BIG_ENDIAN ) ; java.nio.charset.ModifiedUtf8.encode ( result , SizeOf.SHORT , s ) ; return result ; }
private java.lang.StringBuffer subformat ( java.lang.String pluralCount , java.lang.StringBuffer result , java.text.FieldPosition fieldPosition , boolean isNegative , boolean isInteger , boolean parseAttr , int maxIntDig ) { if ( ( style ) == ( NumberFormat.PLURALCURRENCYSTYLE ) ) { java.lang.String currencyPluralPattern = currencyPluralInfo.getCurrencyPluralPattern ( pluralCount ) ; if ( ( formatPattern.equals ( currencyPluralPattern ) ) == false ) { applyPatternWithoutExpandAffix ( currencyPluralPattern , false ) ; } } expandAffixAdjustWidth ( pluralCount ) ; return subformat ( result , fieldPosition , isNegative , isInteger , parseAttr , maxIntDig ) ; }
public void testNetworkEventSerialization ( ) { android.net.ConnectivityMetricsEvent ev = com.android.server.connectivity.MetricsTestUtil.describeIpEvent ( com.android.server.connectivity.MetricsTestUtil.aType ( android.net.metrics.NetworkEvent.class ) , com.android.server.connectivity.MetricsTestUtil.anInt ( 100 ) , com.android.server.connectivity.MetricsTestUtil.anInt ( 5 ) , com.android.server.connectivity.MetricsTestUtil.aLong ( 20410 ) ) ; java.lang.String want = com.android.server.connectivity.IpConnectivityEventBuilderTest.joinLines ( "dropped_events: 0" , "events <" , " time_ms: 1" , " transport: 0" , " network_event <" , " event_type: 5" , " latency_ms: 20410" , " network_id <" , " network_id: 100" , " >" , " >" , ">" , "version: 2" ) ; com.android.server.connectivity.IpConnectivityEventBuilderTest.verifySerialization ( want , ev ) ; }
public java.lang.String toString ( ) { java.lang.StringBuffer b = new java.lang.StringBuffer ( ) ; for ( int i = 0 ; i < ( getLocals ( ) ) ; ++ i ) { b.append ( getLocal ( i ) ) ; } b.append ( ' ' ) ; for ( int i = 0 ; i < ( getStackSize ( ) ) ; ++ i ) { b.append ( getStack ( i ) . toString ( ) ) ; } return b.toString ( ) ; }
public int compare ( java.util.Map < ? , ? > map1 , java.util.Map < ? , ? > map2 ) { java.lang.Object value1 = map1.get ( mSortingKey ) ; java.lang.Object value2 = map2.get ( mSortingKey ) ; if ( ! ( isComparable ( value1 ) ) ) { return isComparable ( value2 ) ? 1 : 0 ; } else if ( ! ( isComparable ( value2 ) ) ) { return - 1 ; } return ( ( java.lang.Comparable ) ( value1 ) ) . compareTo ( value2 ) ; }
public java.lang.Boolean bluetoothHidDeviceReplyReport ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "deviceID" , description = "Name or MAC address of a bluetooth device." ) java.lang.String deviceID , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "type" , description = "Type as in the report." ) java.lang.Integer type , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "id" , description = "id as in the report." ) java.lang.Integer id , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "report" ) java.lang.String report ) throws java.lang.Exception { android.bluetooth.BluetoothDevice device = com.googlecode.android_scripting.facade.bluetooth.BluetoothFacade.getDevice ( com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile.getConnectedDevices ( ) , deviceID ) ; byte [ ] reportByteArray = report.getBytes ( ) ; return com.googlecode.android_scripting.facade.bluetooth.BluetoothHidDeviceFacade.sHidDeviceProfile.replyReport ( device , ( ( byte ) ( ( int ) ( type ) ) ) , ( ( byte ) ( ( int ) ( id ) ) ) , reportByteArray ) ; }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , int [ ] data ) { mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , ( ( data.length ) * 4 ) ) ; }
private void switchUser ( int userId ) { mBlacklist.switchUser ( userId ) ; mLocationHandler.removeMessages ( com.android.server.LocationManagerService.MSG_LOCATION_CHANGED ) ; synchronized ( mLock ) { mLastLocation.clear ( ) ; mLastLocationCoarseInterval.clear ( ) ; for ( com.android.server.location.LocationProviderInterface p : mProviders ) { updateProviderListenersLocked ( p.getName ( ) , false , mCurrentUserId ) ; } mCurrentUserId = userId ; updateProvidersLocked ( ) ; } }
public static int MultiplePhis ( ) { int x = 0 ; int y = 1 ; while ( ( y ++ ) < 10 ) { if ( y > 1 ) { x = 13 ; continue ; } else { x = 42 ; continue ; } } return x ; }
public static < T > void sort ( T [ ] a , java.util.Comparator < ? super T > c ) { if ( java.util.Arrays.LegacyMergeSort.userRequested ) java.util.Arrays.legacyMergeSort ( a , c ) ; else java.util.TimSort.sort ( a , c ) ; }
public void testEqualsDuplicated ( ) { try { android.net.LinkProperties source = new android.net.LinkProperties ( ) ; source.addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV4 ) ; source.addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV4 ) ; source.addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV6 ) ; android.net.LinkProperties target = new android.net.LinkProperties ( ) ; target.addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV4 ) ; target.addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV6 ) ; target.addLinkAddress ( android.net.LinkPropertiesTest.LINKADDRV6 ) ; assertLinkPropertiesEqual ( source , target ) ; } catch ( java.lang.Exception e ) { fail ( ) ; } }
public void test_binarySearchLjava_util_ListLjava_lang_Object ( ) { final int llSize = ll.size ( ) ; try { java.util.Collections.binarySearch ( null , new java.lang.Object ( ) ) ; fail ( "Expected NullPointerException for null list parameter" ) ; } catch ( java.lang.NullPointerException e ) { } for ( int counter = 0 ; counter < llSize ; counter ++ ) { assertEquals ( "Returned incorrect binary search item position" , ll.get ( counter ) , ll.get ( java.util.Collections.binarySearch ( ll , ll.get ( counter ) ) ) ) ; } }
public int setAllowedCarriers ( int slotId , java.util.List < android.service.carrier.CarrierIdentifier > carriers ) { try { com.android.internal.telephony.ITelephony service = getITelephony ( ) ; if ( service != null ) { return service.setAllowedCarriers ( slotId , carriers ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.telephony.TelephonyManager.TAG , "Error calling ITelephony#setAllowedCarriers" , e ) ; } return - 1 ; }
public java.lang.String toString ( ) { java.lang.StringBuffer sb = new java.lang.StringBuffer ( 100 ) ; sb.append ( getClass ( ) . getName ( ) ) ; sb.append ( '{' ) ; sb.append ( section.toString ( ) ) ; sb.append ( ' ' ) ; sb.append ( type.toHuman ( ) ) ; sb.append ( '}' ) ; return sb.toString ( ) ; }
public static boolean isConstructorDelegation ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call , @ javax.annotation.Nonnull com.android.jack.ir.ast.JConstructor constructor ) { if ( ( ! ( call.getMethodId ( ) . isInit ( ) ) ) || ( ! ( ( call.getInstance ( ) ) instanceof com.android.jack.ir.ast.JThisRef ) ) ) { return false ; } assert ( call.getDispatchKind ( ) ) == ( JMethodCall.DispatchKind.DIRECT ) ; assert ( constructor.getMethodIdWide ( ) . getKind ( ) ) == ( com.android.jack.ir.ast.MethodKind.INSTANCE_NON_VIRTUAL ) ; return call.getReceiverType ( ) . isSameType ( constructor.getEnclosingType ( ) ) ; }
android.graphics.Bitmap createNotificationBadgeBitmap ( @ android.annotation.NonNull android.net.wifi.WifiConfiguration config , @ android.annotation.NonNull java.util.List < android.net.wifi.ScanResult > scanResults ) { android.net.wifi.ScanResult matchingScanResult = findMatchingScanResult ( scanResults , config ) ; if ( matchingScanResult == null ) { return null ; } int rssi = matchingScanResult.level ; android.net.WifiKey wifiKey = new android.net.WifiKey ( config.SSID , config.BSSID ) ; android.net.ScoredNetwork scoredNetwork = mCachedScoredNetworkProvider.getCachedScoredNetwork ( new android.net.NetworkKey ( wifiKey ) ) ; if ( scoredNetwork != null ) { return getBadgedWifiBitmap ( scoredNetwork.calculateBadge ( rssi ) , rssi ) ; } return null ; }
public void testGetAndSetDefaultUncaughtExceptionHandler ( ) { assertEquals ( null , java.lang.Thread.getDefaultUncaughtExceptionHandler ( ) ) ; java.lang.Thread.UncaughtExceptionHandler defaultHandler = java.lang.Thread.getDefaultUncaughtExceptionHandler ( ) ; jsr166.ThreadTest.MyHandler eh = new jsr166.ThreadTest.MyHandler ( ) ; try { java.lang.Thread.setDefaultUncaughtExceptionHandler ( eh ) ; try { assertSame ( eh , java.lang.Thread.getDefaultUncaughtExceptionHandler ( ) ) ; } finally { java.lang.Thread.setDefaultUncaughtExceptionHandler ( defaultHandler ) ; } } catch ( java.lang.SecurityException ok ) { assertNotNull ( java.lang.System.getSecurityManager ( ) ) ; } assertSame ( defaultHandler , java.lang.Thread.getDefaultUncaughtExceptionHandler ( ) ) ; }
public void copy3DRangeFrom ( int xoff , int yoff , int zoff , int w , int h , int d , java.lang.Object array ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy3DRangeFrom" ) ; copy3DRangeFromUnchecked ( xoff , yoff , zoff , w , h , d , array , validateObjectIsPrimitiveArray ( array , true ) , java.lang.reflect.Array.getLength ( array ) ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
private android.bluetooth.BluetoothGattDescriptor getDescriptor ( ) { android.bluetooth.BluetoothGattDescriptor descriptor = null ; android.bluetooth.BluetoothGattCharacteristic characteristic = getCharacteristic ( com.android.cts.verifier.bluetooth.BleServerService.CHARACTERISTIC_UUID ) ; if ( characteristic != null ) { descriptor = characteristic.getDescriptor ( com.android.cts.verifier.bluetooth.BleServerService.DESCRIPTOR_UUID ) ; if ( descriptor == null ) { showMessage ( "Descriptor not found" ) ; } } return descriptor ; }
public synchronized boolean isDataEnabled ( boolean checkUserDataEnabled ) { return ( ( ( mInternalDataEnabled ) && ( ( ! checkUserDataEnabled ) || ( mUserDataEnabled ) ) ) && ( ( ! checkUserDataEnabled ) || ( mPolicyDataEnabled ) ) ) && ( ( ! checkUserDataEnabled ) || ( mCarrierDataEnabled ) ) ; }
public void testConfigurationUpdatesWhenResizedFromDockedStack ( ) throws java.lang.Exception { if ( ! ( supportsSplitScreenMultiWindow ( ) ) ) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay ( LogLevel.INFO , "Skipping test: no multi-window support" ) ; return ; } launchActivityInStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.DOCKED_STACK_ID ) ; final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.DOCKED_STACK_ID ) ; moveActivityToStack ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize ( android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane ( fullscreenSizes , dockedSizes ) ; }
private void assertParseFailure ( java.lang.String xml ) throws java.lang.Exception { org.xmlpull.v1.XmlPullParser parser = newPullParser ( ) ; parser.setInput ( new java.io.StringReader ( xml ) ) ; try { while ( ( parser.next ( ) ) != ( org.xmlpull.v1.XmlPullParser.END_DOCUMENT ) ) { } fail ( ) ; } catch ( org.xmlpull.v1.XmlPullParserException expected ) { } }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.UnaryExpression x , org.eclipse.jdt.internal.compiler.lookup.BlockScope b ) { int operator = ( ( x.bits ) & ( org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK ) ) > > ( org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT ) ; if ( ( operator == ( org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS ) ) && ( ! ( ( x.expression ) instanceof org.eclipse.jdt.internal.compiler.ast.Literal ) ) ) { hasEcjUnaryPosBug = true ; org.eclipse.jdt.internal.compiler.impl.Constant outer = x.constant ; org.eclipse.jdt.internal.compiler.impl.Constant inner = x.expression.constant ; boolean hasEcjUnaryPosBug = ! ( outer.equals ( inner ) ) ; assert hasEcjUnaryPosBug ; } }
public void addOutput ( byte [ ] data , int offset , int length ) { if ( ! ( isCancelled ( ) ) ) { java.lang.String s = null ; try { s = new java.lang.String ( data , offset , length , "UTF-8" ) ; } catch ( java.io.UnsupportedEncodingException e ) { s = new java.lang.String ( data , offset , length ) ; } mOutputBuffer.append ( s ) ; } }
private void updateUser ( ) { synchronized ( mLock ) { int userId = android.app.ActivityManager.getCurrentUser ( ) ; if ( ( mCurrentUserId ) != userId ) { final int oldUserId = mCurrentUserId ; mCurrentUserId = userId ; com.android.server.media.MediaSessionService.UserRecord oldUser = mUserRecords.get ( oldUserId ) ; if ( oldUser != null ) { oldUser.stopLocked ( ) ; } com.android.server.media.MediaSessionService.UserRecord newUser = getOrCreateUser ( userId ) ; newUser.startLocked ( ) ; } } }
private static boolean isWMVEnabled ( ) { java.util.List < android.media.DecoderCapabilities.VideoDecoder > decoders = android.media.DecoderCapabilities.getVideoDecoders ( ) ; for ( android.media.DecoderCapabilities.VideoDecoder decoder : decoders ) { if ( decoder == ( android.media.DecoderCapabilities.VideoDecoder.VIDEO_DECODER_WMV ) ) { return true ; } } return false ; }
public java.lang.String createNetworkSpecifierOpen ( @ android.annotation.Nullable android.net.wifi.aware.PeerHandle peerHandle ) { if ( mTerminated ) { android.util.Log.w ( android.net.wifi.aware.DiscoverySession.TAG , "createNetworkSpecifierOpen: called on terminated session" ) ; return null ; } else { android.net.wifi.aware.WifiAwareManager mgr = mMgr.get ( ) ; if ( mgr == null ) { android.util.Log.w ( android.net.wifi.aware.DiscoverySession.TAG , "createNetworkSpecifierOpen: called post GC on WifiAwareManager" ) ; return null ; } int role = ( ( this ) instanceof android.net.wifi.aware.SubscribeDiscoverySession ) ? WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_INITIATOR : WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_RESPONDER ; return mgr.createNetworkSpecifier ( mClientId , role , mSessionId , peerHandle , null ) ; } }
void copy3DRangeFromUnchecked ( int xoff , int yoff , int zoff , int w , int h , int d , float [ ] data ) { mRS.validate ( ) ; validate3DRange ( xoff , yoff , zoff , w , h , d ) ; mRS.nAllocationData3D ( getIDSafe ( ) , xoff , yoff , zoff , mSelectedLOD , w , h , d , data , ( ( data.length ) * 4 ) ) ; }
public void processParameterAnnotations ( org.jf.dexlib.MethodIdItem method , org.jf.dexlib.AnnotationSetRefList parameterAnnotations ) { int cptParam = 0 ; for ( org.jf.dexlib.AnnotationSetItem asi : parameterAnnotations.getAnnotationSets ( ) ) { try { processGeneric ( ( ( ( "param " + cptParam ) + " " ) + ( method.getMethodString ( ) ) ) , asi ) ; } catch ( com.android.jack.DifferenceFoundException e ) { throw new java.lang.RuntimeException ( e ) ; } } }
public void generateTestList ( ) { try { java.io.File tests_list = new java.io.File ( com.android.dumprendertree.LayoutTestsAutoTest.LAYOUT_TESTS_LIST_FILE ) ; java.io.BufferedOutputStream bos = new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( tests_list , false ) ) ; com.android.dumprendertree.FsUtils.findLayoutTestsRecursively ( bos , getTestPath ( ) ) ; bos.flush ( ) ; bos.close ( ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( com.android.dumprendertree.LayoutTestsAutoTest.LOGTAG , ( "Error when creating test list: " + ( e.getMessage ( ) ) ) ) ; } }
public void engineSetKeyEntry ( java.lang.String alias , java.security.Key key , char [ ] password , java.security.cert.Certificate [ ] chain ) throws java.security.KeyStoreException { if ( ( password != null ) && ( ( password.length ) > 0 ) ) { throw new java.security.KeyStoreException ( "entries cannot be protected with passwords" ) ; } if ( key instanceof java.security.PrivateKey ) { setPrivateKeyEntry ( alias , ( ( java.security.PrivateKey ) ( key ) ) , chain ) ; } else { throw new java.security.KeyStoreException ( "Only PrivateKeys are supported" ) ; } }
public void test_SSLContext_SSLv3Unsupported ( ) throws java.lang.Exception { try { javax.net.ssl.SSLContext context = javax.net.ssl.SSLContext.getInstance ( "SSLv3" ) ; fail ( "SSLv3 should not be supported" ) ; } catch ( java.security.NoSuchAlgorithmException expected ) { } try { javax.net.ssl.SSLContext context = javax.net.ssl.SSLContext.getInstance ( "SSL" ) ; fail ( "SSL should not be supported" ) ; } catch ( java.security.NoSuchAlgorithmException expected ) { } }
private java.lang.CharSequence getDialerTos ( ) { if ( ! ( isVoicemailTranscriptionEnabled ( ) ) ) { return "" ; } java.lang.String learnMoreText = context.getString ( R.string.dialer_terms_and_conditions_learn_more ) ; return isVvm3 ( ) ? context.getString ( R.string.dialer_terms_and_conditions_for_verizon_1_0 , learnMoreText ) : context.getString ( R.string.dialer_terms_and_conditions_1_0 , learnMoreText ) ; }
private void handleAssociatedBSSIDEvent ( java.lang.String eventStr ) { java.lang.String BSSID = null ; java.util.regex.Matcher match = com.android.server.wifi.WifiMonitor.mAssociatedPattern.matcher ( eventStr ) ; if ( match.find ( ) ) { BSSID = match.group ( 1 ) ; } else { android.util.Log.d ( com.android.server.wifi.WifiMonitor.TAG , ( "handleAssociatedBSSIDEvent: didn't find BSSID " + eventStr ) ) ; } mStateMachine.sendMessage ( WifiStateMachine.CMD_ASSOCIATED_BSSID , com.android.server.wifi.WifiMonitor.eventLogCounter , 0 , BSSID ) ; }
static android.telephony.SignalStrength convertHalSignalStrength ( com.android.internal.telephony.V1_0.SignalStrength signalStrength ) { int tdscdmaRscp_1_2 = 255 ; if ( ( ( signalStrength.tdScdma.rscp ) >= 25 ) && ( ( signalStrength.tdScdma.rscp ) <= 120 ) ) { int rscpDbm = - ( signalStrength.tdScdma.rscp ) ; tdscdmaRscp_1_2 = rscpDbm + 120 ; } return new android.telephony.SignalStrength ( signalStrength.gw.signalStrength , signalStrength.gw.bitErrorRate , signalStrength.cdma.dbm , signalStrength.cdma.ecio , signalStrength.evdo.dbm , signalStrength.evdo.ecio , signalStrength.evdo.signalNoiseRatio , signalStrength.lte.signalStrength , signalStrength.lte.rsrp , signalStrength.lte.rsrq , signalStrength.lte.rssnr , signalStrength.lte.cqi , tdscdmaRscp_1_2 ) ; }
public void propertyChange ( org.eclipse.jface.util.PropertyChangeEvent event ) { if ( event.getSource ( ) . equals ( mUseAdbHost ) ) { mAdbHostValue.setEnabled ( mUseAdbHost.getBooleanValue ( ) , getFieldEditorParent ( ) ) ; } else if ( event.getSource ( ) . equals ( mProfilerBufsize ) ) { com.android.ddmlib.DdmPreferences.setProfilerBufferSizeMb ( mProfilerBufsize.getIntValue ( ) ) ; } }
public void testMethodsGeneratedInDeterministicOrder ( ) throws java.lang.Exception { java.lang.reflect.Method [ ] methods1 = getMethodsForProxyClass ( com.google.dexmaker.stock.ProxyBuilderTest.TestOrderingClass.class ) ; assertNotNull ( methods1 ) ; com.google.dexmaker.stock.Map < java.lang.Class < ? > , java.lang.Class < ? > > map = getGeneratedProxyClasses ( ) ; assertNotNull ( map ) ; map.clear ( ) ; java.lang.reflect.Method [ ] methods2 = getMethodsForProxyClass ( com.google.dexmaker.stock.ProxyBuilderTest.TestOrderingClass.class ) ; assertNotNull ( methods2 ) ; assertTrue ( java.util.Arrays.equals ( methods1 , methods2 ) ) ; }
private static void applyPattern ( int addr , boolean localized , java.lang.String pattern ) { try { libcore.icu.NativeDecimalFormat.applyPatternImpl ( addr , localized , pattern ) ; } catch ( java.lang.NullPointerException npe ) { throw npe ; } catch ( java.lang.RuntimeException re ) { throw new java.lang.IllegalArgumentException ( ( ( ( "syntax error: " + ( re.getMessage ( ) ) ) + ": " ) + pattern ) ) ; } }
private void updateDeviceNumberRow ( ) { if ( ( isInMultiWindowMode ) || ( android.text.TextUtils.isEmpty ( primaryCallState.callbackNumber ) ) ) { deviceNumberTextView.setVisibility ( View.GONE ) ; deviceNumberDivider.setVisibility ( View.GONE ) ; return ; } deviceNumberTextView.setText ( context.getString ( R.string.contact_grid_callback_number , primaryCallState.callbackNumber ) ) ; deviceNumberTextView.setVisibility ( View.VISIBLE ) ; if ( primaryInfo.shouldShowLocation ) { deviceNumberDivider.setVisibility ( View.VISIBLE ) ; } }
public static void blowup ( ) throws java.lang.Exception { int size = ( 32 * 1024 ) * 1024 ; for ( int i = 0 ; i < ( Main.holder.length ) ; ) { try { Main.holder [ i ] = new char [ size ] ; i ++ ; } catch ( java.lang.OutOfMemoryError oome ) { size = size / 2 ; if ( size == 0 ) { break ; } } } Main.holder [ 0 ] = new char [ 100000 ] ; }
public void testSetTextString ( ) { java.text.RuleBasedCollator rbColl = ( ( java.text.RuleBasedCollator ) ( java.text.Collator.getInstance ( new java.util.Locale ( "es" , "" , "TRADITIONAL" ) ) ) ) ; java.lang.String text = "caa" ; java.text.CollationElementIterator iterator = rbColl.getCollationElementIterator ( text ) ; iterator.setOffset ( 1 ) ; assertEquals ( 1 , iterator.getOffset ( ) ) ; iterator.setText ( "cha" ) ; iterator.setOffset ( 1 ) ; assertEquals ( 0 , iterator.getOffset ( ) ) ; }
public com.android.jack.shrob.obfuscation.nameprovider.NameProvider getMethodNameProvider ( @ javax.annotation.Nonnull java.util.Collection < com.android.jack.ir.ast.JMethodId > methodIds ) throws com.android.jack.JackIOException { com.android.jack.shrob.obfuscation.nameprovider.NameProvider provider ; if ( ( globalMethodNameProvider ) != null ) { provider = globalMethodNameProvider ; } else { java.util.Set < java.lang.String > existingNames = new java.util.HashSet < java.lang.String > ( ) ; fillExistingName ( methodIds , existingNames ) ; provider = new com.android.jack.shrob.obfuscation.nameprovider.UniqueNameProvider ( getNameProvider ( obfuscationDictionary ) , existingNames ) ; } return provider ; }
static boolean native_preRotate ( int native_object , float degrees , float px , float py ) { android.graphics.Matrix_Delegate d = android.graphics.Matrix_Delegate.sManager.getDelegate ( native_object ) ; if ( d == null ) { return false ; } d.preTransform ( android.graphics.Matrix_Delegate.getRotate ( degrees , px , py ) ) ; return true ; }
void dumpAppTokensLocked ( ) { for ( int i = ( mAppTokens.size ( ) ) - 1 ; i >= 0 ; i -- ) { android.util.Log.v ( com.android.server.WindowManagerService.TAG , ( ( ( " #" + i ) + ": " ) + ( mAppTokens.get ( i ) . token ) ) ) ; } }
public void testSetTestClassWithTestSuiteProvider ( ) throws java.lang.Exception { mAndroidTestRunner.setTestClassName ( android.test.AndroidTestRunnerTest.SampleTestSuiteProvider.class . getName ( ) , null ) ; java.util.List < junit.framework.TestCase > testCases = mAndroidTestRunner.getTestCases ( ) ; java.util.List < java.lang.String > testNames = com.google.android.collect.Lists.newArrayList ( ) ; for ( junit.framework.TestCase testCase : testCases ) { testNames.add ( testCase.getName ( ) ) ; } assertEquals ( java.util.Arrays.asList ( "testOne" ) , testNames ) ; }
public static java.lang.String getGcpUrl ( com.google.gct.login.CredentialedUser user , java.lang.String projectId ) { com.google.api.services.source.Source sourceRepos = new com.google.api.services.source.Source.Builder ( new com.google.api.client.http.javanet.NetHttpTransport ( ) , new com.google.api.client.json.jackson2.JacksonFactory ( ) , user.getCredential ( ) ) . setApplicationName ( "Android Studio" ) . build ( ) ; java.lang.String calculatedUrl = ( "https://source.developers.google.com/p/" + projectId ) + "/" ; try { com.google.api.services.source.model.ListReposResponse response = sourceRepos.repos ( ) . list ( projectId ) . execute ( ) ; if ( ( response != null ) && ( ( response.getRepos ( ) ) != null ) ) { for ( com.google.api.services.source.model.Repo repo : response.getRepos ( ) ) { if ( "default" . equalsIgnoreCase ( repo.getRepoName ( ) ) ) { calculatedUrl = repo.getCloneUrl ( ) ; } } } } catch ( java.lang.Exception e ) { com.google.gct.idea.git.GcpHttpAuthDataProvider.LOG.error ( ( "Exception loading repo url for " + projectId ) , e ) ; } if ( com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty ( calculatedUrl ) ) { com.google.gct.idea.git.GcpHttpAuthDataProvider.LOG.error ( ( "Exception loading repo url for " + projectId ) ) ; } return calculatedUrl ; }
public void afterHandshake ( long session , long s , long c , java.net.Socket sock , java.io.FileDescriptor fd , org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [ ] buffer = new byte [ 1 ] ; org.conscrypt.NativeCrypto.SSL_read ( s , fd , callback , buffer , 0 , 1 , 0 ) ; assertEquals ( 42 , buffer [ 0 ] ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public void widgetDisposed ( org.eclipse.swt.events.DisposeEvent e ) { model.removeImageChangeListener ( this ) ; if ( ( image ) != null ) { image.dispose ( ) ; } crosshairColor.dispose ( ) ; transform.dispose ( ) ; if ( ( grid ) != null ) { grid.dispose ( ) ; } }
static boolean native_postSkew ( int native_object , float kx , float ky , float px , float py ) { android.graphics.Matrix_Delegate d = android.graphics.Matrix_Delegate.sManager.getDelegate ( native_object ) ; if ( d == null ) { return false ; } d.postTransform ( android.graphics.Matrix_Delegate.getSkew ( kx , ky , px , py ) ) ; return true ; }
private void expandRegister ( int regIdx , com.android.jack.dx.rop.code.RegisterSpec registerToExpand ) { boolean replace = ( ( compatRegs ) == null ) ? true : ! ( compatRegs.get ( regIdx ) ) ; com.android.jack.dx.rop.code.RegisterSpec expandedReg ; if ( replace ) { expandedReg = registerToExpand.withReg ( base ) ; if ( ! ( duplicateFirst ) ) { base += expandedReg.getCategory ( ) ; } duplicateFirst = false ; } else { expandedReg = registerToExpand ; } result.set0 ( regIdx , expandedReg ) ; }
public static int $noinline$runSmaliTest ( java.lang.String name , boolean input ) { if ( Main.doThrow ) { throw new java.lang.Error ( ) ; } try { java.lang.Class < ? > c = java.lang.Class.forName ( "SmaliTests" ) ; java.lang.reflect.Method m = c.getMethod ( name , new java.lang.Class [ ] { boolean . class } ) ; return ( ( java.lang.Integer ) ( m.invoke ( null , input ) ) ) ; } catch ( java.lang.Exception ex ) { throw new java.lang.Error ( ex ) ; } }
public void loadQuickContactBadge ( android.widget.QuickContactBadge badge , com.android.dialer.glidephotomanager.PhotoInfo photoInfo ) { com.android.dialer.common.Assert.isMainThread ( ) ; badge.assignContactUri ( com.android.dialer.glidephotomanager.impl.GlidePhotoManagerImpl.parseUri ( photoInfo.lookupUri ( ) ) ) ; badge.setOverlay ( null ) ; com.android.dialer.lettertile.LetterTileDrawable defaultDrawable = getDefaultDrawable ( photoInfo ) ; com.android.dialer.glide.GlideRequest < android.graphics.drawable.Drawable > request = buildRequest ( com.android.dialer.glide.GlideApp.with ( badge ) , photoInfo ) . placeholder ( defaultDrawable ) . fallback ( defaultDrawable ) ; if ( photoInfo.isCircular ( ) ) { request.circleCrop ( ) ; } request.into ( badge ) ; }
void test ( ) { java.util.List < java.lang.String > result = new java.util.ArrayList ( com.android.cts.verifier.notifications.MockListener.MockListener.getInstance ( ) . mPosted ) ; if ( ( result.size ( ) ) == 0 ) { status = PASS ; } else { logFail ( ) ; status = FAIL ; } next ( ) ; }
public static android.renderscript.Element I16_4 ( android.renderscript.RenderScript rs ) { if ( ( rs.mElement_SHORT_4 ) == null ) { rs.mElement_SHORT_4 = android.renderscript.Element.createVector ( rs , android.renderscript.Element.DataType.SIGNED_16 , 4 ) ; } return rs.mElement_SHORT_4 ; }
public java.lang.String substring ( int beginIndex ) { if ( beginIndex < 0 ) { throw new java.lang.StringIndexOutOfBoundsException ( this , beginIndex ) ; } int subLen = ( count ) - beginIndex ; if ( subLen < 0 ) { throw new java.lang.StringIndexOutOfBoundsException ( this , beginIndex ) ; } return beginIndex == 0 ? this : fastSubstring ( beginIndex , subLen ) ; }
public void testParseICMPv6NS ( ) { final java.lang.String packet = "807ABF6F48F3 100E7E263FC1 86DD" + ( ( ( ( ( ( "6C0000000020 3A FF" + "FE80000000000000FA000004FD000001" ) + "FF0200000000000000000001FF01C146" ) + "87 00 8AD4" ) + "00000000" ) + "2401FA000004FD0015EA6A5C7B01C146" ) + "01 01 00005E000265" ) ; final java.lang.String expected = "RX 10:0e:7e:26:3f:c1 > 80:7a:bf:6f:48:f3 ipv6" + ( " fe80::fa00:4:fd00:1 > ff02::1:ff01:c146 icmp6" + " ns 2401:fa00:4:fd00:15ea:6a5c:7b01:c146 slla 00:00:5e:00:02:65" ) ; assertEquals ( expected , getSummary ( packet ) ) ; }
public void tearDown ( com.android.tradefed.device.ITestDevice device , com.android.tradefed.build.IBuildInfo buildInfo , java.lang.Throwable e ) throws com.android.tradefed.device.DeviceNotAvailableException { if ( ! ( mEnforcingState.equals ( com.android.tradefed.targetprep.VtsCoveragePreparer.SELINUX_DISABLED ) ) ) { device.executeShellCommand ( ( "setenforce " + ( mEnforcingState ) ) ) ; } if ( ( mDeviceInfoPath ) != null ) { com.android.tradefed.util.FileUtil.recursiveDelete ( mDeviceInfoPath ) ; device.executeShellCommand ( ( "rm -r " + ( com.android.tradefed.targetprep.VtsCoveragePreparer.COVERAGE_CONFIGURE_DST ) ) ) ; } device.executeShellCommand ( "rm -rf /data/misc/trace/*" ) ; }
protected < DST extends com.android.sched.item.Component > java.util.Iterator < DST > adaptWithLog ( @ javax.annotation.Nonnull com.android.sched.schedulable.AdapterSchedulable < T , DST > adapter , @ javax.annotation.Nonnull T data ) throws java.lang.Exception { com.android.sched.scheduler.ManagedSchedulable managedSchedulable = schedulableManager.getManagedSchedulable ( adapter.getClass ( ) ) ; com.android.sched.util.log.Event event = logAndTrace ( adapter , managedSchedulable ) ; try { return adapter.adapt ( data ) ; } finally { event.end ( ) ; } }
public void run ( final com.android.cts.TestDevice device , android.annotation.cts.Profile profile ) throws com.android.cts.ADBServerNeedRestartException , com.android.cts.DeviceDisconnectedException { mTestStop = false ; java.util.Iterator < com.android.cts.Test > tests = getTests ( ) . iterator ( ) ; while ( ( tests.hasNext ( ) ) && ( ! ( mTestStop ) ) ) { mCurrentTest = tests.next ( ) ; if ( mCurrentTest.getResult ( ) . isNotExecuted ( ) ) { mCurrentTest.run ( device , profile ) ; } } }
public static android.net.wifi.WifiConfiguration generateWifiConfig ( int networkId , int uid , java.lang.String ssid , boolean shared , boolean enabled , java.lang.String fqdn , java.lang.String providerFriendlyName ) { final android.net.wifi.WifiConfiguration config = new android.net.wifi.WifiConfiguration ( ) ; config.SSID = ssid ; config.networkId = networkId ; config.creatorUid = uid ; config.shared = shared ; config.status = ( enabled ) ? WifiConfiguration.Status.ENABLED : WifiConfiguration.Status.DISABLED ; if ( fqdn != null ) { config.FQDN = fqdn ; config.providerFriendlyName = providerFriendlyName ; config.enterpriseConfig.setEapMethod ( WifiEnterpriseConfig.Eap.SIM ) ; } return config ; }
public void test_group ( ) throws java.lang.Throwable { java.nio.channels.spi.AsynchronousChannelProvider provider = java.nio.channels.spi.AsynchronousChannelProvider.provider ( ) ; java.nio.channels.AsynchronousChannelGroup group = provider.openAsynchronousChannelGroup ( 2 , java.util.concurrent.Executors.defaultThreadFactory ( ) ) ; java.nio.channels.AsynchronousServerSocketChannel assc = java.nio.channels.AsynchronousServerSocketChannel.open ( group ) ; assertNull ( assc.getLocalAddress ( ) ) ; assc.bind ( new java.net.InetSocketAddress ( 0 ) ) ; assertNotNull ( assc.getLocalAddress ( ) ) ; assc.close ( ) ; }
protected void engineInit ( java.security.Key key , java.security.spec.AlgorithmParameterSpec params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { if ( ( params != null ) && ( ! ( ( params instanceof org.bouncycastle.jcajce.spec.MQVParameterSpec ) || ( params instanceof org.bouncycastle.jcajce.spec.UserKeyingMaterialSpec ) ) ) ) { throw new java.security.InvalidAlgorithmParameterException ( "No algorithm parameters supported" ) ; } initFromKey ( key , params ) ; }
public com.google.common.util.concurrent.ListenableFuture < com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo > lookup ( @ android.support.annotation.NonNull com.android.dialer.DialerPhoneNumber number ) { if ( ! ( com.android.dialer.blocking.FilteredNumberCompat.useNewFiltering ( appContext ) ) ) { return com.google.common.util.concurrent.Futures.immediateFuture ( com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo.getDefaultInstance ( ) ) ; } return executorService.submit ( ( ) -> { return queryNumbers ( com.google.common.collect.ImmutableSet.of ( number ) ) . get ( number ) ; } ) ; }
public boolean setP2pGroupIdle ( java.lang.String iface , int time ) { if ( ( com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE ) && ( ( mSupplicantP2pIfaceHal ) != null ) ) { return mSupplicantP2pIfaceHal.setGroupIdle ( iface , time ) ; } else { synchronized ( com.android.server.wifi.WifiNative.sLock ) { return doBooleanCommandNative ( ( ( ( "IFNAME=" + iface ) + " SET p2p_group_idle " ) + time ) ) ; } } }
private com.android.jack.ir.ast.JDefinedClassOrInterface getAccessorClassForSuperCall ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface declaringType ) { com.android.jack.ir.ast.JDefinedClass enclosing = ( ( com.android.jack.ir.ast.JDefinedClass ) ( currentType ) ) ; while ( ! ( com.android.jack.transformations.ast.inner.InnerAccessorGenerator.isSuperClassOf ( ( ( com.android.jack.ir.ast.JDefinedClass ) ( declaringType ) ) , enclosing ) ) ) { enclosing = ( ( com.android.jack.ir.ast.JDefinedClass ) ( enclosing.getEnclosingType ( ) ) ) ; } return enclosing ; }
public com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult getContrastResultForNormalText ( ) { if ( ( mIsBold ) && ( ( mTextSize ) >= ( com.android.hierarchyviewerlib.models.EvaluateContrastModel.NORMAL_TEXT_BOLD_SZ_PTS ) ) ) { return getContrastResultForLargeText ( ) ; } return ( mContrastRatio ) >= ( com.android.hierarchyviewerlib.models.EvaluateContrastModel.CONTRAST_RATIO_NORMAL_TEXT ) ? com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult.PASS : com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult.FAIL ; }
public void test_socket_accept_Blocking_Bound ( ) throws java.io.IOException { serverChannel.configureBlocking ( true ) ; serverChannel.bind ( null ) ; serverChannel.close ( ) ; try { serverChannel.socket ( ) . accept ( ) ; fail ( "Should throw a ClosedChannelException" ) ; } catch ( java.nio.channels.ClosedChannelException expected ) { } }
public int getModifiers ( ) { if ( isArray ( ) ) { int componentModifiers = getComponentType ( ) . getModifiers ( ) ; if ( ( componentModifiers & ( java.lang.reflect.Modifier.INTERFACE ) ) != 0 ) { componentModifiers &= ~ ( ( java.lang.reflect.Modifier.INTERFACE ) | ( java.lang.reflect.Modifier.STATIC ) ) ; } return ( ( java.lang.reflect.Modifier.ABSTRACT ) | ( java.lang.reflect.Modifier.FINAL ) ) | componentModifiers ; } int JAVA_FLAGS_MASK = 65535 ; int modifiers = libcore.reflect.AnnotationAccess.getInnerClassFlags ( this , ( ( accessFlags ) & JAVA_FLAGS_MASK ) ) ; return modifiers & JAVA_FLAGS_MASK ; }
public static java.lang.String hex ( char [ ] s ) { java.lang.StringBuffer result = new java.lang.StringBuffer ( ) ; for ( int i = 0 ; i < ( s.length ) ; ++ i ) { if ( i != 0 ) result.append ( ',' ) ; result.append ( com.ibm.icu.dev.test.TestFmwk.hex ( s [ i ] ) ) ; } return result.toString ( ) ; }
static void setInt ( java.lang.invoke.MethodHandle m , Main.ValueHolder v , int value , boolean expectFailure ) throws java.lang.Throwable { boolean exceptionThrown = false ; try { if ( v == null ) { m.invokeExact ( value ) ; } else { m.invokeExact ( v , value ) ; } } catch ( java.lang.invoke.WrongMethodTypeException e ) { exceptionThrown = true ; } Main.Tester.assertActualAndExpectedMatch ( exceptionThrown , expectFailure ) ; }
public static java.lang.String toString ( java.util.Vector < android.hardware.tests.baz.V1_0.IBase.Foo.Bar > vec ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; builder.append ( "[" ) ; for ( int i = 0 ; i < ( vec.size ( ) ) ; ++ i ) { if ( i > 0 ) { builder.append ( ", " ) ; } builder.append ( com.android.commands.hidl_test_java.HidlTestJava.toString ( vec.elementAt ( i ) ) ) ; } builder.append ( "]" ) ; return builder.toString ( ) ; }
public void testSortByApi_Empty ( ) { m.updateStart ( ) ; assertFalse ( m.updateSourcePackages ( true , null , new java.lang.Package [ 0 ] ) ) ; assertFalse ( m.updateEnd ( true ) ) ; assertEquals ( ( "PkgCategoryApi <API=TOOLS, label=Tools, #items=0>\n" + "PkgCategoryApi <API=EXTRAS, label=Extras, #items=0>\n" ) , getTree ( m , true ) ) ; }
public void afterCheckProject ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context ) { if ( ( ( mLocation ) != null ) && ( ! ( mIgnore ) ) ) { java.lang.String message = ( ( "Potentially insecure random numbers on Android 4.3 and older. " + "Read " ) + ( com.android.tools.lint.checks.SecureRandomGeneratorDetector.BLOG_URL ) ) + " for more info." ; context.report ( com.android.tools.lint.checks.SecureRandomGeneratorDetector.ISSUE , mLocation , message , null ) ; } }
public boolean isInCall ( android.content.Context context ) { if ( com.android.dialer.telecom.TelecomUtil.hasReadPhoneStatePermission ( context ) ) { if ( ( android.os.Build.VERSION.SDK_INT ) >= ( android.os.Build.VERSION_CODES.O ) ) { return com.android.dialer.telecom.TelecomUtil.getTelecomManager ( context ) . isInManagedCall ( ) ; } else { return com.android.dialer.telecom.TelecomUtil.getTelecomManager ( context ) . isInCall ( ) ; } } return false ; }
public final void testCreateDup ( ) { com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ved = new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ( "xml" , "com.example.MyJavaClass" ) ; com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode uiv = new com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode ( ved ) ; com.android.ide.common.rendering.api.ViewInfo lvi = new com.android.ide.common.rendering.api.ViewInfo ( "name" , uiv , 10 , 12 , 110 , 120 ) ; com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo cvi = com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo.create ( lvi ) . getFirst ( ) ; com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy1 = m.create ( cvi ) ; com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy2 = m.create ( cvi ) ; assertSame ( proxy2 , proxy1 ) ; }
private void processConnectionEvent ( int state , android.bluetooth.BluetoothDevice device ) { switch ( state ) { case HeadsetClientHalConstants.CONNECTION_STATE_DISCONNECTED : if ( mCurrentDevice.equals ( device ) ) { processAudioEvent ( HeadsetClientHalConstants.AUDIO_STATE_DISCONNECTED , device ) ; broadcastConnectionState ( mCurrentDevice , BluetoothProfile.STATE_DISCONNECTED , BluetoothProfile.STATE_CONNECTED ) ; transitionTo ( mDisconnected ) ; } else { android.util.Log.e ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( "Disconnected from unknown device: " + device ) ) ; } break ; default : android.util.Log.e ( com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG , ( ( ( "Connection State Device: " + device ) + " bad state: " ) + state ) ) ; break ; } }
public java.lang.String wifiAwareCreateNetworkSpecifier ( @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "role" , description = "The role of the device: Initiator (0) or Responder (1)" ) java.lang.Integer role , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "sessionId" , description = "The session ID returned when session was created using publish or subscribe" ) java.lang.Integer sessionId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "peerId" , description = "The ID of the peer (obtained through OnMatch or OnMessageReceived" ) java.lang.Integer peerId , @ com.googlecode.android_scripting.rpc.RpcParameter ( name = "token" , description = "Arbitrary token message to be sent to peer as part of data-path creation process" ) java.lang.String token ) { android.net.wifi.aware.WifiAwareDiscoveryBaseSession session ; synchronized ( mLock ) { session = mDiscoverySessions.get ( sessionId ) ; } if ( session == null ) { throw new java.lang.IllegalStateException ( ( ( "Calling WifiAwareStartRanging before session (session ID " + sessionId ) + " is ready" ) ) ; } byte [ ] bytes = token.getBytes ( ) ; return session.createNetworkSpecifier ( role , new android.net.wifi.aware.WifiAwareManager.PeerHandle ( peerId ) , bytes ) ; }
public static int Min2Print6 ( int a , int b , int c , int d , int e , int f ) { int [ ] values = new int [ ] { a , b , c , d , e , f } ; java.lang.System.err.println ( ( ( "Running Main.Min2Print6(" + ( java.util.Arrays.toString ( values ) ) ) + ")" ) ) ; return a > b ? a : b ; }
public T getDelegate ( int native_object ) { if ( native_object > 0 ) { T delegate = mDelegates.get ( native_object ) ; if ( com.android.layoutlib.bridge.util.Debug.DEBUG ) { if ( delegate == null ) { java.lang.System.out.println ( ( ( ( "Unknown " + ( mClass.getSimpleName ( ) ) ) + " with int " ) + native_object ) ) ; } } assert delegate != null ; return delegate ; } return null ; }
private static java.nio.charset.Charset lookup ( java.lang.String charsetName ) { if ( charsetName == null ) throw new java.lang.IllegalArgumentException ( "Null charset name" ) ; if ( ( ( java.nio.charset.Charset.cache1 ) != null ) && ( charsetName.equals ( java.nio.charset.Charset.cache1.getKey ( ) ) ) ) return java.nio.charset.Charset.cache1.getValue ( ) ; return java.nio.charset.Charset.lookup2 ( charsetName ) ; }
protected java.lang.String listingString0 ( boolean noteIndices ) { int baseAddress = user.getAddress ( ) ; java.lang.StringBuffer sb = new java.lang.StringBuffer ( 100 ) ; int sz = targets.length ; sb.append ( ( packed ? "packed" : "sparse" ) ) ; sb.append ( "-switch-payload // for switch @ " ) ; sb.append ( com.android.dx.util.Hex.u2 ( baseAddress ) ) ; for ( int i = 0 ; i < sz ; i ++ ) { int absTarget = targets [ i ] . getAddress ( ) ; int relTarget = absTarget - baseAddress ; sb.append ( "\n " ) ; sb.append ( cases.get ( i ) ) ; sb.append ( ": " ) ; sb.append ( com.android.dx.util.Hex.u4 ( absTarget ) ) ; sb.append ( " // " ) ; sb.append ( com.android.dx.util.Hex.s4 ( relTarget ) ) ; } return sb.toString ( ) ; }
public com.google.gct.testing.GoogleCloudTestingConfiguration copy ( java.lang.String prefix ) { com.google.gct.testing.GoogleCloudTestingConfiguration newConfiguration = new com.google.gct.testing.GoogleCloudTestingConfiguration ( ( prefix + ( name ) ) , icon , facet ) ; newConfiguration.deviceDimension.enableAll ( deviceDimension.getEnabledTypes ( ) ) ; newConfiguration.apiDimension.enableAll ( apiDimension.getEnabledTypes ( ) ) ; newConfiguration.languageDimension.enableAll ( languageDimension.getEnabledTypes ( ) ) ; newConfiguration.orientationDimension.enableAll ( orientationDimension.getEnabledTypes ( ) ) ; return newConfiguration ; }
public void test_getURIs ( ) throws java.net.URISyntaxException { java.util.List < java.net.URI > list = cookieStore.getURIs ( ) ; assertTrue ( list.isEmpty ( ) ) ; assertTrue ( ( list instanceof java.util.ArrayList ) ) ; java.net.URI uri1 = new java.net.URI ( "http://geturis1.test.com" ) ; java.net.HttpCookie cookie1 = new java.net.HttpCookie ( "cookie_name1" , "cookie_value1" ) ; cookieStore.add ( uri1 , cookie1 ) ; list = cookieStore.getURIs ( ) ; assertEquals ( "geturis1.test.com" , list.get ( 0 ) . getHost ( ) ) ; java.net.HttpCookie cookie2 = new java.net.HttpCookie ( "cookie_name2" , "cookie_value2" ) ; cookieStore.add ( uri1 , cookie2 ) ; list = cookieStore.getURIs ( ) ; assertEquals ( 1 , list.size ( ) ) ; java.net.URI uri2 = new java.net.URI ( "http://geturis2.test.com" ) ; cookieStore.add ( uri2 , cookie2 ) ; list = cookieStore.getURIs ( ) ; assertEquals ( 2 , list.size ( ) ) ; assertTrue ( list.contains ( uri1 ) ) ; assertTrue ( list.contains ( uri2 ) ) ; }
public org.w3c.dom.Document parse ( @ com.android.annotations.NonNull byte [ ] data ) throws java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { java.lang.String xml = com.android.utils.PositionXmlParser.getXmlString ( data ) ; xml = com.android.utils.XmlUtils.stripBom ( xml ) ; return parse ( xml , new org.xml.sax.InputSource ( new java.io.StringReader ( xml ) ) , true ) ; }
public void testAddObserverReturnValue ( ) { org.chromium.base.ObserverList < java.lang.Object > observerList = new org.chromium.base.ObserverList < java.lang.Object > ( ) ; java.lang.Object a = new java.lang.Object ( ) ; org.junit.Assert.assertTrue ( observerList.addObserver ( a ) ) ; org.junit.Assert.assertFalse ( observerList.addObserver ( a ) ) ; java.lang.Object b = new java.lang.Object ( ) ; org.junit.Assert.assertTrue ( observerList.addObserver ( b ) ) ; org.junit.Assert.assertFalse ( observerList.addObserver ( null ) ) ; }
public static byte [ ] convert ( java.lang.String bpf ) throws android.net.apf.ApfGenerator.IllegalInstructionException { android.net.apf.ApfGenerator gen = new android.net.apf.ApfGenerator ( ) ; for ( java.lang.String line : bpf.split ( "\\n" ) ) android.net.apf.Bpf2Apf.convertLine ( line , gen ) ; return gen.generate ( ) ; }
public boolean setOperatorBrandOverride ( java.lang.String brand ) { try { com.android.internal.telephony.ITelephony telephony = getITelephony ( ) ; if ( telephony != null ) return telephony.setOperatorBrandOverride ( brand ) ; } catch ( android.os.RemoteException ex ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , "setOperatorBrandOverride RemoteException" , ex ) ; } catch ( java.lang.NullPointerException ex ) { android.telephony.Rlog.e ( android.telephony.TelephonyManager.TAG , "setOperatorBrandOverride NPE" , ex ) ; } return false ; }
private java.text.DateFormat getTimeFormat ( ) { int res ; android.content.Context context = getContext ( ) ; if ( android.text.format.DateFormat.is24HourFormat ( context ) ) { res = R.string.twenty_four_hour_time_format ; } else { res = R.string.twelve_hour_time_format ; } java.lang.String format = context.getString ( res ) ; return new java.text.SimpleDateFormat ( format ) ; }
java.lang.String getRemoteName ( android.bluetooth.BluetoothDevice device ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; com.android.bluetooth.btservice.RemoteDevices.DeviceProperties deviceProp = mRemoteDevices.getDeviceProperties ( device ) ; if ( deviceProp == null ) return null ; return deviceProp.getName ( ) ; }
private static void checkFromToBounds ( int arrayLength , int origin , int fence ) { if ( origin > fence ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( "origin(" + origin ) + ") > fence(" ) + fence ) + ")" ) ) ; } if ( origin < 0 ) { throw new java.lang.ArrayIndexOutOfBoundsException ( origin ) ; } if ( fence > arrayLength ) { throw new java.lang.ArrayIndexOutOfBoundsException ( fence ) ; } }
public void test_formatLjava_util_Date ( ) { try { java.text.DateFormat format = java.text.DateFormat.getDateTimeInstance ( java.text.DateFormat.SHORT , java.text.DateFormat.SHORT , java.util.Locale.US ) ; java.util.Date current = new java.util.Date ( ) ; java.lang.String dtf = format.format ( current ) ; java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat ( "M/d/yy h:mm a" ) ; assertTrue ( "Incorrect date format" , sdf.format ( current ) . equals ( dtf ) ) ; } catch ( java.lang.Exception e ) { fail ( ( "Unexpected exception " + ( e.toString ( ) ) ) ) ; } }
public final java.lang.String toHuman ( ) { java.lang.StringBuffer sb = new java.lang.StringBuffer ( 100 ) ; boolean first = true ; sb.append ( "{" ) ; for ( com.android.dx.dex.file.OffsettedItem i : items ) { if ( first ) { first = false ; } else { sb.append ( ", " ) ; } sb.append ( i.toHuman ( ) ) ; } sb.append ( "}" ) ; return sb.toString ( ) ; }
public void onClick ( android.content.DialogInterface dialog , int which ) { switch ( which ) { case android.content.DialogInterface.BUTTON_POSITIVE : com.android.bluetooth.opp.BluetoothOppManager mOppManager = com.android.bluetooth.opp.BluetoothOppManager.getInstance ( this ) ; mOppManager.enableBluetooth ( ) ; mOppManager.mSendingFlag = true ; android.widget.Toast.makeText ( this , getString ( R.string.enabling_progress_content ) , Toast.LENGTH_SHORT ) . show ( ) ; android.content.Intent in = new android.content.Intent ( this , com.android.bluetooth.opp.BluetoothOppBtEnablingActivity.class ) ; in.setFlags ( Intent.FLAG_ACTIVITY_NEW_TASK ) ; this . startActivity ( in ) ; finish ( ) ; break ; case android.content.DialogInterface.BUTTON_NEGATIVE : finish ( ) ; break ; } }
private static void addProperties ( @ javax.annotation.Nonnull java.util.Map < java.lang.String , java.lang.String > properties , @ javax.annotation.Nonnull java.util.List < java.lang.String > args ) { for ( java.util.Map.Entry < java.lang.String , java.lang.String > entry : properties.entrySet ( ) ) { args.add ( "-D" ) ; args.add ( ( ( ( entry.getKey ( ) ) + "=" ) + ( entry.getValue ( ) ) ) ) ; } }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.SuperReference x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.ast.JClass superClass ; assert ( ( superClass = curClass.classType.getSuperClass ( ) ) == null ) || ( getTypeMap ( ) . get ( x.resolvedType ) . isSameType ( superClass ) ) ; push ( makeThisRef ( makeSourceInfo ( x ) ) ) ; } catch ( java.lang.Throwable e ) { throw translateException ( x , e ) ; } }
public void afterHandshake ( int session , int s , int c , java.net.Socket sock , java.io.FileDescriptor fd , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertEqualCertificateChains ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.getServerCertificates ( ) , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_get_certificate ( s ) ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public void test_isLetterOrDigitC ( ) { assertTrue ( "Digit returned false" , java.lang.Character.isLetterOrDigit ( '9' ) ) ; assertTrue ( "Letter returned false" , java.lang.Character.isLetterOrDigit ( 'K' ) ) ; assertTrue ( "Control returned true" , ( ! ( java.lang.Character.isLetterOrDigit ( '\n' ) ) ) ) ; assertTrue ( "Punctuation returned true" , ( ! ( java.lang.Character.isLetterOrDigit ( '?' ) ) ) ) ; }
public void test_parkUntil_3 ( ) { java.util.concurrent.CyclicBarrier barrier = new java.util.concurrent.CyclicBarrier ( 2 ) ; tests.api.org.apache.harmony.kernel.dalvik.ThreadsTest.Parker parker = new tests.api.org.apache.harmony.kernel.dalvik.ThreadsTest.Parker ( barrier , true , 1000 ) ; java.lang.Thread parkerThread = new java.lang.Thread ( parker ) ; tests.api.org.apache.harmony.kernel.dalvik.ThreadsTest.UNSAFE.unpark ( parkerThread ) ; parkerThread.start ( ) ; parker.assertDurationIsInRange ( 0 ) ; }
public void afterHandshake ( int session , int s , int c , java.net.Socket sock , java.io.FileDescriptor fd , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { java.lang.String v = org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_SESSION_get_version ( session ) ; assertTrue ( StandardNames.SSL_SOCKET_PROTOCOLS.contains ( v ) ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public boolean contains ( @ javax.annotation.Nullable java.lang.Object rowKey , @ javax.annotation.Nullable java.lang.Object columnKey ) { if ( ( rowKey == null ) || ( columnKey == null ) ) { return false ; } java.util.Map < C , V > map = com.google.common.collect.Maps.safeGet ( backingMap , rowKey ) ; return ( map != null ) && ( com.google.common.collect.Maps.safeContainsKey ( map , columnKey ) ) ; }
public synchronized boolean enable ( boolean quietMode ) { enforceCallingOrSelfPermission ( com.android.bluetooth.btservice.AdapterService.BLUETOOTH_ADMIN_PERM , "Need BLUETOOTH ADMIN permission" ) ; if ( mUserManager.hasUserRestriction ( UserManager.DISALLOW_BLUETOOTH , UserHandle.SYSTEM ) ) { debugLog ( "enable() called when Bluetooth was disallowed" ) ; return false ; } debugLog ( ( "enable() - Enable called with quiet mode status = " + quietMode ) ) ; mQuietmode = quietMode ; android.os.Message m = mAdapterStateMachine.obtainMessage ( AdapterState.BLE_TURN_ON ) ; mAdapterStateMachine.sendMessage ( m ) ; return true ; }
public static void checkStructure ( @ javax.annotation.CheckForNull java.io.File [ ] bootclasspath , @ javax.annotation.CheckForNull java.io.File [ ] classpath , @ javax.annotation.Nonnull java.io.File fileOrSourceList , boolean withDebugInfo ) throws java.lang.Exception { com.android.jack.TestTools.checkStructure ( bootclasspath , classpath , fileOrSourceList , withDebugInfo , false , 0.0F , ( ( com.android.jack.JarJarRules ) ( null ) ) , ( ( com.android.jack.ProguardFlags [ ] ) ( null ) ) ) ; }
public void notifyChanged ( ) { if ( ( listeners ) != null ) { synchronized ( notifyLock ) { if ( ( listeners ) != null ) { if ( ( notifyThread ) == null ) { notifyThread = new android.icu.impl.ICUNotifier.NotifyThread ( this ) ; notifyThread.setDaemon ( true ) ; notifyThread.start ( ) ; } notifyThread.queue ( listeners.toArray ( new java.util.EventListener [ listeners.size ( ) ] ) ) ; } } } }
private long readId ( ) throws java.io.IOException { switch ( mIdSize ) { case 1 : return mInput.readUnsignedByte ( ) ; case 2 : return mInput.readUnsignedShort ( ) ; case 4 : return ( ( long ) ( mInput.readInt ( ) ) ) & 4294967295L ; case 8 : return mInput.readLong ( ) ; } throw new java.lang.IllegalArgumentException ( "ID Length must be 1, 2, 4, or 8" ) ; }
public void testWrapperCleanup ( ) { android.os.TestLooperManager looperManager = new android.os.TestLooperManager ( mThread.getLooper ( ) ) ; com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap ( mMockController , mThread.getLooper ( ) , false ) ; wrapper.registerCallback ( mTestCbs ) ; wrapper.cleanup ( ) ; verify ( mMockController ) . unregisterCallback ( any ( ) ) ; org.junit.Assert.assertNull ( wrapper.getTimeoutHandler ( ) ) ; }
public boolean unregisterApp ( ) { android.util.Log.v ( android.bluetooth.BluetoothHidDevice.TAG , "unregisterApp()" ) ; boolean result = false ; final android.bluetooth.IBluetoothHidDevice service = mService ; if ( service != null ) { try { result = service.unregisterApp ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothHidDevice.TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( android.bluetooth.BluetoothHidDevice.TAG , "Proxy not attached to service" ) ; } return result ; }
protected void syncSpi ( ) throws java.util.prefs.BackingStoreException { try { java.security.AccessController.doPrivileged ( new java.security.PrivilegedExceptionAction < java.lang.Void > ( ) { public java.lang.Void run ( ) throws java.util.prefs.BackingStoreException { syncSpiPrivileged ( ) ; return null ; } } ) ; } catch ( java.security.PrivilegedActionException e ) { throw ( ( java.util.prefs.BackingStoreException ) ( e.getException ( ) ) ) ; } }
public static void setAdb ( java.lang.String adb , boolean startAdb ) { if ( adb != null ) { if ( com.android.ide.eclipse.ddms.DdmsPlugin.setAdbLocation ( adb ) ) { com.android.ide.eclipse.ddms.DdmsPlugin.sPlugin.getPreferenceStore ( ) . setValue ( com.android.ide.eclipse.ddms.DdmsPlugin.ADB_LOCATION , com.android.ide.eclipse.ddms.DdmsPlugin.sAdbLocation ) ; if ( startAdb ) { new java.lang.Thread ( ) { @ java.lang.Override public void run ( ) { com.android.ide.eclipse.ddms.DdmsPlugin.getDefault ( ) . initDdmlib ( ) ; com.android.ddmlib.AndroidDebugBridge.createBridge ( com.android.ide.eclipse.ddms.DdmsPlugin.sAdbLocation , false ) ; } } . start ( ) ; } } } }
protected void engineInit ( int opmode , java.security.Key key , java.security.AlgorithmParameters params , java.security.SecureRandom random ) throws java.security.InvalidAlgorithmParameterException , java.security.InvalidKeyException { if ( params != null ) { throw new java.security.InvalidAlgorithmParameterException ( ( "unknown param type: " + ( params.getClass ( ) . getName ( ) ) ) ) ; } engineInitInternal ( opmode , key ) ; }
private void fillCombo ( org.eclipse.swt.widgets.Combo combo , com.android.sdklib.resources.ResourceEnum [ ] resEnums ) { for ( com.android.sdklib.resources.ResourceEnum resEnum : resEnums ) { if ( ( ( ( mDeviceMode ) == false ) || ( ( resEnum.isValidValueForDevice ( ) ) == false ) ) && ( ( resEnum.isFakeValue ( ) ) == false ) ) { combo.add ( resEnum.getShortDisplayValue ( ) ) ; } } }
private void registerForSimRecordEvents ( ) { com.android.internal.telephony.uicc.IccRecords r = mIccRecords.get ( ) ; if ( r == null ) { return ; } r.registerForNetworkSelectionModeAutomatic ( this , com.android.internal.telephony.gsm.EVENT_SET_NETWORK_AUTOMATIC , null ) ; r.registerForNewSms ( this , com.android.internal.telephony.gsm.EVENT_NEW_ICC_SMS , null ) ; r.registerForRecordsEvents ( this , com.android.internal.telephony.gsm.EVENT_ICC_RECORD_EVENTS , null ) ; r.registerForRecordsLoaded ( this , com.android.internal.telephony.gsm.EVENT_SIM_RECORDS_LOADED , null ) ; }
public android.net.LinkProperties.CompareResult < android.net.RouteInfo > compareAllRoutes ( android.net.LinkProperties target ) { android.net.LinkProperties.CompareResult < android.net.RouteInfo > result = new android.net.LinkProperties.CompareResult < android.net.RouteInfo > ( ) ; result.removed = getAllRoutes ( ) ; result.added.clear ( ) ; if ( target != null ) { for ( android.net.RouteInfo r : target.getAllRoutes ( ) ) { if ( ! ( result.removed.remove ( r ) ) ) { result.added.add ( r ) ; } } } return result ; }
public void run ( ) { com.android.server.location.GpsXtraDownloader xtraDownloader = new com.android.server.location.GpsXtraDownloader ( mContext , mProperties ) ; byte [ ] data = xtraDownloader.downloadXtraData ( ) ; if ( data != null ) { if ( com.android.server.location.GpsLocationProvider.DEBUG ) { android.util.Log.d ( com.android.server.location.GpsLocationProvider.TAG , "calling native_inject_xtra_data" ) ; } native_inject_xtra_data ( data , data.length ) ; } sendMessage ( com.android.server.location.GpsLocationProvider.DOWNLOAD_XTRA_DATA_FINISHED , 0 , null ) ; if ( data == null ) { mHandler.sendEmptyMessageDelayed ( com.android.server.location.GpsLocationProvider.DOWNLOAD_XTRA_DATA , com.android.server.location.GpsLocationProvider.RETRY_INTERVAL ) ; } mWakeLock.release ( ) ; }
public static org.eclipse.jdt.core.IJavaProject [ ] getJavaProjects ( org.eclipse.core.resources.IProject [ ] projects ) throws org.eclipse.core.runtime.CoreException { java.util.ArrayList < org.eclipse.jdt.core.IJavaProject > list = new java.util.ArrayList < org.eclipse.jdt.core.IJavaProject > ( ) ; for ( org.eclipse.core.resources.IProject p : projects ) { if ( ( p.isOpen ( ) ) && ( p.hasNature ( org.eclipse.jdt.core.JavaCore.NATURE_ID ) ) ) { list.add ( org.eclipse.jdt.core.JavaCore.create ( p ) ) ; } } return list.toArray ( new org.eclipse.jdt.core.IJavaProject [ list.size ( ) ] ) ; }
private void generateTestList ( java.lang.String path ) { try { java.io.File tests_list = new java.io.File ( com.android.dumprendertree.Menu.LAYOUT_TESTS_LIST_FILE ) ; java.io.BufferedOutputStream bos = new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( tests_list , false ) ) ; com.android.dumprendertree.FsUtils.findLayoutTestsRecursively ( bos , path ) ; bos.flush ( ) ; bos.close ( ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( com.android.dumprendertree.Menu.LOGTAG , ( "Error when creating test list: " + ( e.getMessage ( ) ) ) ) ; } }
public void endVisit ( org.eclipse.jdt.internal.compiler.ast.ConditionalExpression x , org.eclipse.jdt.internal.compiler.lookup.BlockScope scope ) { try { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo ( x ) ; com.android.jack.ir.ast.JExpression valueIfFalse = pop ( x.valueIfFalse ) ; com.android.jack.ir.ast.JExpression valueIfTrue = pop ( x.valueIfTrue ) ; com.android.jack.ir.ast.JExpression condition = pop ( x.condition ) ; push ( new com.android.jack.ir.ast.JConditionalExpression ( info , condition , valueIfTrue , valueIfFalse ) ) ; } catch ( java.lang.Throwable e ) { throw translateException ( x , e ) ; } }
public static android.telecom.DisconnectCause toTelecomDisconnectCause ( int telephonyDisconnectCause , java.lang.String reason ) { android.content.Context context = com.android.phone.PhoneGlobals.getInstance ( ) ; return new android.telecom.DisconnectCause ( com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseCode ( telephonyDisconnectCause ) , com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseLabel ( context , telephonyDisconnectCause ) , com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseDescription ( context , telephonyDisconnectCause ) , com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectReason ( telephonyDisconnectCause , reason ) , com.android.services.telephony.DisconnectCauseUtil.toTelecomDisconnectCauseTone ( telephonyDisconnectCause ) ) ; }
public void test_ConstructorLjava_net_InetAddressIZ ( ) throws java.io.IOException { java.net.ServerSocket server = new java.net.ServerSocket ( 0 ) ; int serverPort = server.getLocalPort ( ) ; java.net.Socket client = new java.net.Socket ( java.net.InetAddress.getLocalHost ( ) , serverPort , true ) ; assertEquals ( "Failed to create socket" , serverPort , client.getPort ( ) ) ; client = new java.net.Socket ( java.net.InetAddress.getLocalHost ( ) , serverPort , false ) ; client.close ( ) ; }
private void writeDebugEnd ( @ javax.annotation.CheckForNull org.objectweb.asm.tree.ClassNode classNode , @ javax.annotation.Nonnegative int currentLine ) throws java.io.IOException { if ( ( classNode != null ) && ( currentLine != ( SourceInfoWriter.NO_LINE ) ) ) { sourceInfoWriter.writeDebugEnd ( classNode , ( currentLine + 1 ) ) ; } else { sourceInfoWriter.writeUnknownDebugEnd ( ) ; } }
private void computeCatchList ( @ javax.annotation.Nonnull org.objectweb.asm.tree.LabelNode labelNode ) { for ( org.objectweb.asm.tree.TryCatchBlockNode tryCatchNode : currentMethod.tryCatchBlocks ) { java.lang.String id = getCatchId ( tryCatchNode.handler ) ; if ( ( tryCatchNode.start ) == labelNode ) { assert ! ( currentCatchList.contains ( id ) ) ; currentCatchList.add ( id ) ; } else if ( ( tryCatchNode.end ) == labelNode ) { assert currentCatchList.contains ( id ) ; currentCatchList.remove ( id ) ; } } }
private static java.lang.String getFolderName ( com.android.ide.common.res2.ResourceItem resourceItem ) { com.android.resources.ResourceType itemType = resourceItem.getType ( ) ; java.lang.String folderName = itemType.getName ( ) ; java.lang.String qualifiers = resourceItem.getSource ( ) . getQualifiers ( ) ; if ( ! ( qualifiers.isEmpty ( ) ) ) { folderName = ( folderName + ( com.android.SdkConstants.RES_QUALIFIER_SEP ) ) + qualifiers ; } return folderName ; }
static synchronized int nativeCreateFromTypeface ( int native_instance , int style ) { android.graphics.Typeface_Delegate delegate = android.graphics.Typeface_Delegate.sManager.getDelegate ( native_instance ) ; if ( delegate == null ) { return 0 ; } android.graphics.Typeface_Delegate newDelegate = new android.graphics.Typeface_Delegate ( delegate.mFamily , style ) ; if ( ( android.graphics.Typeface_Delegate.sFontLoader ) != null ) { newDelegate.init ( ) ; } else { android.graphics.Typeface_Delegate.sPostInitDelegate.add ( newDelegate ) ; } return android.graphics.Typeface_Delegate.sManager.addNewDelegate ( newDelegate ) ; }
public void run ( ) { mStatusBarView.getLocationOnScreen ( mAbsPos ) ; android.util.Slog.d ( com.android.systemui.statusbar.phone.PhoneStatusBar.TAG , ( ( ( ( ( ( ( "mStatusBarView: ----- (" + ( mAbsPos [ 0 ] ) ) + "," ) + ( mAbsPos [ 1 ] ) ) + ") " ) + ( mStatusBarView.getWidth ( ) ) ) + "x" ) + ( getStatusBarHeight ( ) ) ) ) ; mStatusBarView.debug ( ) ; }
public java.util.Collection < com.android.build.gradle.internal.dsl.CoreBuildType > getBuildTypes ( ) { return com.google.common.collect.ImmutableList.copyOf ( com.google.common.collect.Iterables.transform ( model.getBuildTypes ( ) , new com.google.common.base.Function < com.android.build.gradle.managed.BuildType , com.android.build.gradle.internal.dsl.CoreBuildType > ( ) { @ java.lang.Override public com.android.build.gradle.internal.dsl.CoreBuildType apply ( com.android.build.gradle.managed.BuildType buildType ) { return new com.android.build.gradle.managed.adaptor.BuildTypeAdaptor ( buildType ) ; } } ) ) ; }
public void afterHandshake ( int session , int s , int c , java.net.Socket sock , java.io.FileDescriptor fd , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_renegotiate ( s ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_write ( s , fd , callback , new byte [ ] { 42 } , 0 , 1 , 0 ) ; super . afterHandshake ( session , s , c , sock , fd , callback ) ; }
public static android.icu.util.UResourceBundle getBundleInstance ( java.lang.String baseName , java.lang.String localeID , java.lang.ClassLoader root , boolean disableFallback ) { android.icu.util.UResourceBundle b = android.icu.impl.ICUResourceBundle.instantiateBundle ( baseName , localeID , root , ( disableFallback ? android.icu.impl.ICUResourceBundle.OpenType.DIRECT : android.icu.impl.ICUResourceBundle.OpenType.LOCALE_DEFAULT_ROOT ) ) ; if ( b == null ) { throw new java.util.MissingResourceException ( ( ( ( ( "Could not find the bundle " + baseName ) + "/" ) + localeID ) + ".res" ) , "" , "" ) ; } return b ; }
private vogar.Mode createMode ( vogar.ModeId modeId , vogar.Variant variant ) { switch ( modeId ) { case JVM : return new vogar.JavaVm ( this ) ; case HOST : case HOST_DALVIK : case HOST_ART_KITKAT : return new vogar.android.HostRuntime ( this , modeId , variant ) ; case DEVICE : case DEVICE_DALVIK : case DEVICE_ART_KITKAT : case APP_PROCESS : return new vogar.android.DeviceRuntime ( this , modeId , variant ) ; case ACTIVITY : return new vogar.android.ActivityMode ( this ) ; default : throw new java.lang.IllegalArgumentException ( ( "Unsupported mode: " + modeId ) ) ; } }
public void onWindowFocusChanged ( final boolean hasWindowFocus ) { if ( checkNeedsPost ( ) ) { mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { onWindowFocusChanged ( hasWindowFocus ) ; } } ) ; return ; } mAwContents.getAwContentsProxy ( ) . onWindowFocusChanged ( hasWindowFocus ) ; }
public void endVisit ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JVariableRef x ) { com.android.jack.debug.DebugVariableInfoMarker debugInfo = x.getMarker ( com.android.jack.debug.DebugVariableInfoMarker.class ) ; if ( debugInfo != null ) { trace ( debugInfo.getType ( ) ) ; } }
public void configure ( java.lang.String [ ] argv ) { super . configure ( argv ) ; checkedClasspaths = new org.eclipse.jdt.internal.compiler.batch.FileSystem.Classpath [ ] { new com.android.jack.ecj.loader.jast.JAstClasspath ( "<jack-logical-entry>" , session.getLookup ( ) , null ) } ; java.util.Set < java.lang.String > fileNamesToCompile = session.getInputFilter ( ) . getFileNamesToCompile ( ) ; filenames = fileNamesToCompile.toArray ( new java.lang.String [ fileNamesToCompile.size ( ) ] ) ; }
public void run ( ) { com.android.rs.test_v14.RenderScript pRS = com.android.rs.test_v14.RenderScript.create ( mCtx ) ; com.android.rs.test_v14.ScriptC_vector s = new com.android.rs.test_v14.ScriptC_vector ( pRS , mRes , R.raw.vector ) ; pRS.setMessageHandler ( mRsMessage ) ; if ( ! ( initializeGlobals ( s ) ) ) { result = - 1 ; } else { s.invoke_vector_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; } pRS.destroy ( ) ; }
public void testRootnF32_4_relaxed ( ) { android.renderscript.Allocation nAlloc = android.renderscript.Allocation.createSized ( mRS , android.renderscript.Element.I32_4 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ ( INPUTSIZE ) * 4 ] ; android.renderscript.cts.RSUtils.genRandomInts ( 4400074 , 32 , 1 , n ) ; nAlloc.copyFrom ( n ) ; script_f32_relaxed.set_n4 ( nAlloc ) ; doF32_4_relaxed ( 11145969 , 16 ) ; }
public static int forkSystemServer ( int uid , int gid , int [ ] gids , int runtimeFlags , int [ ] [ ] rlimits , long permittedCapabilities , long effectiveCapabilities ) { android.os.Seccomp.setSystemServerPolicy ( ) ; com.android.internal.os.Zygote.VM_HOOKS.preFork ( ) ; com.android.internal.os.Zygote.resetNicePriority ( ) ; int pid = com.android.internal.os.Zygote.nativeForkSystemServer ( uid , gid , gids , runtimeFlags , rlimits , permittedCapabilities , effectiveCapabilities ) ; if ( pid == 0 ) { android.os.Trace.setTracingEnabled ( true , runtimeFlags ) ; } com.android.internal.os.Zygote.VM_HOOKS.postForkCommon ( ) ; return pid ; }
public void init ( android.content.Context context , com.android.incallui.Call call ) { mContext = com.google.common.base.Preconditions.checkNotNull ( context ) ; if ( call != null ) { mPrimary = call ; if ( ! ( call.isConferenceCall ( ) ) ) { startContactInfoSearch ( call , true , ( ( call.getState ( ) ) == ( Call.State.INCOMING ) ) ) ; } else { updateContactEntry ( null , true , true ) ; } } }
private void updateAdb ( ) { try { mSdkManager.updateAdb ( ) ; mSdkLog.printf ( ( "adb has been updated. You must restart adb with the following commands\n" + ( "\tadb kill-server\n" + "\tadb start-server\n" ) ) ) ; } catch ( com.android.prefs.AndroidLocation.AndroidLocationException e ) { errorAndExit ( e.getMessage ( ) ) ; } catch ( java.io.IOException e ) { errorAndExit ( e.getMessage ( ) ) ; } }
public void test_shutdownNow ( ) throws java.lang.Exception { java.nio.channels.AsynchronousChannelGroup acg = java.nio.channels.AsynchronousChannelGroup.withCachedThreadPool ( java.util.concurrent.Executors.newFixedThreadPool ( 5 ) , 1 ) ; java.nio.channels.AsynchronousServerSocketChannel assc = java.nio.channels.AsynchronousServerSocketChannel.open ( acg ) ; acg.shutdownNow ( ) ; assertTrue ( acg.isShutdown ( ) ) ; assertFalse ( assc.isOpen ( ) ) ; try { java.nio.channels.AsynchronousServerSocketChannel.open ( acg ) ; } catch ( java.nio.channels.ShutdownChannelGroupException expected ) { } acg.shutdownNow ( ) ; }
public void testEmptyStringException ( ) { try { new java.text.RuleBasedCollator ( "" ) ; fail ( ( "Constructor RuleBasedCollator(\"\") " + "should throw ParseException" ) ) ; } catch ( java.text.ParseException e ) { assertEquals ( "java.text.ParseException" , e.getClass ( ) . getName ( ) ) ; assertEquals ( 0 , e.getErrorOffset ( ) ) ; } }
public java.lang.String getFirmwareVersion ( ) { try { if ( ( mWifiVendorHal ) != null ) { return mWifiVendorHal.getFirmwareVersion ( ) ; } } catch ( java.lang.UnsupportedOperationException e ) { } legacyHalWarning ( ) ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { return com.android.server.wifi.WifiNative.getFirmwareVersionNative ( com.android.server.wifi.WifiNative.sWlan0Index ) ; } else { return "" ; } } }
private static java.lang.StringBuffer getPathFromDirInternal ( @ javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVDir baseDir , @ javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVDir currentDir ) { if ( baseDir == currentDir ) { return new java.lang.StringBuffer ( ) ; } com.android.sched.vfs.CachedDirectFS.CachedParentVDir currentParent = currentDir.getParent ( ) ; assert currentParent != null ; return com.android.sched.vfs.CachedDirectFS.getPathFromDirInternal ( baseDir , currentParent ) . append ( currentDir.getName ( ) ) . append ( '/' ) ; }
public void write ( ) throws java.io.IOException { if ( ( ( com.android.jill.frontend.java.AsmHelper.isAnnotation ( currentClass ) ) && ( com.android.jill.frontend.java.AsmHelper.isAbstract ( currentMethod ) ) ) && ( currentMethod.parameters.isEmpty ( ) ) ) { writeAnnotationMethod ( ) ; } else if ( com.android.jill.frontend.java.AsmHelper.isConstructor ( currentMethod ) ) { writeConstructor ( ) ; } else { writeMethod ( ) ; } }
protected boolean setException ( java.lang.Throwable throwable ) { boolean result = sync.setException ( com.google.common.base.Preconditions.checkNotNull ( throwable ) ) ; if ( result ) { executionList.execute ( ) ; } if ( throwable instanceof java.lang.Error ) { throw ( ( java.lang.Error ) ( throwable ) ) ; } return result ; }
public void propagateVarRef ( com.android.jack.ir.ast.JSsaVariableRef lhs , com.android.jack.ir.ast.JSsaVariableRef rhs , com.android.jack.transformations.request.TransformationRequest tr ) { com.android.jack.ir.ast.JSsaVariableRef def = rhs.getDef ( ) ; for ( com.android.jack.ir.ast.JSsaVariableRef oldUse : lhs.getUses ( ) ) { com.android.jack.ir.ast.JSsaVariableRef newUse = def.makeRef ( oldUse.getSourceInfo ( ) ) ; newUse.addAllMarkers ( oldUse.getAllMarkers ( ) ) ; tr.append ( new com.android.jack.transformations.request.Replace ( oldUse , newUse ) ) ; } }
public int getConnectionState ( android.bluetooth.BluetoothDevice device ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , ( "getConnectionState(): device=" + device ) ) ; com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return android.bluetooth.BluetoothInputHost.STATE_DISCONNECTED ; } return service.getConnectionState ( device ) ; }
protected org.bouncycastle.asn1.x9.X9ECParameters createParameters ( ) { org.bouncycastle.math.ec.ECCurve cFp192v1 = new org.bouncycastle.math.ec.ECCurve.Fp ( new java.math.BigInteger ( "6277101735386680763835789423207666416083908700390324961279" ) , new java.math.BigInteger ( "fffffffffffffffffffffffffffffffefffffffffffffffc" , 16 ) , new java.math.BigInteger ( "64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1" , 16 ) ) ; return new org.bouncycastle.asn1.x9.X9ECParameters ( cFp192v1 , cFp192v1.decodePoint ( org.bouncycastle.util.encoders.Hex.decode ( "03188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012" ) ) , new java.math.BigInteger ( "ffffffffffffffffffffffff99def836146bc9b1b4d22831" , 16 ) , java.math.BigInteger.valueOf ( 1 ) , org.bouncycastle.util.encoders.Hex.decode ( "3045AE6FC8422f64ED579528D38120EAE12196D5" ) ) ; }
public void visitAttribute ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.XmlContext context , @ com.android.annotations.NonNull org.w3c.dom.Attr attribute ) { assert ( attribute.getName ( ) . equals ( com.android.SdkConstants.ATTR_ID ) ) || ( attribute.getLocalName ( ) . equals ( com.android.SdkConstants.ATTR_ID ) ) ; java.lang.String id = attribute.getValue ( ) ; mFileIds.add ( id ) ; mGlobalIds.add ( id ) ; if ( ( ( ( id.startsWith ( "@+" ) ) && ( ! ( id.startsWith ( com.android.SdkConstants.NEW_ID_PREFIX ) ) ) ) && ( ! ( id.startsWith ( "@+android:id/" ) ) ) ) || ( ( id.startsWith ( com.android.SdkConstants.NEW_ID_PREFIX ) ) && ( ( id.indexOf ( '/' , com.android.SdkConstants.NEW_ID_PREFIX.length ( ) ) ) != ( - 1 ) ) ) ) { int nameStart = ( id.startsWith ( com.android.SdkConstants.NEW_ID_PREFIX ) ) ? com.android.SdkConstants.NEW_ID_PREFIX.length ( ) : 2 ; java.lang.String suggested = ( com.android.SdkConstants.NEW_ID_PREFIX ) + ( id.substring ( nameStart ) . replace ( '/' , '_' ) ) ; java.lang.String message = java.lang.String.format ( "ID definitions *must* be of the form `@+id/name`; try using `%1$s`" , suggested ) ; context.report ( com.android.tools.lint.checks.WrongIdDetector.INVALID , attribute , context.getLocation ( attribute ) , message , null ) ; } }
void stopAdvertising ( com.android.bluetooth.gatt.AdvertiseClient client ) { if ( mAdapterService.isMultiAdvertisementSupported ( ) ) { gattClientEnableAdvNative ( client.advertiserId , false , 0 ) ; } else { gattAdvertiseNative ( false ) ; try { mService.onAdvertiseInstanceEnabled ( AdvertiseCallback.ADVERTISE_SUCCESS , client.advertiserId , false ) ; } catch ( android.os.RemoteException e ) { android.util.Log.d ( com.android.bluetooth.gatt.AdvertiseManager.TAG , "failed onAdvertiseInstanceDisabled" , e ) ; } } }
public void testRootnF32_2 ( ) { android.renderscript.Allocation nAlloc = android.renderscript.Allocation.createSized ( mRS , android.renderscript.Element.I32_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ ( INPUTSIZE ) * 2 ] ; android.renderscript.cts.RSUtils.genRandomInts ( 11329265 , 32 , 1 , n ) ; nAlloc.copyFrom ( n ) ; script_f32.set_n2 ( nAlloc ) ; doF32_2 ( 11329265 , 16 ) ; }
protected android.support.v8.renderscript.Script.KernelID createKernelID ( int slot , int sig , android.support.v8.renderscript.Element ein , android.support.v8.renderscript.Element eout ) { android.support.v8.renderscript.Script.KernelID k = mKIDs.get ( slot ) ; if ( k != null ) { return k ; } int id = mRS.nScriptKernelIDCreate ( getID ( mRS ) , slot , sig ) ; if ( id == 0 ) { throw new android.support.v8.renderscript.RSDriverException ( "Failed to create KernelID" ) ; } k = new android.support.v8.renderscript.Script.KernelID ( id , mRS , this , slot , sig ) ; mKIDs.put ( slot , k ) ; return k ; }
public boolean isSameUpdatePackageAs ( java.lang.Package pkg ) { if ( ( ( mUpdatePkg ) != null ) && ( ( mUpdatePkg.canBeUpdatedBy ( pkg ) ) == ( com.android.sdklib.internal.repository.packages.Package.UpdateInfo.NOT_UPDATE ) ) ) { return ( mUpdatePkg.getRevision ( ) ) == ( pkg.getRevision ( ) ) ; } return false ; }
public java.util.List < com.android.builder.dependency.JarDependency > getLocalDependencies ( ) { java.util.List < java.io.File > jars = getLocalJars ( ) ; java.util.List < com.android.builder.dependency.JarDependency > localDependencies = com.google.common.collect.Lists.newArrayListWithCapacity ( jars.size ( ) ) ; for ( java.io.File jar : jars ) { localDependencies.add ( new com.android.builder.dependency.JarDependency ( jar , true , true , null ) ) ; } return localDependencies ; }
public android.icu.util.TimeZone cloneAsThawed ( ) { android.icu.impl.JavaTimeZone tz = ( ( android.icu.impl.JavaTimeZone ) ( super . cloneAsThawed ( ) ) ) ; tz.javatz = ( ( java.util.TimeZone ) ( javatz.clone ( ) ) ) ; tz.javacal = ( ( java.util.GregorianCalendar ) ( javacal.clone ( ) ) ) ; tz.isFrozen = false ; return tz ; }
public static void assertEqualCertificateChains ( long [ ] expected , long [ ] actual ) { assertEquals ( expected.length , actual.length ) ; for ( int i = 0 ; i < ( expected.length ) ; i ++ ) { org.conscrypt.NativeCrypto.X509_cmp ( expected [ i ] , actual [ i ] ) ; } }
static boolean equalsImpl ( java.util.Map < ? , ? > map , java.lang.Object object ) { if ( map == object ) { return true ; } if ( object instanceof java.util.Map ) { java.util.Map < ? , ? > o = ( ( java.util.Map < ? , ? > ) ( object ) ) ; return map.entrySet ( ) . equals ( o.entrySet ( ) ) ; } return false ; }
public void testAddAll3 ( ) { try { java.util.concurrent.ArrayBlockingQueue q = new java.util.concurrent.ArrayBlockingQueue ( SIZE ) ; java.lang.Integer [ ] ints = new java.lang.Integer [ SIZE ] ; for ( int i = 0 ; i < ( ( SIZE ) - 1 ) ; ++ i ) ints [ i ] = new java.lang.Integer ( i ) ; q.addAll ( java.util.Arrays.asList ( ints ) ) ; shouldThrow ( ) ; } catch ( java.lang.NullPointerException success ) { } }
static short FindLMBCSLocale ( java.lang.String LocaleID ) { int index = 0 ; if ( LocaleID == null ) { return 0 ; } while ( ( com.ibm.icu.charset.CharsetLMBCS.LocaleLMBCSGrpMap [ index ] . LocaleID ) != null ) { if ( ( com.ibm.icu.charset.CharsetLMBCS.LocaleLMBCSGrpMap [ index ] . LocaleID ) == LocaleID ) { return com.ibm.icu.charset.CharsetLMBCS.LocaleLMBCSGrpMap [ index ] . OptGroup ; } else if ( ( com.ibm.icu.charset.CharsetLMBCS.LocaleLMBCSGrpMap [ index ] . LocaleID.compareTo ( LocaleID ) ) > 0 ) { break ; } index ++ ; } return com.ibm.icu.charset.CharsetLMBCS.ULMBCS_GRP_L1 ; }
private static void splitAndAdd ( java.lang.String searchPath , boolean directoriesOnly , java.util.ArrayList < java.io.File > resultList ) { if ( searchPath == null ) { return ; } for ( java.lang.String path : searchPath.split ( ":" ) ) { try { android.system.StructStat sb = Libcore.os.stat ( path ) ; if ( ( ! directoriesOnly ) || ( S_ISDIR ( sb.st_mode ) ) ) { resultList.add ( new java.io.File ( path ) ) ; } } catch ( android.system.ErrnoException ignored ) { } } }
public static java.lang.Integer getInteger ( java.lang.String nm , java.lang.Integer val ) { java.lang.String v = null ; try { v = java.lang.System.getProperty ( nm ) ; } catch ( java.lang.IllegalArgumentException e ) { } catch ( java.lang.NullPointerException e ) { } if ( v != null ) { try { return java.lang.Integer.decode ( v ) ; } catch ( java.lang.NumberFormatException e ) { } } return val ; }
public void testGetIdlingResources ( ) { int originalCount = android.support.test.espresso.Espresso.getIdlingResources ( ) . size ( ) ; android.support.test.espresso.IdlingResource resource = new android.support.test.espresso.EspressoTest.DummyIdlingResource ( "testGetIdlingResources" ) ; android.support.test.espresso.Espresso.registerIdlingResources ( resource ) ; assertEquals ( ( originalCount + 1 ) , android.support.test.espresso.Espresso.getIdlingResources ( ) . size ( ) ) ; android.support.test.espresso.Espresso.unregisterIdlingResources ( resource ) ; assertEquals ( originalCount , android.support.test.espresso.Espresso.getIdlingResources ( ) . size ( ) ) ; }
protected java.lang.String getTitle ( ) { com.android.build.gradle.internal.test.report.PackageTestResults model = getModel ( ) ; switch ( reportType ) { case MULTI_PROJECT : return ( ( ( ( model.getProject ( ) ) + ": " ) + ( model.getFlavor ( ) ) ) + ": " ) + ( model.getTitle ( ) ) ; case MULTI_FLAVOR : return ( ( model.getFlavor ( ) ) + ": " ) + ( model.getTitle ( ) ) ; } return model.getTitle ( ) ; }
public void checkClass ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.ClassContext context , @ com.android.annotations.NonNull org.objectweb.asm.tree.ClassNode classNode ) { if ( ( ( classNode.name.indexOf ( '$' ) ) != ( - 1 ) ) && ( ( ( classNode.access ) & ( org.objectweb.asm.Opcodes.ACC_STATIC ) ) == 0 ) ) { return ; } if ( com.android.tools.lint.checks.ViewConstructorDetector.isViewClass ( context , classNode ) ) { checkConstructors ( context , classNode ) ; } }
public android.content.Intent intentForPosition ( int position ) { if ( ( mList ) == null ) { return null ; } com.android.internal.app.ResolverActivity.DisplayResolveInfo dri = mList.get ( position ) ; android.content.Intent intent = new android.content.Intent ( ( ( dri.origIntent ) != null ? dri.origIntent : mIntent ) ) ; intent.addFlags ( ( ( android.content.Intent.FLAG_ACTIVITY_FORWARD_RESULT ) | ( android.content.Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP ) ) ) ; android.content.pm.ActivityInfo ai = dri.ri.activityInfo ; intent.setComponent ( new android.content.ComponentName ( ai.applicationInfo.packageName , ai.name ) ) ; return intent ; }
public int compareTo ( com.android.jack.dx.rop.type.Type other ) { return descriptor.compareTo ( other.descriptor ) ; }
public static boolean isEqual ( byte [ ] digesta , byte [ ] digestb ) { if ( ( digesta.length ) != ( digestb.length ) ) { return false ; } for ( int i = 0 ; i < ( digesta.length ) ; i ++ ) { if ( ( digesta [ i ] ) != ( digestb [ i ] ) ) { return false ; } } return true ; }
void scanNextPath ( ) { if ( ( mNextPath ) >= ( mPaths.length ) ) { mConnection.disconnect ( ) ; return ; } java.lang.String mimeType = ( ( mMimeTypes ) != null ) ? mMimeTypes [ mNextPath ] : null ; mConnection.scanFile ( mPaths [ mNextPath ] , mimeType ) ; ( mNextPath ) ++ ; }
public void testCameraAppDisabled ( ) throws java.lang.Exception { final android.support.test.uiautomator.UiDevice device = testFramework.getDevice ( ) ; enableSampleDeviceAdmin ( ) ; if ( verifyCameraAppDisabled ( ) ) { setCameraEnabled ( true ) ; } org.junit.Assert.assertFalse ( verifyCameraAppDisabled ( ) ) ; setCameraEnabled ( false ) ; gotoCameraApp ( ) ; new com.android.devtools.systemimage.uitest.watchers.CameraAccessPermissionsWatcher ( device ) . checkForCondition ( ) ; org.junit.Assert.assertTrue ( verifyCameraAppDisabled ( ) ) ; setCameraEnabled ( true ) ; org.junit.Assert.assertFalse ( verifyCameraAppDisabled ( ) ) ; }
public void onUnhandledKeyEvent ( android.view.KeyEvent event ) { if ( ! ( isActivityPaused ( ) ) ) { if ( ( event.getAction ( ) ) == ( android.view.KeyEvent.ACTION_DOWN ) ) { mActivity.onKeyDown ( event.getKeyCode ( ) , event ) ; } else { mActivity.onKeyUp ( event.getKeyCode ( ) , event ) ; } } }
public com.android.jack.dx.io.instructions.DecodedInstruction withIndex ( int newFirstIndex , int newSecondIndex ) { assert ( getSecondIndexType ( ) ) == ( com.android.jack.dx.io.IndexType.NONE ) ; return new com.android.jack.dx.io.instructions.RegisterRangeDecodedInstruction ( getFormat ( ) , getOpcode ( ) , newFirstIndex , getFirstIndexType ( ) , getTarget ( ) , getLiteral ( ) , a , registerCount ) ; }
public int beforeHandshake ( int c ) throws javax.net.ssl.SSLException { int s = super . beforeHandshake ( c ) ; if ( ( privateKey ) != null ) { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_use_PrivateKey ( s , privateKey ) ; } if ( ( certificates ) != null ) { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_use_certificate ( s , certificates ) ; } if ( channelIdEnabled ) { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_enable_tls_channel_id ( s ) ; } return s ; }
public void test_flush ( ) throws java.lang.Exception { char [ ] buf = new char [ 10 ] ; "HelloWorld" . getChars ( 0 , 10 , buf , 0 ) ; pw = new java.io.PipedWriter ( ) ; rdrThread = new java.lang.Thread ( ( reader = new org.apache.harmony.tests.java.io.PipedWriterTest.PReader ( pw ) ) , "flush" ) ; rdrThread.start ( ) ; pw.write ( buf ) ; pw.flush ( ) ; rdrThread.join ( 700 ) ; assertEquals ( "Failed to flush chars" , "HelloWorld" , new java.lang.String ( reader.buf ) ) ; }
public void testFindAll ( ) throws java.lang.InterruptedException { java.lang.String p = "<p>Find all instances of find on the page and highlight them.</p>" ; mWebView.loadData ( ( ( "<html><body>" + p ) + "</body></html>" ) , "text/html" , "UTF-8" ) ; waitForLoadComplete ( mWebView , android.webkit.cts.WebViewTest.TEST_TIMEOUT ) ; assertEquals ( 2 , mWebView.findAll ( "find" ) ) ; }
public void exit ( ) { mIPv6TetherSvc.stop ( ) ; cleanupUpstream ( ) ; try { mNMService.untetherInterface ( mIfaceName ) ; } catch ( java.lang.Exception ee ) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_UNTETHER_IFACE_ERROR ; android.util.Log.e ( com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG , ( "Failed to untether interface: " + ( ee.toString ( ) ) ) ) ; } configureIfaceIp ( false ) ; }
public static java.util.Enumeration getNames ( ) { java.util.Vector v = new java.util.Vector ( ) ; org.bouncycastle.asn1.x9.ECNamedCurveTable.addEnumeration ( v , org.bouncycastle.asn1.x9.X962NamedCurves.getNames ( ) ) ; org.bouncycastle.asn1.x9.ECNamedCurveTable.addEnumeration ( v , org.bouncycastle.asn1.sec.SECNamedCurves.getNames ( ) ) ; org.bouncycastle.asn1.x9.ECNamedCurveTable.addEnumeration ( v , org.bouncycastle.asn1.nist.NISTNamedCurves.getNames ( ) ) ; org.bouncycastle.asn1.x9.ECNamedCurveTable.addEnumeration ( v , org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves.getNames ( ) ) ; return v.elements ( ) ; }
public com.android.jack.dx.dex.file.TypeIdItem intern ( com.android.jack.dx.rop.cst.CstType type ) { if ( type == null ) { throw new java.lang.NullPointerException ( "type == null" ) ; } throwIfPrepared ( ) ; com.android.jack.dx.rop.type.Type typePerSe = type.getClassType ( ) ; com.android.jack.dx.dex.file.TypeIdItem result = typeIds.get ( typePerSe ) ; if ( result == null ) { result = new com.android.jack.dx.dex.file.TypeIdItem ( type ) ; typeIds.put ( typePerSe , result ) ; } return result ; }
public void enter ( ) { android.telecom.Log.i ( com.android.server.telecom.CallAudioModeStateMachine.LOG_TAG , "Audio focus entering RINGING state" ) ; if ( mCallAudioManager.startRinging ( ) ) { mAudioManager.requestAudioFocusForCall ( AudioManager.STREAM_RING , AudioManager.AUDIOFOCUS_GAIN_TRANSIENT ) ; if ( ( mMostRecentMode ) == ( android.media.AudioManager.MODE_IN_CALL ) ) { android.telecom.Log.i ( com.android.server.telecom.CallAudioModeStateMachine.LOG_TAG , ( "Transition from IN_CALL -> RINGTONE." + " Resetting to NORMAL first." ) ) ; mAudioManager.setMode ( AudioManager.MODE_NORMAL ) ; } mAudioManager.setMode ( AudioManager.MODE_RINGTONE ) ; mCallAudioManager.setCallAudioRouteFocusState ( CallAudioRouteStateMachine.RINGING_FOCUS ) ; } else { android.telecom.Log.i ( com.android.server.telecom.CallAudioModeStateMachine.LOG_TAG , "Entering RINGING but not acquiring focus -- silent ringtone" ) ; } mCallAudioManager.stopCallWaiting ( ) ; }
private com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor createMerge ( java.util.List < com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor > knownLayouts ) { java.lang.String xml_name = com.android.ide.eclipse.adt.internal.editors.layout.descriptors.LayoutDescriptors.VIEW_MERGE ; com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor [ ] viewLayoutAttribs = findViewLayoutAttributes ( SdkConstants.CLASS_FRAMELAYOUT , knownLayouts ) ; com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor desc = new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ( xml_name , xml_name , com.android.ide.eclipse.adt.internal.editors.layout.descriptors.LayoutDescriptors.VIEW_MERGE , "A root tag useful for XML layouts inflated using a ViewStub." , null , null , viewLayoutAttribs , null , false ) ; return desc ; }
public void testGetUserSelectedOutgoingPhoneAccount ( ) throws android.os.RemoteException { org.mockito.Mockito.when ( mFakePhoneAccountRegistrar.getUserSelectedOutgoingPhoneAccount ( org.mockito.Matchers.any ( android.os.UserHandle.class ) ) ) . thenReturn ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 ) ; org.mockito.Mockito.when ( mFakePhoneAccountRegistrar.getPhoneAccountUnchecked ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 ) ) . thenReturn ( makeMultiUserPhoneAccount ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 ) . build ( ) ) ; android.telecom.PhoneAccountHandle returnedHandle = mTSIBinder.getUserSelectedOutgoingPhoneAccount ( ) ; assertEquals ( com.android.server.telecom.tests.TelecomServiceImplTest.TEL_PA_HANDLE_16 , returnedHandle ) ; }
private java.net.URLConnection openGifURLConnection ( ) throws java.io.IOException { java.lang.String cts = java.lang.System.getProperty ( "java.io.tmpdir" ) ; java.io.File tmpDir = new java.io.File ( cts ) ; tests.support.resource.Support_Resources.copyFile ( tmpDir , null , "Harmony.GIF" ) ; java.net.URL fUrl1 = new java.net.URL ( ( ( "file:/" + ( tmpDir.getPath ( ) ) ) + "/Harmony.GIF" ) ) ; java.net.URLConnection con1 = fUrl1.openConnection ( ) ; return con1 ; }
public com.android.server.wifi.WifiNative.RingBufferStatus [ ] getRingBufferStatus ( ) { try { if ( ( mWifiVendorHal ) != null ) { return mWifiVendorHal.getRingBufferStatus ( ) ; } } catch ( java.lang.UnsupportedOperationException e ) { } legacyHalWarning ( ) ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { return com.android.server.wifi.WifiNative.getRingBufferStatusNative ( com.android.server.wifi.WifiNative.sWlan0Index ) ; } else { return null ; } } }
public com.android.ide.common.resources.ResourceRepository loadFrameworkResources ( com.android.sdklib.IAndroidTarget androidTarget ) { java.lang.String osResourcesPath = androidTarget.getPath ( IAndroidTarget.RESOURCES ) ; com.android.io.FolderWrapper frameworkRes = new com.android.io.FolderWrapper ( osResourcesPath ) ; if ( frameworkRes.exists ( ) ) { com.android.ide.common.resources.FrameworkResources resources = new com.android.ide.common.resources.FrameworkResources ( ) ; try { loadResources ( resources , frameworkRes ) ; resources.loadPublicResources ( frameworkRes , com.android.ide.eclipse.adt.AdtPlugin.getDefault ( ) ) ; return resources ; } catch ( java.io.IOException e ) { } } return null ; }
private void responseLceData ( android.hardware.radio.V1_0.RadioResponseInfo responseInfo , android.hardware.radio.V1_0.LceDataInfo lceInfo ) { com.android.internal.telephony.RILRequest rr = mRil.processResponse ( responseInfo ) ; if ( rr != null ) { java.util.ArrayList < java.lang.Integer > ret = null ; if ( ( responseInfo.error ) == ( android.hardware.radio.V1_0.RadioError.NONE ) ) { ret = com.android.internal.telephony.RIL.convertHalLceData ( lceInfo , mRil ) ; com.android.internal.telephony.RadioResponse.sendMessageResponse ( rr.mResult , ret ) ; } mRil.processResponseDone ( rr , responseInfo , ret ) ; } }
public void test_RAND_bytes_Success ( ) throws java.lang.Exception { byte [ ] output = new byte [ 128 ] ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.RAND_bytes ( output ) ; boolean isZero = true ; for ( int i = 0 ; i < ( output.length ) ; i ++ ) { isZero &= ( output [ i ] ) == 0 ; } assertFalse ( ( "Random output was zero. This is a very low probability event (1 in 2^128) " + "and probably indicates an error." ) , isZero ) ; org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertNoErrors ( ) ; }
static void getString ( java.lang.invoke.MethodHandle m , Main.ValueHolder v , java.lang.String value , boolean expectFailure ) throws java.lang.Throwable { boolean exceptionThrown = false ; try { final java.lang.String got = ( v == null ) ? ( ( java.lang.String ) ( m.invokeExact ( ) ) ) : ( ( java.lang.String ) ( m.invokeExact ( v ) ) ) ; Main.Tester.assertTrue ( got.equals ( value ) ) ; } catch ( java.lang.invoke.WrongMethodTypeException e ) { exceptionThrown = true ; } Main.Tester.assertEquals ( exceptionThrown , expectFailure ) ; }
public boolean generate ( java.lang.String key ) { try { return ( mBinder.generate ( key , ( - 1 ) ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
public static com.android.jack.dx.rop.code.Rop opReturn ( com.android.jack.dx.rop.type.TypeBearer type ) { switch ( type.getBasicFrameType ( ) ) { case com.android.jack.dx.rop.type.Type.BT_INT : return com.android.jack.dx.rop.code.Rops.RETURN_INT ; case com.android.jack.dx.rop.type.Type.BT_CLOSURE : case com.android.jack.dx.rop.type.Type.BT_LONG : return com.android.jack.dx.rop.code.Rops.RETURN_LONG ; case com.android.jack.dx.rop.type.Type.BT_FLOAT : return com.android.jack.dx.rop.code.Rops.RETURN_FLOAT ; case com.android.jack.dx.rop.type.Type.BT_DOUBLE : return com.android.jack.dx.rop.code.Rops.RETURN_DOUBLE ; case com.android.jack.dx.rop.type.Type.BT_OBJECT : return com.android.jack.dx.rop.code.Rops.RETURN_OBJECT ; case com.android.jack.dx.rop.type.Type.BT_VOID : return com.android.jack.dx.rop.code.Rops.RETURN_VOID ; } return com.android.jack.dx.rop.code.Rops.throwBadType ( type ) ; }
public static < K , V > org.hamcrest.Matcher < java.util.Map < K , V > > hasEntry ( K key , V value ) { return org.hamcrest.collection.IsMapContaining.hasEntry ( org.hamcrest.collection.IsMapContaining.equalTo ( key ) , org.hamcrest.collection.IsMapContaining.equalTo ( value ) ) ; }
private boolean hasAllApns ( java.lang.String [ ] apnTypes ) { if ( com.android.internal.util.ArrayUtils.isEmpty ( apnTypes ) ) { return false ; } java.util.List apnList = java.util.Arrays.asList ( apnTypes ) ; if ( apnList.contains ( PhoneConstants.APN_TYPE_ALL ) ) { android.util.Log.d ( com.android.settings.ApnEditor.TAG , "hasAllApns: true because apnList.contains(PhoneConstants.APN_TYPE_ALL)" ) ; return true ; } for ( java.lang.String apn : com.android.internal.telephony.PhoneConstants.APN_TYPES ) { if ( ! ( apnList.contains ( apn ) ) ) { return false ; } } android.util.Log.d ( com.android.settings.ApnEditor.TAG , "hasAllApns: true" ) ; return true ; }
public void testFloat16Sub ( ) { setupTest ( ) ; android.renderscript.cts.ScriptC_float16_arithmetic script = new android.renderscript.cts.ScriptC_float16_arithmetic ( mRS ) ; script.set_gInput ( mInput ) ; script.forEach_sub ( mF16Matrix ) ; script.forEach_bitcast ( mF16Matrix , mU16Matrix ) ; mU16Matrix.copyTo ( output ) ; for ( int x = 0 ; x < ( numInputs ) ; x ++ ) { for ( int y = 0 ; y < ( numInputs ) ; y ++ ) { checkFloat16Sub ( x , y ) ; } } }
public void copy1DRangeFromUnchecked ( int off , int count , float [ ] d ) { int dataSize = ( mType.mElement.getBytesSize ( ) ) * count ; data1DChecks ( off , count , ( ( d.length ) * 4 ) , dataSize ) ; mRS.nAllocationData1D ( getIDSafe ( ) , off , mSelectedLOD , count , d , dataSize ) ; }
private static int getDefaultKeySizeForType ( int keyType ) { if ( keyType == ( com.android.org.conscrypt.NativeCrypto.EVP_PKEY_DSA ) ) { return android.security.KeyPairGeneratorSpec.DSA_DEFAULT_KEY_SIZE ; } else if ( keyType == ( com.android.org.conscrypt.NativeCrypto.EVP_PKEY_EC ) ) { return android.security.KeyPairGeneratorSpec.EC_DEFAULT_KEY_SIZE ; } else if ( keyType == ( com.android.org.conscrypt.NativeCrypto.EVP_PKEY_RSA ) ) { return android.security.KeyPairGeneratorSpec.RSA_DEFAULT_KEY_SIZE ; } throw new java.lang.IllegalArgumentException ( ( "Invalid key type " + keyType ) ) ; }
private static java.io.File getWrittenResources ( ) throws MergeConsumer.ConsumerException , com.android.ide.common.res2.DuplicateDataException , java.io.IOException { com.android.ide.common.res2.AssetMerger assetMerger = com.android.ide.common.res2.AssetMergerTest.getAssetMerger ( ) ; java.io.File folder = com.google.common.io.Files.createTempDir ( ) ; com.android.ide.common.res2.MergedAssetWriter writer = new com.android.ide.common.res2.MergedAssetWriter ( folder ) ; assetMerger.mergeData ( writer ) ; return folder ; }
private void parseProfileButtons ( com.android.cts.verifier.audio.peripheralprofile.ProfileButtonAttributes buttonAttributes , java.lang.String elementName , org.xml.sax.Attributes xmlAtts ) { buttonAttributes.mHasBtnA = ( java.lang.Integer.parseInt ( xmlAtts.getValue ( com.android.cts.verifier.audio.peripheralprofile.PeripheralProfile.kAttr_HasBtnA ) ) ) == 1 ; buttonAttributes.mHasBtnB = ( java.lang.Integer.parseInt ( xmlAtts.getValue ( com.android.cts.verifier.audio.peripheralprofile.PeripheralProfile.kAttr_HasBtnB ) ) ) == 1 ; buttonAttributes.mHasBtnC = ( java.lang.Integer.parseInt ( xmlAtts.getValue ( com.android.cts.verifier.audio.peripheralprofile.PeripheralProfile.kAttr_HasBtnC ) ) ) == 1 ; buttonAttributes.mHasBtnD = ( java.lang.Integer.parseInt ( xmlAtts.getValue ( com.android.cts.verifier.audio.peripheralprofile.PeripheralProfile.kAttr_HasBtnD ) ) ) == 1 ; }
public void setWifiLinkLayerStats ( java.lang.String iface , int enable ) { if ( com.android.server.wifi.WifiNative.HIDL_VENDOR_ENABLE ) { } else { if ( iface == null ) return ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { com.android.server.wifi.WifiNative.setWifiLinkLayerStatsNative ( com.android.server.wifi.WifiNative.sWlan0Index , enable ) ; } } } }
final android.content.res.XmlBlock openXmlBlockAsset ( int cookie , java.lang.String fileName ) throws java.io.IOException { synchronized ( this ) { if ( ! ( mOpen ) ) { throw new java.lang.RuntimeException ( "Assetmanager has been closed" ) ; } int xmlBlock = openXmlAssetNative ( cookie , fileName ) ; if ( xmlBlock != 0 ) { android.content.res.XmlBlock res = new android.content.res.XmlBlock ( this , xmlBlock ) ; incRefsLocked ( res.hashCode ( ) ) ; return res ; } } throw new java.io.FileNotFoundException ( ( "Asset XML file: " + fileName ) ) ; }
public synchronized void tearDown ( com.android.tradefed.invoker.IInvocationContext context , java.lang.Throwable e ) throws com.android.tradefed.device.DeviceNotAvailableException { -- ( mNumOfInstances ) ; if ( ( mNumOfInstances ) > 0 ) { return ; } if ( ( ( mVenvDir ) != null ) && ( mIsDirCreator ) ) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete ( mVenvDir.toPath ( ) ) ; com.android.tradefed.log.LogUtil.CLog.i ( "Deleted the virtual env's temp working dir, %s." , mVenvDir ) ; } catch ( java.io.IOException exception ) { com.android.tradefed.log.LogUtil.CLog.e ( "Failed to delete %s: %s" , mVenvDir , exception ) ; } mVenvDir = null ; } }
public void setWifiLinkLayerStats ( java.lang.String iface , int enable ) { try { if ( ( mWifiVendorHal ) != null ) { mWifiVendorHal.setWifiLinkLayerStats ( iface , enable ) ; return ; } } catch ( java.lang.UnsupportedOperationException e ) { } legacyHalWarning ( ) ; if ( iface == null ) return ; synchronized ( com.android.server.wifi.WifiNative.sLock ) { if ( isHalStarted ( ) ) { com.android.server.wifi.WifiNative.setWifiLinkLayerStatsNative ( com.android.server.wifi.WifiNative.sWlan0Index , enable ) ; } } }
public void test_useDelimiter_String ( ) { s = new java.util.Scanner ( "test" ) ; try { s.useDelimiter ( ( ( java.lang.String ) ( null ) ) ) ; fail ( "Should throw NullPointerException" ) ; } catch ( java.lang.NullPointerException e ) { } s = new java.util.Scanner ( "test" ) ; s.useDelimiter ( "\\w+" ) ; assertEquals ( "\\w+" , s.delimiter ( ) . toString ( ) ) ; }
public boolean hasNextLong ( int radix ) { java.util.regex.Pattern integerPattern = getIntegerPattern ( radix ) ; boolean isLongValue = false ; if ( hasNext ( integerPattern ) ) { java.lang.String intString = matcher.group ( ) ; intString = removeLocaleInfo ( intString , java.util.Scanner.DataType.INT ) ; try { cachedNextValue = java.lang.Long.valueOf ( intString , radix ) ; isLongValue = true ; } catch ( java.lang.NumberFormatException e ) { matchSuccessful = false ; } } return isLongValue ; }
private void putAllImpl ( java.util.Map map ) { java.util.Iterator iter = map.entrySet ( ) . iterator ( ) ; while ( iter.hasNext ( ) ) { java.util.Map.Entry entry = ( ( java.util.Map.Entry ) ( iter.next ( ) ) ) ; putImpl ( ( ( K ) ( entry.getKey ( ) ) ) , ( ( V ) ( entry.getValue ( ) ) ) ) ; } }
private com.android.build.gradle.internal.test.report.PackageTestResults addPackage ( java.lang.String packageName , java.lang.String device , java.lang.String project , java.lang.String flavor ) { java.lang.String key = ( ( ( ( ( device + "/" ) + project ) + "/" ) + flavor ) + "/" ) + packageName ; com.android.build.gradle.internal.test.report.PackageTestResults packageResults = packages.get ( key ) ; if ( packageResults == null ) { packageResults = new com.android.build.gradle.internal.test.report.PackageTestResults ( packageName , this , device , project , flavor ) ; packages.put ( key , packageResults ) ; } return packageResults ; }
void registerClient ( java.util.UUID uuid , android.bluetooth.IBluetoothGattCallback callback ) { enforceCallingOrSelfPermission ( com.android.bluetooth.gatt.BLUETOOTH_PERM , "Need BLUETOOTH permission" ) ; if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( "registerClient() - UUID=" + uuid ) ) ; mClientMap.add ( uuid , callback ) ; gattClientRegisterAppNative ( uuid.getLeastSignificantBits ( ) , uuid.getMostSignificantBits ( ) ) ; }
public void testNewConstructors_Success ( ) throws java.lang.Exception { java.security.SecureRandom sr1 = new java.security.SecureRandom ( ) ; assertEquals ( libcore.java.security.SecureRandomTest.EXPECTED_PROVIDER , sr1.getProvider ( ) . getClass ( ) . getName ( ) ) ; test_SecureRandom ( sr1 ) ; java.security.SecureRandom sr2 = new java.security.SecureRandom ( libcore.java.security.SecureRandomTest.STATIC_SEED_BYTES ) ; assertEquals ( libcore.java.security.SecureRandomTest.EXPECTED_PROVIDER , sr2.getProvider ( ) . getClass ( ) . getName ( ) ) ; test_SecureRandom ( sr2 ) ; }
private static java.lang.String normalizeInterfaceMethodName ( java.lang.String name , boolean isLambda , boolean isStatic ) { java.lang.String suffix ; if ( isLambda ) { suffix = DependencyCollector.INTERFACE_COMPANION_SUFFIX ; } else if ( isStatic ) { suffix = com.google.devtools.build.android.desugar.InterfaceDesugaring.INTERFACE_STATIC_COMPANION_METHOD_SUFFIX ; } else { return name ; } return name + suffix ; }
public E next ( ) { if ( ( cursor ) == ( fence ) ) throw new java.util.NoSuchElementException ( ) ; E result = elements [ cursor ] ; if ( ( ( tail ) != ( fence ) ) || ( result == null ) ) throw new java.util.ConcurrentModificationException ( ) ; lastRet = cursor ; cursor = ( ( cursor ) + 1 ) & ( ( elements.length ) - 1 ) ; return result ; }
public int getProfileConnectionState ( int profile ) { if ( ! ( com.android.bluetooth.Utils.checkCallerAllowManagedProfiles ( mService ) ) ) { android.util.Log.w ( com.android.bluetooth.btservice.AdapterService.TAG , "getProfileConnectionState- Not allowed for non-active user" ) ; return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ; } com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED ; return service.getProfileConnectionState ( profile ) ; }
public boolean isRingingForSubscriber ( int subId , java.lang.String callingPackage ) { if ( ! ( com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState ( mApp , callingPackage , "isRingingForSubscriber" ) ) ) { return false ; } final com.android.internal.telephony.Phone phone = getPhone ( subId ) ; if ( phone != null ) { return ( phone.getState ( ) ) == ( PhoneConstants.State.RINGING ) ; } else { return false ; } }
public void runTest ( ) { mConvolve.setInput ( mInPixelsAllocation ) ; if ( mUseNative ) { mGroup.setOutput ( mMatrix.getKernelID ( ) , mOutPixelsAllocation ) ; mGroup.execute ( ) ; } else { mConvolve.forEach ( mScratchPixelsAllocation1 ) ; mMatrix.forEach ( mScratchPixelsAllocation1 , mOutPixelsAllocation ) ; } }
public void afterHandshake ( int session , int s , int c , java.net.Socket sock , java.io.FileDescriptor fd , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertEqualSessions ( clientSession [ 0 ] , session ) ; super . afterHandshake ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL , s , org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL , sock , fd , callback ) ; }
private static com.android.sched.scheduler.TagOrMarkerOrComponentSet getJackFormatInitialTagSet ( ) { com.android.sched.scheduler.Scheduler scheduler = com.android.sched.scheduler.Scheduler.getScheduler ( ) ; com.android.sched.scheduler.TagOrMarkerOrComponentSet set = scheduler.createTagOrMarkerOrComponentSet ( ) ; set.add ( com.android.jack.ir.JackFormatIr.class ) ; set.add ( com.android.jack.shrob.obfuscation.OriginalNames.class ) ; set.add ( com.android.jack.ir.sourceinfo.SourceInfoCreation.class ) ; return set ; }
public void shutdown ( ) { if ( ( mStopped ) == false ) { mStopped = true ; try { mServerSocket.close ( ) ; } catch ( java.io.IOException e ) { if ( com.android.bluetooth.ObexServerSockets.D ) android.util.Log.d ( TAG , "Exception while thread shutdown:" , e ) ; } } if ( ! ( java.lang.Thread.currentThread ( ) . equals ( this ) ) ) { if ( com.android.bluetooth.ObexServerSockets.D ) android.util.Log.d ( TAG , "shutdown called from another thread - interrupt()." ) ; interrupt ( ) ; } }
public void test ( ) throws java.lang.Exception { assertEquals ( ( "src/test/pkg/LocaleTest.java:11: Warning: Implicitly using the default locale is a common source of bugs: Use toUpperCase(Locale) instead [DefaultLocale]\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( " System.out.println(\"WRONG\".toUpperCase());\n" + " ~~~~~~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:16: Warning: Implicitly using the default locale is a common source of bugs: Use toLowerCase(Locale) instead [DefaultLocale]\n" ) + " System.out.println(\"WRONG\".toLowerCase());\n" ) + " ~~~~~~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:20: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]\n" ) + " String.format(\"WRONG: %f\", 1.0f); // Implies locale\n" ) + " ~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:21: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]\n" ) + " String.format(\"WRONG: %1$f\", 1.0f);\n" ) + " ~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:22: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]\n" ) + " String.format(\"WRONG: %e\", 1.0f);\n" ) + " ~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:23: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]\n" ) + " String.format(\"WRONG: %d\", 1.0f);\n" ) + " ~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:24: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]\n" ) + " String.format(\"WRONG: %g\", 1.0f);\n" ) + " ~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:25: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]\n" ) + " String.format(\"WRONG: %g\", 1.0f);\n" ) + " ~~~~~~\n" ) + "src/test/pkg/LocaleTest.java:26: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]\n" ) + " String.format(\"WRONG: %1$tm %1$te,%1$tY\",\n" ) + " ~~~~~~\n" ) + "0 errors, 9 warnings\n" ) ) , lintProject ( "bytecode/.classpath=>.classpath" , "bytecode/AndroidManifest.xml=>AndroidManifest.xml" , "res/layout/onclick.xml=>res/layout/onclick.xml" , "bytecode/LocaleTest.java.txt=>src/test/pkg/LocaleTest.java" , "bytecode/LocaleTest.class.data=>bin/classes/test/pkg/LocaleTest.class" ) ) ; }
public boolean setRemoteAlias ( android.bluetooth.BluetoothDevice device , java.lang.String name ) { if ( ! ( com.android.bluetooth.Utils.checkCaller ( ) ) ) { android.util.Log.w ( com.android.bluetooth.btservice.AdapterService.TAG , "setRemoteAlias() - Not allowed for non-active user" ) ; return false ; } com.android.bluetooth.btservice.AdapterService service = getService ( ) ; if ( service == null ) return false ; return service.setRemoteAlias ( device , name ) ; }
public void test_EVP_SignInit ( ) throws java.lang.Exception { final int ctx = org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_SignInit ( "RSA-SHA256" ) ; assertTrue ( ( ctx != ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL ) ) ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_MD_CTX_destroy ( ctx ) ; try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_SignInit ( "foobar" ) ; fail ( ) ; } catch ( java.lang.RuntimeException expected ) { } }
static byte [ ] toBytes ( java.lang.Object object ) { java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream ( ) ; try { java.io.ObjectOutputStream os = new java.io.ObjectOutputStream ( baos ) ; os.writeObject ( object ) ; os.close ( ) ; } catch ( java.lang.Exception e ) { android.util.Log.w ( com.android.certinstaller.Util.TAG , ( ( ( "toBytes(): " + e ) + ": " ) + object ) ) ; } finally { return baos.toByteArray ( ) ; } }
private void generateTestManifest ( java.lang.String testPackageName , int minSdkVersion , int targetSdkVersion , java.lang.String testedPackageName , java.lang.String instrumentationRunner , java.lang.Boolean handleProfiling , java.lang.Boolean functionalTest , java.lang.String outManifestLocation ) { com.android.builder.internal.TestManifestGenerator generator = new com.android.builder.internal.TestManifestGenerator ( outManifestLocation , testPackageName , minSdkVersion , targetSdkVersion , testedPackageName , instrumentationRunner , handleProfiling , functionalTest ) ; try { generator.generate ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public boolean canThrow ( ) { return ( ( ( ( getType ( ) . isSameType ( JPrimitiveTypeEnum.BYTE.getType ( ) ) ) || ( getType ( ) . isSameType ( JPrimitiveTypeEnum.CHAR.getType ( ) ) ) ) || ( getType ( ) . isSameType ( JPrimitiveTypeEnum.SHORT.getType ( ) ) ) ) || ( getType ( ) . isSameType ( JPrimitiveTypeEnum.INT.getType ( ) ) ) ) || ( getType ( ) . isSameType ( JPrimitiveTypeEnum.LONG.getType ( ) ) ) ; }
private static java.util.ResourceBundle.Control getDefaultControl ( java.lang.String baseName ) { if ( ( java.util.ResourceBundle.providers ) != null ) { for ( java.util.spi.ResourceBundleControlProvider provider : java.util.ResourceBundle.providers ) { java.util.ResourceBundle.Control control = provider.getControl ( baseName ) ; if ( control != null ) { return control ; } } } return java.util.ResourceBundle.Control.INSTANCE ; }
public void run ( ) { com.android.rs.test_compat.RenderScript pRS = com.android.rs.test_compat.RenderScript.create ( mCtx ) ; com.android.rs.test_compat.ScriptC_bug_char s = new com.android.rs.test_compat.ScriptC_bug_char ( pRS , mRes , R.raw.bug_char ) ; pRS.setMessageHandler ( mRsMessage ) ; initializeValues ( s ) ; s.invoke_bug_char_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
void onAdvertiserStarted ( int status , int advertiserId ) throws android.os.RemoteException { if ( com.android.bluetooth.gatt.GattService.DBG ) android.util.Log.d ( com.android.bluetooth.gatt.GattService.TAG , ( ( ( "onAdvertiserStarted() - advertiserId=" + advertiserId ) + ", status=" ) + status ) ) ; mAdvertiseManager.callbackDone ( advertiserId , status ) ; com.android.bluetooth.gatt.AdvertiserMap.App app = mAdvertiserMap.getById ( advertiserId ) ; if ( app != null ) { if ( status == 0 ) { app.callback.onMultiAdvertiseCallback ( AdvertiseCallback.ADVERTISE_SUCCESS , true , null ) ; } else { app.callback.onMultiAdvertiseCallback ( AdvertiseCallback.ADVERTISE_FAILED_INTERNAL_ERROR , true , null ) ; } } }
public void test_removeHandshakeCompletedListener ( ) throws java.io.IOException { javax.net.ssl.SSLSocket ssl = getSSLSocket ( ) ; javax.net.ssl.HandshakeCompletedListener ls = new org.apache.harmony.tests.javax.net.ssl.SSLSocketTest.HandshakeCL ( ) ; try { ssl.removeHandshakeCompletedListener ( null ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } try { ssl.removeHandshakeCompletedListener ( ls ) ; } catch ( java.lang.IllegalArgumentException expected ) { } ssl.addHandshakeCompletedListener ( ls ) ; ssl.removeHandshakeCompletedListener ( ls ) ; ssl.close ( ) ; }
public void onPageFinished ( android.webkit.WebView view , java.lang.String url ) { if ( ! ( mInPageLoad ) ) { return ; } if ( ! ( isPrivateBrowsingEnabled ( ) ) ) { com.android.browser.LogTag.logPageFinishedLoading ( url , ( ( android.os.SystemClock.uptimeMillis ( ) ) - ( mLoadStartTime ) ) ) ; } syncCurrentState ( view , url ) ; mWebViewController.onPageFinished ( this ) ; }
public int getProfileConnectionState ( com.android.settingslib.bluetooth.LocalBluetoothProfile profile ) { if ( ( ( mProfileConnectionState ) == null ) || ( ( mProfileConnectionState.get ( profile ) ) == null ) ) { int state = profile.getConnectionStatus ( mDevice ) ; mProfileConnectionState.put ( profile , state ) ; } return mProfileConnectionState.get ( profile ) ; }
com.android.ide.eclipse.adt.internal.editors.layout.ProjectCallback getProjectCallback ( boolean reset , com.android.ide.common.rendering.LayoutLibrary layoutLibrary ) { if ( ( mProjectCallback ) == null ) { com.android.ide.eclipse.adt.internal.resources.manager.ResourceManager resManager = com.android.ide.eclipse.adt.internal.resources.manager.ResourceManager.getInstance ( ) ; org.eclipse.core.resources.IProject project = getProject ( ) ; com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources projectRes = resManager.getProjectResources ( project ) ; mProjectCallback = new com.android.ide.eclipse.adt.internal.editors.layout.ProjectCallback ( layoutLibrary , projectRes , project , mCredential ) ; } else if ( reset ) { mProjectCallback.getMissingClasses ( ) . clear ( ) ; mProjectCallback.getUninstantiatableClasses ( ) . clear ( ) ; } return mProjectCallback ; }
public void run ( ) { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create ( mCtx ) ; com.android.rs.test.ScriptC_copy_test s = new com.android.rs.test.ScriptC_copy_test ( pRS ) ; pRS.setMessageHandler ( mRsMessage ) ; testFloat2 ( pRS , s ) ; testFloat3 ( pRS , s ) ; testFloat4 ( pRS , s ) ; s.invoke_sendResult ( true ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
private boolean scanFile ( android.database.Cursor cursor , int arrayPos ) { com.android.bluetooth.opp.BluetoothOppShareInfo info = mShares.get ( arrayPos ) ; synchronized ( this ) { if ( com.android.bluetooth.opp.BluetoothOppService.D ) { android.util.Log.d ( com.android.bluetooth.opp.BluetoothOppService.TAG , ( "Scanning file " + ( info.mFilename ) ) ) ; } if ( ! ( mMediaScanInProgress ) ) { mMediaScanInProgress = true ; new com.android.bluetooth.opp.BluetoothOppService.MediaScannerNotifier ( this , info , mHandler ) ; return true ; } else { return false ; } } }
static void nativeSetDrawFilter ( int nativeCanvas , int nativeFilter ) { android.graphics.Canvas_Delegate canvasDelegate = android.graphics.Canvas_Delegate.sManager.getDelegate ( nativeCanvas ) ; if ( canvasDelegate == null ) { return ; } canvasDelegate.mDrawFilter = android.graphics.DrawFilter_Delegate.getDelegate ( nativeFilter ) ; if ( ( ( canvasDelegate.mDrawFilter ) != null ) && ( ( canvasDelegate.mDrawFilter.isSupported ( ) ) == false ) ) { com.android.layoutlib.bridge.Bridge.getLog ( ) . fidelityWarning ( LayoutLog.TAG_DRAWFILTER , canvasDelegate.mDrawFilter.getSupportMessage ( ) , null , null ) ; } }
public void copy1DRangeFromUnchecked ( int off , int count , int [ ] d ) { android.os.Trace.traceBegin ( RenderScript.TRACE_TAG , "copy1DRangeFromUnchecked" ) ; int dataSize = ( mType.mElement.getBytesSize ( ) ) * count ; data1DChecks ( off , count , ( ( d.length ) * 4 ) , dataSize ) ; mRS.nAllocationData1D ( getIDSafe ( ) , off , mSelectedLOD , count , d , dataSize , Element.DataType.SIGNED_32 ) ; android.os.Trace.traceEnd ( RenderScript.TRACE_TAG ) ; }
protected final int next ( int numBits ) { int numBytes = ( numBits + 7 ) / 8 ; byte [ ] b = new byte [ numBytes ] ; int next = 0 ; nextBytes ( b ) ; for ( int i = 0 ; i < numBytes ; i ++ ) next = ( next << 8 ) + ( ( b [ i ] ) & 255 ) ; return next > > > ( ( numBytes * 8 ) - numBits ) ; }
public void testEvaluateNetworks_potentialConnectableNetworksIsNull ( ) { org.mockito.Mockito.when ( mWifiConfigManager.wasEphemeralNetworkDeleted ( org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( false ) ; org.mockito.Mockito.when ( mNetworkScoreManager.requestRecommendation ( org.mockito.Mockito.any ( android.net.RecommendationRequest.class ) ) ) . thenReturn ( android.net.RecommendationResult.createDoNotConnectRecommendation ( ) ) ; mRecommendedNetworkEvaluator.evaluateNetworks ( com.google.android.collect.Lists.newArrayList ( mTrustedScanDetail , mEphemeralScanDetail , mUntrustedScanDetail ) , null , null , false , true , null ) ; }
public void glDrawArrays ( int mode , int first , int count ) { begin ( "glDrawArrays" ) ; arg ( "mode" , mode ) ; arg ( "first" , first ) ; arg ( "count" , count ) ; startLogIndices ( ) ; for ( int i = 0 ; i < count ; i ++ ) { doElement ( mStringBuilder , i , ( first + count ) ) ; } endLogIndices ( ) ; end ( ) ; mgl.glDrawArrays ( mode , first , count ) ; checkError ( ) ; }
public static void run ( ) throws java.lang.Exception { art.Main.bindAgentJNIForClass ( art.Test924.class ) ; java.lang.Thread t = new java.lang.Thread ( "TestThread" ) { @ java.lang.Override public void run ( ) { try { art.Test924.doTest ( ) ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } } } ; t.start ( ) ; t.join ( ) ; }
public void installSystemApplicationInfo ( android.content.pm.ApplicationInfo info ) { synchronized ( this ) { android.app.ContextImpl context = getSystemContext ( ) ; context.init ( new android.app.LoadedApk ( this , "android" , context , info , android.content.res.CompatibilityInfo.DEFAULT_COMPATIBILITY_INFO ) , null , this ) ; mProfiler = new android.app.ActivityThread.Profiler ( ) ; } }
public void test_accept_SOTIMEOUT ( ) throws java.io.IOException { final int SO_TIMEOUT = 10 ; java.nio.channels.ServerSocketChannel sc = java.nio.channels.ServerSocketChannel.open ( ) ; try { java.net.ServerSocket ss = sc.socket ( ) ; ss.bind ( null ) ; sc.configureBlocking ( false ) ; ss.setSoTimeout ( SO_TIMEOUT ) ; java.nio.channels.SocketChannel client = sc.accept ( ) ; assertNull ( client ) ; int soTimeout = ss.getSoTimeout ( ) ; assertEquals ( SO_TIMEOUT , soTimeout ) ; } finally { sc.close ( ) ; } }
public static boolean hasError ( @ javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration ) { return ( ( ( typeDeclaration.hasErrors ( ) ) || ( ( ( typeDeclaration.getCompilationUnitDeclaration ( ) ) != null ) && ( typeDeclaration.getCompilationUnitDeclaration ( ) . hasErrors ( ) ) ) ) || ( typeDeclaration.compilationResult.hasErrors ( ) ) ) || ( ( typeDeclaration.binding ) == null ) ; }
private void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context , @ com.android.annotations.NonNull java.lang.Object cookie , @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.NonNull java.lang.String message ) { if ( context.isEnabled ( issue ) ) { boolean checkComments = context.containsCommentSuppress ( ) ; if ( checkComments ) { int startOffset = getStartOffset ( context , cookie ) ; if ( ( startOffset >= 0 ) && ( context.isSuppressedWithComment ( startOffset , issue ) ) ) { return ; } } context.report ( issue , createLocation ( context , cookie ) , message , null ) ; } }
private static java.lang.String concatenateRange ( java.lang.String [ ] array , int start , int end ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( 32 ) ; for ( int i = start ; i < end ; ++ i ) { if ( i != 0 ) { builder.append ( '-' ) ; } builder.append ( array [ i ] ) ; } return builder.toString ( ) ; }
private static byte [ ] byteArrayFromArrayList ( java.util.ArrayList < java.lang.Byte > bytes ) { byte [ ] byteArray = new byte [ bytes.size ( ) ] ; int i = 0 ; for ( java.lang.Byte b : bytes ) { byteArray [ ( i ++ ) ] = b ; } return byteArray ; }
private synchronized void loadStrings ( java.lang.String tzCanonicalID ) { if ( ( tzCanonicalID == null ) || ( ( tzCanonicalID.length ( ) ) == 0 ) ) { return ; } loadTimeZoneNames ( null , tzCanonicalID ) ; com.ibm.icu.impl.TimeZoneNamesImpl.ZNamesLoader loader = com.ibm.icu.impl.TimeZoneNamesImpl.ZNamesLoader.forMetaZoneNames ( ) ; java.util.Set < java.lang.String > mzIDs = getAvailableMetaZoneIDs ( tzCanonicalID ) ; for ( java.lang.String mzID : mzIDs ) { loadMetaZoneNames ( loader , mzID ) ; } addAllNamesIntoTrie ( ) ; }
public static java.util.logging.Logger getAnonymousLogger ( java.lang.String resourceBundleName ) { java.util.logging.LogManager manager = java.util.logging.LogManager.getLogManager ( ) ; manager.drainLoggerRefQueueBounded ( ) ; java.util.logging.Logger result = new java.util.logging.Logger ( null , resourceBundleName , dalvik.system.VMStack.getStackClass1 ( ) ) ; result.anonymous = true ; java.util.logging.Logger root = manager.getLogger ( "" ) ; result.doSetParent ( root ) ; return result ; }
public static void main ( java.lang.String [ ] args ) { java.lang.System.loadLibrary ( args [ 1 ] ) ; java.lang.System.out.println ( "Hello, world!" ) ; if ( Main.checkLivePhase ( ) ) { java.lang.System.out.println ( "Agent in live phase." ) ; } Main.set ( 0 ) ; Main.set ( 1 ) ; Main.set ( 2 ) ; Main.set ( 4 ) ; Main.set ( 8 ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { java.io.BufferedReader in = new java.io.BufferedReader ( new java.io.InputStreamReader ( java.lang.System.in ) ) ; java.lang.String line = null ; java.lang.StringBuilder responseData = new java.lang.StringBuilder ( ) ; android.net.apf.ApfGenerator gen = new android.net.apf.ApfGenerator ( ) ; while ( ( line = in.readLine ( ) ) != null ) android.net.apf.Bpf2Apf.convertLine ( line , gen ) ; java.lang.System.out.write ( gen.generate ( ) ) ; }
private static com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor createDesc ( java.lang.String name , java.lang.String fqn , boolean hasChildren ) { if ( hasChildren ) { return new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ( name , name , fqn , "" , "" , new com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor [ 0 ] , new com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor [ 0 ] , new com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor [ 1 ] , false ) ; } else { return new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ( name , fqn ) ; } }
public java.lang.String describeMissingPermissions ( @ com.android.annotations.NonNull com.android.tools.lint.checks.PermissionHolder available ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; boolean first = true ; for ( com.android.tools.lint.checks.PermissionRequirement requirement : permissions ) { if ( ! ( requirement.isSatisfied ( available ) ) ) { if ( first ) { first = false ; } else { com.android.tools.lint.checks.PermissionRequirement.appendOperator ( sb , operator ) ; } sb.append ( requirement.describeMissingPermissions ( available ) ) ; } } return sb.toString ( ) ; }
public void afterHandshake ( int session , int ssl , int context , java.net.Socket socket , java.io.FileDescriptor fd , org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSLHandshakeCallbacks callback ) throws java.lang.Exception { byte [ ] negotiated = org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_get_npn_negotiated_protocol ( ssl ) ; assertEquals ( "spdy/2" , new java.lang.String ( negotiated ) ) ; assertTrue ( "NPN should enable cutthrough on the client" , ( 0 != ( ( org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_get_mode ( ssl ) ) & ( org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_MODE_HANDSHAKE_CUTTHROUGH ) ) ) ) ; super . afterHandshake ( session , ssl , context , socket , fd , callback ) ; }
private void convertTo9Patch ( ) { java.awt.image.BufferedImage buffer = com.android.draw9patch.graphics.GraphicsUtilities.createTranslucentCompatibleImage ( ( ( image.getWidth ( ) ) + 2 ) , ( ( image.getHeight ( ) ) + 2 ) ) ; java.awt.Graphics2D g2 = buffer.createGraphics ( ) ; g2.drawImage ( image , 1 , 1 , null ) ; g2.dispose ( ) ; image = buffer ; viewer.setImage ( image ) ; name = ( name.substring ( 0 , name.lastIndexOf ( '.' ) ) ) + ".9.png" ; }
public void stop ( ) { if ( ! ( mStarted ) ) { return ; } mStarted = false ; mDbLoadFinished = false ; com.android.tv.data.ChannelLogoFetcher.stopFetchingChannelLogos ( ) ; mInputManager.removeCallback ( mTvInputCallback ) ; mContentResolver.unregisterContentObserver ( mChannelObserver ) ; mHandler.removeCallbacksAndMessages ( null ) ; mChannelWrapperMap.clear ( ) ; clearChannels ( ) ; mPostRunnablesAfterChannelUpdate.clear ( ) ; if ( ( mChannelsUpdateTask ) != null ) { mChannelsUpdateTask.cancel ( true ) ; mChannelsUpdateTask = null ; } applyUpdatedValuesToDb ( ) ; }
private android.os.Parcel getParcelForFile ( java.io.File file ) throws java.io.IOException { java.io.FileInputStream stream = new java.io.FileInputStream ( file ) ; byte [ ] raw = com.android.server.am.UsageStatsService.readFully ( stream ) ; android.os.Parcel in = android.os.Parcel.obtain ( ) ; in.unmarshall ( raw , 0 , raw.length ) ; in.setDataPosition ( 0 ) ; stream.close ( ) ; return in ; }
private void handleUserUnlockOrSwitch ( int userId ) { if ( mVerboseLoggingEnabled ) { android.util.Log.v ( com.android.server.wifi.WifiConfigManager.TAG , ( "Loading from store after user switch/unlock for " + userId ) ) ; } if ( ( mWifiConfigStoreLegacy.areStoresPresent ( ) ) && ( ! ( mWifiConfigStore.areStoresPresent ( ) ) ) ) { android.util.Log.d ( com.android.server.wifi.WifiConfigManager.TAG , ( "Legacy store files found. Ignore user switch/unlock until migration is " + "complete!" ) ) ; return ; } if ( loadFromUserStoreAfterUnlockOrSwitch ( userId ) ) { saveToStore ( true ) ; mPendingUnlockStoreRead = false ; } }
public void findBestSampleSize ( ) { assertEquals ( 1 , com.android.volley.toolbox.ImageRequest.findBestSampleSize ( 100 , 150 , 100 , 150 ) ) ; assertEquals ( 2 , com.android.volley.toolbox.ImageRequest.findBestSampleSize ( 280 , 160 , 140 , 80 ) ) ; assertEquals ( 1 , com.android.volley.toolbox.ImageRequest.findBestSampleSize ( 1000 , 800 , 501 , 401 ) ) ; assertEquals ( 4 , com.android.volley.toolbox.ImageRequest.findBestSampleSize ( 100 , 200 , 24 , 50 ) ) ; }
public void onResume ( ) { super . onResume ( ) ; com.android.internal.telephony.cat.CatLog.d ( com.android.stk.StkInputActivity.LOG_TAG , ( ( ( "onResume - mIsResponseSent[" + ( mIsResponseSent ) ) + "], slot id: " ) + ( mSlotId ) ) ) ; startTimeOut ( ) ; if ( mIsResponseSent ) { cancelTimeOut ( ) ; finish ( ) ; } }
private static com.android.sched.util.file.Directory createTempDir ( @ javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks ) { try { java.io.File tmp = com.android.sched.util.file.Files.createTempDir ( "jack-" ) ; com.android.sched.util.file.Directory dir = new com.android.sched.util.file.Directory ( tmp.getPath ( ) , hooks , com.android.sched.util.file.FileOrDirectory.Existence.MUST_EXIST , com.android.sched.util.file.FileOrDirectory.Permission.WRITE , com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE ) ; hooks.addHook ( new com.android.jack.Options.TempDirDeleter ( dir ) ) ; return dir ; } catch ( java.io.IOException e ) { throw new com.android.jack.JackUserException ( e ) ; } }
public void test_EVP_SignInit ( ) throws java.lang.Exception { final int ctx = org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_SignInit ( "RSA-SHA256" ) ; assertTrue ( ( ctx != ( org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL ) ) ) ; org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_MD_CTX_destroy ( ctx ) ; try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_SignInit ( "foobar" ) ; fail ( ) ; } catch ( java.lang.RuntimeException expected ) { } org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertNoErrors ( ) ; }
public static com.android.jack.dx.rop.code.Rop opGetStatic ( com.android.jack.dx.rop.type.TypeBearer type ) { switch ( type.getBasicType ( ) ) { case com.android.jack.dx.rop.type.Type.BT_INT : return com.android.jack.dx.rop.code.Rops.GET_STATIC_INT ; case com.android.jack.dx.rop.type.Type.BT_LONG : return com.android.jack.dx.rop.code.Rops.GET_STATIC_LONG ; case com.android.jack.dx.rop.type.Type.BT_FLOAT : return com.android.jack.dx.rop.code.Rops.GET_STATIC_FLOAT ; case com.android.jack.dx.rop.type.Type.BT_DOUBLE : return com.android.jack.dx.rop.code.Rops.GET_STATIC_DOUBLE ; case com.android.jack.dx.rop.type.Type.BT_CLOSURE : case com.android.jack.dx.rop.type.Type.BT_OBJECT : return com.android.jack.dx.rop.code.Rops.GET_STATIC_OBJECT ; case com.android.jack.dx.rop.type.Type.BT_BOOLEAN : return com.android.jack.dx.rop.code.Rops.GET_STATIC_BOOLEAN ; case com.android.jack.dx.rop.type.Type.BT_BYTE : return com.android.jack.dx.rop.code.Rops.GET_STATIC_BYTE ; case com.android.jack.dx.rop.type.Type.BT_CHAR : return com.android.jack.dx.rop.code.Rops.GET_STATIC_CHAR ; case com.android.jack.dx.rop.type.Type.BT_SHORT : return com.android.jack.dx.rop.code.Rops.GET_STATIC_SHORT ; } return com.android.jack.dx.rop.code.Rops.throwBadType ( type ) ; }
public void fidelityWarning ( java.lang.String tag , java.lang.String message , java.lang.Throwable throwable ) { java.lang.String description = describe ( tag , message ) ; com.android.ide.eclipse.adt.AdtPlugin.log ( throwable , "%1$s: %2$s" , mName , description ) ; if ( throwable != null ) { mHaveExceptions = true ; } addFidelityWarning ( description ) ; }
public boolean registerApp ( android.bluetooth.BluetoothHidDeviceAppConfiguration config , android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp , android.bluetooth.BluetoothHidDeviceAppQosSettings inQos , android.bluetooth.BluetoothHidDeviceAppQosSettings outQos , android.bluetooth.IBluetoothHidDeviceCallback callback ) { if ( com.android.bluetooth.hid.HidDevService.DBG ) android.util.Log.v ( com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG , "registerApp()" ) ; com.android.bluetooth.hid.HidDevService service = getService ( ) ; if ( service == null ) { return false ; } return service.registerApp ( config , sdp , inQos , outQos , callback ) ; }
public void test_verifySignedCertificateTimestamps_withInvalidOCSPResponse ( ) throws java.lang.Exception { if ( ! ( org.conscrypt.NativeCrypto.isBoringSSL ) ) { return ; } org.conscrypt.OpenSSLX509Certificate [ ] chain = new org.conscrypt.OpenSSLX509Certificate [ ] { cert , ca } ; byte [ ] ocspResponse = new byte [ ] { 1 , 2 , 3 , 4 } ; org.conscrypt.ct.CTVerificationResult result = ctVerifier.verifySignedCertificateTimestamps ( chain , null , ocspResponse ) ; assertEquals ( 0 , result.getValidSCTs ( ) . size ( ) ) ; assertEquals ( 0 , result.getInvalidSCTs ( ) . size ( ) ) ; }
protected void readSourceFolder ( java.io.File sourceFolder , com.android.utils.ILogger logger ) throws com.android.ide.common.res2.MergingException { java.io.File [ ] folders = sourceFolder.listFiles ( ) ; if ( folders != null ) { for ( java.io.File folder : folders ) { if ( ( folder.isDirectory ( ) ) && ( com.android.ide.common.packaging.PackagingUtils.checkFolderForPackaging ( folder.getName ( ) ) ) ) { com.android.ide.common.res2.ResourceSet.FolderData folderData = com.android.ide.common.res2.ResourceSet.getFolderData ( folder ) ; if ( ( folderData.folderType ) != null ) { parseFolder ( sourceFolder , folder , folderData , logger ) ; } } } } }
private static void check ( long actual , long expected , java.lang.String msg ) { if ( actual != expected ) { java.lang.System.out.println ( ( ( ( ( msg + " : " ) + actual ) + " != " ) + expected ) ) ; java.lang.System.exit ( ( - 1 ) ) ; } }
void copy2DRangeFromUnchecked ( int xoff , int yoff , int w , int h , byte [ ] data ) { mRS.validate ( ) ; validate2DRange ( xoff , yoff , w , h ) ; mRS.nAllocationData2D ( getIDSafe ( ) , xoff , yoff , mSelectedLOD , mSelectedFace.mID , w , h , data , data.length ) ; }
void onRemovedFromCallList ( ) { com.android.dialer.common.LogUtil.enterBlock ( "DialerCall.onRemovedFromCallList" ) ; if ( ( videoTechManager ) != null ) { videoTechManager.dispatchRemovedFromCallList ( ) ; } if ( ( ( rttTranscript ) != null ) && ( ! ( isCallRemoved ) ) ) { com.google.common.util.concurrent.Futures.addCallback ( com.android.dialer.rtt.RttTranscriptUtil.saveRttTranscript ( context , rttTranscript ) , new com.android.dialer.common.concurrent.DefaultFutureCallback ( ) , com.google.common.util.concurrent.MoreExecutors.directExecutor ( ) ) ; } isCallRemoved = true ; }
public boolean generate ( java.lang.String key , int uid ) { try { return ( mBinder.generate ( key , uid ) ) == ( android.security.KeyStore.NO_ERROR ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( android.security.KeyStore.TAG , "Cannot connect to keystore" , e ) ; return false ; } }
private void loadClass ( ) throws java.io.IOException { java.io.DataInputStream in = mInput ; int serial = in.readInt ( ) ; long id = readId ( ) ; int stackTrace = in.readInt ( ) ; java.lang.String name = mStrings.get ( readId ( ) ) ; mClassNames.put ( id , name ) ; }
synchronized void recordImplicitRejection ( @ com.android.annotations.NonNull com.android.manifmerger.XmlAttribute attribute , @ com.android.annotations.NonNull com.android.manifmerger.XmlElement implicitAttributeOwner ) { java.util.List < com.android.manifmerger.Actions.AttributeRecord > attributeRecords = getAttributeRecords ( attribute ) ; com.android.manifmerger.Actions.AttributeRecord attributeRecord = new com.android.manifmerger.Actions.AttributeRecord ( Actions.ActionType.REJECTED , new com.android.manifmerger.Actions.ActionLocation ( implicitAttributeOwner.getDocument ( ) . getSourceLocation ( ) , implicitAttributeOwner.getPosition ( ) ) , attribute.getId ( ) , AttributeOperationType.REPLACE ) ; attributeRecords.add ( attributeRecord ) ; }
public void testAssistantStackFinishToPreviousApp ( ) throws java.lang.Exception { launchActivityOnDisplay ( android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY , android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId ) ; enableAssistant ( ) ; launchActivity ( android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK , android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF , "true" ) ; disableAssistant ( ) ; mAmWmState.waitForValidState ( mDevice , android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; mAmWmState.waitForActivityState ( mDevice , android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY , android.server.cts.ActivityManagerState.STATE_RESUMED ) ; mAmWmState.assertFocusedActivity ( "TestActivity should be resumed" , android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY ) ; mAmWmState.assertFrontStack ( "Fullscreen stack should be on top." , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; mAmWmState.assertFocusedStack ( "Fullscreen stack should be focused." , android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID ) ; }
public final void accept ( @ com.android.annotations.NonNull com.android.tools.perflib.heap.Visitor visitor ) { visitor.visitClassObj ( this ) ; for ( java.lang.Object value : getStaticFieldValues ( ) . values ( ) ) { if ( value instanceof com.android.tools.perflib.heap.Instance ) { if ( ! ( mReferencesAdded ) ) { ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) . addReference ( this ) ; } visitor.visitLater ( ( ( com.android.tools.perflib.heap.Instance ) ( value ) ) ) ; } } mReferencesAdded = true ; }
private static java.lang.reflect.Method getDumpHprofDataMethod ( ) { java.lang.ClassLoader myLoader = Main.class . getClassLoader ( ) ; java.lang.Class vmdClass ; try { vmdClass = myLoader.loadClass ( "dalvik.system.VMDebug" ) ; } catch ( java.lang.ClassNotFoundException cnfe ) { return null ; } java.lang.reflect.Method meth ; try { meth = vmdClass.getMethod ( "dumpHprofData" , new java.lang.Class [ ] { java.lang.String.class } ) ; } catch ( java.lang.NoSuchMethodException nsme ) { java.lang.System.err.println ( "Found VMDebug but not dumpHprofData method" ) ; return null ; } return meth ; }
boolean start ( ) { if ( ( ( ( mAdbOsLocation ) != null ) && ( ( com.android.ddmlib.AndroidDebugBridge.sAdbServerPort ) != null ) ) && ( ( ! ( mVersionCheck ) ) || ( ! ( startAdb ( ) ) ) ) ) { return false ; } mStarted = true ; mDeviceMonitor = new com.android.ddmlib.DeviceMonitor ( this ) ; mDeviceMonitor.start ( ) ; return true ; }
public void traverse ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JVisitor visitor ) { if ( visitor.visit ( this ) ) { if ( visitor.needLoading ( ) ) { loader.ensureFields ( this ) ; loader.ensureMethods ( this ) ; loader.ensureAnnotations ( this ) ; } visitor.accept ( fields ) ; visitor.accept ( methods ) ; annotations.traverse ( visitor ) ; } visitor.endVisit ( this ) ; }
private void readObject ( java.io.ObjectInputStream in ) throws java.io.IOException , java.lang.ClassNotFoundException { in.defaultReadObject ( ) ; if ( ( cType ) != ( android.icu.util.IslamicCalendar.CalculationType.ISLAMIC_CIVIL ) ) return ; if ( ! ( civil ) ) cType = android.icu.util.IslamicCalendar.CalculationType.ISLAMIC ; }
public void test_unblock_Exception ( ) throws java.lang.Exception { setup ( false ) ; try { key.unblock ( sourceAddress ) ; } catch ( java.lang.IllegalStateException expected ) { } key.drop ( ) ; try { key.unblock ( sourceAddress ) ; } catch ( java.lang.IllegalStateException expected ) { } }
public static int ioctlInt ( java.io.FileDescriptor fd , int cmd , android.util.MutableInt arg ) throws android.system.ErrnoException { android.util.MutableInt internalArg = new android.util.MutableInt ( arg.value ) ; try { return Libcore.os.ioctlInt ( fd , cmd , internalArg ) ; } finally { arg.value = internalArg.value ; } }
private static java.util.List < com.google.currysrc.api.process.Rule > createTransformRules ( ) throws java.io.IOException { com.google.currysrc.api.process.Rule [ ] repackageRules = com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.getRepackagingRules ( ) ; com.google.currysrc.api.process.Rule [ ] apiDocsRules = new com.google.currysrc.api.process.Rule [ ] { com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.processors.ReplaceTextCommentScanner ( com.android.icu4j.srcgen.Icu4jTransform.ORIGINAL_ICU_PACKAGE , com.android.icu4j.srcgen.Icu4jTransform.ANDROID_ICU_PACKAGE ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createHidePublicClassesRule ( ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createMakePublicForTesting ( ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createHideOriginalDeprecatedClassesRule ( ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createHideBlacklistedDeclarationsRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.android.icu4j.srcgen.HideDraftProvisionalInternal ( ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createFixupBidiClassDocRule ( ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.google.currysrc.processors.RemoveJavaDocTags ( "@stable" , "@draft" , "@provisional" , "@internal" , "@since" ) ) , com.android.icu4j.srcgen.Icu4jTransformRules.createOptionalRule ( new com.android.icu4j.srcgen.ReplaceIcuTags ( ) ) , com.android.icu4j.srcgen.Icu4jTransform.Icu4jRules.createTranslateJciteInclusionRule ( ) } ; java.util.List < com.google.currysrc.api.process.Rule > rulesList = com.google.common.collect.Lists.newArrayList ( repackageRules ) ; rulesList.addAll ( java.util.Arrays.asList ( apiDocsRules ) ) ; return rulesList ; }
private void addNavigationBar ( ) { if ( com.android.systemui.statusbar.phone.PhoneStatusBar.DEBUG ) android.util.Slog.v ( com.android.systemui.statusbar.phone.PhoneStatusBar.TAG , ( "addNavigationBar: about to add " + ( mNavigationBarView ) ) ) ; if ( ( mNavigationBarView ) == null ) return ; prepareNavigationBarView ( ) ; mWindowManager.addView ( mNavigationBarView , getNavigationBarLayoutParams ( ) ) ; }
private static java.lang.Class < java.lang.Void > lookupType ( ) { try { java.lang.reflect.Method method = java.lang.Runnable.class . getMethod ( "run" , EmptyArray.CLASS ) ; return ( ( java.lang.Class < java.lang.Void > ) ( method.getReturnType ( ) ) ) ; } catch ( java.lang.Exception e ) { throw new java.lang.AssertionError ( e ) ; } }
private void updateNodeProxies ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo vi , com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode parentKey ) { if ( vi == null ) { return ; } com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode key = vi.getUiViewNode ( ) ; if ( key != null ) { mCanvas.getNodeFactory ( ) . create ( vi ) ; } for ( com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo child : vi.getChildren ( ) ) { updateNodeProxies ( child , key ) ; } }
static android.net.Uri getContentFilterUri ( java.lang.String query , long directoryId ) { android.net.Uri baseUri = ( ( android.os.Build.VERSION.SDK_INT ) >= ( android.os.Build.VERSION_CODES.N ) ) ? com.android.dialer.searchfragment.directories.DirectoryContactsCursorLoader.ENTERPRISE_CONTENT_FILTER_URI : android.provider.ContactsContract.CommonDataKinds.Phone.CONTENT_FILTER_URI ; return baseUri.buildUpon ( ) . appendPath ( query ) . appendQueryParameter ( ContactsContract.DIRECTORY_PARAM_KEY , java.lang.String.valueOf ( directoryId ) ) . appendQueryParameter ( ContactsContract.REMOVE_DUPLICATE_ENTRIES , "true" ) . appendQueryParameter ( ContactsContract.LIMIT_PARAM_KEY , com.android.dialer.searchfragment.directories.DirectoryContactsCursorLoader.MAX_RESULTS ) . build ( ) ; }
private void updateConfigurationCountLabel ( ) { int numberOfConfigurations = configuration.countCombinations ( ) ; double coverage = ( computeCoverage ( configuration.countCombinationsCollapsingOrientation ( ) ) ) * 100.0 ; myConfigurationCountLabel.setText ( ( ( "<html>Tests will run on <b>" + numberOfConfigurations ) + " configurations</b>.</html>" ) ) ; if ( numberOfConfigurations < 1 ) { myConfigurationCountLabel.setForeground ( JBColor.RED ) ; } else { myConfigurationCountLabel.setForeground ( com.intellij.util.ui.UIUtil.getActiveTextColor ( ) ) ; } }
public boolean hasResourceItem ( @ com.android.annotations.NonNull java.lang.String url ) { assert url.startsWith ( "@" ) : url ; int typeEnd = url.indexOf ( '/' , 1 ) ; if ( typeEnd != ( - 1 ) ) { int nameBegin = typeEnd + 1 ; int typeBegin = ( url.startsWith ( "@+" ) ) ? 2 : 1 ; int colon = url.lastIndexOf ( ':' , typeEnd ) ; if ( colon != ( - 1 ) ) { typeBegin = colon + 1 ; } java.lang.String typeName = url.substring ( typeBegin , typeEnd ) ; com.android.resources.ResourceType type = com.android.resources.ResourceType.getEnum ( typeName ) ; if ( type != null ) { java.lang.String name = url.substring ( nameBegin ) ; return hasResourceItem ( type , name ) ; } } return false ; }
public static java.nio.MemoryBlock allocate ( int byteCount ) { dalvik.system.VMRuntime runtime = dalvik.system.VMRuntime.getRuntime ( ) ; byte [ ] array = ( ( byte [ ] ) ( runtime.newNonMovableArray ( byte . class , byteCount ) ) ) ; int address = ( ( int ) ( runtime.addressOf ( array ) ) ) ; return new java.nio.MemoryBlock.NonMovableHeapBlock ( array , address , byteCount ) ; }
public void testWildcardsRejectedForIpAddress ( ) { assertFalse ( verifyWithServerCertificate ( "1.2.3.4" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "cn=*.2.3.4" ) ) ) ; assertFalse ( verifyWithServerCertificate ( "1.2.3.4" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "cn=*.2.3.4" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_IPA_NAME , "*.2.3.4" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , "*.2.3.4" ) ) ) ; assertFalse ( verifyWithServerCertificate ( "2001:1234::1" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "cn=*:1234::1" ) ) ) ; assertFalse ( verifyWithServerCertificate ( "2001:1234::1" , new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate ( "cn=*:1234::1" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_IPA_NAME , "*:1234::1" ) . addSubjectAlternativeName ( libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME , "*:1234::1" ) ) ) ; }
protected boolean installPackage ( java.lang.String path ) { try { java.lang.String result = device.installPackage ( path , true ) ; if ( result != null ) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log ( java.util.logging.Level.SEVERE , ( "Got error installing package: " + result ) ) ; return false ; } return true ; } catch ( com.android.ddmlib.InstallException e ) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log ( java.util.logging.Level.SEVERE , ( "Error installing package: " + path ) , e ) ; return false ; } }
public java.util.Set < java.lang.String > getApplicableFilters ( @ com.android.annotations.NonNull java.util.Set < java.lang.String > allFilters ) { java.util.Set < java.lang.String > list = super . getApplicableFilters ( allFilters ) ; if ( ( isEnable ( ) ) && ( universalApk ) ) { list.add ( com.android.build.OutputFile.NO_FILTER ) ; } return list ; }
public void run ( ) { com.android.rs.test_v16.RenderScript pRS = com.android.rs.test_v16.RenderScript.create ( mCtx ) ; pRS.setMessageHandler ( mRsMessage ) ; com.android.rs.test_v16.ScriptC_refcount s = new com.android.rs.test_v16.ScriptC_refcount ( pRS , mRes , R.raw.refcount ) ; initializeGlobals ( pRS , s ) ; s.invoke_refcount_test ( ) ; pRS.finish ( ) ; waitForMessage ( ) ; pRS.destroy ( ) ; }
public int createOppOpsRecord ( java.lang.String serviceName , int rfcommChannel , int l2capPsm , int version , byte [ ] formatsList ) { if ( ( com.android.bluetooth.sdp.SdpManager.sNativeAvailable ) == false ) { throw new java.lang.RuntimeException ( ( ( com.android.bluetooth.sdp.SdpManager.TAG ) + " sNativeAvailable == false - native not initialized" ) ) ; } return sdpCreateOppOpsRecordNative ( serviceName , rfcommChannel , l2capPsm , version , formatsList ) ; }
static void getFloat ( java.lang.invoke.MethodHandle m , Main.ValueHolder v , float value , boolean expectFailure ) throws java.lang.Throwable { boolean exceptionThrown = false ; try { final float got = ( v == null ) ? ( ( float ) ( m.invokeExact ( ) ) ) : ( ( float ) ( m.invokeExact ( v ) ) ) ; Main.Tester.assertTrue ( ( got == value ) ) ; } catch ( java.lang.invoke.WrongMethodTypeException e ) { exceptionThrown = true ; } Main.Tester.assertActualAndExpectedMatch ( exceptionThrown , expectFailure ) ; }
public static com.android.jack.dx.rop.cst.CstNat createSignature ( @ javax.annotation.Nonnull com.android.jack.ir.ast.JFieldId field ) { java.lang.String fieldName = field.getName ( ) ; java.lang.String fieldSignature = com.android.jack.backend.dex.rop.RopHelper.formatter.getName ( field.getType ( ) ) ; com.android.jack.dx.rop.cst.CstString name = new com.android.jack.dx.rop.cst.CstString ( fieldName ) ; com.android.jack.dx.rop.cst.CstString descriptor = new com.android.jack.dx.rop.cst.CstString ( fieldSignature ) ; com.android.jack.dx.rop.cst.CstNat signature = new com.android.jack.dx.rop.cst.CstNat ( name , descriptor ) ; return signature ; }
private final synchronized void sendIntent ( boolean isUnplug ) { android.content.Intent intent = new android.content.Intent ( android.content.Intent.ACTION_HEADSET_PLUG ) ; intent.addFlags ( Intent.FLAG_RECEIVER_REGISTERED_ONLY ) ; intent.putExtra ( "state" , mHeadsetState ) ; intent.putExtra ( "name" , mHeadsetName ) ; android.app.ActivityManagerNative.broadcastStickyIntent ( intent , null ) ; if ( isUnplug ) { intent = new android.content.Intent ( android.media.AudioManager.ACTION_AUDIO_BECOMING_NOISY ) ; mContext.sendBroadcast ( intent ) ; } }
public java.nio.ByteBuffer putChar ( char x ) { if ( isReadOnly ) { throw new java.nio.ReadOnlyBufferException ( ) ; } if ( ! ( memoryRef.isAccessible ) ) { throw new java.lang.IllegalStateException ( "buffer is inaccessible" ) ; } putChar ( ix ( nextPutIndex ( SizeOf.CHAR ) ) , x ) ; return this ; }
public void run ( @ javax.annotation.Nonnull java.lang.String mainClass , @ javax.annotation.Nonnull java.lang.String expected ) throws java.lang.Exception { java.util.List < com.android.jack.test.runner.RuntimeRunner > runnerList = com.android.jack.test.toolchain.AbstractTestTools.listRuntimeTestRunners ( null ) ; for ( com.android.jack.test.runner.RuntimeRunner runner : runnerList ) { java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream ( ) ; ( ( com.android.jack.test.runner.AbstractRuntimeRunner ) ( runner ) ) . setOutputStream ( out ) ; junit.framework.Assert.assertEquals ( 0 , runner.run ( new java.lang.String [ 0 ] , mainClass , dexFile ) ) ; junit.framework.Assert.assertEquals ( expected , out.toString ( ) ) ; } }
private void loadUrlOnUiThread ( final org.chromium.content.browser.LoadUrlParams loadUrlParams ) { mFactory.startYourEngines ( true ) ; if ( checkNeedsPost ( ) ) { assert ( mAppTargetSdkVersion ) < ( Build.VERSION_CODES.JELLY_BEAN_MR2 ) ; mRunQueue.addTask ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { mAwContents.loadUrl ( loadUrlParams ) ; } } ) ; return ; } mAwContents.loadUrl ( loadUrlParams ) ; }
public void outcomeStarted ( java.lang.Class < ? extends vogar.target.Runner > runnerClass , java.lang.String outcomeName ) { com.google.gson.JsonObject jsonObject = new com.google.gson.JsonObject ( ) ; jsonObject.addProperty ( "outcome" , outcomeName ) ; if ( runnerClass != null ) { jsonObject.addProperty ( "runner" , runnerClass.getName ( ) ) ; } writer.print ( ( ( ( marker ) + ( gson.toJson ( jsonObject ) ) ) + "\n" ) ) ; }
public void run ( ) { try { synchronized ( mCancelWaiter ) { mCancelWaiter.wait ( mTimeout ) ; if ( mCanceled ) { return ; } } } catch ( java.lang.InterruptedException e ) { android.util.Log.w ( com.android.nfc.NfcService.TAG , "Watchdog thread interruped." ) ; interrupt ( ) ; } android.util.Log.e ( com.android.nfc.NfcService.TAG , "Watchdog triggered, aborting." ) ; mDeviceHost.doAbort ( ) ; }
public void test_write_I ( ) throws java.io.IOException { int length = compressToBytes ( testString ) ; java.util.zip.InflaterOutputStream ios = new java.util.zip.InflaterOutputStream ( os ) ; for ( int i = 0 ; i < length ; i ++ ) { ios.write ( compressedBytes [ i ] ) ; } java.lang.String result = new java.lang.String ( os.toByteArray ( ) ) ; assertEquals ( testString , result ) ; }
public void testOverlappingNANPANumber ( ) { assertTrue ( com.google.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.isEmergencyNumber ( "211" , RegionCode.BB ) ) ; assertEquals ( ShortNumberInfo.ShortNumberCost.TOLL_FREE , com.google.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.getExpectedCostForRegion ( parse ( "211" , RegionCode.BB ) , RegionCode.BB ) ) ; assertFalse ( com.google.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.isEmergencyNumber ( "211" , RegionCode.US ) ) ; assertEquals ( ShortNumberInfo.ShortNumberCost.UNKNOWN_COST , com.google.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.getExpectedCostForRegion ( parse ( "211" , RegionCode.US ) , RegionCode.US ) ) ; assertFalse ( com.google.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.isEmergencyNumber ( "211" , RegionCode.CA ) ) ; assertEquals ( ShortNumberInfo.ShortNumberCost.UNKNOWN_COST , com.google.i18n.phonenumbers.ShortNumberInfoTest.shortInfo.getExpectedCostForRegion ( parse ( "211" , RegionCode.CA ) , RegionCode.CA ) ) ; }
public void testSetSelection ( ) { mGridView = new android.widget.GridView ( mActivity ) ; mGridView.setSelection ( 0 ) ; assertEquals ( 0 , mGridView.getSelectedItemPosition ( ) ) ; mGridView.setSelection ( ( - 1 ) ) ; assertEquals ( ( - 1 ) , mGridView.getSelectedItemPosition ( ) ) ; mGridView.setSelection ( mGridView.getCount ( ) ) ; assertEquals ( mGridView.getCount ( ) , mGridView.getSelectedItemPosition ( ) ) ; }
public boolean matchesSafely ( java.util.Map < K , V > map ) { for ( java.util.Map.Entry < K , V > entry : map.entrySet ( ) ) { if ( ( keyMatcher.matches ( entry.getKey ( ) ) ) && ( valueMatcher.matches ( entry.getValue ( ) ) ) ) { return true ; } } return false ; }
public static org.eclipse.ui.IEditorPart getActiveEditor ( ) { org.eclipse.ui.IWorkbench workbench = org.eclipse.ui.PlatformUI.getWorkbench ( ) ; org.eclipse.ui.IWorkbenchWindow window = workbench.getActiveWorkbenchWindow ( ) ; if ( window == null ) { org.eclipse.ui.IWorkbenchWindow [ ] windows = workbench.getWorkbenchWindows ( ) ; if ( ( windows.length ) > 0 ) { window = windows [ 0 ] ; } } if ( window != null ) { org.eclipse.ui.IWorkbenchPage page = window.getActivePage ( ) ; if ( page != null ) { return page.getActiveEditor ( ) ; } } return null ; }
public void testHeadsetHangupCallNull ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mMockCallsManager.getForegroundCall ( ) ) . thenReturn ( null ) ; boolean callHungup = mBluetoothPhoneService.mBinder.hangupCall ( ) ; org.mockito.Mockito.verify ( mMockCallsManager , org.mockito.Mockito.never ( ) ) . disconnectCall ( org.mockito.Matchers.any ( com.android.server.telecom.Call.class ) ) ; assertEquals ( callHungup , false ) ; }
public static void writeUint24 ( int i , java.io.OutputStream output ) throws java.io.IOException { output.write ( ( i > > 16 ) ) ; output.write ( ( i > > 8 ) ) ; output.write ( i ) ; }
public void report ( @ com.android.annotations.NonNull com.android.tools.lint.detector.api.Issue issue , @ com.android.annotations.Nullable org.w3c.dom.Node scope , @ com.android.annotations.Nullable com.android.tools.lint.detector.api.Location location , @ com.android.annotations.NonNull java.lang.String message , @ com.android.annotations.Nullable java.lang.Object data ) { if ( ( scope != null ) && ( mDriver.isSuppressed ( issue , scope ) ) ) { return ; } super . report ( issue , location , message , data ) ; }
public static int frequency ( java.lang.Iterable < ? > iterable , @ javax.annotation.Nullable java.lang.Object element ) { if ( iterable instanceof com.google.common.collect.Multiset ) { return ( ( com.google.common.collect.Multiset < ? > ) ( iterable ) ) . count ( element ) ; } if ( iterable instanceof java.util.Set ) { return ( ( java.util.Set < ? > ) ( iterable ) ) . contains ( element ) ? 1 : 0 ; } return com.google.common.collect.Iterators.frequency ( iterable.iterator ( ) , element ) ; }
public void testAttachLayoutAnimationParameters ( ) { android.widget.cts.GridViewTest.MockGridView mockGridView = new android.widget.cts.GridViewTest.MockGridView ( mActivity ) ; android.view.ViewGroup.LayoutParams p = new android.view.ViewGroup.LayoutParams ( 320 , 480 ) ; mockGridView.attachLayoutAnimationParameters ( null , p , 1 , 2 ) ; android.view.animation.GridLayoutAnimationController.AnimationParameters animationParams = ( ( android.view.animation.GridLayoutAnimationController.AnimationParameters ) ( p.layoutAnimationParameters ) ) ; org.junit.Assert.assertEquals ( 1 , animationParams.index ) ; org.junit.Assert.assertEquals ( 2 , animationParams.count ) ; }
public void testMergeBlob ( ) throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger ( ) ; java.io.File folder = com.google.common.io.Files.createTempDir ( ) ; merger.writeBlobTo ( folder , new com.android.ide.common.res2.MergedResourceWriter ( com.google.common.io.Files.createTempDir ( ) , null ) ) ; com.android.ide.common.res2.ResourceMerger loadedMerger = new com.android.ide.common.res2.ResourceMerger ( ) ; loadedMerger.loadFromBlob ( folder , true ) ; compareResourceMaps ( merger , loadedMerger , true ) ; }
public void testDisconnectBeforeConnect ( ) throws java.io.IOException { server.enqueue ( new com.google.mockwebserver.MockResponse ( ) . setBody ( "A" ) ) ; server.play ( ) ; java.net.HttpURLConnection connection = ( ( java.net.HttpURLConnection ) ( server.getUrl ( "/" ) . openConnection ( ) ) ) ; connection.disconnect ( ) ; assertContent ( "A" , connection ) ; assertEquals ( 200 , connection.getResponseCode ( ) ) ; }
public void testRegistrationConfigParcel ( ) { android.telephony.ims.stub.ImsFeatureConfiguration testConfig = new android.telephony.ims.stub.ImsFeatureConfiguration.Builder ( ) . addFeature ( ImsFeature.FEATURE_MMTEL ) . addFeature ( ImsFeature.FEATURE_RCS ) . build ( ) ; android.os.Parcel p = android.os.Parcel.obtain ( ) ; testConfig.writeToParcel ( p , 0 ) ; p.setDataPosition ( 0 ) ; android.telephony.ims.stub.ImsFeatureConfiguration result = ImsFeatureConfiguration.CREATOR.createFromParcel ( p ) ; p.recycle ( ) ; junit.framework.Assert.assertEquals ( testConfig , result ) ; }
private void checkPreparationPhasesForPackage ( java.lang.String expectedPackage , int numPreparation ) { org.mockito.Mockito.verify ( mTestSystemImpl , org.mockito.Mockito.times ( numPreparation ) ) . onWebViewProviderChanged ( org.mockito.Mockito.argThat ( new com.android.server.webkit.WebViewUpdateServiceTest.IsPackageInfoWithName ( expectedPackage ) ) ) ; mWebViewUpdateServiceImpl.notifyRelroCreationCompleted ( ) ; android.webkit.WebViewProviderResponse response = mWebViewUpdateServiceImpl.waitForAndGetProvider ( ) ; assertEquals ( WebViewFactory.LIBLOAD_SUCCESS , response.status ) ; assertEquals ( expectedPackage , response.packageInfo.packageName ) ; }
public void testBasics ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( CHECKSUMS.README_TXT , com.intellij.updater.Digester.digestRegularFile ( new java.io.File ( getDataDir ( ) , "Readme.txt" ) ) ) ; org.junit.Assert.assertEquals ( CHECKSUMS.FOCUSKILLER_DLL , com.intellij.updater.Digester.digestRegularFile ( new java.io.File ( getDataDir ( ) , "/bin/focuskiller.dll" ) ) ) ; org.junit.Assert.assertEquals ( CHECKSUMS.BOOTSTRAP_JAR , com.intellij.updater.Digester.digestZipFile ( new java.io.File ( getDataDir ( ) , "/lib/bootstrap.jar" ) ) ) ; org.junit.Assert.assertEquals ( CHECKSUMS.BOOTSTRAP_JAR_BINARY , com.intellij.updater.Digester.digestRegularFile ( new java.io.File ( getDataDir ( ) , "/lib/bootstrap.jar" ) ) ) ; }
private boolean isPlayingState ( @ android.annotation.Nullable android.media.session.PlaybackState state ) { if ( state == null ) return false ; return ( ( state != null ) && ( ( state.getState ( ) ) == ( android.media.session.PlaybackState.STATE_PLAYING ) ) ) || ( ( state.getState ( ) ) == ( android.media.session.PlaybackState.STATE_BUFFERING ) ) ; }
public static libcore.javax.net.ssl.TestSSLContext create ( libcore.java.security.TestKeyStore client , libcore.java.security.TestKeyStore server ) { java.lang.String protocol = "TLS" ; javax.net.ssl.SSLContext clientContext = libcore.javax.net.ssl.TestSSLContext.createSSLContext ( protocol , client.keyManagers , client.trustManagers ) ; javax.net.ssl.SSLContext serverContext = libcore.javax.net.ssl.TestSSLContext.createSSLContext ( protocol , server.keyManagers , server.trustManagers ) ; return libcore.javax.net.ssl.TestSSLContext.create ( client.keyStore , client.storePassword , server.keyStore , server.storePassword , client.keyManagers [ 0 ] , server.keyManagers [ 0 ] , client.trustManagers [ 0 ] , server.trustManagers [ 0 ] , clientContext , serverContext ) ; }
